(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a AccordionBootstrap wrapper Component.
 */

class AccordionBootstrap extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = '';

    if (this.props.className !== 'wp-block-inclind-blocks-accordion-bootstrap') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = AccordionBootstrap;

},{}],2:[function(require,module,exports){
"use strict";

var _accordionBootstrap = _interopRequireDefault(require("./components/accordion-bootstrap"));

var _times = _interopRequireDefault(require("lodash/times"));

var _classnames = _interopRequireDefault(require("classnames"));

var _memize = _interopRequireDefault(require("memize"));

var _map = _interopRequireDefault(require("lodash/map"));

var _reactFonticonpicker = _interopRequireDefault(require("@fonticonpicker/react-fonticonpicker"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// import WebfontLoader from '../../fontloader';
// import TypographyControls from '../../typography-control';
// import MeasurementControls from '../../measurement-control';
// import BorderColorControls from '../../border-color-control';
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component,
  Fragment
} = wp.element; // Register block

const {
  registerBlockType,
  createBlock
} = wp.blocks; // Register editor components

const {
  InnerBlocks,
  InspectorControls,
  BlockControls,
  AlignmentToolbar,
  ColorPalette,
  BlockAlignmentToolbar
} = wp.blockEditor; // Register components

const {
  TabPanel,
  Button,
  ButtonGroup,
  PanelBody,
  Dashicon,
  RangeControl,
  ToggleControl,
  SelectControl,
  IconButton
} = wp.components;
const {
  dispatch,
  select
} = wp.data;
/**
 * This allows for checking to see if the block needs to generate a new ID.
 */

const ktaccordUniqueIDs = [];
const ALLOWED_BLOCKS = ['inclind-blocks/inclind-pane'];
/**
 * Returns the layouts configuration for a given number of panes.
 *
 * @param {number} panes Number of panes.
 *
 * @return {Object[]} Panes layout configuration.
 */

const getPanesTemplate = (0, _memize.default)((panes, collapse, parent) => {
  return (0, _times.default)(panes, n => ['inclind-blocks/inclind-pane', {
    id: n + 1,
    parentID: parent,
    startCollapsed: collapse
  }]);
});

class InclindAccordionBootstrap extends Component {
  constructor() {
    super(...arguments);
    this.showSettings = this.showSettings.bind(this);
    this.state = {
      contentPaddingControl: 'linked',
      contentBorderRadiusControl: 'linked',
      contentBorderControl: 'linked',
      titleBorderControl: 'linked',
      titlePaddingControl: 'individual',
      titleBorderRadiusControl: 'linked',
      titleBorderColorControl: 'linked',
      titleBorderHoverColorControl: 'linked',
      titleBorderActiveColorControl: 'linked',
      titleTag: 'div',
      showPreset: false,
      user: 'admin',
      settings: {}
    };
  }

  componentDidMount() {
    if (!this.props.attributes.uniqueID) {
      if (this.props.attributes.showPresets) {
        this.setState({
          showPreset: true
        });
      }

      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktaccordUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else if (ktaccordUniqueIDs.includes(this.props.attributes.uniqueID)) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktaccordUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else {
      ktaccordUniqueIDs.push(this.props.attributes.uniqueID);
    }

    if (this.props.attributes.titleStyles[0].padding[0] === this.props.attributes.titleStyles[0].padding[1] && this.props.attributes.titleStyles[0].padding[0] === this.props.attributes.titleStyles[0].padding[2] && this.props.attributes.titleStyles[0].padding[0] === this.props.attributes.titleStyles[0].padding[3]) {
      this.setState({
        titlePaddingControl: 'linked'
      });
    } else {
      this.setState({
        titlePaddingControl: 'individual'
      });
    }

    if (this.props.attributes.titleStyles[0].borderWidth[0] === this.props.attributes.titleStyles[0].borderWidth[1] && this.props.attributes.titleStyles[0].borderWidth[0] === this.props.attributes.titleStyles[0].borderWidth[2] && this.props.attributes.titleStyles[0].borderWidth[0] === this.props.attributes.titleStyles[0].borderWidth[3]) {
      this.setState({
        titleBorderControl: 'linked'
      });
    } else {
      this.setState({
        titleBorderControl: 'individual'
      });
    }

    if (this.props.attributes.titleStyles[0].borderRadius[0] === this.props.attributes.titleStyles[0].borderRadius[1] && this.props.attributes.titleStyles[0].borderRadius[0] === this.props.attributes.titleStyles[0].borderRadius[2] && this.props.attributes.titleStyles[0].borderRadius[0] === this.props.attributes.titleStyles[0].borderRadius[3]) {
      this.setState({
        titleBorderRadiusControl: 'linked'
      });
    } else {
      this.setState({
        titleBorderRadiusControl: 'individual'
      });
    }

    if (this.props.attributes.contentBorder[0] === this.props.attributes.contentBorder[1] && this.props.attributes.contentBorder[0] === this.props.attributes.contentBorder[2] && this.props.attributes.contentBorder[0] === this.props.attributes.contentBorder[3]) {
      this.setState({
        contentBorderControl: 'linked'
      });
    } else {
      this.setState({
        contentBorderControl: 'individual'
      });
    }

    if (this.props.attributes.contentBorderRadius[0] === this.props.attributes.contentBorderRadius[1] && this.props.attributes.contentBorderRadius[0] === this.props.attributes.contentBorderRadius[2] && this.props.attributes.contentBorderRadius[0] === this.props.attributes.contentBorderRadius[3]) {
      this.setState({
        contentBorderRadiusControl: 'linked'
      });
    } else {
      this.setState({
        contentBorderRadiusControl: 'individual'
      });
    }

    if (this.props.attributes.contentPadding[0] === this.props.attributes.contentPadding[1] && this.props.attributes.contentPadding[0] === this.props.attributes.contentPadding[2] && this.props.attributes.contentPadding[0] === this.props.attributes.contentPadding[3]) {
      this.setState({
        contentPaddingControl: 'linked'
      });
    } else {
      this.setState({
        contentPaddingControl: 'individual'
      });
    }

    if (this.props.attributes.titleStyles[0].border[0] === this.props.attributes.titleStyles[0].border[1] && this.props.attributes.titleStyles[0].border[0] === this.props.attributes.titleStyles[0].border[2] && this.props.attributes.titleStyles[0].border[0] === this.props.attributes.titleStyles[0].border[3]) {
      this.setState({
        titleBorderColorControl: 'linked'
      });
    } else {
      this.setState({
        titleBorderColorControl: 'individual'
      });
    }

    if (this.props.attributes.titleStyles[0].borderHover[0] === this.props.attributes.titleStyles[0].borderHover[1] && this.props.attributes.titleStyles[0].borderHover[0] === this.props.attributes.titleStyles[0].borderHover[2] && this.props.attributes.titleStyles[0].borderHover[0] === this.props.attributes.titleStyles[0].borderHover[3]) {
      this.setState({
        titleBorderHoverColorControl: 'linked'
      });
    } else {
      this.setState({
        titleBorderHoverColorControl: 'individual'
      });
    }

    if (this.props.attributes.titleStyles[0].borderActive[0] === this.props.attributes.titleStyles[0].borderActive[1] && this.props.attributes.titleStyles[0].borderActive[0] === this.props.attributes.titleStyles[0].borderActive[2] && this.props.attributes.titleStyles[0].borderActive[0] === this.props.attributes.titleStyles[0].borderActive[3]) {
      this.setState({
        titleBorderActiveColorControl: 'linked'
      });
    } else {
      this.setState({
        titleBorderActiveColorControl: 'individual'
      });
    }

    const accordionBlock = wp.data.select('core/block-editor').getBlocksByClientId(this.props.clientId);

    if (accordionBlock && accordionBlock[0] && accordionBlock[0].innerBlocks[0] && accordionBlock[0].innerBlocks[0].attributes && accordionBlock[0].innerBlocks[0].attributes.titleTag) {
      this.setState({
        titleTag: accordionBlock[0].innerBlocks[0].attributes.titleTag
      });
    }

    const blockSettings = {};

    if (blockSettings['inclind-blocks/accordion-bootstrap'] !== undefined && typeof blockSettings['inclind-blocks/accordion-bootstrap'] === 'object') {
      this.setState({
        settings: blockSettings['inclind-blocks/accordion-bootstrap']
      });
    }
  }

  showSettings(key) {
    let donot_allow = ['backgroundSettings'];

    if (donot_allow.includes(key)) {
      return false;
    }

    return true;
  }

  render() {
    const {
      attributes: {
        uniqueID,
        paneCount,
        blockAlignment,
        openPane,
        titleStyles,
        contentPadding,
        minHeight,
        maxWidth,
        contentBorder,
        contentBorderColor,
        contentBorderRadius,
        contentBgColor,
        titleAlignment,
        startCollapsed,
        linkPaneCollapse,
        showIcon,
        iconStyle,
        iconSide
      },
      className,
      setAttributes,
      clientId
    } = this.props;
    const {
      titleBorderRadiusControl,
      titleBorderControl,
      titlePaddingControl,
      contentBorderControl,
      contentBorderRadiusControl,
      contentPaddingControl,
      titleBorderColorControl,
      titleBorderHoverColorControl,
      titleBorderActiveColorControl,
      titleTag
    } = this.state;
    const accordionBlock = wp.data.select('core/block-editor').getBlocksByClientId(clientId);
    const realPaneCount = accordionBlock && accordionBlock[0] ? accordionBlock[0].innerBlocks.length : 0;

    const saveTitleStyles = value => {
      const newUpdate = titleStyles.map((item, index) => {
        if (0 === index) {
          item = { ...item,
            ...value
          };
        }

        return item;
      });
      setAttributes({
        titleStyles: newUpdate
      });
    };

    const lgconfig = {
      google: {
        families: [titleStyles[0].family + (titleStyles[0].variant ? ':' + titleStyles[0].variant : '')]
      }
    };
    const config = titleStyles[0].google ? lgconfig : '';
    const classes = (0, _classnames.default)(className, `kt-accordion-wrap kt-accordion-id${uniqueID} kt-accordion-has-${paneCount}-panes kt-accordion-block kt-pane-header-alignment-${titleAlignment}`);
    const normalSettings = React.createElement(Fragment, null, React.createElement("p", {
      className: "kt-setting-label"
    }, __('Title Color')), React.createElement(ColorPalette, {
      value: titleStyles[0].color,
      onChange: value => saveTitleStyles({
        color: value
      })
    }), React.createElement("p", {
      className: "kt-setting-label"
    }, __('Title Background')), React.createElement(ColorPalette, {
      value: titleStyles[0].background,
      onChange: value => saveTitleStyles({
        background: value
      })
    }));
    const hoverSettings = React.createElement(Fragment, null, React.createElement("p", {
      className: "kt-setting-label"
    }, __('Hover Color')), React.createElement(ColorPalette, {
      value: titleStyles[0].colorHover,
      onChange: value => saveTitleStyles({
        colorHover: value
      })
    }), React.createElement("p", {
      className: "kt-setting-label"
    }, __('Hover Background')), React.createElement(ColorPalette, {
      value: titleStyles[0].backgroundHover,
      onChange: value => saveTitleStyles({
        backgroundHover: value
      })
    }));
    const activeSettings = React.createElement(Fragment, null, React.createElement("p", {
      className: "kt-setting-label"
    }, __('Active Color')), React.createElement(ColorPalette, {
      value: titleStyles[0].colorActive,
      onChange: value => saveTitleStyles({
        colorActive: value
      })
    }), React.createElement("p", {
      className: "kt-setting-label"
    }, __('Active Background')), React.createElement(ColorPalette, {
      value: titleStyles[0].backgroundActive,
      onChange: value => saveTitleStyles({
        backgroundActive: value
      })
    }));
    const accordionIconSet = [];
    accordionIconSet.basic = React.createElement(Fragment, null, React.createElement("rect", {
      x: "77.002",
      y: "12.507",
      width: "13.982",
      height: "74.986",
      fill: "#444"
    }), React.createElement("path", {
      d: "M359.538,56.991l0,-13.982l-74.986,0l0,13.982l74.986,0Z",
      fill: "#444"
    }), React.createElement("path", {
      d: "M121.486,56.991l0,-13.982l-74.986,0l0,13.982l74.986,0Z",
      fill: "#444"
    }), React.createElement("path", {
      d: "M359.538,56.991l0,-13.982l-74.986,0l0,13.982l74.986,0Z",
      fill: "#444"
    }));
    accordionIconSet.basiccircle = React.createElement(Fragment, null, React.createElement("circle", {
      cx: "83.723",
      cy: "50",
      r: "50",
      fill: "#444"
    }), React.createElement("circle", {
      cx: "322.768",
      cy: "50",
      r: "50",
      fill: "#444"
    }), React.createElement("rect", {
      x: "77.002",
      y: "12.507",
      width: "13.982",
      height: "74.986",
      fill: "#fff"
    }), React.createElement("path", {
      d: "M359.538,56.991l0,-13.982l-74.986,0l0,13.982l74.986,0Z",
      fill: "#fff"
    }), React.createElement("path", {
      d: "M121.486,56.991l0,-13.982l-74.986,0l0,13.982l74.986,0Z",
      fill: "#fff"
    }), React.createElement("path", {
      d: "M359.538,56.991l0,-13.982l-74.986,0l0,13.982l74.986,0Z",
      fill: "#fff"
    }));
    accordionIconSet.xclose = React.createElement(Fragment, null, React.createElement("rect", {
      x: "77.002",
      y: "12.507",
      width: "13.982",
      height: "74.986",
      fill: "#444"
    }), React.createElement("path", {
      d: "M353.5,28.432l-9.887,-9.887l-53.023,53.023l9.887,9.887l53.023,-53.023Z",
      fill: "#444"
    }), React.createElement("path", {
      d: "M121.486,56.991l0,-13.982l-74.986,0l0,13.982l74.986,0Z",
      fill: "#444"
    }), React.createElement("path", {
      d: "M343.613,81.455l9.887,-9.887l-53.023,-53.023l-9.887,9.887l53.023,53.023Z",
      fill: "#444"
    }));
    accordionIconSet.xclosecircle = React.createElement(Fragment, null, React.createElement("circle", {
      cx: "83.723",
      cy: "50",
      r: "50",
      fill: "#444"
    }), React.createElement("circle", {
      cx: "322.768",
      cy: "50",
      r: "50",
      fill: "#444"
    }), React.createElement("rect", {
      x: "77.002",
      y: "12.507",
      width: "13.982",
      height: "74.986",
      fill: "#fff"
    }), React.createElement("path", {
      d: "M343.613,81.455l9.887,-9.887l-53.023,-53.023l-9.887,9.887l53.023,53.023Z",
      fill: "#fff"
    }), React.createElement("path", {
      d: "M121.486,56.991l0,-13.982l-74.986,0l0,13.982l74.986,0Z",
      fill: "#fff"
    }), React.createElement("path", {
      d: "M290.59,71.568l9.887,9.887l53.023,-53.023l-9.887,-9.887l-53.023,53.023Z",
      fill: "#fff"
    }));
    accordionIconSet.arrow = React.createElement(Fragment, null, React.createElement("g", {
      fill: "#444"
    }, React.createElement("path", {
      d: "M122.2,37.371l-9.887,-9.886l-38.887,38.887l9.887,9.887l38.887,-38.888Z"
    }), React.createElement("path", {
      d: "M83.18,76.515l9.887,-9.886l-38.92,-38.921l-9.887,9.887l38.92,38.92Z"
    })), React.createElement("g", {
      fill: "#444"
    }, React.createElement("path", {
      d: "M283.65,63.629l9.887,9.886l38.887,-38.887l-9.887,-9.887l-38.887,38.888Z"
    }), React.createElement("path", {
      d: "M322.67,24.485l-9.887,9.886l38.92,38.921l9.887,-9.887l-38.92,-38.92Z"
    })));
    accordionIconSet.arrowcircle = React.createElement(Fragment, null, React.createElement("circle", {
      cx: "83.723",
      cy: "50",
      r: "50",
      fill: "#444"
    }), React.createElement("circle", {
      cx: "322.768",
      cy: "50",
      r: "50",
      fill: "#444"
    }), React.createElement("g", {
      fill: "#fff"
    }, React.createElement("path", {
      d: "M122.2,37.371l-9.887,-9.886l-38.887,38.887l9.887,9.887l38.887,-38.888Z"
    }), React.createElement("path", {
      d: "M83.18,76.515l9.887,-9.886l-38.92,-38.921l-9.887,9.887l38.92,38.92Z"
    })), React.createElement("g", {
      fill: "#fff"
    }, React.createElement("path", {
      d: "M283.65,63.629l9.887,9.886l38.887,-38.887l-9.887,-9.887l-38.887,38.888Z"
    }), React.createElement("path", {
      d: "M322.67,24.485l-9.887,9.886l38.92,38.921l9.887,-9.887l-38.92,-38.92Z"
    })));

    const renderIconSet = svg => React.createElement("svg", {
      className: "accord-icon",
      viewBox: "0 0 400 100",
      xmlns: "http://www.w3.org/2000/svg",
      preserveAspectRatio: "none",
      fillRule: "evenodd",
      clipRule: "evenodd",
      strokeLinejoin: "round",
      strokeMiterlimit: "1.414",
      style: {
        fill: '#000000'
      }
    }, accordionIconSet[svg]);

    const renderCSS = React.createElement("style", null, `
				.kt-accordion-${uniqueID} .kt-blocks-accordion-header {
					color: ${titleStyles[0].color};
					border-color: ${titleStyles[0].border[0]} ${titleStyles[0].border[1]} ${titleStyles[0].border[2]} ${titleStyles[0].border[3]};
					background-color: ${titleStyles[0].background};
					padding:${titleStyles[0].padding[0]}px ${titleStyles[0].padding[1]}px ${titleStyles[0].padding[2]}px ${titleStyles[0].padding[3]}px;
					margin-top:${titleStyles[0].marginTop > 32 ? titleStyles[0].marginTop : 0}px;
					border-width:${titleStyles[0].borderWidth[0]}px ${titleStyles[0].borderWidth[1]}px ${titleStyles[0].borderWidth[2]}px ${titleStyles[0].borderWidth[3]}px;
					border-radius:${titleStyles[0].borderRadius[0]}px ${titleStyles[0].borderRadius[1]}px ${titleStyles[0].borderRadius[2]}px ${titleStyles[0].borderRadius[3]}px;
					font-size:${titleStyles[0].size[0]}${titleStyles[0].sizeType};
					line-height:${titleStyles[0].lineHeight[0]}${titleStyles[0].lineType};
					letter-spacing:${titleStyles[0].letterSpacing}px;
					text-transform:${titleStyles[0].textTransform};
					font-family:${titleStyles[0].family};
					font-style:${titleStyles[0].style};
					font-weight:${titleStyles[0].weight};
				}
				.kt-accordion-${uniqueID} .kt-blocks-accordion-header .kt-blocks-accordion-title {
					line-height:${titleStyles[0].lineHeight[0]}${titleStyles[0].lineType};
				}
				.kt-accordion-${uniqueID} .kt-blocks-accordion-header .kt-btn-svg-icon svg {
					width:${titleStyles[0].size[0]}${titleStyles[0].sizeType};
					height:${titleStyles[0].size[0]}${titleStyles[0].sizeType};
				}
				.kt-accordion-${uniqueID} .kt-accordion-panel-inner {
					padding:${contentPadding[0]}px ${contentPadding[1]}px ${contentPadding[2]}px ${contentPadding[3]}px;
					background-color: ${contentBgColor};
					border-color: ${contentBorderColor};
					border-width:${contentBorder[0]}px ${contentBorder[1]}px ${contentBorder[2]}px ${contentBorder[3]}px;
					border-radius:${contentBorderRadius[0]}px ${contentBorderRadius[1]}px ${contentBorderRadius[2]}px ${contentBorderRadius[3]}px;
					min-height:${minHeight ? minHeight + 'px' : '0'};
				}
				.kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basiccircle ):not( .kt-accodion-icon-style-xclosecircle ):not( .kt-accodion-icon-style-arrowcircle ) .kt-blocks-accordion-header .kt-blocks-accordion-icon-trigger:before, .kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basiccircle ):not( .kt-accodion-icon-style-xclosecircle ):not( .kt-accodion-icon-style-arrowcircle ) .kt-blocks-accordion-header .kt-blocks-accordion-icon-trigger:after {
					background-color: ${titleStyles[0].color};
				}
				.kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-blocks-accordion-header .kt-blocks-accordion-icon-trigger:before, .kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-blocks-accordion-header .kt-blocks-accordion-icon-trigger:after {
					background-color: ${titleStyles[0].background};
				}
				.kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-blocks-accordion-header .kt-blocks-accordion-icon-trigger {
					background-color: ${titleStyles[0].color};
				}
				.kt-accordion-${uniqueID} .kt-blocks-accordion-header:hover {
					color: ${titleStyles[0].colorHover};
					border-color: ${titleStyles[0].borderHover[0]} ${titleStyles[0].borderHover[1]} ${titleStyles[0].borderHover[2]} ${titleStyles[0].borderHover[3]};
					background-color: ${titleStyles[0].backgroundHover};
				}
				.kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basiccircle ):not( .kt-accodion-icon-style-xclosecircle ):not( .kt-accodion-icon-style-arrowcircle ) .kt-blocks-accordion-header:hover .kt-blocks-accordion-icon-trigger:before, .kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basiccircle ):not( .kt-accodion-icon-style-xclosecircle ):not( .kt-accodion-icon-style-arrowcircle ) .kt-blocks-accordion-header:hover .kt-blocks-accordion-icon-trigger:after {
					background-color: ${titleStyles[0].colorHover};
				}
				.kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-blocks-accordion-header:hover .kt-blocks-accordion-icon-trigger:before, .kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-blocks-accordion-header:hover .kt-blocks-accordion-icon-trigger:after {
					background-color: ${titleStyles[0].backgroundHover};
				}
				.kt-accordion-${uniqueID}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-blocks-accordion-header:hover .kt-blocks-accordion-icon-trigger {
					background-color: ${titleStyles[0].colorHover};
                                }
				.kt-accordion-${uniqueID}.kt-start-active-pane-${openPane + 1} .kt-accordion-pane-${openPane + 1} .kt-blocks-accordion-header {
					color: ${titleStyles[0].colorActive};
					border-color: ${titleStyles[0].borderActive[0]} ${titleStyles[0].borderActive[1]} ${titleStyles[0].borderActive[2]} ${titleStyles[0].borderActive[3]};
					background-color: ${titleStyles[0].backgroundActive};
				}
				.kt-accordion-${uniqueID}.kt-start-active-pane-${openPane + 1}:not( .kt-accodion-icon-style-basiccircle ):not( .kt-accodion-icon-style-xclosecircle ):not( .kt-accodion-icon-style-arrowcircle ) .kt-accordion-pane-${openPane + 1} .kt-blocks-accordion-icon-trigger:before, .kt-accordion-${uniqueID}.kt-start-active-pane-${openPane + 1}:not( .kt-accodion-icon-style-basiccircle ):not( .kt-accodion-icon-style-xclosecircle ):not( .kt-accodion-icon-style-arrowcircle ) .kt-accordion-pane-${openPane + 1} .kt-blocks-accordion-icon-trigger:after {
					background-color: ${titleStyles[0].colorActive};
				}
				.kt-accordion-${uniqueID}.kt-start-active-pane-${openPane + 1}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-accordion-pane-${openPane + 1} .kt-blocks-accordion-icon-trigger:before, .kt-accordion-${uniqueID}.kt-start-active-pane-${openPane + 1}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-accordion-pane-${openPane + 1} .kt-blocks-accordion-icon-trigger:after {
					background-color: ${titleStyles[0].backgroundActive};
				}
				.kt-accordion-${uniqueID}.kt-start-active-pane-${openPane + 1}:not( .kt-accodion-icon-style-basic ):not( .kt-accodion-icon-style-xclose ):not( .kt-accodion-icon-style-arrow ) .kt-accordion-pane-${openPane + 1} .kt-blocks-accordion-icon-trigger {
					background-color: ${titleStyles[0].colorActive};
				}
				`); // Unique HTML ID for accordion:

    var startCollapseVar = this.props.startCollapsed;
    const acc_unique_id = `${uniqueID}`.length ? `accord${uniqueID}` : `accord_${this.props.clientId.substr(2, 9)}`;

    const onStartCollapsedChange = collapse => {
      startCollapseVar = collapse;
      setAttributes({
        startCollapsed: collapse
      });
    };

    return React.createElement(Fragment, null, renderCSS, React.createElement(BlockControls, null, React.createElement(BlockAlignmentToolbar, {
      value: blockAlignment,
      controls: ['center', 'wide', 'full'],
      onChange: value => setAttributes({
        blockAlignment: value
      })
    }), React.createElement(AlignmentToolbar, {
      value: titleAlignment,
      onChange: nextAlign => {
        setAttributes({
          titleAlignment: nextAlign
        });
      }
    })), this.showSettings('allSettings') && React.createElement(InspectorControls, null, this.showSettings('titleTag') && React.createElement(PanelBody, {
      title: __('Title Tag Settings', 'inclind-blocks'),
      initialOpen: false
    }, React.createElement(SelectControl, {
      label: __('Title Tag', 'inclind-blocks'),
      value: titleTag,
      options: [{
        value: 'div',
        label: __('div')
      }, {
        value: 'h2',
        label: __('h2')
      }, {
        value: 'h3',
        label: __('h3')
      }, {
        value: 'h4',
        label: __('h4')
      }, {
        value: 'h5',
        label: __('h5')
      }, {
        value: 'h6',
        label: __('h6')
      }],
      onChange: value => {
        (0, _times.default)(realPaneCount, n => {
          wp.data.dispatch('core/block-editor').updateBlockAttributes(accordionBlock[0].innerBlocks[n].clientId, {
            titleTag: value
          });
        });
        this.setState({
          titleTag: value
        });
      }
    }))), React.createElement("div", {
      className: classes
    }, !this.state.showPreset && React.createElement(Fragment, null, React.createElement("div", {
      className: "kt-accordion-selecter"
    }, __('Accordion', 'inclind-blocks')), React.createElement("div", {
      className: "kt-accordion-wrap",
      style: {
        maxWidth: maxWidth + 'px'
      }
    }, React.createElement("div", {
      id: `kt-accordion-${uniqueID}`,
      className: `kt-accordion-inner-wrap kt-accordion-${uniqueID} kt-start-active-pane-${openPane + 1} kt-accodion-icon-style-${iconStyle && showIcon ? iconStyle : 'none'} kt-accodion-icon-side-${iconSide ? iconSide : 'right'}`
    }, React.createElement(InnerBlocks, {
      template: getPanesTemplate(0 === realPaneCount ? paneCount : realPaneCount, startCollapseVar, acc_unique_id),
      templateLock: false,
      allowedBlocks: ALLOWED_BLOCKS
    }))), React.createElement("div", {
      className: "kt-accordion-add-selecter"
    }, React.createElement(Button, {
      className: "kt-accordion-add",
      isPrimary: true,
      onClick: () => {
        let newBlock = createBlock('inclind-blocks/inclind-pane', {
          id: paneCount + 1,
          titleTag: titleTag,
          parentID: acc_unique_id,
          startCollapsed: startCollapseVar
        });
        wp.data.dispatch('core/block-editor').insertBlock(newBlock, realPaneCount, clientId);
        setAttributes({
          paneCount: paneCount + 1
        });
      }
    }, React.createElement(Dashicon, {
      icon: "plus"
    }), __('Add Accordion Item', 'inclind-blocks')), realPaneCount > 1 && React.createElement(IconButton, {
      className: "kt-accordion-remove",
      label: __('Remove Accordion Item', 'inclind-blocks'),
      icon: "minus",
      onClick: () => {
        const removeClientId = accordionBlock[0].innerBlocks[realPaneCount - 1].clientId;
        wp.data.dispatch('core/block-editor').removeBlocks(removeClientId);
      }
    })))));
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/accordion-bootstrap') && blocks[category.slug + '/accordion-bootstrap']) {
    // Register the block.
    registerBlockType(category.slug + '/accordion-bootstrap', {
      title: __('Accordion (Bootstrap)', 'accordion-bootstrap'),
      description: __('Create an accordion layout.', 'accordion-bootstrap'),
      category: 'inclind-blocks',
      keywords: [__('Accordion', 'accordion-bootstrap'), __('Icon', 'accordion-bootstrap'), __('inclind', 'accordion-bootstrap'), __('custom', 'accordion-bootstrap')],
      attributes: {
        uniqueID: {
          type: 'string',
          default: ''
        },
        paneCount: {
          type: 'number',
          default: 2
        },
        showPresets: {
          type: 'bool',
          default: false
        },
        openPane: {
          type: 'number',
          default: 0
        },
        startCollapsed: {
          type: 'bool',
          default: false
        },
        linkPaneCollapse: {
          type: 'bool',
          default: true
        },
        minHeight: {
          type: 'number',
          default: ''
        },
        maxWidth: {
          type: 'number',
          default: ''
        },
        contentBgColor: {
          type: 'string',
          default: ''
        },
        contentBorderColor: {
          type: 'string',
          default: '#eeeeee'
        },
        contentBorder: {
          type: 'array',
          default: [0, 1, 1, 1]
        },
        contentBorderRadius: {
          type: 'array',
          default: [0, 0, 0, 0]
        },
        contentPadding: {
          type: 'array',
          default: [20, 20, 20, 20]
        },
        titleAlignment: {
          type: 'string',
          default: 'left'
        },
        blockAlignment: {
          type: 'string',
          default: 'none'
        },
        titleStyles: {
          type: 'array',
          default: [{
            size: [18, '', ''],
            sizeType: 'px',
            lineHeight: [24, '', ''],
            lineType: 'px',
            letterSpacing: '',
            family: '',
            google: '',
            style: '',
            weight: '',
            variant: '',
            subset: '',
            loadGoogle: true,
            padding: [10, 14, 10, 14],
            marginTop: 8,
            color: '#555555',
            background: '#f2f2f2',
            border: ['#555555', '#555555', '#555555', '#555555'],
            borderRadius: [0, 0, 0, 0],
            borderWidth: [0, 0, 0, 0],
            colorHover: '#444444',
            backgroundHover: '#eeeeee',
            borderHover: ['#eeeeee', '#eeeeee', '#eeeeee', '#eeeeee'],
            colorActive: '#ffffff',
            backgroundActive: '#444444',
            borderActive: ['#444444', '#444444', '#444444', '#444444'],
            textTransform: ''
          }]
        },
        showIcon: {
          type: 'bool',
          default: true
        },
        iconStyle: {
          type: 'string',
          default: 'basic'
        },
        iconSide: {
          type: 'string',
          default: 'right'
        }
      },

      // Render the block components.
      getEditWrapperProps({
        blockAlignment
      }) {
        if ('left' === blockAlignment || 'right' === blockAlignment || 'center' === blockAlignment) {
          return {
            'data-align': blockAlignment
          };
        }
      },

      edit: InclindAccordionBootstrap,
      save: props => {
        const {
          attributes: {
            uniqueID,
            paneCount,
            blockAlignment,
            maxWidth,
            titleAlignment,
            startCollapsed,
            linkPaneCollapse,
            showIcon,
            iconStyle,
            iconSide,
            openPane
          }
        } = props;
        const classes = (0, _classnames.default)(`align${blockAlignment ? blockAlignment : 'none'}`);
        const innerClasses = (0, _classnames.default)(`accordion-id${uniqueID} active-pane-${openPane}`);

        const stripStringRender = string => {
          return string.toLowerCase().replace(/[^0-9a-z-]/g, '');
        }; // render() {


        return React.createElement("div", {
          className: classes
        }, React.createElement("div", {
          className: innerClasses,
          style: {
            maxWidth: maxWidth ? maxWidth + 'px' : 'none'
          }
        }, React.createElement("div", {
          className: "accordion kt-accordion-inner-wrap",
          id: `accord${uniqueID}`,
          "data-allow-multiple-open": !linkPaneCollapse ? 'true' : 'false',
          "data-start-open": !startCollapsed ? openPane : 'none'
        }, React.createElement(InnerBlocks.Content, null)))); // }
      }
    });
  }
}

},{"./components/accordion-bootstrap":1,"@fonticonpicker/react-fonticonpicker":59,"classnames":60,"lodash/map":182,"lodash/times":187,"memize":192}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Card wrapper Component.
 */

class AccordionItem extends Component {
  constructor(props) {
    super(...arguments);
  }

  makeId(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;

    for (var i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }

    return result;
  }

  render() {
    if (this.props.attributes.itemId === undefined || this.props.attributes.itemId === '') {
      this.props.attributes.itemId = this.makeId(10);
    }

    let className = 'card';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-accordion-item') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = AccordionItem;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const icon = {
  'iconAdd': 'M368.5 240H272v-96.5c0-8.8-7.2-16-16-16s-16 7.2-16 16V240h-96.5c-8.8 0-16 7.2-16 16 0 4.4 1.8 8.4 4.7 11.3 2.9 2.9 6.9 4.7 11.3 4.7H240v96.5c0 4.4 1.8 8.4 4.7 11.3 2.9 2.9 6.9 4.7 11.3 4.7 8.8 0 16-7.2 16-16V272h96.5c8.8 0 16-7.2 16-16s-7.2-16-16-16z',
  'iconRemove': 'M368.5 240h-225c-8.8 0-16 7.2-16 16 0 4.4 1.8 8.4 4.7 11.3 2.9 2.9 6.9 4.7 11.3 4.7h225c8.8 0 16-7.2 16-16s-7.2-16-16-16z'
};
var _default = icon;
exports.default = _default;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element; // Import Inspector components.

const {
  InspectorControls
} = wp.editor; // Import block components.

const {
  PanelBody
} = wp.components;
/**
 * Create an Inspector Controls wrapper Component.
 */

class Inspector extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    return React.createElement(InspectorControls, {
      key: "inspector"
    }, React.createElement(PanelBody, null));
  }

}

exports.default = Inspector;

},{}],6:[function(require,module,exports){
"use strict";

var _classnames = _interopRequireDefault(require("classnames"));

var _inspector = _interopRequireDefault(require("./components/inspector"));

var _accordionItem = _interopRequireDefault(require("./components/accordion-item"));

var _icon = _interopRequireDefault(require("./components/icon"));

var _infobox = _interopRequireDefault(require("../infobox/components/infobox"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  BlockControls,
  InnerBlocks
} = wp.editor; // Register components

const {} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindAccordionItem extends Component {
  render() {
    // Setup the attributes.
    const {
      attributes: {
        itemTitle,
        itemContent,
        itemId
      },
      isSelected,
      className,
      setAttributes
    } = this.props;
    return [// Show the alignment toolbar on focus.
    React.createElement(BlockControls, {
      key: "controls"
    }), // Show the block controls on focus.
    React.createElement(_inspector.default, this.props), // Show the block markup in the editor.
    React.createElement(_accordionItem.default, this.props, React.createElement(RichText, {
      tagName: "h5",
      placeholder: __("Item Title", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemTitle,
      className: (0, _classnames.default)('mb-0', 'accordion-item-title'),
      onChange: value => this.props.setAttributes({
        itemTitle: value
      })
    }), React.createElement(RichText, {
      tagName: "p",
      placeholder: __("Item Content...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemContent,
      className: (0, _classnames.default)('accordion-item-content'),
      onChange: value => this.props.setAttributes({
        itemContent: value
      })
    }), React.createElement(InnerBlocks, null))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-accordion') && blocks[category.slug + '/inclind-accordion']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-accordion-item', {
      title: __('Accordion Item', 'inclind-accordion-item'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('accordion', 'inclind-accordion-item'), __('accordion item', 'inclind-accordion-item'), __('inclind', 'inclind-accordion-item')],
      attributes: {
        itemTitle: {
          selector: '.accordion-item-title',
          type: 'string'
        },
        itemContent: {
          selector: '.accordion-item-content',
          type: 'array',
          source: 'children'
        },
        itemId: {
          type: 'string',
          default: ''
        }
      },
      // Render the block components.
      edit: InclindAccordionItem,
      // Save the attributes and markup.
      save: function (props) {
        const {
          itemTitle,
          itemContent,
          itemId
        } = props.attributes;
        const addIcon = '<svg viewBox="0 0 500 500"><path d="' + _icon.default['iconAdd'] + '"></path></svg>';
        const removeIcon = '<svg viewBox="0 0 512 512"><path d="' + _icon.default['iconRemove'] + '"></path></svg>'; // Save the block markup for the front end.
        // TODO: Unique ID on elements for JS functionality.

        return React.createElement(_accordionItem.default, props, React.createElement("div", {
          className: "card-header",
          id: "header-" + itemId
        }, React.createElement("h5", {
          className: "mb-0 accordion-item-title"
        }, React.createElement("button", {
          className: "btn btn-link",
          "data-toggle": "collapse",
          "data-target": "#collapse-" + itemId
        }, itemTitle, React.createElement("span", {
          className: "svgicon-default _ionicons_svg_ios-add",
          dangerouslySetInnerHTML: {
            __html: addIcon
          }
        }), React.createElement("span", {
          className: "svgicon-default _ionicons_svg_ios-remove",
          dangerouslySetInnerHTML: {
            __html: removeIcon
          }
        })))), React.createElement("div", {
          id: "collapse-" + itemId,
          className: "collapse"
        }, React.createElement("div", {
          class: "card-body"
        }, itemContent && React.createElement(RichText.Content, {
          tagName: "p",
          className: "accordion-item-content",
          value: itemContent
        }), React.createElement(InnerBlocks.Content, null))));
      }
    });
  }
}

},{"../infobox/components/infobox":31,"./components/accordion-item":3,"./components/icon":4,"./components/inspector":5,"classnames":60}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Accordion wrapper Component.
 */

class Accordion extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = 'accordion';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-accordion') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = Accordion;

},{}],8:[function(require,module,exports){
"use strict";

var _accordion = _interopRequireDefault(require("./components/accordion"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  InnerBlocks
} = wp.editor; // Register components

const {} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindAccordion extends Component {
  render() {
    // Setup the attributes.
    const {
      isSelected,
      className,
      setAttributes
    } = this.props;
    return [// Show the block markup in the editor.
    React.createElement(_accordion.default, this.props, React.createElement(InnerBlocks, null))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-accordion') && blocks[category.slug + '/inclind-accordion']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-accordion', {
      title: __('Accordion', 'inclind-accordion'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('accordion', 'inclind-accordion'), __('inclind', 'inclind-accordion')],
      attributes: {},
      // Render the block components.
      edit: InclindAccordion,
      // Save the attributes and markup.
      save: function (props) {
        const {} = props.attributes; // Save the block markup for the front end.

        return React.createElement(_accordion.default, props, React.createElement(InnerBlocks.Content, null));
      }
    });
  }
}

},{"./components/accordion":7,"classnames":60}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a AdvancedBtn wrapper Component.
 */

class AdvancedBtn extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = '';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-advanced-btn') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = AdvancedBtn;

},{}],10:[function(require,module,exports){
"use strict";

var _advancedBtn = _interopRequireDefault(require("./components/advanced-btn"));

var _times = _interopRequireDefault(require("lodash/times"));

var _map = _interopRequireDefault(require("lodash/map"));

var _reactFonticonpicker = _interopRequireDefault(require("@fonticonpicker/react-fonticonpicker"));

var _genicon = _interopRequireDefault(require("../../genicon"));

var _svgicons = _interopRequireDefault(require("../../svgicons"));

var _svgiconsnames = _interopRequireDefault(require("../../svgiconsnames"));

var _hexToRgba = _interopRequireDefault(require("../../hex-to-rgba"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component,
  Fragment
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  URLInput,
  InspectorControls,
  BlockControls,
  AlignmentToolbar,
  InspectorAdvancedControls
} = wp.blockEditor; // Register components

const {
  IconButton,
  Dashicon,
  TabPanel,
  Button,
  PanelBody,
  RangeControl,
  TextControl,
  ButtonGroup,
  SelectControl,
  ToggleControl
} = wp.components;
const {
  dispatch,
  select
} = wp.data;
/**
 * This allows for checking to see if the block needs to generate a new ID.
 */

const ktadvancedbuttonUniqueIDs = [];

class InclindAdvancedBtn extends Component {
  constructor() {
    super(...arguments);
    this.showSettings = this.showSettings.bind(this);
    this.saveArrayUpdate = this.saveArrayUpdate.bind(this);
    this.state = {
      btnFocused: 'false',
      btnLink: false,
      user: 'admin',
      settings: {}
    };
  }

  componentDidMount() {
    if (!this.props.attributes.uniqueID) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktadvancedbuttonUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else if (ktadvancedbuttonUniqueIDs.includes(this.props.attributes.uniqueID)) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktadvancedbuttonUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else {
      ktadvancedbuttonUniqueIDs.push(this.props.attributes.uniqueID);
    }

    if (this.props.attributes.btns && this.props.attributes.btns[0] && undefined === this.props.attributes.btns[0].btnSize) {
      this.saveArrayUpdate({
        btnSize: 'custom'
      }, 0);
    }

    if (this.props.attributes.btns && this.props.attributes.btns[1] && undefined === this.props.attributes.btns[1].btnSize) {
      this.saveArrayUpdate({
        btnSize: 'custom'
      }, 1);
    }

    if (this.props.attributes.btns && this.props.attributes.btns[2] && undefined === this.props.attributes.btns[2].btnSize) {
      this.saveArrayUpdate({
        btnSize: 'custom'
      }, 2);
    }

    if (this.props.attributes.btns && this.props.attributes.btns[3] && undefined === this.props.attributes.btns[3].btnSize) {
      this.saveArrayUpdate({
        btnSize: 'custom'
      }, 3);
    }

    if (this.props.attributes.btns && this.props.attributes.btns[4] && undefined === this.props.attributes.btns[4].btnSize) {
      this.saveArrayUpdate({
        btnSize: 'custom'
      }, 4);
    }

    if (undefined === this.props.attributes.widthType) {
      if (this.props.attributes.forceFullwidth) {
        this.props.setAttributes({
          widthType: 'full'
        });
      }
    }
  }

  componentDidUpdate(prevProps) {
    if (!this.props.isSelected && prevProps.isSelected && this.state.btnFocused) {
      this.setState({
        btnFocused: 'false'
      });
    }
  }

  showSettings(key) {
    let donot_allow = ['countSettings', 'btnSizeSettings'];

    if (donot_allow.includes(key)) {
      return false;
    }

    return true;
  }

  saveArrayUpdate(value, index) {
    const {
      attributes,
      setAttributes
    } = this.props;
    const {
      btns
    } = attributes;
    const newItems = btns.map((item, thisIndex) => {
      if (index === thisIndex) {
        item = { ...item,
          ...value
        };
      }

      return item;
    });
    setAttributes({
      btns: newItems
    });
  }

  render() {
    const {
      attributes: {
        uniqueID,
        btnCount,
        btns,
        hAlign,
        forceFullwidth,
        thAlign,
        mhAlign,
        widthType,
        kadenceAOSOptions,
        kadenceAnimation
      },
      className,
      setAttributes,
      isSelected
    } = this.props;
    const btnSizes = [{
      key: 'sm',
      name: __('S')
    }, {
      key: 'standard',
      name: __('M')
    }, {
      key: 'lg',
      name: __('L')
    }, {
      key: 'custom',
      name: React.createElement(Dashicon, {
        icon: "admin-generic"
      })
    }];
    const btnWidths = [{
      key: 'auto',
      name: __('Auto')
    }, {
      key: 'fixed',
      name: __('Fixed')
    }, {
      key: 'full',
      name: __('Full')
    }];
    const unitTypes = [{
      key: 'px',
      name: __('px')
    }, {
      key: '%',
      name: __('%')
    }];
    const gradTypes = [{
      key: 'linear',
      name: __('Linear')
    }, {
      key: 'radial',
      name: __('Radial')
    }];
    const bgType = [{
      key: 'solid',
      name: __('Primary')
    }, {
      key: 'yellow',
      name: __('Secondary')
    }, {
      key: 'gradient',
      name: __('Transparent')
    }];

    const renderBtns = index => {
      let btnSize;

      if (undefined !== btns[index].paddingLR || undefined !== btns[index].paddingBT) {
        btnSize = 'custom';
      } else {
        btnSize = 'standard';
      }

      return React.createElement("button", {
        type: 'button',
        className: `btn btn-area-wrap btn-${btns[index].btnSize ? btns[index].btnSize : btnSize} kt-btn-${index}-area ${!btns[index].icon ? '' : 'btn-icon'}
                  ${btns[index].backgroundHoverType === 'gradient' ? ' btn-arrow btn-cta btn-square' : btns[index].backgroundHoverType === 'yellow' ? ' btn-secondary' : 'btn-primary'}
                  `,
        style: {
          marginRight: btns[index].gap + 'px'
        }
      }, btns[index].icon && 'left' === btns[index].iconSide && React.createElement(_genicon.default, {
        className: `color-fill--white svg svg--icon js-svg-exists kt-btn-svg-icon kt-btn-svg-icon-${btns[index].icon} kt-btn-side-${btns[index].iconSide}`,
        name: btns[index].icon,
        size: !btns[index].size ? '14' : btns[index].size,
        icon: _svgicons.default[btns[index].icon]
      }), React.createElement(RichText, {
        tagName: "div",
        placeholder: __('Button...', 'inclind-advanced-btn'),
        value: btns[index].text,
        unstableOnFocus: () => {
          if (1 === index) {
            onFocusBtn1();
          } else if (2 === index) {
            onFocusBtn2();
          } else if (3 === index) {
            onFocusBtn3();
          } else if (4 === index) {
            onFocusBtn4();
          } else {
            onFocusBtn();
          }
        },
        onChange: value => {
          this.saveArrayUpdate({
            text: value
          }, index);
        },
        allowedFormats: ['core/bold', 'core/italic', 'core/strikethrough'],
        className: 'kt-button-text',
        keepPlaceholderOnFocus: true
      }), btns[index].icon && 'left' !== btns[index].iconSide && React.createElement(_genicon.default, {
        className: `color-fill--white svg svg--icon js-svg-exists kt-btn-svg-icon-${btns[index].icon} kt-btn-side-${btns[index].iconSide}`,
        name: btns[index].icon,
        size: !btns[index].size ? '14' : btns[index].size,
        icon: _svgicons.default[btns[index].icon]
      }), btns[index].backgroundHoverType && 'gradient' === btns[index].backgroundHoverType && !btns[index].icon && React.createElement(_genicon.default, {
        className: `svg svg--colorable js-svg-exists`,
        name: `bb`,
        htmltag: `span`
      }), isSelected && (this.state.btnFocused && 'btn' + [index] === this.state.btnFocused || this.state.btnFocused && 'false' === this.state.btnFocused && '0' === index) && React.createElement("form", {
        key: 'form-link',
        onSubmit: event => event.preventDefault(),
        className: "blocks-button__inline-link"
      }, React.createElement(URLInput, {
        value: btns[index].link,
        onChange: value => {
          this.saveArrayUpdate({
            link: value
          }, index);
        }
      }), React.createElement(IconButton, {
        icon: 'editor-break',
        label: __('Apply', 'inclind-advanced-btn'),
        type: 'submit'
      })));
    };

    const onFocusBtn = () => {
      if ('btn0' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn0'
        });
      }
    };

    const onFocusBtn1 = () => {
      if ('btn1' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn1'
        });
      }
    };

    const onFocusBtn2 = () => {
      if ('btn2' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn2'
        });
      }
    };

    const onFocusBtn3 = () => {
      if ('btn3' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn3'
        });
      }
    };

    const onFocusBtn4 = () => {
      if ('btn4' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn4'
        });
      }
    };

    const defineWidthType = type => {
      if ('full' === type) {
        setAttributes({
          forceFullwidth: true
        });
        setAttributes({
          widthType: type
        });
      } else {
        setAttributes({
          forceFullwidth: false
        });
        setAttributes({
          widthType: type
        });
      }
    };

    const defineWidthTypeToggle = value => {
      if (value) {
        setAttributes({
          forceFullwidth: true
        });
        setAttributes({
          widthType: 'full'
        });
      } else {
        setAttributes({
          forceFullwidth: false
        });
        setAttributes({
          widthType: 'full'
        });
      }
    };

    const tabControls = index => {
      return React.createElement(PanelBody, {
        title: __('Button', 'inclind-advanced-btn') + ' ' + (index + 1) + ' ' + __('Settings', 'inclind-advanced-btn'),
        initialOpen: false
      }, React.createElement("h2", {
        className: "side-h2-label"
      }, __('Button Link', 'inclind-advanced-btn')), React.createElement("div", {
        className: "kt-btn-link-group"
      }, React.createElement(URLInput, {
        value: btns[index].link,
        className: "kt-btn-link-input",
        onChange: value => {
          this.saveArrayUpdate({
            link: value
          }, index);
        }
      }), React.createElement(IconButton, {
        className: "kt-link-settings",
        icon: 'arrow-down-alt2',
        label: __('Link Settings', 'inclind-advanced-btn'),
        onClick: () => this.setState({
          btnLink: this.state.btnLink ? false : true
        })
      })), this.state.btnLink && React.createElement(Fragment, null, React.createElement("div", {
        className: "kt-spacer-sidebar-15"
      }), React.createElement(SelectControl, {
        label: __('Link Target', 'inclind-advanced-btn'),
        value: btns[index].target,
        options: [{
          value: '_self',
          label: __('Same Window', 'inclind-advanced-btn')
        }, {
          value: '_blank',
          label: __('New Window', 'inclind-advanced-btn')
        }, {
          value: 'video',
          label: __('Video Popup', 'inclind-advanced-btn')
        }],
        onChange: value => {
          this.saveArrayUpdate({
            target: value
          }, index);
        }
      }), btns[index].target === 'video' && React.createElement("p", null, __('NOTE: Video popup only works with youtube and vimeo links.', 'inclind-advanced-btn')), React.createElement(ToggleControl, {
        label: __('Set link to nofollow?', 'inclind-advanced-btn'),
        checked: undefined !== btns[index].noFollow ? btns[index].noFollow : false,
        onChange: value => this.saveArrayUpdate({
          noFollow: value
        }, index)
      })), this.showSettings('btnSizeSettings') && React.createElement(Fragment, null, React.createElement("div", {
        className: "kt-btn-size-settings-container"
      }, React.createElement("h2", {
        className: "kt-beside-btn-group"
      }, __('Button Size')), React.createElement(ButtonGroup, {
        className: "kt-button-size-type-options",
        "aria-label": __('Button Size', 'inclind-advanced-btn')
      }, (0, _map.default)(btnSizes, ({
        name,
        key
      }) => React.createElement(Button, {
        key: key,
        className: "kt-btn-size-btn",
        isSmall: true,
        isPrimary: btns[index].btnSize === key,
        "aria-pressed": btns[index].btnSize === key,
        onClick: () => this.saveArrayUpdate({
          btnSize: key
        }, index)
      }, name)))), 'custom' === btns[index].btnSize && React.createElement("div", {
        className: "kt-inner-sub-section"
      }, React.createElement("h2", {
        className: "kt-heading-size-title kt-secondary-color-size"
      }, __('Padding', 'inclind-advanced-btn')), React.createElement(TabPanel, {
        className: "kt-size-tabs",
        activeClass: "active-tab",
        tabs: [{
          name: 'desk',
          title: React.createElement(Dashicon, {
            icon: "desktop"
          }),
          className: 'kt-desk-tab'
        }, {
          name: 'tablet',
          title: React.createElement(Dashicon, {
            icon: "tablet"
          }),
          className: 'kt-tablet-tab'
        }, {
          name: 'mobile',
          title: React.createElement(Dashicon, {
            icon: "smartphone"
          }),
          className: 'kt-mobile-tab'
        }]
      }, tab => {
        let tabout;

        if (tab.name) {
          if ('mobile' === tab.name) {
            tabout = React.createElement(Fragment, null, React.createElement(RangeControl, {
              label: __('Top and Bottom Padding', 'inclind-advanced-btn'),
              value: undefined !== btns[index].responsivePaddingBT && undefined !== btns[index].responsivePaddingBT[1] ? btns[index].responsivePaddingBT[1] : '',
              onChange: value => {
                this.saveArrayUpdate({
                  responsivePaddingBT: [undefined !== btns[index].responsivePaddingBT && undefined !== btns[index].responsivePaddingBT[0] ? btns[index].responsivePaddingBT[0] : '', value]
                }, index);
              },
              min: 0,
              max: 100
            }), React.createElement(RangeControl, {
              label: __('Left and Right Padding', 'inclind-advanced-btn'),
              value: undefined !== btns[index].responsivePaddingLR && undefined !== btns[index].responsivePaddingLR[1] ? btns[index].responsivePaddingLR[1] : '',
              onChange: value => {
                this.saveArrayUpdate({
                  responsivePaddingLR: [undefined !== btns[index].responsivePaddingLR && undefined !== btns[index].responsivePaddingLR[0] ? btns[index].responsivePaddingLR[0] : '', value]
                }, index);
              },
              min: 0,
              max: 100
            }));
          } else if ('tablet' === tab.name) {
            tabout = React.createElement(Fragment, null, React.createElement(RangeControl, {
              label: __('Top and Bottom Padding', 'inclind-advanced-btn'),
              value: undefined !== btns[index].responsivePaddingBT && undefined !== btns[index].responsivePaddingBT[0] ? btns[index].responsivePaddingBT[0] : '',
              onChange: value => {
                this.saveArrayUpdate({
                  responsivePaddingBT: [value, undefined !== btns[index].responsivePaddingBT && undefined !== btns[index].responsivePaddingBT[1] ? btns[index].responsivePaddingBT[1] : '']
                }, index);
              },
              min: 0,
              max: 100
            }), React.createElement(RangeControl, {
              label: __('Left and Right Padding', 'inclind-advanced-btn'),
              value: undefined !== btns[index].responsivePaddingLR && undefined !== btns[index].responsivePaddingLR[0] ? btns[index].responsivePaddingLR[0] : '',
              onChange: value => {
                this.saveArrayUpdate({
                  responsivePaddingLR: [value, undefined !== btns[index].responsivePaddingLR && undefined !== btns[index].responsivePaddingLR[1] ? btns[index].responsivePaddingLR[1] : '']
                }, index);
              },
              min: 0,
              max: 100
            }));
          } else {
            tabout = React.createElement(Fragment, null, React.createElement(RangeControl, {
              label: __('Top and Bottom Padding', 'inclind-advanced-btn'),
              value: btns[index].paddingBT,
              onChange: value => {
                this.saveArrayUpdate({
                  paddingBT: value
                }, index);
              },
              min: 0,
              max: 100
            }), React.createElement(RangeControl, {
              label: __('Left and Right Padding', 'inclind-advanced-btn'),
              value: btns[index].paddingLR,
              onChange: value => {
                this.saveArrayUpdate({
                  paddingLR: value
                }, index);
              },
              min: 0,
              max: 100
            }));
          }
        }

        return React.createElement("div", null, tabout);
      })), React.createElement("div", {
        className: "kt-btn-size-settings-container"
      }, React.createElement("h2", {
        className: "kt-beside-btn-group"
      }, __('Button Width', 'inclind-advanced-btn')), React.createElement(ButtonGroup, {
        className: "kt-button-size-type-options",
        "aria-label": __('Button Width', 'inclind-advanced-btn')
      }, (0, _map.default)(btnWidths, ({
        name,
        key
      }) => React.createElement(Button, {
        key: key,
        className: "kt-btn-size-btn",
        isSmall: true,
        isPrimary: widthType === key,
        "aria-pressed": widthType === key,
        onClick: () => defineWidthType(key)
      }, name)))), 'fixed' === widthType && React.createElement("div", {
        className: "kt-inner-sub-section"
      }, React.createElement("h2", {
        className: "kt-heading-size-title kt-secondary-color-size"
      }, __('Fixed Width', 'inclind-advanced-btn')), React.createElement(TabPanel, {
        className: "kt-size-tabs",
        activeClass: "active-tab",
        tabs: [{
          name: 'desk',
          title: React.createElement(Dashicon, {
            icon: "desktop"
          }),
          className: 'kt-desk-tab'
        }, {
          name: 'tablet',
          title: React.createElement(Dashicon, {
            icon: "tablet"
          }),
          className: 'kt-tablet-tab'
        }, {
          name: 'mobile',
          title: React.createElement(Dashicon, {
            icon: "smartphone"
          }),
          className: 'kt-mobile-tab'
        }]
      }, tab => {
        let tabout;

        if (tab.name) {
          if ('mobile' === tab.name) {
            tabout = React.createElement(Fragment, null, React.createElement(RangeControl, {
              value: btns[index].width && undefined !== btns[index].width[2] ? btns[index].width[2] : undefined,
              onChange: value => {
                this.saveArrayUpdate({
                  width: [undefined !== btns[index].width && undefined !== btns[index].width[0] ? btns[index].width[0] : '', undefined !== btns[index].width && undefined !== btns[index].width[1] ? btns[index].width[1] : '', value]
                }, index);
              },
              min: 10,
              max: 500
            }));
          } else if ('tablet' === tab.name) {
            tabout = React.createElement(Fragment, null, React.createElement(RangeControl, {
              value: btns[index].width && undefined !== btns[index].width[1] ? btns[index].width[1] : undefined,
              onChange: value => {
                this.saveArrayUpdate({
                  width: [undefined !== btns[index].width && undefined !== btns[index].width[0] ? btns[index].width[0] : '', value, undefined !== btns[index].width && undefined !== btns[index].width[2] ? btns[index].width[2] : '']
                }, index);
              },
              min: 10,
              max: 500
            }));
          } else {
            tabout = React.createElement(Fragment, null, React.createElement(RangeControl, {
              value: btns[index].width && undefined !== btns[index].width[0] ? btns[index].width[0] : undefined,
              onChange: value => {
                this.saveArrayUpdate({
                  width: [value, undefined !== btns[index].width && undefined !== btns[index].width[1] ? btns[index].width[1] : '', undefined !== btns[index].width && undefined !== btns[index].width[2] ? btns[index].width[2] : '']
                }, index);
              },
              min: 10,
              max: 500
            }));
          }
        }

        return React.createElement("div", null, tabout);
      }))), React.createElement(Fragment, null, React.createElement("div", {
        className: "components-base-control__field"
      }, React.createElement("label", {
        className: "kt-beside-btn-group"
      }, __('Background Type', 'inclind-advanced-btn')), React.createElement(ButtonGroup, {
        className: "kt-button-size-type-options",
        "aria-label": __('Background Type', 'inclind-advanced-btn')
      }, (0, _map.default)(bgType, ({
        name,
        key
      }) => React.createElement(Button, {
        key: key,
        className: "kt-btn-size-btn",
        isSmall: true,
        isPrimary: (undefined !== btns[index].backgroundHoverType ? btns[index].backgroundHoverType : 'solid') === key,
        "aria-pressed": (undefined !== btns[index].backgroundHoverType ? btns[index].backgroundHoverType : 'solid') === key,
        onClick: () => this.saveArrayUpdate({
          backgroundHoverType: key
        }, index)
      }, name))))), React.createElement(Fragment, null, React.createElement("h2", {
        className: "kt-tool"
      }, __('Icon Settings', 'inclind-advanced-btn')), React.createElement("div", {
        className: "kt-select-icon-container"
      }, React.createElement(_reactFonticonpicker.default, {
        icons: _svgiconsnames.default,
        value: btns[index].icon,
        onChange: value => {
          this.saveArrayUpdate({
            icon: value
          }, index);
        },
        appendTo: "body",
        renderFunc: renderSVG,
        theme: "default",
        isMulti: false
      })), React.createElement(SelectControl, {
        label: __('Icon Location', 'inclind-advanced-btn'),
        value: btns[index].iconSide,
        options: [{
          value: 'right',
          label: __('Right')
        }, {
          value: 'left',
          label: __('Left')
        }],
        onChange: value => {
          this.saveArrayUpdate({
            iconSide: value
          }, index);
        }
      })), React.createElement(TextControl, {
        label: __('Add Custom CSS Class', 'inclind-advanced-btn'),
        value: btns[index].cssClass ? btns[index].cssClass : '',
        onChange: value => this.saveArrayUpdate({
          cssClass: value
        }, index)
      }));
    };

    const renderSVG = svg => React.createElement(_genicon.default, {
      name: svg,
      icon: _svgicons.default[svg]
    });

    const renderArray = React.createElement(Fragment, null, (0, _times.default)(btnCount, n => tabControls(n)));
    const renderPreviewArray = React.createElement("div", null, (0, _times.default)(btnCount, n => renderBtns(n)));
    return React.createElement(Fragment, null, React.createElement("div", {
      id: `kt-btns_${uniqueID}`,
      className: `${className} kt-btn-align-${hAlign}${forceFullwidth ? ' kt-force-btn-fullwidth' : ''}`
    }, React.createElement(BlockControls, null, React.createElement(AlignmentToolbar, {
      value: hAlign,
      onChange: value => setAttributes({
        hAlign: value
      })
    })), React.createElement(Fragment, null, React.createElement(InspectorControls, null, this.showSettings('countSettings') && React.createElement(PanelBody, {
      title: __('Button Count', 'inclind-advanced-btn'),
      initialOpen: true
    }, React.createElement(RangeControl, {
      label: __('Number of Buttons', 'inclind-advanced-btn'),
      value: btnCount,
      onChange: newcount => {
        const newbtns = btns;

        if (newbtns.length < newcount) {
          const amount = Math.abs(newcount - newbtns.length);
          {
            (0, _times.default)(amount, n => {
              newbtns.push({
                text: newbtns[0].text,
                link: newbtns[0].link,
                target: newbtns[0].target,
                size: newbtns[0].size,
                paddingBT: newbtns[0].paddingBT,
                paddingLR: newbtns[0].paddingLR,
                color: newbtns[0].color,
                background: newbtns[0].background,
                border: newbtns[0].border,
                backgroundOpacity: newbtns[0].backgroundOpacity,
                borderOpacity: newbtns[0].borderOpacity,
                borderRadius: newbtns[0].borderRadius,
                borderWidth: newbtns[0].borderWidth,
                // colorHover: newbtns[0].colorHover,
                // backgroundHover:
                // newbtns[0].backgroundHover,
                // borderHover: newbtns[0].borderHover,
                // backgroundHoverOpacity:
                // newbtns[0].backgroundHoverOpacity,
                // borderHoverOpacity:
                // newbtns[0].borderHoverOpacity,
                icon: newbtns[0].icon,
                iconSide: newbtns[0].iconSide,
                iconHover: newbtns[0].iconHover,
                cssClass: newbtns[0].cssClass ? newbtns[0].cssClass : '',
                noFollow: newbtns[0].noFollow ? newbtns[0].noFollow : false,
                gap: newbtns[0].gap ? newbtns[0].gap : 5,
                responsiveSize: newbtns[0].responsiveSize ? newbtns[0].responsiveSize : ['', ''],
                gradient: newbtns[0].gradient ? newbtns[0].gradient : ['#999999', 1, 0, 100, 'linear', 180, 'center center'],
                gradientHover: newbtns[0].gradientHover ? newbtns[0].gradientHover : ['#777777', 1, 0, 100, 'linear', 180, 'center center'],
                btnStyle: newbtns[0].btnStyle ? newbtns[0].btnStyle : 'basic',
                btnSize: newbtns[0].btnSize ? newbtns[0].btnSize : 'standard',
                backgroundType: newbtns[0].backgroundType ? newbtns[0].backgroundType : 'solid',
                backgroundHoverType: newbtns[0].backgroundHoverType ? newbtns[0].backgroundHoverType : 'solid',
                width: newbtns[0].width ? newbtns[0].width : ['', '', ''],
                responsivePaddingBT: newbtns[0].responsivePaddingBT ? newbtns[0].responsivePaddingBT : ['', ''],
                responsivePaddingLR: newbtns[0].responsivePaddingLR ? newbtns[0].responsivePaddingLR : ['', ''],
                boxShadow: newbtns[0].boxShadow ? newbtns[0].boxShadow : [false, '#000000', 0.2, 1, 1, 2, 0, false],
                boxShadowHover: newbtns[0].boxShadowHover ? newbtns[0].boxShadowHover : [false, '#000000', 0.4, 2, 2, 3, 0, false]
              });
            });
          }
          setAttributes({
            btns: newbtns
          });
          this.saveArrayUpdate({
            iconSide: btns[0].iconSide
          }, 0);
        }

        setAttributes({
          btnCount: newcount
        });
      },
      min: 1,
      max: 5
    }), React.createElement("h2", {
      className: "kt-heading-size-title"
    }, __('Button Alignment', 'inclind-advanced-btn')), React.createElement(TabPanel, {
      className: "kt-size-tabs",
      activeClass: "active-tab",
      tabs: [{
        name: 'desk',
        title: React.createElement(Dashicon, {
          icon: "desktop"
        }),
        className: 'kt-desk-tab'
      }, {
        name: 'tablet',
        title: React.createElement(Dashicon, {
          icon: "tablet"
        }),
        className: 'kt-tablet-tab'
      }, {
        name: 'mobile',
        title: React.createElement(Dashicon, {
          icon: "smartphone"
        }),
        className: 'kt-mobile-tab'
      }]
    }, tab => {
      let tabout;

      if (tab.name) {
        if ('mobile' === tab.name) {
          tabout = React.createElement(AlignmentToolbar, {
            value: mhAlign,
            onChange: value => setAttributes({
              mhAlign: value
            })
          });
        } else if ('tablet' === tab.name) {
          tabout = React.createElement(AlignmentToolbar, {
            value: thAlign,
            onChange: value => setAttributes({
              thAlign: value
            })
          });
        } else {
          tabout = React.createElement(AlignmentToolbar, {
            value: hAlign,
            onChange: value => setAttributes({
              hAlign: value
            })
          });
        }
      }

      return React.createElement("div", null, tabout);
    })), renderArray), React.createElement(InspectorAdvancedControls, null, React.createElement(ToggleControl, {
      label: __('Force Button Fullwidth', 'inclind-advanced-btn'),
      checked: undefined !== forceFullwidth ? forceFullwidth : false,
      onChange: value => defineWidthTypeToggle(value)
    }))), React.createElement("div", {
      id: `animate-id${uniqueID}`,
      className: 'btn-inner-wrap'
    }, renderPreviewArray)));
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-advanced-btn') && blocks[category.slug + '/inclind-advanced-btn']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-advanced-btn', {
      title: __('Button (Bootstrap)', 'inclind-advanced-btn'),
      description: __('Create an advanced button or a row of buttons. Style each one, including hover controls!', 'inclind-advanced-btn'),
      category: 'inclind-blocks',
      keywords: [__('Button', 'inclind-advanced-btn'), __('Icon', 'inclind-advanced-btn'), __('inclind', 'inclind-advanced-btn'), __('custom', 'inclind-accoadvanced-btnrdion')],
      attributes: {
        hAlign: {
          type: 'string',
          default: 'center'
        },
        thAlign: {
          type: 'string',
          default: ''
        },
        mhAlign: {
          type: 'string',
          default: ''
        },
        btnCount: {
          type: 'number',
          default: 1
        },
        uniqueID: {
          type: 'string',
          default: ''
        },
        btns: {
          type: 'array',
          default: [{
            text: 'Start Button...',
            link: '',
            target: '_self',
            size: '',
            paddingBT: '',
            paddingLR: '',
            color: '#555555',
            background: '',
            border: '#555555',
            backgroundOpacity: 1,
            borderOpacity: 1,
            borderRadius: '',
            borderWidth: '',
            // colorHover: '#ffffff',
            // backgroundHover: '#444444',
            // borderHover: '#444444',
            // backgroundHoverOpacity: 1,
            // borderHoverOpacity: 1,
            icon: '',
            iconSide: 'left',
            iconHover: false,
            cssClass: '',
            noFollow: false,
            gap: 5,
            responsiveSize: ['', ''],
            gradient: ['#999999', 1, 0, 100, 'linear', 180, 'center center'],
            gradientHover: ['#777777', 1, 0, 100, 'linear', 180, 'center center'],
            btnStyle: 'basic',
            btnSize: 'standard',
            backgroundType: 'solid',
            backgroundHoverType: 'solid',
            width: ['', '', ''],
            responsivePaddingBT: ['', ''],
            responsivePaddingLR: ['', ''],
            boxShadow: [false, '#000000', 0.2, 1, 1, 2, 0, false],
            boxShadowHover: [false, '#000000', 0.4, 2, 2, 3, 0, false]
          }]
        },
        letterSpacing: {
          type: 'number'
        },
        widthType: {
          type: 'string',
          default: 'auto'
        },
        forceFullwidth: {
          type: 'bool',
          default: false
        }
      },

      // Render the block components.
      getEditWrapperProps({
        blockAlignment
      }) {
        if ('left' === blockAlignment || 'right' === blockAlignment || 'center' === blockAlignment) {
          return {
            'data-align': blockAlignment
          };
        }
      },

      edit: InclindAdvancedBtn,
      save: props => {
        const {
          attributes: {
            btnCount,
            btns,
            hAlign,
            uniqueID,
            letterSpacing,
            forceFullwidth,
            thAlign,
            mhAlign
          }
        } = props;

        const renderSaveBtns = index => {
          let relAttr;

          if ('_blank' === btns[index].target && true === btns[index].noFollow) {
            relAttr = 'noreferrer noopener nofollow';
          } else if ('_blank' === btns[index].target) {
            relAttr = 'noreferrer noopener';
          } else if (true === btns[index].noFollow) {
            relAttr = 'nofollow';
          } else {
            relAttr = undefined;
          }

          let btnSize;

          if (undefined !== btns[index].paddingLR || undefined !== btns[index].paddingBT) {
            btnSize = 'custom';
          } else {
            btnSize = 'standard';
          }

          return React.createElement("div", {
            className: `kt-btn-wrap kt-btn-wrap-${index}`
          }, React.createElement("a", {
            className: `btn kt-btn-${index}-action kt-btn-size-${btns[index].btnSize ? btns[index].btnSize : btnSize} kt-btn-style-${btns[index].btnStyle ? btns[index].btnStyle : 'basic'}
                kt-btn-svg-show-${!btns[index].iconHover ? 'always' : 'hover'} kt-btn-has-text-${!btns[index].text ? 'false' : 'true'} ${forceFullwidth ? ' btn-block' : ''}
                ${!btns[index].icon ? '' : 'btn-icon'}${'video' === btns[index].target ? ' ktblocksvideopop' : ''}${btns[index].cssClass ? ' ' + btns[index].cssClass : ''}
                ${btns[index].backgroundHoverType === 'gradient' ? ' btn-arrow btn-cta btn-square' : btns[index].backgroundHoverType === 'yellow' ? ' btn-secondary' : 'btn-primary'} `,
            href: !btns[index].link ? 'javascript:void(0);' : btns[index].link,
            target: '_blank' === btns[index].target ? btns[index].target : undefined,
            rel: relAttr,
            style: {
              borderRadius: undefined !== btns[index].borderRadius && '' !== btns[index].borderRadius ? btns[index].borderRadius + 'px' : undefined,
              borderWidth: undefined !== btns[index].borderWidth && '' !== btns[index].borderWidth ? btns[index].borderWidth + 'px' : undefined,
              letterSpacing: undefined !== letterSpacing && '' !== letterSpacing ? letterSpacing + 'px' : undefined
            }
          }, btns[index].icon && 'left' === btns[index].iconSide && React.createElement(_genicon.default, {
            className: `color-fill--white svg svg--icon js-svg-exists kt-btn-svg-icon-${btns[index].icon} kt-btn-side-${btns[index].iconSide}`,
            name: btns[index].icon,
            size: !btns[index].size ? '14' : btns[index].size,
            icon: _svgicons.default[btns[index].icon]
          }), React.createElement(RichText.Content, {
            tagName: 'span',
            className: "kt-btn-inner-text",
            value: btns[index].text
          }), btns[index].icon && 'left' !== btns[index].iconSide && React.createElement(_genicon.default, {
            className: `color-fill--white svg svg--icon js-svg-exists kt-btn-svg-icon-${btns[index].icon} kt-btn-side-${btns[index].iconSide}`,
            name: btns[index].icon,
            size: !btns[index].size ? '14' : btns[index].size,
            icon: _svgicons.default[btns[index].icon]
          }), btns[index].backgroundHoverType && 'gradient' === btns[index].backgroundHoverType && !btns[index].icon && React.createElement(_genicon.default, {
            className: `svg svg--colorable js-svg-exists`,
            name: `bb`,
            htmltag: `span`
          })));
        };

        return React.createElement("div", {
          className: `kt-btn-align-${hAlign} kt-btn-tablet-align-${thAlign ? thAlign : 'inherit'} kt-btn-mobile-align-${mhAlign ? mhAlign : 'inherit'} kt-btns-wrap kt-btns${uniqueID}`
        }, (0, _times.default)(btnCount, n => renderSaveBtns(n)));
      }
    });
  }
}

},{"../../genicon":52,"../../hex-to-rgba":53,"../../svgicons":56,"../../svgiconsnames":57,"./components/advanced-btn":9,"@fonticonpicker/react-fonticonpicker":59,"lodash/map":182,"lodash/times":187}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Infobox wrapper Component.
 */

class CallToAction extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = 'call-to-action';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-call-to-action') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = CallToAction;

},{}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element; // Import Inspector components.

const {
  InspectorControls
} = wp.editor; // Import block components.

const {
  PanelBody
} = wp.components;
/**
 * Create an Inspector Controls wrapper Component.
 */

class Inspector extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    // Setup the attributes
    const {} = this.props.attributes;
    return React.createElement(InspectorControls, {
      key: "inspector"
    }, React.createElement(PanelBody, null));
  }

}

exports.default = Inspector;

},{}],13:[function(require,module,exports){
"use strict";

var _classnames = _interopRequireDefault(require("classnames"));

var _inspector = _interopRequireDefault(require("./components/inspector"));

var _calltoaction = _interopRequireDefault(require("./components/calltoaction"));

var _icon = _interopRequireDefault(require("../infobox/components/icon"));

var _infobox = _interopRequireDefault(require("../infobox/components/infobox"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  BlockControls,
  URLInput
} = wp.editor; // Register components

const {} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindCallToAction extends Component {
  render() {
    // Setup the attributes.
    const {
      attributes: {
        itemTitle,
        itemContent,
        itemButtonText,
        itemButtonLink
      },
      isSelected,
      className,
      setAttributes
    } = this.props;
    return [// Show the alignment toolbar on focus.
    React.createElement(BlockControls, {
      key: "controls"
    }), // Show the block controls on focus.
    React.createElement(_inspector.default, this.props), // Show the block markup in the editor.
    React.createElement(_calltoaction.default, this.props, React.createElement(RichText, {
      tagName: "h2",
      placeholder: __("Item Title", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemTitle,
      className: (0, _classnames.default)('item-title', 'text-center', 'col-sm-12', 'emb-center'),
      onChange: value => this.props.setAttributes({
        itemTitle: value
      })
    }), React.createElement(RichText, {
      tagName: "p",
      placeholder: __("Item Content...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemContent,
      className: (0, _classnames.default)('lead'),
      onChange: value => this.props.setAttributes({
        itemContent: value
      })
    }), React.createElement(RichText, {
      tagName: "p",
      placeholder: __('Button Text...', 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemButtonText,
      formattingControls: [],
      className: (0, _classnames.default)('btn', 'btn-lg', 'btn-secondary'),
      onChange: value => setAttributes({
        itemButtonText: value
      })
    })), isSelected && React.createElement("form", {
      key: "form-link",
      onSubmit: event => event.preventDefault()
    }, React.createElement(URLInput, {
      className: "item-button-link",
      value: itemButtonLink,
      onChange: value => setAttributes({
        itemButtonLink: value
      })
    }))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-call-to-action') && blocks[category.slug + '/inclind-call-to-action']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-call-to-action', {
      title: __('Call To Action', 'inclind-call-to-action'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('action', 'inclind-call-to-action'), __('call to action', 'inclind-call-to-action'), __('inclind', 'inclind-call-to-action')],
      attributes: {
        itemTitle: {
          selector: '.item-title',
          type: 'string'
        },
        itemContent: {
          selector: '.lead',
          type: 'array',
          source: 'children'
        },
        itemButtonText: {
          type: 'string'
        },
        itemButtonLink: {
          type: 'string',
          source: 'attribute',
          selector: '.item-button-link',
          attribute: 'href'
        }
      },
      // Render the block components.
      edit: InclindCallToAction,
      // Save the attributes and markup.
      save: function (props) {
        const {
          itemTitle,
          itemContent,
          itemButtonText,
          itemButtonLink
        } = props.attributes; // Save the block markup for the front end.

        return React.createElement(_calltoaction.default, props, React.createElement("div", {
          className: "row text-center"
        }, itemTitle && React.createElement(RichText.Content, {
          tagName: "h2",
          className: "item-title text-center col-sm-12 emb-center",
          value: itemTitle
        }), React.createElement("div", {
          className: "col-sm-12"
        }, itemContent && React.createElement(RichText.Content, {
          tagName: "p",
          className: "lead",
          value: itemContent
        })), itemButtonText && React.createElement(RichText.Content, {
          tagName: "a",
          className: "btn btn-lg btn-secondary item-button-link",
          value: itemButtonText,
          href: itemButtonLink
        })));
      }
    });
  }
}

},{"../infobox/components/icon":30,"../infobox/components/infobox":31,"./components/calltoaction":11,"./components/inspector":12,"classnames":60}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Setup the block.


const {
  Component
} = wp.element; // Import block dependencies and components

/**
 * Create a Card wrapper Component.
 */

class Card extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    const {
      cardStyle
    } = this.props.attributes;
    let className = 'card ' + cardStyle;

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-card') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = Card;

},{"classnames":60}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const icon = {
  'iconArrow': 'M294.1 256L167 129c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.3 34 0L345 239c9.1 9.1 9.3 23.7.7 33.1L201.1 417c-4.7 4.7-10.9 7-17 7s-12.3-2.3-17-7c-9.4-9.4-9.4-24.6 0-33.9l127-127.1z'
};
var _default = icon;
exports.default = _default;

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Internationalization

const __ = Drupal.t; // Setup the block.

const {
  Component
} = wp.element; // Import Inspector components.

const {
  InspectorControls
} = wp.editor; // Import block components.

const {
  SelectControl,
  PanelBody
} = wp.components;
/**
 * Create an Inspector Controls wrapper Component.
 */

class Inspector extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    // Setup the attributes
    const {
      cardStyle
    } = this.props.attributes;
    const cardOptions = [{
      value: '',
      label: __('Card')
    }, {
      value: 'card-bg',
      label: __('Card BG')
    }, {
      value: 'card-invert',
      label: __('Card Invert')
    }];
    return React.createElement(InspectorControls, {
      key: "inspector"
    }, React.createElement(PanelBody, null, React.createElement(SelectControl, {
      label: __('Card Style'),
      description: __('Choose the style of the card.'),
      options: cardOptions,
      value: cardStyle,
      onChange: value => this.props.setAttributes({
        cardStyle: value
      })
    })));
  }

}

exports.default = Inspector;

},{}],17:[function(require,module,exports){
"use strict";

var _classnames = _interopRequireDefault(require("classnames"));

var _inspector = _interopRequireDefault(require("./components/inspector"));

var _card = _interopRequireDefault(require("./components/card"));

var _icon = _interopRequireDefault(require("./components/icon"));

var _infobox = _interopRequireDefault(require("../infobox/components/infobox"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
} // Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  BlockControls,
  MediaUpload,
  URLInput
} = wp.editor; // Register components

const {
  IconButton
} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindCard extends Component {
  render() {
    // Setup the attributes.
    const {
      attributes: {
        buttonText,
        cardUrl,
        cardContent,
        cardSubtitle,
        cardTitle,
        cardImage,
        cardImageAlt,
        cardImageTitle,
        cardImageData,
        cardStyle
      },
      isSelected,
      className,
      setAttributes
    } = this.props;

    const onSelectImage = (media, field) => {
      let mediaTitle = '';

      if (typeof media.title === 'string' || media.title instanceof String) {
        mediaTitle = media.title;
      } else {
        if (media.title.raw !== undefined && media.title.raw !== null) {
          mediaTitle = media.title.raw;
        }
      }

      setAttributes({
        [field]: media.url,
        cardImageData: getMediaAttrs(media),
        cardImageTitle: mediaTitle,
        cardImageAlt: media.alt_text
      });
    };

    function getMediaAttrs(media) {
      if (media && media.data) {
        return Object.keys(media.data).reduce((d, key) => {
          d[`data-${key.toLowerCase().replace(/[^a-z0-9]/g, '-')}`] = media.data[key];
          return d;
        }, {});
      }

      return {};
    }

    return [// Show the alignment toolbar on focus.
    React.createElement(BlockControls, {
      key: "controls"
    }), // Show the block controls on focus.
    React.createElement(_inspector.default, this.props), // Show the block markup in the editor.
    React.createElement(_card.default, this.props, React.createElement(MediaUpload, {
      allowedTypes: ['image'],
      onSelect: media => onSelectImage(media, 'cardImage'),
      render: ({
        open
      }) => React.createElement(IconButton, {
        className: "components-toolbar__control",
        label: __('Edit image'),
        icon: "edit",
        onClick: open
      })
    }), React.createElement("img", _extends({
      src: cardImage
    }, cardImageData, {
      alt: cardImageAlt,
      title: cardImageTitle
    })), React.createElement(RichText, {
      tagName: "h6",
      placeholder: __("Card Subtitle", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: cardSubtitle,
      className: (0, _classnames.default)('card-subtitle'),
      onChange: value => this.props.setAttributes({
        cardSubtitle: value
      })
    }), React.createElement(RichText, {
      tagName: "h3",
      placeholder: __("Card Title...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: cardTitle,
      className: (0, _classnames.default)('card-title'),
      onChange: value => this.props.setAttributes({
        cardTitle: value
      })
    }), React.createElement(RichText, {
      tagName: "p",
      placeholder: __("Card Content...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: cardContent,
      className: (0, _classnames.default)('card-text'),
      onChange: value => this.props.setAttributes({
        cardContent: value
      })
    }), React.createElement(RichText, {
      tagName: "p",
      placeholder: __('Button Text...', 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: buttonText,
      formattingControls: [],
      className: (0, _classnames.default)('btn', 'btn-secondary', 'btn-sm', 'icon'),
      onChange: value => setAttributes({
        buttonText: value
      })
    })), isSelected && React.createElement("form", {
      key: "form-link",
      onSubmit: event => event.preventDefault()
    }, React.createElement(URLInput, {
      className: "button-url",
      value: cardUrl,
      onChange: value => setAttributes({
        cardUrl: value
      })
    }))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-card') && blocks[category.slug + '/inclind-card']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-card', {
      title: __('Card', 'inclind-card'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('card', 'inclind-card'), __('inclind', 'inclind-card')],
      attributes: {
        cardTitle: {
          selector: '.card-title',
          type: 'string'
        },
        cardSubtitle: {
          selector: '.card-subtitle',
          type: 'string'
        },
        cardContent: {
          type: 'array',
          selector: '.card-text',
          source: 'children'
        },
        buttonText: {
          type: 'string'
        },
        cardUrl: {
          type: 'string',
          source: 'attribute',
          selector: '.card-link',
          attribute: 'href'
        },
        cardImage: {
          type: 'string'
        },
        cardImageData: {
          type: 'object',
          default: {}
        },
        cardStyle: {
          type: 'string',
          default: ''
        },
        cardImageTitle: {
          type: 'string'
        },
        cardImageAlt: {
          type: 'string'
        }
      },
      // Render the block components.
      edit: InclindCard,
      // Save the attributes and markup.
      save: function (props) {
        const {
          buttonText,
          cardUrl,
          cardContent,
          cardSubtitle,
          cardTitle,
          cardImage,
          cardImageAlt,
          cardImageTitle,
          cardImageData
        } = props.attributes;
        const arrow = '<svg viewBox="0 0 500 500"><path d="' + _icon.default['iconArrow'] + '"></path></svg>'; // Save the block markup for the front end.

        return React.createElement(_card.default, props, React.createElement("a", {
          href: cardUrl,
          className: "img img-card"
        }, React.createElement("img", _extends({
          src: cardImage,
          className: "card-img-top"
        }, cardImageData, {
          alt: cardImageAlt,
          title: cardImageTitle
        }))), React.createElement("div", {
          class: "card-body"
        }, cardSubtitle && React.createElement(RichText.Content, {
          tagName: "h6",
          className: "card-subtitle",
          value: '<a href="' + cardUrl + '" class="card-link">' + cardSubtitle + '</a>'
        }), cardTitle && React.createElement(RichText.Content, {
          tagName: "h3",
          className: "card-title",
          value: '<a href="' + cardUrl + '" class="card-link">' + cardTitle + '</a>'
        }), cardContent && React.createElement(RichText.Content, {
          tagName: "p",
          className: "card-text",
          value: cardContent
        }), buttonText && React.createElement(RichText.Content, {
          tagName: "a",
          className: "btn btn-primary btn-tn icon",
          value: buttonText + '<span class="svgicon-default">' + arrow + '</span>',
          href: cardUrl
        })));
      }
    });
  }
}

},{"../infobox/components/infobox":31,"./components/card":14,"./components/icon":15,"./components/inspector":16,"classnames":60}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Icon Grid wrapper Component.
 */

class IconGridContainer extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = 'icon-grid-with-text';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-icon-grid-container') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = IconGridContainer;

},{}],19:[function(require,module,exports){
"use strict";

var _iconGridContainer = _interopRequireDefault(require("./components/icon-grid-container"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = _interopRequireDefault(require("../infobox/components/icon"));

var _infobox = _interopRequireDefault(require("../infobox/components/infobox"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
} // Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  InnerBlocks,
  MediaUpload
} = wp.editor; // Register components

const {
  IconButton
} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindIconGridContainer extends Component {
  render() {
    // Setup the attributes.
    const {
      attributes: {
        itemTitle,
        itemImage,
        itemImageData
      },
      isSelected,
      className,
      setAttributes
    } = this.props;
    const ALLOWED_BLOCKS = ['inclind-blocks/inclind-icon-grid-item'];

    const onSelectImage = (media, field) => {
      setAttributes({
        [field]: media.url,
        [`${field}Data`]: getMediaAttrs(media)
      });
    };

    function getMediaAttrs(media) {
      if (media && media.data) {
        return Object.keys(media.data).reduce((d, key) => {
          d[`data-${key.toLowerCase().replace(/[^a-z0-9]/g, '-')}`] = media.data[key];
          return d;
        }, {});
      }

      return {};
    }

    return [// Show the block markup in the editor.
    React.createElement(_iconGridContainer.default, this.props, React.createElement(RichText, {
      tagName: "h2",
      placeholder: __("Item Title", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemTitle,
      className: (0, _classnames.default)('item-title', 'emb-center'),
      onChange: value => this.props.setAttributes({
        itemTitle: value
      })
    }), React.createElement(MediaUpload, {
      allowedTypes: ['image'],
      onSelect: media => onSelectImage(media, 'itemImage'),
      render: ({
        open
      }) => React.createElement(IconButton, {
        className: "components-toolbar__control",
        label: __('Edit image'),
        icon: "edit",
        onClick: open
      })
    }), React.createElement("img", _extends({
      src: itemImage
    }, itemImageData)), React.createElement(InnerBlocks, {
      allowedBlocks: ALLOWED_BLOCKS
    }))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-icon-grid-container') && blocks[category.slug + '/inclind-icon-grid-container']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-icon-grid-container', {
      title: __('Icon Grid Container', 'inclind-icon-grid-container'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('icon', 'inclind-icon-grid-container'), __('inclind', 'inclind-icon-grid-container'), __('grid container', 'inclind-icon-grid-container')],
      attributes: {
        itemTitle: {
          selector: '.item-title',
          type: 'string'
        },
        itemImage: {
          type: 'string'
        },
        itemImageData: {
          type: 'object',
          default: {}
        }
      },
      // Render the block components.
      edit: InclindIconGridContainer,
      // Save the attributes and markup.
      save: function (props) {
        const {
          itemTitle,
          itemImage,
          itemImageData
        } = props.attributes; // Save the block markup for the front end.

        return React.createElement(_iconGridContainer.default, props, React.createElement("div", {
          className: "container"
        }, React.createElement("div", {
          className: "row text-center"
        }, itemTitle && React.createElement(RichText.Content, {
          tagName: "h2",
          className: "item-title emb-center",
          value: itemTitle
        }), React.createElement(InnerBlocks.Content, null)), React.createElement("div", {
          className: "img img-bg"
        }, React.createElement("img", _extends({
          src: itemImage,
          className: "card-img-top"
        }, itemImageData)))));
      }
    });
  }
}

},{"../infobox/components/icon":30,"../infobox/components/infobox":31,"./components/icon-grid-container":18,"classnames":60}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Icon Grid Item wrapper Component.
 */

class IconGridItem extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = 'col-sm-12 col-md';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-icon-grid-item') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = IconGridItem;

},{}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const icon = {
  'clock': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    "enable-background": "new 0 0 512 512",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("path", {
    d: "M403.1,108.9c-81.2-81.2-212.9-81.2-294.2,0c-81.3,81.2-81.2,212.9,0,294.2c81.2,81.2,212.9,81.2,294.2,0 C484.3,321.9,484.3,190.1,403.1,108.9z M386.6,162.1c7.6-4.4,17.5-1.8,21.9,5.9c4.4,7.6,1.8,17.5-5.9,21.9 c-7.6,4.4-17.5,1.8-21.9-5.9C376.3,176.4,378.9,166.5,386.6,162.1z M80,256c0-8.8,7.2-16,16-16s16,7.2,16,16s-7.2,16-16,16 S80,264.8,80,256z M125.4,349.9c-7.6,4.4-17.5,1.8-21.9-5.9c-4.4-7.6-1.8-17.5,5.9-21.9c7.6-4.4,17.5-1.8,21.9,5.9 C135.7,335.6,133.1,345.5,125.4,349.9z M131.3,184c-4.4,7.6-14.2,10.3-21.9,5.9c-7.6-4.4-10.3-14.2-5.9-21.9 c4.4-7.6,14.2-10.3,21.9-5.9C133.1,166.5,135.7,176.4,131.3,184z M168,103.6c7.6-4.4,17.5-1.8,21.9,5.9c4.4,7.6,1.8,17.5-5.9,21.9 s-17.5,1.8-21.9-5.9C157.7,117.8,160.4,108,168,103.6z M160.2,214.3l15.6-26.6l95.2,56.9V384h-31V260.6L160.2,214.3z M189.9,402.6 c-4.4,7.6-14.2,10.3-21.9,5.9s-10.3-14.2-5.9-21.9c4.4-7.6,14.2-10.3,21.9-5.9C191.6,385.1,194.3,394.9,189.9,402.6z M256,432 c-8.8,0-16-7.2-16-16s7.2-16,16-16s16,7.2,16,16S264.8,432,256,432z M256,112c-8.8,0-16-7.2-16-16c0-8.8,7.2-16,16-16s16,7.2,16,16 C272,104.8,264.8,112,256,112z M344,408.4c-7.6,4.4-17.5,1.8-21.9-5.9c-4.4-7.6-1.8-17.5,5.9-21.9c7.6-4.4,17.5-1.8,21.9,5.9 C354.3,394.2,351.6,404,344,408.4z M349.9,125.4c-4.4,7.6-14.2,10.3-21.9,5.9s-10.3-14.2-5.9-21.9c4.4-7.6,14.2-10.3,21.9-5.9 S354.3,117.8,349.9,125.4z M408.4,344c-4.4,7.6-14.2,10.3-21.9,5.9c-7.6-4.4-10.3-14.2-5.9-21.9c4.4-7.6,14.2-10.3,21.9-5.9 C410.2,326.5,412.8,336.4,408.4,344z M416,272c-8.8,0-16-7.2-16-16s7.2-16,16-16c8.8,0,16,7.2,16,16S424.8,272,416,272z"
  }))),
  'flame': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("path", {
    d: "M220.1,48c29,134.6-109.1,131.9-108.1,267.4c0.8,111,118.4,148.6,144.5,148.6c26.1,0,134.8-23.6,143.1-148.6 C406.7,209,317.9,107.4,220.1,48z M294.4,402.7c-10.2,38.9-66,39-76.4,0.1c-1.5-5.6-2.4-11.5-2.4-17.5c0-41,40.6-88.3,40.6-88.3 s40.4,47.3,40.4,88.3C296.7,391.3,295.9,397.1,294.4,402.7z"
  }))),
  'snowflake': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    "enable-background": "new 0 0 512 512",
    "xml:space": "preserve"
  }, React.createElement("polygon", {
    points: "461.4,298.5 453.1,267.6 365.1,291.2 304.7,256.3 365.1,221.4 453.1,245 461.4,214.1 404.3,198.8 462,165.5 438,124 381.4,156.7 396.7,99.6 365.8,91.3 342.2,179.3 280,215.2 280,144.1 344.5,79.7 321.8,57.1 280,98.9 280,32 232,32 232,97.6 190.3,55.9 167.7,78.5 232,142.9 232,214.3 171.3,179.3 147.7,91.3 116.8,99.6 132.1,156.7 74.4,123.3 50.4,164.9 107.1,197.6 50,212.9 58.3,243.8 146.2,220.2 208.8,256.3 146.2,292.5 58.3,268.9 50,299.8 107.1,315.1 50.4,347.8 74.4,389.3 132.1,356 116.8,413 147.7,421.3 171.3,333.4 232,298.3 232,369.2 167.7,433.6 190.3,456.2 232,414.4 232,480 280,480 280,413.2 321.9,454.9 344.4,432.3 280,368 280,297.4 342.2,333.4 365.8,421.3 396.7,413 381.4,356 438,388.7 462,347.1 404.3,313.8 "
  })),
  'sun': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("g", null, React.createElement("path", {
    d: "M256,387c-8.5,0-15.4,6.9-15.4,15.4v46.2c0,8.5,6.9,15.4,15.4,15.4s15.4-6.9,15.4-15.4v-46.2 C271.4,393.9,264.5,387,256,387z"
  }), React.createElement("path", {
    d: "M256,48c-8.5,0-15.4,6.9-15.4,15.4v46.2c0,8.5,6.9,15.4,15.4,15.4s15.4-6.9,15.4-15.4V63.4C271.4,54.9,264.5,48,256,48z"
  }), React.createElement("path", {
    d: "M125,256c0-8.5-6.9-15.4-15.4-15.4H63.4c-8.5,0-15.4,6.9-15.4,15.4c0,8.5,6.9,15.4,15.4,15.4h46.2 C118.1,271.4,125,264.5,125,256z"
  }), React.createElement("path", {
    d: "M448.6,240.6h-46.2c-8.5,0-15.4,6.9-15.4,15.4c0,8.5,6.9,15.4,15.4,15.4h46.2c8.5,0,15.4-6.9,15.4-15.4 C464,247.5,457.1,240.6,448.6,240.6z"
  }), React.createElement("path", {
    d: "M152.5,344.1c-4.1,0-8,1.6-10.9,4.5l-32.7,32.7c-2.9,2.9-4.5,6.8-4.5,10.9s1.6,8,4.5,10.9c2.9,2.9,6.8,4.5,10.9,4.5 c4.1,0,8-1.6,10.9-4.5l32.7-32.7c6-6,6-15.8,0-21.8C160.5,345.7,156.6,344.1,152.5,344.1z"
  }), React.createElement("path", {
    d: "M359.5,167.9c4.1,0,8-1.6,10.9-4.5l32.7-32.7c2.9-2.9,4.5-6.8,4.5-10.9s-1.6-8-4.5-10.9c-2.9-2.9-6.8-4.5-10.9-4.5 c-4.1,0-8,1.6-10.9,4.5l-32.7,32.7c-2.9,2.9-4.5,6.8-4.5,10.9s1.6,8,4.5,10.9C351.5,166.3,355.4,167.9,359.5,167.9z"
  }), React.createElement("path", {
    d: "M130.7,108.9c-2.9-2.9-6.8-4.5-10.9-4.5c-4.1,0-8,1.6-10.9,4.5c-2.9,2.9-4.5,6.8-4.5,10.9c0,4.1,1.6,8,4.5,10.9l32.7,32.7 c2.9,2.9,6.8,4.5,10.9,4.5c4.1,0,8-1.6,10.9-4.5c2.9-2.9,4.5-6.8,4.5-10.9s-1.6-8-4.5-10.9L130.7,108.9z"
  }), React.createElement("path", {
    d: "M370.4,348.6c-2.9-2.9-6.8-4.5-10.9-4.5c-4.1,0-8,1.6-10.9,4.5c-6,6-6,15.8,0,21.8l32.7,32.7c2.9,2.9,6.8,4.5,10.9,4.5 c4.1,0,8-1.6,10.9-4.5c2.9-2.9,4.5-6.8,4.5-10.9s-1.6-8-4.5-10.9L370.4,348.6z"
  })), React.createElement("path", {
    d: "M256,160c-52.9,0-96,43.1-96,96s43.1,96,96,96c52.9,0,96-43.1,96-96S308.9,160,256,160L256,160z"
  }))),
  'switch': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("circle", {
    cx: "144",
    cy: "368",
    r: "42"
  }), React.createElement("path", {
    d: "M367.5,272h-223C91.2,272,48,315.2,48,368.5S91.2,464,144.5,464h223c53.3,0,96.5-42.2,96.5-95.5S420.8,272,367.5,272z M144,432c-35.3,0-64-28.7-64-64c0-35.3,28.7-64,64-64s64,28.7,64,64C208,403.3,179.3,432,144,432z"
  }), React.createElement("circle", {
    cx: "368",
    cy: "144",
    r: "42"
  }), React.createElement("path", {
    d: "M144.5,240h223c53.3,0,96.5-42.2,96.5-95.5S420.8,48,367.5,48h-223C91.2,48,48,91.2,48,144.5S91.2,240,144.5,240z M368,80 c35.3,0,64,28.7,64,64c0,35.3-28.7,64-64,64s-64-28.7-64-64C304,108.7,332.7,80,368,80z"
  })))
};
var _default = icon;
exports.default = _default;

},{}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Internationalization

const __ = Drupal.t; // Setup the block.

const {
  Component
} = wp.element; // Import block components.

const {
  SelectControl,
  PanelBody
} = wp.components; // Import Inspector components.

const {
  InspectorControls
} = wp.editor;
/**
 * Create an Inspector Controls wrapper Component.
 */

class Inspector extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    // Setup the attributes
    const {
      itemIcon
    } = this.props.attributes;
    const iconOptions = [{
      value: '',
      label: __('None')
    }, {
      value: 'clock',
      label: __('Clock')
    }, {
      value: 'flame',
      label: __('Flame')
    }, {
      value: 'snowflake',
      label: __('Snowflake')
    }, {
      value: 'sun',
      label: __('Sun')
    }, {
      value: 'switch',
      label: __('Switch')
    }];
    return React.createElement(InspectorControls, {
      key: "inspector"
    }, React.createElement(PanelBody, null, React.createElement(SelectControl, {
      label: __('Icon'),
      description: __('Choose the icon for this item.'),
      options: iconOptions,
      value: itemIcon,
      onChange: value => this.props.setAttributes({
        itemIcon: value
      })
    })));
  }

}

exports.default = Inspector;

},{}],23:[function(require,module,exports){
"use strict";

var _classnames = _interopRequireDefault(require("classnames"));

var _inspector = _interopRequireDefault(require("./components/inspector"));

var _iconGridItem = _interopRequireDefault(require("./components/icon-grid-item"));

var _icon = _interopRequireDefault(require("./components/icon"));

var _iconGridContainer = _interopRequireDefault(require("../icon-grid-container/components/icon-grid-container"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  BlockControls
} = wp.editor; // Register components

const {} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindIconGridItem extends Component {
  render() {
    // Setup the attributes.
    const {
      attributes: {
        itemContent,
        itemIcon
      },
      isSelected,
      className,
      setAttributes
    } = this.props;
    return [// Show the alignment toolbar on focus.
    React.createElement(BlockControls, {
      key: "controls"
    }), // Show the block controls on focus.
    React.createElement(_inspector.default, this.props), // Show the block markup in the editor.
    React.createElement(_iconGridItem.default, this.props, React.createElement(RichText, {
      tagName: "p",
      placeholder: __("Item Content...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemContent,
      className: (0, _classnames.default)('icon-grid-item-content'),
      onChange: value => this.props.setAttributes({
        itemContent: value
      })
    }))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-icon-grid-container') && blocks[category.slug + '/inclind-icon-grid-container']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-icon-grid-item', {
      title: __('Icon Grid Item', 'inclind-icon-grid-item'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('icon', 'inclind-icon-grid-item'), __('grid', 'inclind-icon-grid-item'), __('inclind', 'inclind-icon-grid-item')],
      attributes: {
        itemIcon: {
          type: 'string',
          default: ''
        },
        itemContent: {
          selector: '.icon-grid-item-content',
          type: 'array',
          source: 'children'
        }
      },
      // Render the block components.
      edit: InclindIconGridItem,
      // Save the attributes and markup.
      save: function (props) {
        const {
          itemContent,
          itemIcon
        } = props.attributes;
        const icon = itemIcon !== undefined && itemIcon !== '' && _icon.default[itemIcon] !== undefined ? _icon.default[itemIcon] : ''; // Save the block markup for the front end.

        return React.createElement(_iconGridItem.default, props, icon && React.createElement("span", {
          className: (0, _classnames.default)('svgicon-default', itemIcon)
        }, icon), itemContent && React.createElement(RichText.Content, {
          tagName: "p",
          className: "icon-grid-item-content",
          value: itemContent
        }));
      }
    });
  }
}

},{"../icon-grid-container/components/icon-grid-container":18,"./components/icon":21,"./components/icon-grid-item":20,"./components/inspector":22,"classnames":60}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Icon Link wrapper Component.
 */

class IconLink extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = '';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-icon-link') {
      className = className + '' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = IconLink;

},{}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const icon = {
  'clock': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    "enable-background": "new 0 0 512 512",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("path", {
    d: "M403.1,108.9c-81.2-81.2-212.9-81.2-294.2,0c-81.3,81.2-81.2,212.9,0,294.2c81.2,81.2,212.9,81.2,294.2,0 C484.3,321.9,484.3,190.1,403.1,108.9z M386.6,162.1c7.6-4.4,17.5-1.8,21.9,5.9c4.4,7.6,1.8,17.5-5.9,21.9 c-7.6,4.4-17.5,1.8-21.9-5.9C376.3,176.4,378.9,166.5,386.6,162.1z M80,256c0-8.8,7.2-16,16-16s16,7.2,16,16s-7.2,16-16,16 S80,264.8,80,256z M125.4,349.9c-7.6,4.4-17.5,1.8-21.9-5.9c-4.4-7.6-1.8-17.5,5.9-21.9c7.6-4.4,17.5-1.8,21.9,5.9 C135.7,335.6,133.1,345.5,125.4,349.9z M131.3,184c-4.4,7.6-14.2,10.3-21.9,5.9c-7.6-4.4-10.3-14.2-5.9-21.9 c4.4-7.6,14.2-10.3,21.9-5.9C133.1,166.5,135.7,176.4,131.3,184z M168,103.6c7.6-4.4,17.5-1.8,21.9,5.9c4.4,7.6,1.8,17.5-5.9,21.9 s-17.5,1.8-21.9-5.9C157.7,117.8,160.4,108,168,103.6z M160.2,214.3l15.6-26.6l95.2,56.9V384h-31V260.6L160.2,214.3z M189.9,402.6 c-4.4,7.6-14.2,10.3-21.9,5.9s-10.3-14.2-5.9-21.9c4.4-7.6,14.2-10.3,21.9-5.9C191.6,385.1,194.3,394.9,189.9,402.6z M256,432 c-8.8,0-16-7.2-16-16s7.2-16,16-16s16,7.2,16,16S264.8,432,256,432z M256,112c-8.8,0-16-7.2-16-16c0-8.8,7.2-16,16-16s16,7.2,16,16 C272,104.8,264.8,112,256,112z M344,408.4c-7.6,4.4-17.5,1.8-21.9-5.9c-4.4-7.6-1.8-17.5,5.9-21.9c7.6-4.4,17.5-1.8,21.9,5.9 C354.3,394.2,351.6,404,344,408.4z M349.9,125.4c-4.4,7.6-14.2,10.3-21.9,5.9s-10.3-14.2-5.9-21.9c4.4-7.6,14.2-10.3,21.9-5.9 S354.3,117.8,349.9,125.4z M408.4,344c-4.4,7.6-14.2,10.3-21.9,5.9c-7.6-4.4-10.3-14.2-5.9-21.9c4.4-7.6,14.2-10.3,21.9-5.9 C410.2,326.5,412.8,336.4,408.4,344z M416,272c-8.8,0-16-7.2-16-16s7.2-16,16-16c8.8,0,16,7.2,16,16S424.8,272,416,272z"
  }))),
  'flame': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("path", {
    d: "M220.1,48c29,134.6-109.1,131.9-108.1,267.4c0.8,111,118.4,148.6,144.5,148.6c26.1,0,134.8-23.6,143.1-148.6 C406.7,209,317.9,107.4,220.1,48z M294.4,402.7c-10.2,38.9-66,39-76.4,0.1c-1.5-5.6-2.4-11.5-2.4-17.5c0-41,40.6-88.3,40.6-88.3 s40.4,47.3,40.4,88.3C296.7,391.3,295.9,397.1,294.4,402.7z"
  }))),
  'ios-document': React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 512 512"
  }, React.createElement("path", {
    d: "M312 155h91c2.8 0 5-2.2 5-5 0-8.9-3.9-17.3-10.7-22.9L321 63.5c-5.8-4.8-13-7.4-20.6-7.4-4.1 0-7.4 3.3-7.4 7.4V136c0 10.5 8.5 19 19 19z"
  }), React.createElement("path", {
    d: "M267 136V56H136c-17.6 0-32 14.4-32 32v336c0 17.6 14.4 32 32 32h240c17.6 0 32-14.4 32-32V181h-96c-24.8 0-45-20.2-45-45z"
  })),
  'ios-information': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("path", {
    d: "M256,48C141.1,48,48,141.1,48,256s93.1,208,208,208c114.9,0,208-93.1,208-208S370.9,48,256,48z M275,352h-38.2V207.9H275 V352z M255.9,192.2c-11.3,0-20.5-8.6-20.5-20s9.3-19.9,20.5-19.9c11.4,0,20.7,8.5,20.7,19.9S267.3,192.2,255.9,192.2z"
  }))),
  'ios-mail': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("path", {
    d: "M460.6,147.3L353,256.9c-0.8,0.8-0.8,2,0,2.8l75.3,80.2c5.1,5.1,5.1,13.3,0,18.4c-2.5,2.5-5.9,3.8-9.2,3.8 s-6.7-1.3-9.2-3.8l-75-79.9c-0.8-0.8-2.1-0.8-2.9,0l-18.3,18.6c-15.3,15.5-35.6,24.1-57.4,24.2c-22.1,0.1-43.1-9.2-58.6-24.9 l-17.6-17.9c-0.8-0.8-2.1-0.8-2.9,0l-75,79.9c-2.5,2.5-5.9,3.8-9.2,3.8s-6.7-1.3-9.2-3.8c-5.1-5.1-5.1-13.3,0-18.4l75.3-80.2 c0.7-0.8,0.7-2,0-2.8L51.4,147.3c-1.3-1.3-3.4-0.4-3.4,1.4L48,368c0,17.6,14.4,32,32,32h352c17.6,0,32-14.4,32-32l0-219.3 C464,146.9,461.8,146.1,460.6,147.3z"
  }), React.createElement("path", {
    d: "M256,295.1c14.8,0,28.7-5.8,39.1-16.4L452,119c-5.5-4.4-12.3-7-19.8-7H79.9c-7.5,0-14.4,2.6-19.8,7l156.9,159.7 C227.3,289.2,241.2,295.1,256,295.1z"
  }))),
  'ios-phone-portrait': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("path", {
    d: "M335.7,32H177.1C158.8,32,144,46.6,144,64.9v381c0,18.4,14.8,34.1,33.1,34.1h158.5c18.3,0,32.3-15.7,32.3-34.1v-381 C368,46.6,354,32,335.7,32z M241,55h30c2.2,0,4,1.8,4,4c0,2.2-1.8,4-4,4h-30c-2.2,0-4-1.8-4-4C237,56.8,238.8,55,241,55z M256.5,465c-9.6,0-17.4-7.8-17.4-17.4c0-9.6,7.8-17.4,17.4-17.4c9.6,0,17.4,7.8,17.4,17.4C273.9,457.2,266.1,465,256.5,465z M350,416H162c-1.1,0-2-0.9-2-2V85c0-1.1,0.9-2,2-2h188c1.1,0,2,0.9,2,2v329C352,415.1,351.1,416,350,416z"
  }))),
  'snowflake': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    "enable-background": "new 0 0 512 512",
    "xml:space": "preserve"
  }, React.createElement("polygon", {
    points: "461.4,298.5 453.1,267.6 365.1,291.2 304.7,256.3 365.1,221.4 453.1,245 461.4,214.1 404.3,198.8 462,165.5 438,124 381.4,156.7 396.7,99.6 365.8,91.3 342.2,179.3 280,215.2 280,144.1 344.5,79.7 321.8,57.1 280,98.9 280,32 232,32 232,97.6 190.3,55.9 167.7,78.5 232,142.9 232,214.3 171.3,179.3 147.7,91.3 116.8,99.6 132.1,156.7 74.4,123.3 50.4,164.9 107.1,197.6 50,212.9 58.3,243.8 146.2,220.2 208.8,256.3 146.2,292.5 58.3,268.9 50,299.8 107.1,315.1 50.4,347.8 74.4,389.3 132.1,356 116.8,413 147.7,421.3 171.3,333.4 232,298.3 232,369.2 167.7,433.6 190.3,456.2 232,414.4 232,480 280,480 280,413.2 321.9,454.9 344.4,432.3 280,368 280,297.4 342.2,333.4 365.8,421.3 396.7,413 381.4,356 438,388.7 462,347.1 404.3,313.8 "
  })),
  'sun': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("g", null, React.createElement("path", {
    d: "M256,387c-8.5,0-15.4,6.9-15.4,15.4v46.2c0,8.5,6.9,15.4,15.4,15.4s15.4-6.9,15.4-15.4v-46.2 C271.4,393.9,264.5,387,256,387z"
  }), React.createElement("path", {
    d: "M256,48c-8.5,0-15.4,6.9-15.4,15.4v46.2c0,8.5,6.9,15.4,15.4,15.4s15.4-6.9,15.4-15.4V63.4C271.4,54.9,264.5,48,256,48z"
  }), React.createElement("path", {
    d: "M125,256c0-8.5-6.9-15.4-15.4-15.4H63.4c-8.5,0-15.4,6.9-15.4,15.4c0,8.5,6.9,15.4,15.4,15.4h46.2 C118.1,271.4,125,264.5,125,256z"
  }), React.createElement("path", {
    d: "M448.6,240.6h-46.2c-8.5,0-15.4,6.9-15.4,15.4c0,8.5,6.9,15.4,15.4,15.4h46.2c8.5,0,15.4-6.9,15.4-15.4 C464,247.5,457.1,240.6,448.6,240.6z"
  }), React.createElement("path", {
    d: "M152.5,344.1c-4.1,0-8,1.6-10.9,4.5l-32.7,32.7c-2.9,2.9-4.5,6.8-4.5,10.9s1.6,8,4.5,10.9c2.9,2.9,6.8,4.5,10.9,4.5 c4.1,0,8-1.6,10.9-4.5l32.7-32.7c6-6,6-15.8,0-21.8C160.5,345.7,156.6,344.1,152.5,344.1z"
  }), React.createElement("path", {
    d: "M359.5,167.9c4.1,0,8-1.6,10.9-4.5l32.7-32.7c2.9-2.9,4.5-6.8,4.5-10.9s-1.6-8-4.5-10.9c-2.9-2.9-6.8-4.5-10.9-4.5 c-4.1,0-8,1.6-10.9,4.5l-32.7,32.7c-2.9,2.9-4.5,6.8-4.5,10.9s1.6,8,4.5,10.9C351.5,166.3,355.4,167.9,359.5,167.9z"
  }), React.createElement("path", {
    d: "M130.7,108.9c-2.9-2.9-6.8-4.5-10.9-4.5c-4.1,0-8,1.6-10.9,4.5c-2.9,2.9-4.5,6.8-4.5,10.9c0,4.1,1.6,8,4.5,10.9l32.7,32.7 c2.9,2.9,6.8,4.5,10.9,4.5c4.1,0,8-1.6,10.9-4.5c2.9-2.9,4.5-6.8,4.5-10.9s-1.6-8-4.5-10.9L130.7,108.9z"
  }), React.createElement("path", {
    d: "M370.4,348.6c-2.9-2.9-6.8-4.5-10.9-4.5c-4.1,0-8,1.6-10.9,4.5c-6,6-6,15.8,0,21.8l32.7,32.7c2.9,2.9,6.8,4.5,10.9,4.5 c4.1,0,8-1.6,10.9-4.5c2.9-2.9,4.5-6.8,4.5-10.9s-1.6-8-4.5-10.9L370.4,348.6z"
  })), React.createElement("path", {
    d: "M256,160c-52.9,0-96,43.1-96,96s43.1,96,96,96c52.9,0,96-43.1,96-96S308.9,160,256,160L256,160z"
  }))),
  'switch': React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 512 512",
    style: "enable-background:new 0 0 512 512;",
    "xml:space": "preserve"
  }, React.createElement("g", null, React.createElement("circle", {
    cx: "144",
    cy: "368",
    r: "42"
  }), React.createElement("path", {
    d: "M367.5,272h-223C91.2,272,48,315.2,48,368.5S91.2,464,144.5,464h223c53.3,0,96.5-42.2,96.5-95.5S420.8,272,367.5,272z M144,432c-35.3,0-64-28.7-64-64c0-35.3,28.7-64,64-64s64,28.7,64,64C208,403.3,179.3,432,144,432z"
  }), React.createElement("circle", {
    cx: "368",
    cy: "144",
    r: "42"
  }), React.createElement("path", {
    d: "M144.5,240h223c53.3,0,96.5-42.2,96.5-95.5S420.8,48,367.5,48h-223C91.2,48,48,91.2,48,144.5S91.2,240,144.5,240z M368,80 c35.3,0,64,28.7,64,64c0,35.3-28.7,64-64,64s-64-28.7-64-64C304,108.7,332.7,80,368,80z"
  })))
};
var _default = icon;
exports.default = _default;

},{}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Internationalization

const {
  __
} = wp.i18n; // Setup the block.

const {
  Component
} = wp.element; // Import block components.

const {
  SelectControl,
  PanelBody
} = wp.components; // Import Inspector components.

const {
  InspectorControls
} = wp.editor;
/**
 * Create an Inspector Controls wrapper Component.
 */

class Inspector extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    // Setup the attributes
    const {
      itemIcon
    } = this.props.attributes;
    const iconOptions = [{
      value: '',
      label: __('None')
    }, {
      value: 'ios-document',
      label: __('Document')
    }, {
      value: 'ios-information',
      label: __('Information')
    }, {
      value: 'ios-mail',
      label: __('Mail')
    }, {
      value: 'ios-phone-portrait',
      label: __('Phone')
    }, {
      value: 'clock',
      label: __('Clock')
    }, {
      value: 'flame',
      label: __('Flame')
    }, {
      value: 'snowflake',
      label: __('Snowflake')
    }, {
      value: 'sun',
      label: __('Sun')
    }, {
      value: 'switch',
      label: __('Switch')
    }];
    return React.createElement(InspectorControls, {
      key: "inspector"
    }, React.createElement(PanelBody, null, React.createElement(SelectControl, {
      label: __('Icon'),
      description: __('Choose the icon for this link.'),
      options: iconOptions,
      value: itemIcon,
      onChange: value => this.props.setAttributes({
        itemIcon: value
      })
    })));
  }

}

exports.default = Inspector;

},{}],27:[function(require,module,exports){
"use strict";

var _classnames = _interopRequireDefault(require("classnames"));

var _inspector = _interopRequireDefault(require("./components/inspector"));

var _iconLink = _interopRequireDefault(require("./components/icon-link"));

var _icon = _interopRequireDefault(require("./components/icon"));

var _infobox = _interopRequireDefault(require("../infobox/components/infobox"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  BlockControls,
  URLInput
} = wp.editor; // Register components

const {} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindIconLink extends Component {
  render() {
    // Setup the attributes.
    const {
      attributes: {
        itemContent,
        itemIcon,
        itemLink
      },
      isSelected,
      className,
      setAttributes
    } = this.props;
    return [// Show the alignment toolbar on focus.
    React.createElement(BlockControls, {
      key: "controls"
    }), // Show the block controls on focus.
    React.createElement(_inspector.default, this.props), // Show the block markup in the editor.
    React.createElement(_iconLink.default, this.props, React.createElement(RichText, {
      tagName: "p",
      placeholder: __("Link Text...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemContent,
      className: (0, _classnames.default)('icon-link'),
      onChange: value => this.props.setAttributes({
        itemContent: value
      })
    })), React.createElement("form", {
      key: "form-link",
      onSubmit: event => event.preventDefault()
    }, React.createElement(URLInput, {
      value: itemLink,
      onChange: value => setAttributes({
        itemLink: value
      })
    }))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-icon-link') && blocks[category.slug + '/inclind-icon-link']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-icon-link', {
      title: __('Icon Link', 'inclind-icon-link'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('icon', 'inclind-icon-link'), __('link', 'inclind-icon-link'), __('inclind', 'inclind-icon-link')],
      attributes: {
        itemIcon: {
          type: 'string',
          default: ''
        },
        itemContent: {
          type: 'string',
          default: ''
        },
        itemLink: {
          type: 'string',
          source: 'attribute',
          selector: '.icon-link',
          attribute: 'href'
        }
      },
      // Render the block components.
      edit: InclindIconLink,
      // Save the attributes and markup.
      save: function (props) {
        const {
          itemContent,
          itemIcon,
          itemLink
        } = props.attributes;
        const icon = itemIcon !== undefined && itemIcon !== '' && _icon.default[itemIcon] !== undefined ? _icon.default[itemIcon] : ''; // Save the block markup for the front end.

        return React.createElement(_iconLink.default, props, icon && React.createElement("span", {
          className: (0, _classnames.default)('svgicon-default', 'align-middle', itemIcon)
        }, icon), itemContent && itemLink && React.createElement(RichText.Content, {
          tagName: "a",
          href: itemLink,
          className: "icon-link",
          value: itemContent
        }));
      }
    });
  }
}

},{"../infobox/components/infobox":31,"./components/icon":25,"./components/icon-link":24,"./components/inspector":26,"classnames":60}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a AdvancedBtn wrapper Component.
 */

class Infobox extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = '';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-infobox') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = Infobox;

},{}],29:[function(require,module,exports){
"use strict";

var _infobox = _interopRequireDefault(require("./components/infobox"));

var _icons = _interopRequireDefault(require("../../icons"));

var _map = _interopRequireDefault(require("lodash/map"));

var _hexToRgba = _interopRequireDefault(require("../../hex-to-rgba"));

var _genicon = _interopRequireDefault(require("../../genicon"));

var _svgicons = _interopRequireDefault(require("../../svgicons"));

var _svgiconsnames = _interopRequireDefault(require("../../svgiconsnames"));

var _reactFonticonpicker = _interopRequireDefault(require("@fonticonpicker/react-fonticonpicker"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
} // import FaIco from '../../faicons';
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component,
  Fragment
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  InnerBlocks,
  BlockAlignmentToolbar,
  InspectorControls,
  BlockControls,
  AlignmentToolbar,
  PanelColorSettings,
  MediaUpload,
  URLInput,
  RichText,
  MediaPlaceholder
} = wp.blockEditor; // Register components

const {
  Button,
  IconButton,
  ButtonGroup,
  TabPanel,
  Dashicon,
  PanelBody,
  RangeControl,
  Toolbar,
  TextControl,
  ToggleControl,
  SelectControl,
  BaseControl
} = wp.components;
const {
  dispatch,
  select
} = wp.data;
/**
 * This allows for checking to see if the block needs to generate a new ID.
 */

const ktinfoboxUniqueIDs = [];

class InclindInfobox extends Component {
  constructor() {
    super(...arguments);
    this.showSettings = this.showSettings.bind(this);
    this.state = {
      containerPaddingControl: 'linked',
      containerBorderControl: 'linked',
      showPreset: false,
      user: 'admin',
      settings: {}
    };
  }

  componentDidMount() {
    if (!this.props.attributes.uniqueID) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktinfoboxUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else if (ktinfoboxUniqueIDs.includes(this.props.attributes.uniqueID)) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktinfoboxUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else {
      ktinfoboxUniqueIDs.push(this.props.attributes.uniqueID);
    }

    if (this.props.attributes.containerBorderWidth[0] === this.props.attributes.containerBorderWidth[1] && this.props.attributes.containerBorderWidth[0] === this.props.attributes.containerBorderWidth[2] && this.props.attributes.containerBorderWidth[0] === this.props.attributes.containerBorderWidth[3]) {
      this.setState({
        containerBorderControl: 'linked'
      });
    } else {
      this.setState({
        containerBorderControl: 'individual'
      });
    }

    if (this.props.attributes.containerPadding[0] === this.props.attributes.containerPadding[1] && this.props.attributes.containerPadding[0] === this.props.attributes.containerPadding[2] && this.props.attributes.containerPadding[0] === this.props.attributes.containerPadding[3]) {
      this.setState({
        containerPaddingControl: 'linked'
      });
    } else {
      this.setState({
        containerPaddingControl: 'individual'
      });
    }
  }

  showSettings(key) {
    let donot_allow = ['mediaSettings'];

    if (donot_allow.includes(key)) {
      return false;
    }

    return true;
  } // Render element while editing in Gutenberg:


  render() {
    const {
      attributes: {
        blockAlignment,
        backgroundType,
        backgroundColor,
        backgroundImage,
        backgroundImageData,
        backgroundImageUUID,
        overlayOpacity,
        overlayColor,
        margin,
        padding,
        contentWidth,
        uniqueID,
        link,
        linkProperty,
        target,
        hAlign,
        containerBackground,
        containerBorder,
        containerBorderWidth,
        containerBorderRadius,
        containerPadding,
        mediaType,
        mediaImage,
        mediaIcon,
        mediaStyle,
        mediaAlign,
        displayTitle,
        title,
        displayText,
        contentText,
        textColor,
        titleFont,
        textFont,
        displayLearnMore,
        learnMore,
        learnMoreStyles,
        containerBackgroundOpacity,
        containerBorderOpacity,
        mediaVAlign,
        mediaAlignMobile,
        mediaAlignTablet
      },
      className,
      setAttributes,
      isSelected
    } = this.props;
    const {
      containerBorderControl,
      containerPaddingControl
    } = this.state;
    const startlayoutOptions = [{
      key: 'skip',
      name: __('Skip'),
      icon: __('Skip')
    }, {
      key: 'simple',
      name: __('Simple'),
      icon: _icons.default.infoSimple
    }, {
      key: 'left',
      name: __('Align Left'),
      icon: _icons.default.infoLeft
    }, {
      key: 'bold',
      name: __('Bold Background'),
      icon: _icons.default.infoBackground
    }, {
      key: 'image',
      name: __('Circle Image'),
      icon: _icons.default.infoImage
    }];
    const hasImageBg = backgroundType === 'image';
    const containerStyle = {
      backgroundColor: !hasImageBg ? backgroundColor : '#2e358f',
      backgroundImage: hasImageBg && `url('${backgroundImage}')`,
      color: hasImageBg && 'white'
    };
    const overlayStyle = !hasImageBg ? {} : {
      display: 'block',
      backgroundColor: overlayColor || '#2e358f',
      opacity: parseInt(overlayOpacity, 10) / 100
    };
    const wrapperStyle = {
      maxWidth: contentWidth && `${contentWidth}px`
    };
    const classes = [// className,
    (0, _classnames.default)(`align${blockAlignment ? blockAlignment : 'none'}`), 'infobox p-4 mb-4 bg-primary text-' + hAlign];
    classes.push('has-overlay');
    classes.push('text-white');

    if (margin) {
      classes.push(`my-${margin}`);
    }

    if (padding) {
      classes.push(`py-${padding}`);
    }

    const vOptions = [{
      label: __('None'),
      value: ''
    }, {
      label: __('Small'),
      value: '3'
    }, {
      label: __('Medium'),
      value: '4'
    }, {
      label: __('Large'),
      value: '5'
    }];

    const onSelectImage = (media, field) => {
      const dataAttrs = {};
      let uuid = '';

      if (media.data) {
        if (media.data.hasOwnProperty('entity_uuid')) {
          uuid = media.data.entity_uuid;
        }

        dataAttrs[`${field}Data`] = Object.keys(media.data).reduce((result, key) => {
          result[`data-${key.replace('_', '-')}`] = media.data[key];
          return result;
        }, {});
      }

      setAttributes({
        [field]: media.url,
        [`${field}UUID`]: uuid,
        ...dataAttrs
      });
    };

    const onChangeTitle = value => {
      setAttributes({
        title: value
      });
    };

    const titleTagName = 'h' + titleFont[0].level;
    const ALLOWED_MEDIA_TYPES = ['image'];

    const onSelectMainImage = media => {
      saveMediaImage({
        id: media.id,
        url: media.url,
        alt: media.alt,
        width: media.width,
        height: media.height,
        maxWidth: media.width ? media.width : 50,
        subtype: media.subtype
      });
    };

    const changeImageSize = img => {
      saveMediaImage({
        url: img.value,
        width: img.width,
        height: img.height
      });
    };

    const clearImage = () => {
      saveMediaImage({
        id: '',
        url: '',
        alt: '',
        width: '',
        height: '',
        maxWidth: '',
        subtype: ''
      });
    };

    const onSelectFlipImage = media => {
      saveMediaImage({
        flipId: media.id,
        flipUrl: media.url,
        flipAlt: media.alt,
        flipWidth: media.width,
        flipHeight: media.height,
        flipSubtype: media.subtype
      });
    };

    const clearFlipImage = () => {
      saveMediaImage({
        flipId: '',
        flipUrl: '',
        flipAlt: '',
        flipWidth: '',
        flipHeight: '',
        flipSubtype: ''
      });
    };

    const changeFlipImageSize = img => {
      saveMediaImage({
        flipUrl: img.value,
        flipWidth: img.width,
        flipHeight: img.height
      });
    };

    const isSelectedClass = isSelected ? 'is-selected' : 'not-selected';

    const saveMediaImage = value => {
      const newUpdate = mediaImage.map((item, index) => {
        if (0 === index) {
          item = { ...item,
            ...value
          };
        }

        return item;
      });
      setAttributes({
        mediaImage: newUpdate
      });
    };

    const saveMediaIcon = value => {
      const newUpdate = mediaIcon.map((item, index) => {
        if (0 === index) {
          item = { ...item,
            ...value
          };
        }

        return item;
      });
      setAttributes({
        mediaIcon: newUpdate
      });
    };

    const saveMediaStyle = value => {
      const newUpdate = mediaStyle.map((item, index) => {
        if (0 === index) {
          item = { ...item,
            ...value
          };
        }

        return item;
      });
      setAttributes({
        mediaStyle: newUpdate
      });
    };

    const saveTitleFont = value => {
      const newUpdate = titleFont.map((item, index) => {
        if (0 === index) {
          item = { ...item,
            ...value
          };
        }

        return item;
      });
      setAttributes({
        titleFont: newUpdate
      });
    };

    const saveTextFont = value => {
      const newUpdate = textFont.map((item, index) => {
        if (0 === index) {
          item = { ...item,
            ...value
          };
        }

        return item;
      });
      setAttributes({
        textFont: newUpdate
      });
    };

    const saveLearnMoreStyles = value => {
      const newUpdate = learnMoreStyles.map((item, index) => {
        if (0 === index) {
          item = { ...item,
            ...value
          };
        }

        return item;
      });
      setAttributes({
        learnMoreStyles: newUpdate
      });
    };

    const renderCSS = React.createElement("style", null, mediaStyle[0].borderRadius ? `#kt-info-box${uniqueID} .kt-blocks-info-box-link-wrap .kt-blocks-info-box-media img, #kt-info-box${uniqueID} .kt-blocks-info-box-link-wrap .kt-blocks-info-box-media .editor-media-placeholder { border-radius: ${mediaStyle[0].borderRadius}px; }` : '', mediaStyle[0].hoverBackground ? `#kt-info-box${uniqueID} .kt-blocks-info-box-link-wrap:hover .kt-blocks-info-box-media { background: ${mediaStyle[0].hoverBackground} !important; }` : '');

    const renderSVG = svg => React.createElement(_genicon.default, {
      name: svg,
      icon: 'fa' === svg.substring(0, 2) ? FaIco[svg] : _svgicons.default[svg]
    });

    return React.createElement("div", {
      id: `kt-info-box${uniqueID}`,
      className: className
    }, renderCSS, React.createElement(BlockControls, {
      key: "controls"
    }, React.createElement(BlockAlignmentToolbar, {
      value: blockAlignment,
      controls: ['center', 'wide', 'full', 'left', 'right'],
      onChange: value => setAttributes({
        blockAlignment: value
      })
    }), 'image' === mediaType && mediaImage[0].url && React.createElement(Toolbar, null, React.createElement(MediaUpload, {
      onSelect: onSelectMainImage,
      type: "image",
      value: mediaImage[0].id,
      allowedTypes: ALLOWED_MEDIA_TYPES,
      render: ({
        open
      }) => React.createElement(IconButton, {
        className: "components-toolbar__control",
        label: __('Edit Media'),
        icon: "format-image",
        onClick: open
      })
    })), React.createElement(AlignmentToolbar, {
      value: hAlign,
      onChange: value => setAttributes({
        hAlign: value
      })
    })), this.showSettings('allSettings') && React.createElement(InspectorControls, null, React.createElement(PanelBody, null, React.createElement("div", {
      className: "kt-controls-link-wrap"
    }, React.createElement("h2", null, __('Link')), React.createElement(URLInput, {
      className: "kt-btn-link-input",
      value: link,
      onChange: value => setAttributes({
        link: value
      })
    })), React.createElement(SelectControl, {
      label: __('Link Target'),
      value: target,
      options: [{
        value: '_self',
        label: __('Same Window')
      }, {
        value: '_blank',
        label: __('New Window')
      }],
      onChange: value => setAttributes({
        target: value
      })
    }), React.createElement(SelectControl, {
      label: __('Link Content'),
      value: linkProperty,
      options: [{
        value: 'box',
        label: __('Entire Box')
      }, {
        value: 'learnmore',
        label: __('Only Learn More Text')
      }],
      onChange: value => setAttributes({
        linkProperty: value
      })
    })), this.showSettings('containerSettings') && React.createElement(PanelBody, {
      title: __('Container Settings'),
      initialOpen: false
    }, React.createElement(SelectControl, {
      label: __('Background Type'),
      value: backgroundType,
      options: [{
        label: __('Solid Color'),
        value: 'color'
      }, {
        label: __('Image'),
        value: 'image'
      }],
      onChange: value => setAttributes({
        backgroundType: value
      })
    }), hasImageBg && React.createElement(BaseControl, {
      label: __('Choose background image')
    }, React.createElement(MediaUpload, {
      allowedTypes: ['image'],
      onSelect: media => onSelectImage(media, 'backgroundImage'),
      render: ({
        open
      }) => React.createElement(IconButton, {
        className: "components-toolbar__control",
        label: __('Edit image'),
        icon: "format-image",
        onClick: open
      })
    }))), this.showSettings('mediaSettings') && React.createElement(PanelBody, {
      title: __('Media Settings'),
      initialOpen: false
    }, React.createElement(TabPanel, {
      className: "kt-inspect-tabs kt-spacer-tabs",
      activeClass: "active-tab",
      tabs: [{
        name: 'desk',
        title: React.createElement(Dashicon, {
          icon: "desktop"
        }),
        className: 'kt-desk-tab'
      }, {
        name: 'tablet',
        title: React.createElement(Dashicon, {
          icon: "tablet"
        }),
        className: 'kt-tablet-tab'
      }, {
        name: 'mobile',
        title: React.createElement(Dashicon, {
          icon: "smartphone"
        }),
        className: 'kt-mobile-tab'
      }]
    }, tab => {
      let tabout;

      if (tab.name) {
        if ('mobile' === tab.name) {
          tabout = React.createElement(SelectControl, {
            label: __('Mobile Media Align'),
            value: mediaAlignMobile ? mediaAlignMobile : mediaAlign,
            options: [{
              value: 'top',
              label: __('Top')
            }, {
              value: 'left',
              label: __('Left')
            }, {
              value: 'right',
              label: __('Right')
            }],
            onChange: value => setAttributes({
              mediaAlignMobile: value
            })
          });
        } else if ('tablet' === tab.name) {
          tabout = React.createElement(SelectControl, {
            label: __('Tablet Media Align'),
            value: mediaAlignTablet ? mediaAlignTablet : mediaAlign,
            options: [{
              value: 'top',
              label: __('Top')
            }, {
              value: 'left',
              label: __('Left')
            }, {
              value: 'right',
              label: __('Right')
            }],
            onChange: value => setAttributes({
              mediaAlignTablet: value
            })
          });
        } else {
          tabout = React.createElement(SelectControl, {
            label: __('Media Align'),
            value: mediaAlign,
            options: [{
              value: 'top',
              label: __('Top')
            }, {
              value: 'left',
              label: __('Left')
            }, {
              value: 'right',
              label: __('Right')
            }],
            onChange: value => setAttributes({
              mediaAlign: value
            })
          });
        }
      }

      return React.createElement("div", null, tabout);
    }), mediaAlign !== 'top' && React.createElement(Fragment, null, React.createElement(SelectControl, {
      label: __('Media Vertical Align'),
      value: mediaVAlign,
      options: [{
        value: 'top',
        label: __('Top')
      }, {
        value: 'middle',
        label: __('Middle')
      }, {
        value: 'bottom',
        label: __('Bottom')
      }],
      onChange: value => setAttributes({
        mediaVAlign: value
      })
    })), React.createElement(SelectControl, {
      label: __('Media Type'),
      value: mediaType,
      options: [{
        value: 'icon',
        label: __('Icon')
      }, {
        value: 'image',
        label: __('Image')
      }, {
        value: 'none',
        label: __('None')
      }],
      onChange: value => setAttributes({
        mediaType: value
      })
    }), 'image' === mediaType && React.createElement(Fragment, null, mediaImage[0].url && React.createElement("div", {
      className: "kb-image-edit-settings-container"
    }, React.createElement(MediaUpload, {
      onSelect: onSelectMainImage,
      type: "image",
      value: mediaImage[0].id,
      allowedTypes: ALLOWED_MEDIA_TYPES,
      render: ({
        open
      }) => React.createElement(Button, {
        className: 'components-button components-icon-button kt-cta-upload-btn kb-upload-inline-btn',
        onClick: open
      }, React.createElement(Dashicon, {
        icon: "format-image"
      }), __('Edit Media'))
    }), React.createElement(IconButton, {
      label: __('clear'),
      className: "kb-clear-image-btn",
      icon: "no-alt",
      onClick: clearImage
    })), React.createElement(RangeControl, {
      label: __('Max Image Width'),
      value: mediaImage[0].maxWidth,
      onChange: value => saveMediaImage({
        maxWidth: value
      }),
      min: 5,
      max: 800,
      step: 1
    }), React.createElement(RangeControl, {
      label: __('Image Border Radius (px)'),
      value: mediaStyle[0].borderRadius,
      onChange: value => saveMediaStyle({
        borderRadius: value
      }),
      step: 1,
      min: 0,
      max: 200
    })), 'icon' === mediaType && React.createElement(Fragment, null, React.createElement(_reactFonticonpicker.default, {
      icons: _svgiconsnames.default,
      value: mediaIcon[0].icon,
      onChange: value => saveMediaIcon({
        icon: value
      }),
      appendTo: "body",
      renderFunc: renderSVG,
      theme: "default",
      isMulti: false
    }), React.createElement(RangeControl, {
      label: __('Icon Size'),
      value: mediaIcon[0].size,
      onChange: value => saveMediaIcon({
        size: value
      }),
      min: 5,
      max: 250,
      step: 1
    }), mediaIcon[0].icon && 'fe' === mediaIcon[0].icon.substring(0, 2) && React.createElement(RangeControl, {
      label: __('Icon Line Width'),
      value: mediaIcon[0].width,
      onChange: value => saveMediaIcon({
        width: value
      }),
      step: 0.5,
      min: 0.5,
      max: 4
    }), React.createElement(RangeControl, {
      label: __('Icon Border Radius (px)'),
      value: mediaStyle[0].borderRadius,
      onChange: value => saveMediaStyle({
        borderRadius: value
      }),
      step: 1,
      min: 0,
      max: 200
    }), React.createElement(TextControl, {
      label: __('Icon Title for Accessibility'),
      value: mediaIcon[0].title,
      onChange: value => saveMediaIcon({
        title: value
      })
    }))), this.showSettings('titleSettings') && React.createElement(PanelBody, {
      title: __('Title Settings'),
      initialOpen: false
    }, React.createElement(ToggleControl, {
      label: __('Show Title'),
      checked: displayTitle,
      onChange: value => setAttributes({
        displayTitle: value
      })
    })), this.showSettings('textSettings') && React.createElement(PanelBody, {
      title: __('Text Settings'),
      initialOpen: false
    }, React.createElement(ToggleControl, {
      label: __('Show Text'),
      checked: displayText,
      onChange: value => setAttributes({
        displayText: value
      })
    })), this.showSettings('learnMoreSettings') && React.createElement(PanelBody, {
      title: __('Learn More Settings'),
      initialOpen: false
    }, React.createElement(ToggleControl, {
      label: __('Show Learn More'),
      checked: displayLearnMore,
      onChange: value => setAttributes({
        displayLearnMore: value
      })
    }))), React.createElement("div", _extends({
      className: `kt-blocks-info-box-link-wrap kt-blocks-info-box-media-align-${mediaAlign} ${isSelectedClass} kt-info-halign-${hAlign} kb-info-box-vertical-media-align-${mediaVAlign}`,
      style: {
        borderColor: containerBorder ? (0, _hexToRgba.default)(containerBorder, undefined !== containerBorderOpacity ? containerBorderOpacity : 1) : (0, _hexToRgba.default)('#eeeeee', undefined !== containerBorderOpacity ? containerBorderOpacity : 1),
        background: containerBackground ? (0, _hexToRgba.default)(containerBackground, undefined !== containerBackgroundOpacity ? containerBackgroundOpacity : 1) : (0, _hexToRgba.default)('#f2f2f2', undefined !== containerBackgroundOpacity ? containerBackgroundOpacity : 1),
        borderRadius: containerBorderRadius + 'px',
        borderWidth: containerBorderWidth ? containerBorderWidth[0] + 'px ' + containerBorderWidth[1] + 'px ' + containerBorderWidth[2] + 'px ' + containerBorderWidth[3] + 'px' : '',
        padding: containerPadding ? containerPadding[0] + 'px ' + containerPadding[1] + 'px ' + containerPadding[2] + 'px ' + containerPadding[3] + 'px' : '',
        backgroundColor: !hasImageBg ? backgroundColor : '#2e358f',
        backgroundImage: hasImageBg && `url('${backgroundImage}')`,
        'background-size': hasImageBg && `cover`,
        color: hasImageBg && 'white'
      }
    }, backgroundImageData), React.createElement("div", {
      className: "g-section-overlay",
      style: overlayStyle
    }), React.createElement("div", {
      className: "g-section-wrapper",
      style: wrapperStyle
    }, 'none' !== mediaType && React.createElement("div", {
      className: `${classes.join(' ')} kt-blocks-info-box-media`,
      style: {
        borderColor: mediaStyle[0].border,
        backgroundColor: mediaStyle[0].background,
        borderRadius: mediaStyle[0].borderRadius + 'px',
        borderWidth: mediaStyle[0].borderWidth ? mediaStyle[0].borderWidth[0] + 'px ' + mediaStyle[0].borderWidth[1] + 'px ' + mediaStyle[0].borderWidth[2] + 'px ' + mediaStyle[0].borderWidth[3] + 'px' : '',
        padding: mediaStyle[0].padding ? mediaStyle[0].padding[0] + 'px ' + mediaStyle[0].padding[1] + 'px ' + mediaStyle[0].padding[2] + 'px ' + mediaStyle[0].padding[3] + 'px' : '',
        margin: mediaStyle[0].margin ? mediaStyle[0].margin[0] + 'px ' + mediaStyle[0].margin[1] + 'px ' + mediaStyle[0].margin[2] + 'px ' + mediaStyle[0].margin[3] + 'px' : ''
      }
    }, !mediaImage[0].url && 'image' === mediaType && React.createElement(MediaPlaceholder, {
      icon: "format-image",
      labels: {
        title: __('Media area')
      },
      onSelect: onSelectMainImage,
      accept: "image/*",
      allowedTypes: ALLOWED_MEDIA_TYPES
    }), mediaImage[0].url && 'image' === mediaType && React.createElement("div", {
      className: "kadence-info-box-image-inner-intrisic-container",
      style: {
        maxWidth: mediaImage[0].maxWidth + 'px'
      }
    }, React.createElement("div", {
      className: `kadence-info-box-image-intrisic ${'svg+xml' === mediaImage[0].subtype ? ' kb-info-box-image-type-svg' : ''}`,
      style: {
        paddingBottom: isNaN(mediaImage[0].height) ? undefined : mediaImage[0].height / mediaImage[0].width * 100 + '%',
        height: isNaN(mediaImage[0].height) ? undefined : 0
      }
    }, React.createElement("div", {
      className: "kadence-info-box-image-inner-intrisic"
    }, React.createElement("img", {
      src: mediaImage[0].url,
      alt: mediaImage[0].alt,
      width: mediaImage[0].subtype && 'svg+xml' === mediaImage[0].subtype ? mediaImage[0].maxWidth : mediaImage[0].width,
      height: mediaImage[0].height,
      className: `${mediaImage[0].id ? `kt-info-box-image wp-image-${mediaImage[0].id}` : 'kt-info-box-image wp-image-offsite'} ${mediaImage[0].subtype && 'svg+xml' === mediaImage[0].subtype ? ' kt-info-svg-image' : ''}`
    })))), 'icon' === mediaType && React.createElement("div", {
      className: `kadence-info-box-icon-container`
    }, React.createElement("div", {
      className: 'kadence-info-box-icon-inner-container'
    }, React.createElement(_genicon.default, {
      className: `kt-info-svg-icon kt-info-svg-icon-${mediaIcon[0].icon}`,
      name: mediaIcon[0].icon,
      size: !mediaIcon[0].size ? '14' : mediaIcon[0].size,
      icon: 'fa' === mediaIcon[0].icon.substring(0, 2) ? FaIco[mediaIcon[0].icon] : _svgicons.default[mediaIcon[0].icon],
      htmltag: "span",
      strokeWidth: 'fe' === mediaIcon[0].icon.substring(0, 2) ? mediaIcon[0].width : undefined,
      style: {
        display: 'block',
        color: mediaIcon[0].color ? mediaIcon[0].color : undefined
      }
    })))), React.createElement("div", {
      className: 'kt-infobox-textcontent text-center infobox-content text-white'
    }, displayTitle && React.createElement(RichText, {
      className: "info-box-title",
      tagName: titleTagName,
      placeholder: __('Title'),
      onChange: onChangeTitle,
      value: title,
      style: {
        fontWeight: titleFont[0].weight,
        color: 'white',
        fontSize: titleFont[0].size[0] + titleFont[0].sizeType,
        lineHeight: titleFont[0].lineHeight && titleFont[0].lineHeight[0] ? titleFont[0].lineHeight[0] + titleFont[0].lineType : undefined,
        fontFamily: titleFont[0].family ? titleFont[0].family : '',
        padding: titleFont[0].padding ? titleFont[0].padding[0] + 'px ' + titleFont[0].padding[1] + 'px ' + titleFont[0].padding[2] + 'px ' + titleFont[0].padding[3] + 'px' : '',
        margin: titleFont[0].margin ? titleFont[0].margin[0] + 'px ' + titleFont[0].margin[1] + 'px ' + titleFont[0].margin[2] + 'px ' + titleFont[0].margin[3] + 'px' : ''
      },
      keepPlaceholderOnFocus: true
    }), displayText && React.createElement(RichText, {
      className: "info-box-text text-white",
      tagName: 'p',
      placeholder: __('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean diam dolor, accumsan sed rutrum vel, dapibus et leo.'),
      onChange: value => setAttributes({
        contentText: value
      }),
      value: contentText,
      style: {
        fontWeight: textFont[0].weight,
        color: textColor,
        fontSize: textFont[0].size[0] + textFont[0].sizeType,
        lineHeight: textFont[0].lineHeight && textFont[0].lineHeight[0] ? textFont[0].lineHeight[0] + textFont[0].lineType : undefined,
        fontFamily: textFont[0].family ? textFont[0].family : ''
      },
      keepPlaceholderOnFocus: true
    }), displayLearnMore && React.createElement("button", {
      className: "kt-blocks-info-box-learnmore-wrap btn btn-secondary"
    }, React.createElement(RichText, {
      className: "info-learnmore",
      tagName: 'div',
      placeholder: __('Learn More'),
      onChange: value => setAttributes({
        learnMore: value
      }),
      value: learnMore,
      keepPlaceholderOnFocus: true
    }))))));
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-infobox') && blocks[category.slug + '/inclind-infobox']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-infobox', {
      title: __('Infobox (Bootstrap)', 'inclind-infobox'),
      description: __('Add infobox with background image/overlay.', 'inclind-infobox'),
      category: 'inclind-blocks',
      keywords: [__('Info', 'inclind-infobox'), __('Infobox', 'inclind-infobox'), __('inclind', 'inclind-infobox'), __('custom', 'inclind-infobox')],
      attributes: {
        blockAlignment: {
          type: 'string',
          default: 'none'
        },
        backgroundType: {
          type: 'string',
          default: 'color'
        },
        backgroundColor: {
          type: 'string',
          default: '#2e358f'
        },
        backgroundImage: {
          type: 'string',
          default: 'https://placeimg.com/1200/600/nature/grayscale'
        },
        backgroundImageUUID: {
          type: 'string',
          default: ''
        },
        backgroundImageData: {
          type: 'object',
          default: {}
        },
        overlayOpacity: {
          type: 'number',
          default: 80
        },
        overlayColor: {
          type: 'string',
          default: '#2e358f'
        },
        padding: {
          type: 'string',
          default: ''
        },
        margin: {
          type: 'string',
          default: ''
        },
        contentWidth: {
          type: 'number'
        },
        uniqueID: {
          type: 'string',
          default: ''
        },
        link: {
          type: 'string',
          source: 'attribute',
          attribute: 'href',
          selector: 'a'
        },
        linkProperty: {
          type: 'string',
          default: 'learnmore'
        },
        target: {
          type: 'string',
          source: 'attribute',
          attribute: 'target',
          selector: 'a',
          default: '_self'
        },
        hAlign: {
          type: 'string',
          default: 'center'
        },
        containerBackground: {
          type: 'string',
          default: '#f2f2f2'
        },
        containerBackgroundOpacity: {
          type: 'number',
          default: 1
        },
        containerHoverBackground: {
          type: 'string',
          default: '#f2f2f2'
        },
        containerHoverBackgroundOpacity: {
          type: 'number',
          default: 1
        },
        containerBorder: {
          type: 'string',
          default: '#eeeeee'
        },
        containerBorderOpacity: {
          type: 'number',
          default: 1
        },
        containerHoverBorder: {
          type: 'string',
          default: '#eeeeee'
        },
        containerHoverBorderOpacity: {
          type: 'number',
          default: 1
        },
        containerBorderWidth: {
          type: 'array',
          default: [0, 0, 0, 0]
        },
        containerBorderRadius: {
          type: 'number',
          default: 0
        },
        containerPadding: {
          type: 'array',
          default: [20, 20, 20, 20]
        },
        mediaType: {
          type: 'string',
          default: 'none'
        },
        mediaAlign: {
          type: 'string',
          default: 'top'
        },
        mediaImage: {
          type: 'array',
          default: [{
            url: '',
            id: '',
            alt: '',
            width: '',
            height: '',
            maxWidth: '',
            flipUrl: '',
            flipId: '',
            flipAlt: '',
            flipWidth: '',
            flipHeight: '',
            subtype: '',
            flipSubtype: ''
          }]
        },
        mediaIcon: {
          type: 'array',
          default: [{
            icon: 'fe_aperture',
            size: 50,
            width: 2,
            title: '',
            color: '#444444',
            hoverColor: '#444444',
            flipIcon: ''
          }]
        },
        mediaStyle: {
          type: 'array',
          default: [{
            background: 'transparent',
            hoverBackground: 'transparent',
            border: '#444444',
            hoverBorder: '#444444',
            borderRadius: 0,
            borderWidth: [0, 0, 0, 0],
            padding: [10, 10, 10, 10],
            margin: [0, 15, 0, 15]
          }]
        },
        displayTitle: {
          type: 'bool',
          default: true
        },
        title: {
          type: 'array',
          source: 'children',
          selector: '.info-box-title',
          default: __('Title')
        },
        titleFont: {
          type: 'array',
          default: [{
            level: 3,
            size: ['', '', ''],
            sizeType: 'px',
            lineHeight: ['', '', ''],
            lineType: 'px',
            letterSpacing: '',
            textTransform: '',
            family: '',
            google: false,
            style: '',
            weight: '',
            variant: '',
            subset: '',
            loadGoogle: true,
            padding: [0, 0, 0, 0],
            paddingControl: 'linked',
            margin: [5, 0, 10, 0],
            marginControl: 'individual'
          }]
        },
        displayText: {
          type: 'bool',
          default: true
        },
        contentText: {
          type: 'array',
          source: 'children',
          selector: '.info-box-text',
          default: __('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean diam dolor, accumsan sed rutrum vel, dapibus et leo.')
        },
        textColor: {
          type: 'string',
          default: '#555555'
        },
        textHoverColor: {
          type: 'string',
          default: ''
        },
        textFont: {
          type: 'array',
          default: [{
            size: ['', '', ''],
            sizeType: 'px',
            lineHeight: ['', '', ''],
            lineType: 'px',
            letterSpacing: '',
            family: '',
            google: '',
            style: '',
            weight: '',
            variant: '',
            subset: '',
            loadGoogle: true
          }]
        },
        displayLearnMore: {
          type: 'bool',
          default: true
        },
        learnMore: {
          type: 'array',
          source: 'children',
          selector: '.info-learnmore',
          default: __('Learn More')
        },
        learnMoreStyles: {
          type: 'array',
          default: [{
            size: ['', '', ''],
            sizeType: 'px',
            lineHeight: ['', '', ''],
            lineType: 'px',
            letterSpacing: '',
            family: '',
            google: '',
            style: '',
            weight: '',
            variant: '',
            subset: '',
            loadGoogle: true,
            padding: [4, 8, 4, 8],
            paddingControl: 'individual',
            margin: [10, 0, 10, 0],
            marginControl: 'individual',
            color: '',
            background: 'transparent',
            border: '#555555',
            borderRadius: 0,
            borderWidth: [0, 0, 0, 0],
            borderControl: 'linked',
            colorHover: '#ffffff',
            backgroundHover: '#444444',
            borderHover: '#444444',
            hoverEffect: 'revealBorder'
          }]
        },
        mediaVAlign: {
          type: 'string',
          default: 'middle'
        },
        mediaAlignMobile: {
          type: 'string',
          default: 'top'
        },
        mediaAlignTablet: {
          type: 'string',
          default: 'top'
        }
      },

      // Render the block components.
      getEditWrapperProps({
        blockAlignment
      }) {
        if ('left' === blockAlignment || 'right' === blockAlignment || 'center' === blockAlignment) {
          return {
            'data-align': blockAlignment
          };
        }
      },

      edit: InclindInfobox,
      save: props => {
        const {
          attributes: {
            blockAlignment,
            backgroundType,
            backgroundColor,
            backgroundImage,
            backgroundImageData,
            backgroundImageUUID,
            overlayOpacity,
            overlayColor,
            margin,
            padding,
            contentWidth,
            uniqueID,
            link,
            linkProperty,
            target,
            hAlign,
            mediaType,
            mediaImage,
            mediaIcon,
            mediaAlign,
            displayTitle,
            title,
            titleFont,
            displayText,
            contentText,
            displayLearnMore,
            learnMore,
            mediaAlignMobile,
            mediaAlignTablet
          }
        } = props;
        const hasImageBg = backgroundType === 'image'; // const containerStyle = {
        //   backgroundColor: !hasImageBg ? backgroundColor : '#2e358f',
        //   backgroundImage: hasImageBg && `url('${backgroundImage}')`,
        //   'background-size': hasImageBg && `cover`,
        //   color: hasImageBg && 'white',
        // };

        const overlayStyle = !hasImageBg ? {} : {
          display: 'block',
          backgroundColor: overlayColor || '#2e358f',
          opacity: parseInt(overlayOpacity, 10) / 100
        };
        const wrapperStyle = {
          maxWidth: contentWidth && `${contentWidth}px`
        };
        const classes = [// className,
        (0, _classnames.default)(`align${blockAlignment ? blockAlignment : 'none'}`), 'infobox p-4 mb-4 bg-primary text-' + hAlign];
        const titleTagName = 'h' + titleFont[0].level;
        const image = React.createElement("div", {
          className: "kadence-info-box-image-inner-intrisic-container",
          style: {
            maxWidth: mediaImage[0].maxWidth + 'px'
          }
        }, React.createElement("div", {
          className: `kadence-info-box-image-intrisic ${'svg+xml' === mediaImage[0].subtype ? ' kb-info-box-image-type-svg' : ''}`,
          style: {
            paddingBottom: isNaN(mediaImage[0].height) ? undefined : mediaImage[0].height / mediaImage[0].width * 100 + '%',
            height: isNaN(mediaImage[0].height) ? undefined : 0,
            width: isNaN(mediaImage[0].width) || 'svg+xml' === mediaImage[0].subtype ? mediaImage[0].maxWidth + 'px' : mediaImage[0].width + 'px',
            maxWidth: '100%'
          }
        }, React.createElement("div", {
          className: "kadence-info-box-image-inner-intrisic"
        }, React.createElement("img", {
          src: mediaImage[0].url,
          alt: mediaImage[0].alt,
          width: mediaImage[0].subtype && 'svg+xml' === mediaImage[0].subtype ? mediaImage[0].maxWidth : mediaImage[0].width,
          height: mediaImage[0].height,
          className: `${mediaImage[0].id ? `kt-info-box-image wp-image-${mediaImage[0].id}` : 'kt-info-box-image wp-image-offsite'} ${mediaImage[0].subtype && 'svg+xml' === mediaImage[0].subtype ? ' kt-info-svg-image' : ''}`
        }))));
        const icon = React.createElement("div", {
          className: `kadence-info-box-icon-container`
        }, React.createElement("div", {
          className: 'kadence-info-box-icon-inner-container'
        }, React.createElement(_genicon.default, {
          className: `kt-info-svg-icon kt-info-svg-icon-${mediaIcon[0].icon}`,
          name: mediaIcon[0].icon,
          size: !mediaIcon[0].size ? '14' : mediaIcon[0].size,
          icon: 'fa' === mediaIcon[0].icon.substring(0, 2) ? FaIco[mediaIcon[0].icon] : _svgicons.default[mediaIcon[0].icon],
          htmltag: "span",
          strokeWidth: 'fe' === mediaIcon[0].icon.substring(0, 2) ? mediaIcon[0].width : undefined,
          style: {
            display: 'block'
          }
        })));
        const learnMoreOutput = React.createElement(RichText.Content, {
          className: "info-learnmore btn btn-secondary btn-sm",
          tagName: 'button',
          value: learnMore,
          type: 'button'
        });
        const learnMoreLinkOutput = React.createElement("a", {
          href: link,
          target: '_blank' === target ? target : undefined,
          rel: '_blank' === target ? 'noopener noreferrer' : undefined
        }, React.createElement(RichText.Content, {
          className: "info-learnmore btn btn-secondary btn-sm",
          tagName: 'button',
          value: learnMore,
          type: 'button'
        }));
        const textOutput = React.createElement("div", {
          className: "info-content"
        }, displayTitle && React.createElement(RichText.Content, {
          className: "info-box-title info-title text-white",
          tagName: titleTagName,
          value: title
        }), displayText && React.createElement(RichText.Content, {
          className: "info-box-text info-text",
          tagName: 'p',
          value: contentText
        }), displayLearnMore && link !== undefined && linkProperty === 'learnmore' && learnMoreLinkOutput, displayLearnMore && (linkProperty !== 'learnmore' || link === undefined) && learnMoreOutput);
        classes.push('has-overlay');

        if (margin) {
          classes.push(`my-${margin}`);
        }

        if (padding) {
          classes.push(`py-${padding}`);
        } // Render the section on Front-end:


        return React.createElement("div", {
          id: `kt-info-box${uniqueID}`,
          className: classes.join(' ')
        }, React.createElement("div", {
          className: "infobox-image"
        }, React.createElement("div", {
          className: "overlay-wrapper"
        }, React.createElement("div", {
          className: "overlay bg-primary"
        }), React.createElement("img", {
          "data-image-style": "480x480",
          "data-entity-type": "file",
          "data-entity-uuid": `${backgroundImageUUID}`,
          src: `${backgroundImage}`,
          alt: "",
          className: "image image--jumbotron image--overlay img-fluid js-image-exists"
        }))), React.createElement("div", {
          className: "g-section-wrapper",
          style: wrapperStyle
        }, linkProperty !== 'learnmore' && link !== undefined && React.createElement("a", {
          className: ``,
          target: '_blank' === target ? target : undefined,
          rel: '_blank' === target ? 'noopener noreferrer' : undefined,
          href: link
        }, React.createElement("div", {
          className: "infobox-content text-white row align-items-center"
        }, 'none' !== mediaType && React.createElement("div", {
          className: `media-container py-4`
        }, React.createElement("div", {
          className: `kt-blocks-info-box-media`
        }, mediaImage[0].url && 'image' === mediaType && image, 'icon' === mediaType && icon)), textOutput)), (linkProperty === 'learnmore' || link === undefined) && React.createElement("div", {
          className: "infobox-content text-white row align-items-center"
        }, 'none' !== mediaType && React.createElement("div", {
          className: `media-container py-4`
        }, React.createElement("div", {
          className: `kt-blocks-info-box-media`
        }, mediaImage[0].url && 'image' === mediaType && image, 'icon' === mediaType && icon)), textOutput)));
      }
    });
  }
}

},{"../../genicon":52,"../../hex-to-rgba":53,"../../icons":54,"../../svgicons":56,"../../svgiconsnames":57,"./components/infobox":28,"@fonticonpicker/react-fonticonpicker":59,"classnames":60,"lodash/map":182}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const icon = {
  'iconHelp': 'M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm-4.3 304c-11.8 0-21.4-9-21.4-20.6 0-11.5 9.6-20.6 21.4-20.6 11.9 0 21.5 9 21.5 20.6 0 11.6-9.5 20.6-21.5 20.6zm40.2-96.9c-17.4 10.1-23.3 17.5-23.3 30.3v7.9h-34.7l-.3-8.6c-1.7-20.6 5.5-33.4 23.6-44 16.9-10.1 24-16.5 24-28.9s-12-21.5-26.9-21.5c-15.1 0-26 9.8-26.8 24.6H192c.7-32.2 24.5-55 64.7-55 37.5 0 63.3 20.8 63.3 50.7 0 19.9-9.6 33.6-28.1 44.5z'
};
var _default = icon;
exports.default = _default;

},{}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Infobox wrapper Component.
 */

class Infobox extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = 'infobox mb-0 row';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-infobox-simple') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = Infobox;

},{}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element; // Import block components.

const {
  PanelBody
} = wp.components; // Import Inspector components.

const {
  InspectorControls
} = wp.editor;
/**
 * Create an Inspector Controls wrapper Component.
 */

class Inspector extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    return React.createElement(InspectorControls, {
      key: "inspector"
    }, React.createElement(PanelBody, null));
  }

}

exports.default = Inspector;

},{}],33:[function(require,module,exports){
"use strict";

var _classnames = _interopRequireDefault(require("classnames"));

var _inspector = _interopRequireDefault(require("./components/inspector"));

var _infobox = _interopRequireDefault(require("./components/infobox"));

var _icon = _interopRequireDefault(require("./components/icon"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  BlockControls
} = wp.editor; // Register components

const {} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindInfobox extends Component {
  render() {
    // Setup the attributes.
    const {
      attributes: {
        itemTitle,
        itemContent
      },
      isSelected,
      className,
      setAttributes
    } = this.props;
    return [// Show the alignment toolbar on focus.
    React.createElement(BlockControls, {
      key: "controls"
    }), // Show the block controls on focus.
    React.createElement(_inspector.default, this.props), // Show the block markup in the editor.
    React.createElement(_infobox.default, this.props, React.createElement(RichText, {
      tagName: "h4",
      placeholder: __("Item Title", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemTitle,
      className: (0, _classnames.default)('infobox-heading'),
      onChange: value => this.props.setAttributes({
        itemTitle: value
      })
    }), React.createElement(RichText, {
      tagName: "p",
      placeholder: __("Item Content...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemContent,
      className: (0, _classnames.default)('infobox-content'),
      onChange: value => this.props.setAttributes({
        itemContent: value
      })
    }))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Inclind Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-infobox-simple') && blocks[category.slug + '/inclind-infobox-simple']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-infobox-simple', {
      title: __('Infobox', 'inclind-infobox-simple'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('info', 'inclind-infobox-simple'), __('infobox', 'inclind-infobox-simple'), __('inclind', 'inclind-infobox-simple')],
      attributes: {
        itemTitle: {
          selector: '.infobox-heading',
          type: 'string'
        },
        itemContent: {
          selector: '.infobox-content',
          type: 'array',
          source: 'children'
        }
      },
      // Render the block components.
      edit: InclindInfobox,
      // Save the attributes and markup.
      save: function (props) {
        const {
          itemTitle,
          itemContent
        } = props.attributes;
        const iconHelp = '<svg viewBox="0 0 500 500"><path d="' + _icon.default['iconHelp'] + '"></path></svg>'; // Save the block markup for the front end.

        return React.createElement(_infobox.default, props, React.createElement("div", {
          className: "col-lg-10"
        }, itemTitle && React.createElement(RichText.Content, {
          tagName: "h4",
          className: "infobox-heading",
          value: itemTitle
        }), itemContent && React.createElement(RichText.Content, {
          tagName: "p",
          className: "infobox-content",
          value: itemContent
        })), React.createElement("div", {
          className: "col-lg-2 text-center"
        }, React.createElement("span", {
          className: "svgicon-default _ionicons_svg_ios-help-circle",
          dangerouslySetInnerHTML: {
            __html: iconHelp
          }
        })));
      }
    });
  }
}

},{"./components/icon":30,"./components/infobox":31,"./components/inspector":32,"classnames":60}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Infographic wrapper Component.
 */

class Infographic extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = 'text-center bg-light pt-4 pb-2';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-infographic') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = Infographic;

},{}],35:[function(require,module,exports){
arguments[4][5][0].apply(exports,arguments)
},{"dup":5}],36:[function(require,module,exports){
"use strict";

var _classnames = _interopRequireDefault(require("classnames"));

var _inspector = _interopRequireDefault(require("./components/inspector"));

var _infographic = _interopRequireDefault(require("./components/infographic"));

var _icon = _interopRequireDefault(require("../infobox/components/icon"));

var _infobox = _interopRequireDefault(require("../infobox/components/infobox"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  BlockControls
} = wp.editor; // Register components

const {} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindInfographic extends Component {
  render() {
    // Setup the attributes.
    const {
      attributes: {
        itemTitle,
        itemContentTop,
        itemContentBottom
      },
      isSelected,
      className,
      setAttributes
    } = this.props;
    return [// Show the alignment toolbar on focus.
    React.createElement(BlockControls, {
      key: "controls"
    }), // Show the block controls on focus.
    React.createElement(_inspector.default, this.props), // Show the block markup in the editor.
    React.createElement(_infographic.default, this.props, React.createElement(RichText, {
      tagName: "span",
      placeholder: __("Item Title", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemTitle,
      className: (0, _classnames.default)('infographic-title', 'h6', 'orange'),
      onChange: value => this.props.setAttributes({
        itemTitle: value
      })
    }), React.createElement(RichText, {
      tagName: "span",
      placeholder: __("Item Content Top...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemContentTop,
      className: (0, _classnames.default)('infographic-content-top', 'h1'),
      onChange: value => this.props.setAttributes({
        itemContentTop: value
      })
    }), React.createElement(RichText, {
      tagName: "span",
      placeholder: __("Item Content Bottom...", 'inclind-blocks'),
      keepPlaceholderOnFocus: true,
      value: itemContentBottom,
      className: (0, _classnames.default)('infographic-content-bottom', 'h4'),
      onChange: value => this.props.setAttributes({
        itemContentBottom: value
      })
    }))];
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-infographic') && blocks[category.slug + '/inclind-infographic']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-infographic', {
      title: __('Infographic', 'inclind-infographic'),
      description: __('Description', 'inclind-blocks'),
      category: 'inclind-blocks',
      keywords: [__('info', 'inclind-infographic'), __('infogrpahic', 'inclind-infographic'), __('inclind', 'inclind-infographic')],
      attributes: {
        itemTitle: {
          selector: '.infographic-title',
          type: 'string'
        },
        itemContentTop: {
          selector: '.infographic-content-top',
          type: 'string'
        },
        itemContentBottom: {
          selector: '.infographic-content-bottoom',
          type: 'string'
        }
      },
      // Render the block components.
      edit: InclindInfographic,
      // Save the attributes and markup.
      save: function (props) {
        const {
          itemTitle,
          itemContentTop,
          itemContentBottom
        } = props.attributes; // Save the block markup for the front end.

        return React.createElement(_infographic.default, props, React.createElement("p", null, itemTitle && React.createElement(RichText.Content, {
          tagName: "span",
          className: "h6 orange infographic-title",
          value: itemTitle
        }), React.createElement("br", null), itemContentTop && React.createElement(RichText.Content, {
          tagName: "span",
          className: "h1 infogrpahic-content-top",
          value: itemContentTop
        })), React.createElement("p", null, itemContentBottom && React.createElement(RichText.Content, {
          tagName: "span",
          className: "h4 infogrpahic-content-bottom",
          value: itemContentBottom
        })));
      }
    });
  }
}

},{"../infobox/components/icon":30,"../infobox/components/infobox":31,"./components/infographic":34,"./components/inspector":35,"classnames":60}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a AdvancedBtn wrapper Component.
 */

class Jumbotron extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = '';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-jumbotron') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = Jumbotron;

},{}],38:[function(require,module,exports){
"use strict";

var _jumbotron = _interopRequireDefault(require("./components/jumbotron"));

var _icons = _interopRequireDefault(require("../../icons"));

var _map = _interopRequireDefault(require("lodash/map"));

var _hexToRgba = _interopRequireDefault(require("../../hex-to-rgba"));

var _genicon = _interopRequireDefault(require("../../genicon"));

var _svgicons = _interopRequireDefault(require("../../svgicons"));

var _svgiconsnames = _interopRequireDefault(require("../../svgiconsnames"));

var _reactFonticonpicker = _interopRequireDefault(require("@fonticonpicker/react-fonticonpicker"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component,
  Fragment
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  BlockAlignmentToolbar,
  InspectorControls,
  BlockControls,
  AlignmentToolbar,
  MediaUpload,
  URLInput,
  RichText
} = wp.blockEditor; // Register components

const {
  IconButton,
  PanelBody,
  ToggleControl,
  SelectControl,
  BaseControl
} = wp.components;
const {
  dispatch,
  select
} = wp.data;
/**
 * This allows for checking to see if the block needs to generate a new ID.
 */

const ktjumbotronUniqueIDs = [];

class InclindJumbotron extends Component {
  constructor() {
    super(...arguments);
    this.showSettings = this.showSettings.bind(this);
    this.state = {
      settings: {}
    };
  }

  componentDidMount() {
    if (!this.props.attributes.uniqueID) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktjumbotronUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else if (ktjumbotronUniqueIDs.includes(this.props.attributes.uniqueID)) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktjumbotronUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else {
      ktjumbotronUniqueIDs.push(this.props.attributes.uniqueID);
    }
  }

  showSettings(key) {
    let donot_allow = ['mediaSettings'];

    if (donot_allow.includes(key)) {
      return false;
    }

    return true;
  } // Render element while editing in Gutenberg:


  render() {
    const {
      attributes: {
        blockAlignment,
        backgroundColor,
        backgroundImage,
        backgroundImageUUID,
        uniqueID,
        link,
        target,
        hAlign,
        displayTitle,
        displayScriptTitle,
        title,
        titleScript,
        displayText,
        contentText,
        displayLearnMore,
        learnMore
      },
      className,
      setAttributes,
      isSelected
    } = this.props;
    const startlayoutOptions = [{
      key: 'skip',
      name: __('Skip'),
      icon: __('Skip')
    }, {
      key: 'simple',
      name: __('Simple'),
      icon: _icons.default.infoSimple
    }, {
      key: 'left',
      name: __('Align Left'),
      icon: _icons.default.infoLeft
    }, {
      key: 'bold',
      name: __('Bold Background'),
      icon: _icons.default.infoBackground
    }, {
      key: 'image',
      name: __('Circle Image'),
      icon: _icons.default.infoImage
    }];
    const hasImageBg = true;
    const align_class = ['jtr-content', 'col-xs-12'];

    if (hAlign == 'right') {
      align_class.push('float-right', 'col-lg-7', 'text-right');
    } else if (hAlign == 'center') {
      align_class.push('col-lg-8', 'offset-lg-2', 'text-center');
    } else {
      align_class.push('col-lg-7');
    }

    const classes = [className, (0, _classnames.default)(`align${blockAlignment ? blockAlignment : 'none'}`)];

    const onSelectImage = (media, field) => {
      const dataAttrs = {};
      let uuid = '';

      if (media.data) {
        if (media.data.hasOwnProperty('entity_uuid')) {
          uuid = media.data.entity_uuid;
        }

        dataAttrs[`${field}Data`] = Object.keys(media.data).reduce((result, key) => {
          result[`data-${key.replace('_', '-')}`] = media.data[key];
          return result;
        }, {});
      }

      setAttributes({
        [field]: media.url,
        [`${field}UUID`]: uuid,
        ...dataAttrs
      });
    };

    const isSelectedClass = isSelected ? 'is-selected' : 'not-selected';
    return React.createElement("div", {
      id: `kt-jtr-box${uniqueID}`,
      className: classes.join(' ')
    }, React.createElement(BlockControls, {
      key: "controls"
    }, React.createElement(BlockAlignmentToolbar, {
      value: blockAlignment,
      controls: ['wide', 'full'],
      onChange: value => setAttributes({
        blockAlignment: value
      })
    }), React.createElement(AlignmentToolbar, {
      value: hAlign,
      onChange: value => setAttributes({
        hAlign: value
      })
    })), this.showSettings('allSettings') && React.createElement(InspectorControls, null, React.createElement(PanelBody, null, React.createElement("div", {
      className: "kt-controls-link-wrap"
    }, React.createElement("h2", null, __('Link')), React.createElement(URLInput, {
      className: "kt-btn-link-input",
      value: link,
      onChange: value => setAttributes({
        link: value
      })
    })), React.createElement(SelectControl, {
      label: __('Link Target'),
      value: target,
      options: [{
        value: '_self',
        label: __('Same Window')
      }, {
        value: '_blank',
        label: __('New Window')
      }],
      onChange: value => setAttributes({
        target: value
      })
    })), this.showSettings('containerSettings') && React.createElement(PanelBody, {
      title: __('Container Settings'),
      initialOpen: false
    }, React.createElement(BaseControl, {
      label: __('Choose background image')
    }, React.createElement(MediaUpload, {
      allowedTypes: ['image'],
      onSelect: media => onSelectImage(media, 'backgroundImage'),
      render: ({
        open
      }) => React.createElement(IconButton, {
        className: "components-toolbar__control",
        label: __('Edit image'),
        icon: "format-image",
        onClick: open
      })
    }))), this.showSettings('titleSettings') && React.createElement(PanelBody, {
      title: __('Title Settings'),
      initialOpen: false
    }, React.createElement(ToggleControl, {
      label: __('Show Title'),
      checked: displayTitle,
      onChange: value => setAttributes({
        displayTitle: value
      })
    }), React.createElement(ToggleControl, {
      label: __('Show Script Header (cursive)'),
      checked: displayScriptTitle,
      onChange: value => setAttributes({
        displayScriptTitle: value
      })
    })), this.showSettings('textSettings') && React.createElement(PanelBody, {
      title: __('Text Settings'),
      initialOpen: false
    }, React.createElement(ToggleControl, {
      label: __('Show Text'),
      checked: displayText,
      onChange: value => setAttributes({
        displayText: value
      })
    })), this.showSettings('learnMoreSettings') && React.createElement(PanelBody, {
      title: __('Learn More Settings'),
      initialOpen: false
    }, React.createElement(ToggleControl, {
      label: __('Show Learn More'),
      checked: displayLearnMore,
      onChange: value => setAttributes({
        displayLearnMore: value
      })
    }))), React.createElement("div", {
      className: `jumbotron jumbotron-fluid ${isSelectedClass}`,
      style: {
        backgroundColor: !hasImageBg ? backgroundColor : '#2e358f',
        backgroundImage: hasImageBg && `url('${backgroundImage}')`,
        'background-size': hasImageBg && `cover`,
        color: hasImageBg && 'white'
      }
    }, React.createElement("div", {
      className: "container jumbotron-text-container"
    }, React.createElement("div", {
      className: 'kt-jumbotron-textcontent jtr-content col-xs-12  col-lg-7'
    }, displayScriptTitle && React.createElement(RichText, {
      className: "jtr-script script h1 text-primary",
      tagName: 'span',
      placeholder: __('Title Script'),
      onChange: value => setAttributes({
        titleScript: value
      }),
      value: titleScript,
      style: {
        fontWeight: '400',
        color: 'rgb(46, 53, 143)',
        fontSize: '42px',
        lineHeight: '1',
        fontFamily: 'Outbound, cursive'
      },
      keepPlaceholderOnFocus: true
    }), React.createElement("br", null), displayTitle && React.createElement(RichText, {
      className: "jtr-title lead h2 caps text-primary",
      tagName: 'span',
      placeholder: __('Title'),
      onChange: val => setAttributes({
        title: val
      }),
      value: title,
      style: {
        fontWeight: '800',
        textTransform: 'uppercase',
        color: 'rgb(46, 53, 143)',
        fontSize: '50px',
        lineHeight: '1.2',
        fontFamily: 'Montserrat, sans-serif'
      },
      keepPlaceholderOnFocus: true
    }), displayText && React.createElement(RichText, {
      className: "jtr-text jumbotron-text text-black",
      tagName: 'p',
      placeholder: __('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean diam dolor, accumsan sed rutrum vel, dapibus et leo.'),
      onChange: value => setAttributes({
        contentText: value
      }),
      value: contentText,
      style: {
        fontWeight: '600',
        color: 'black',
        fontSize: '22px',
        lineHeight: '28px',
        fontFamily: 'Montserrat, sans'
      },
      keepPlaceholderOnFocus: true
    }), displayLearnMore && link !== undefined && React.createElement("p", {
      class: "lead mt-5 d-none d-sm-block"
    }, React.createElement("button", {
      className: "btn btn-arrow btn-lg btn-secondary"
    }, React.createElement(RichText, {
      className: "jtr-learnmore",
      tagName: 'span',
      placeholder: __('Link this button in settings..'),
      onChange: value => setAttributes({
        learnMore: value
      }),
      value: learnMore,
      keepPlaceholderOnFocus: true
    }), React.createElement("div", {
      className: "color-fill--secondary svg svg--icon js-svg-exists"
    }, React.createElement("svg", null, React.createElement("use", {
      "xlink:href": "/themes/custom/particle/dist/app-drupal/assets/spritemap.svg#sprite-chevron-right"
    })))))))));
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-jumbotron') && blocks[category.slug + '/inclind-jumbotron']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-jumbotron', {
      title: __('Hero (Jumbotron)', 'inclind-jumbotron'),
      description: __('Add jumbotron with background image/overlay.', 'inclind-jumbotron'),
      category: 'inclind-blocks',
      keywords: [__('Hero', 'inclind-jumbotron'), __('Info', 'inclind-jumbotron'), __('inclind', 'inclind-jumbotron'), __('custom', 'inclind-jumbotron')],
      attributes: {
        blockAlignment: {
          type: 'string',
          default: 'none'
        },
        backgroundColor: {
          type: 'string',
          default: '#2e358f'
        },
        backgroundImage: {
          type: 'string',
          default: 'https://placeimg.com/1200/600/nature/grayscale'
        },
        backgroundImageUUID: {
          type: 'string',
          default: ''
        },
        uniqueID: {
          type: 'string',
          default: ''
        },
        link: {
          type: 'string',
          source: 'attribute',
          attribute: 'href',
          selector: 'a'
        },
        target: {
          type: 'string',
          source: 'attribute',
          attribute: 'target',
          selector: 'a',
          default: '_self'
        },
        hAlign: {
          type: 'string',
          default: 'left'
        },
        displayTitle: {
          type: 'bool',
          default: true
        },
        displayScriptTitle: {
          type: 'bool',
          default: true
        },
        titleScript: {
          type: 'array',
          source: 'children',
          selector: 'span.jtr-script',
          default: __('Title Script will be in cursive font.')
        },
        title: {
          type: 'array',
          source: 'children',
          selector: 'span.jtr-title',
          default: __('Title')
        },
        displayText: {
          type: 'bool',
          default: true
        },
        contentText: {
          type: 'array',
          source: 'children',
          selector: 'p.jtr-text',
          default: __('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean diam dolor, accumsan sed rutrum vel, dapibus et leo.')
        },
        displayLearnMore: {
          type: 'bool',
          default: true
        },
        learnMore: {
          type: 'array',
          source: 'children',
          selector: '.jtr-learnmore',
          default: __('Link this button in settings..')
        }
      },

      // Render the block components.
      getEditWrapperProps({
        blockAlignment
      }) {
        if ('left' === blockAlignment || 'right' === blockAlignment || 'center' === blockAlignment) {
          return {
            'data-align': blockAlignment
          };
        }
      },

      edit: InclindJumbotron,
      save: props => {
        const {
          attributes: {
            blockAlignment,
            backgroundImage,
            backgroundImageUUID,
            uniqueID,
            link,
            target,
            hAlign,
            displayTitle,
            displayScriptTitle,
            title,
            titleScript,
            displayText,
            contentText,
            displayLearnMore,
            learnMore
          }
        } = props;
        const align_class = ['jtr-content', 'col-xs-12'];

        if (hAlign == 'right') {
          align_class.push('float-right', 'col-lg-7', 'text-right');
        } else if (hAlign == 'center') {
          align_class.push('col-lg-8', 'offset-lg-2', 'text-center');
        } else {
          align_class.push('col-lg-7');
        }

        const classes = [// className,
        (0, _classnames.default)(`align${blockAlignment ? blockAlignment : 'none'}`), 'jumbotron jumbotron-fluid']; // const learnMoreOutput = (
        //     <RichText.Content
        //         className="jtr-learnmore btn btn-secondary btn-sm"
        //         tagName={'button'}
        //         value={learnMore}
        //         type={'button'}
        //     />
        // );

        const learnMoreLinkOutput = React.createElement("p", {
          className: "lead mt-5 d-none d-sm-block"
        }, React.createElement("a", {
          href: link,
          target: '_blank' === target ? target : undefined,
          rel: '_blank' === target ? 'noopener noreferrer' : undefined
        }, React.createElement("button", {
          className: "btn btn-arrow btn-lg btn-secondary"
        }, React.createElement(RichText.Content, {
          className: "jtr-learnmore",
          tagName: 'span',
          placeholder: __('Link this button in settings..'),
          value: learnMore
        }), React.createElement("div", {
          className: "color-fill--secondary svg svg--icon js-svg-exists"
        }, React.createElement("svg", null, React.createElement("use", {
          "xlink:href": "/themes/custom/particle/dist/app-drupal/assets/spritemap.svg#sprite-chevron-right"
        }))))));
        const textOutput = React.createElement("div", {
          className: align_class.join(' ')
        }, displayScriptTitle && React.createElement(RichText.Content, {
          className: "jtr-script script h1 text-primary",
          tagName: 'span',
          value: titleScript
        }), React.createElement("br", null), displayTitle && React.createElement(RichText.Content, {
          className: "jtr-title lead h2 caps text-primary",
          tagName: 'span',
          value: title
        }), displayText && React.createElement(RichText.Content, {
          className: "jtr-text jumbotron-text text-black",
          tagName: 'p',
          value: contentText
        }), displayLearnMore && link !== undefined && learnMoreLinkOutput); // Render the Jumbotron on Front-end:

        return React.createElement("div", {
          id: `kt-jtr-box${uniqueID}`,
          className: classes.join(' ')
        }, React.createElement("div", {
          className: "jumbotron-image"
        }, React.createElement("div", {
          className: "overlay-wrapper"
        }, React.createElement("div", {
          className: "overlay gradient"
        }), React.createElement("img", {
          "data-image-style": "1200x400",
          "data-entity-type": "file",
          "data-entity-uuid": `${backgroundImageUUID}`,
          src: `${backgroundImage}`,
          alt: "",
          className: "image image--jumbotron image--overlay img-fluid js-image-exists"
        }))), React.createElement("div", {
          className: "container jumbotron-text-container"
        }, textOutput));
      }
    });
  }
}

},{"../../genicon":52,"../../hex-to-rgba":53,"../../icons":54,"../../svgicons":56,"../../svgiconsnames":57,"./components/jumbotron":37,"@fonticonpicker/react-fonticonpicker":59,"classnames":60,"lodash/map":182}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a LinkCards wrapper Component.
 */

class LinkCards extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = '';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-link-cards') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = LinkCards;

},{}],40:[function(require,module,exports){
"use strict";

var _linkCards = _interopRequireDefault(require("./components/link-cards"));

var _times = _interopRequireDefault(require("lodash/times"));

var _map = _interopRequireDefault(require("lodash/map"));

var _reactFonticonpicker = _interopRequireDefault(require("@fonticonpicker/react-fonticonpicker"));

var _genicon = _interopRequireDefault(require("../../genicon"));

var _svgicons = _interopRequireDefault(require("../../svgicons"));

var _svgiconsnames = _interopRequireDefault(require("../../svgiconsnames"));

var _hexToRgba = _interopRequireDefault(require("../../hex-to-rgba"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// import Icon from "../infobox/components/icon";
// import Infobox from "../infobox/components/infobox";
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component,
  Fragment
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  RichText,
  URLInput,
  InspectorControls,
  BlockControls,
  AlignmentToolbar
} = wp.blockEditor; // Register components

const {
  IconButton,
  Dashicon,
  TabPanel,
  Button,
  PanelBody,
  RangeControl,
  TextControl,
  ButtonGroup,
  SelectControl,
  ToggleControl
} = wp.components;
const {
  dispatch,
  select
} = wp.data;
/**
 * This allows for checking to see if the block needs to generate a new ID.
 */

const ktadvancedbuttonUniqueIDs = [];

class InclindLinkCards extends Component {
  constructor() {
    super(...arguments);
    this.saveArrayUpdate = this.saveArrayUpdate.bind(this);
    this.state = {
      btnFocused: 'false',
      btnLink: false,
      user: 'admin',
      settings: {}
    };
  }

  componentDidMount() {
    if (!this.props.attributes.uniqueID) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktadvancedbuttonUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else if (ktadvancedbuttonUniqueIDs.includes(this.props.attributes.uniqueID)) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktadvancedbuttonUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else {
      ktadvancedbuttonUniqueIDs.push(this.props.attributes.uniqueID);
    }
  }

  componentDidUpdate(prevProps) {
    if (!this.props.isSelected && prevProps.isSelected && this.state.btnFocused) {
      this.setState({
        btnFocused: 'false'
      });
    }
  }

  showSettings(key) {
    let donot_allow = ['backgroundSettings'];

    if (donot_allow.includes(key)) {
      return false;
    }

    return true;
  }

  saveArrayUpdate(value, index) {
    const {
      attributes,
      setAttributes
    } = this.props;
    const {
      btns
    } = attributes;
    const newItems = btns.map((item, thisIndex) => {
      if (index === thisIndex) {
        item = { ...item,
          ...value
        };
      }

      return item;
    });
    setAttributes({
      btns: newItems
    });
  }

  render() {
    const {
      attributes: {
        uniqueID,
        btnCount,
        btns,
        hAlign,
        forceFullwidth,
        btnLayoutStyle,
        thAlign,
        mhAlign
      },
      className,
      setAttributes,
      isSelected
    } = this.props;
    const bgType = [{
      key: 'solid',
      name: __('Solid Blue')
    }, {
      key: 'yellow',
      name: __('Solid Yellow')
    }, {
      key: 'gradient',
      name: __('No BG (plain)')
    }];
    const gridLayout = [{
      key: 'grid',
      name: __('2 columns')
    }, {
      key: 'inline',
      name: __('Automatic')
    }, {
      key: 'banners',
      name: __('Single Row')
    }];

    const renderBtns = index => {
      let btnbg;
      let btnGrad;
      let btnGrad2;

      if (undefined !== btns[index].backgroundType && 'gradient' === btns[index].backgroundType) {
        btnGrad = 'transparent' === btns[index].background || undefined === btns[index].background ? 'rgba(255,255,255,0)' : (0, _hexToRgba.default)(btns[index].background, btns[index].backgroundOpacity !== undefined ? btns[index].backgroundOpacity : 1);
        btnGrad2 = undefined !== btns[index].gradient && undefined !== btns[index].gradient[0] && '' !== btns[index].gradient[0] ? (0, _hexToRgba.default)(btns[index].gradient[0], undefined !== btns[index].gradient && btns[index].gradient[1] !== undefined ? btns[index].gradient[1] : 1) : (0, _hexToRgba.default)('#999999', undefined !== btns[index].gradient && btns[index].gradient[1] !== undefined ? btns[index].gradient[1] : 1);

        if (undefined !== btns[index].gradient && 'radial' === btns[index].gradient[4]) {
          btnbg = `radial-gradient(at ${undefined === btns[index].gradient[6] ? 'center center' : btns[index].gradient[6]}, ${btnGrad} ${undefined === btns[index].gradient[2] ? '0' : btns[index].gradient[2]}%, ${btnGrad2} ${undefined === btns[index].gradient[3] ? '100' : btns[index].gradient[3]}%)`;
        } else if (undefined === btns[index].gradient || 'radial' !== btns[index].gradient[4]) {
          btnbg = `linear-gradient(${undefined !== btns[index].gradient && undefined !== btns[index].gradient[5] ? btns[index].gradient[5] : '180'}deg, ${btnGrad} ${undefined !== btns[index].gradient && undefined !== btns[index].gradient[2] ? btns[index].gradient[2] : '0'}%, ${btnGrad2} ${undefined !== btns[index].gradient && undefined !== btns[index].gradient[3] ? btns[index].gradient[3] : '100'}%)`;
        }
      } else {
        btnbg = 'transparent' === btns[index].background || undefined === btns[index].background ? undefined : (0, _hexToRgba.default)(btns[index].background, btns[index].backgroundOpacity !== undefined ? btns[index].backgroundOpacity : 1);
      }

      return React.createElement("button", {
        type: 'button',
        className: `btn btn-area-wrap kt-btn-${index}-area ${!btns[index].icon ? '' : 'btn-icon'}
                  ${btns[index].backgroundHoverType === 'gradient' ? ' btn-arrow btn-cta btn-square' : btns[index].backgroundHoverType === 'yellow' ? ' btn-secondary' : 'btn-primary'}
                  `
      }, btns[index].icon && 'left' === btns[index].iconSide && React.createElement(_genicon.default, {
        className: `color-fill--white svg svg--icon js-svg-exists kt-btn-svg-icon kt-btn-svg-icon-${btns[index].icon} kt-btn-side-${btns[index].iconSide}`,
        name: btns[index].icon,
        size: !btns[index].size ? '14' : btns[index].size,
        icon: _svgicons.default[btns[index].icon]
      }), React.createElement(RichText, {
        tagName: "div",
        placeholder: __('Button...', 'inclind-link-cards'),
        value: btns[index].text,
        unstableOnFocus: () => {
          if (index >= 1) {
            const bt = 'btn' + index;
            onFocusAnyBtn(bt);
          } // if (1 === index) {
          //   onFocusBtn1();
          // }
          // else if (2 === index) {
          //   onFocusBtn2();
          // }
          // else if (3 === index) {
          //   onFocusBtn3();
          // }
          // else if (4 === index) {
          //   onFocusBtn4();
          // }
          else {
              onFocusBtn();
            }
        },
        onChange: value => {
          this.saveArrayUpdate({
            text: value
          }, index);
        },
        allowedFormats: ['core/bold', 'core/italic', 'core/strikethrough'],
        className: 'kt-button-text',
        keepPlaceholderOnFocus: true
      }), btns[index].icon && 'left' !== btns[index].iconSide && React.createElement(_genicon.default, {
        className: `color-fill--white svg svg--icon js-svg-exists kt-btn-svg-icon-${btns[index].icon} kt-btn-side-${btns[index].iconSide}`,
        name: btns[index].icon,
        size: !btns[index].size ? '14' : btns[index].size,
        icon: _svgicons.default[btns[index].icon]
      }), btns[index].backgroundHoverType && 'gradient' === btns[index].backgroundHoverType && !btns[index].icon && React.createElement(_genicon.default, {
        className: `svg svg--colorable js-svg-exists`,
        name: `bb`,
        htmltag: `span`
      }), isSelected && (this.state.btnFocused && 'btn' + [index] === this.state.btnFocused || this.state.btnFocused && 'false' === this.state.btnFocused && '0' === index) && React.createElement("form", {
        key: 'form-link',
        onSubmit: event => event.preventDefault(),
        className: "blocks-button__inline-link"
      }, React.createElement(URLInput, {
        value: btns[index].link,
        onChange: value => {
          this.saveArrayUpdate({
            link: value
          }, index);
        }
      }), React.createElement(IconButton, {
        icon: 'editor-break',
        label: __('Apply', 'inclind-link-cards'),
        type: 'submit'
      })));
    };

    const onFocusBtn = () => {
      if ('btn0' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn0'
        });
      }
    };

    const onFocusAnyBtn = bt => {
      if (bt !== this.state.btnFocused) {
        this.setState({
          btnFocused: bt
        });
      }
    };

    const onFocusBtn1 = () => {
      if ('btn1' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn1'
        });
      }
    };

    const onFocusBtn2 = () => {
      if ('btn2' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn2'
        });
      }
    };

    const onFocusBtn3 = () => {
      if ('btn3' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn3'
        });
      }
    };

    const onFocusBtn4 = () => {
      if ('btn4' !== this.state.btnFocused) {
        this.setState({
          btnFocused: 'btn4'
        });
      }
    };

    const tabControls = index => {
      return React.createElement(PanelBody, {
        title: __('Button', 'inclind-link-cards') + ' ' + (index + 1) + ' ' + __('Settings', 'inclind-link-cards'),
        initialOpen: false
      }, React.createElement("h2", {
        className: "side-h2-label"
      }, __('Button Link', 'inclind-link-cards')), React.createElement("div", {
        className: "kt-btn-link-group"
      }, React.createElement(URLInput, {
        value: btns[index].link,
        className: "kt-btn-link-input",
        onChange: value => {
          this.saveArrayUpdate({
            link: value
          }, index);
        }
      }), React.createElement(IconButton, {
        className: "kt-link-settings",
        icon: 'arrow-down-alt2',
        label: __('Link Settings', 'inclind-link-cards'),
        onClick: () => this.setState({
          btnLink: this.state.btnLink ? false : true
        })
      })), this.state.btnLink && React.createElement(Fragment, null, React.createElement("div", {
        className: "kt-spacer-sidebar-15"
      }), React.createElement(SelectControl, {
        label: __('Link Target', 'inclind-link-cards'),
        value: btns[index].target,
        options: [{
          value: '_self',
          label: __('Same Window', 'inclind-link-cards')
        }, {
          value: '_blank',
          label: __('New Window', 'inclind-link-cards')
        }],
        onChange: value => {
          this.saveArrayUpdate({
            target: value
          }, index);
        }
      }), React.createElement(ToggleControl, {
        label: __('Set link to nofollow?', 'inclind-link-cards'),
        checked: undefined !== btns[index].noFollow ? btns[index].noFollow : false,
        onChange: value => this.saveArrayUpdate({
          noFollow: value
        }, index)
      })), this.showSettings('backgroundSettings') && React.createElement(Fragment, null, React.createElement("div", {
        className: "components-base-control__field"
      }, React.createElement("label", {
        className: "kt-beside-btn-group"
      }, __('Background Type', 'inclind-link-cards')), React.createElement(ButtonGroup, {
        className: "kt-button-size-type-options",
        "aria-label": __('Background Type', 'inclind-link-cards')
      }, (0, _map.default)(bgType, ({
        name,
        key
      }) => React.createElement(Button, {
        key: key,
        className: "kt-btn-size-btn",
        isSmall: true,
        isPrimary: (undefined !== btns[index].backgroundHoverType ? btns[index].backgroundHoverType : 'solid') === key,
        "aria-pressed": (undefined !== btns[index].backgroundHoverType ? btns[index].backgroundHoverType : 'solid') === key,
        onClick: () => this.saveArrayUpdate({
          backgroundHoverType: key
        }, index)
      }, name))))), React.createElement(Fragment, null, React.createElement("h2", {
        className: "kt-tool"
      }, __('Icon Settings', 'inclind-link-cards')), React.createElement("div", {
        className: "kt-select-icon-container"
      }, React.createElement(_reactFonticonpicker.default, {
        icons: _svgiconsnames.default,
        value: btns[index].icon,
        onChange: value => {
          this.saveArrayUpdate({
            icon: value
          }, index);
        },
        appendTo: "body",
        renderFunc: renderSVG,
        theme: "default",
        isMulti: false
      }))), React.createElement(TextControl, {
        label: __('Add Custom CSS Class', 'inclind-link-cards'),
        value: btns[index].cssClass ? btns[index].cssClass : '',
        onChange: value => this.saveArrayUpdate({
          cssClass: value
        }, index)
      }));
    };

    const renderSVG = svg => React.createElement(_genicon.default, {
      name: svg,
      icon: _svgicons.default[svg]
    });

    const renderArray = React.createElement(Fragment, null, (0, _times.default)(btnCount, n => tabControls(n)));
    const renderPreviewArray = React.createElement("div", null, (0, _times.default)(btnCount, n => renderBtns(n)));

    const renderBtnCSS = index => {
      let btnbg;
      let btnGrad;
      let btnGrad2;
      let btnRad = '0';
      let btnBox = '';
      let btnBox2 = '';
      return `#kt-btns_${uniqueID} .kt-button-${index}:hover {
					color: ${btns[index].colorHover} !important;
					border-color: ${(0, _hexToRgba.default)(undefined === btns[index].borderHover ? '#444444' : btns[index].borderHover, btns[index].borderHoverOpacity !== undefined ? btns[index].borderHoverOpacity : 1)} !important;
					box-shadow: ${btnBox} !important;
				}
				#kt-btns_${uniqueID} .kt-button-${index}::before {
					background: ${btnbg};
					box-shadow: ${btnBox2};
					border-radius: ${btnRad}px;
				}`;
    };

    const renderCSS = React.createElement("style", null, (0, _times.default)(btnCount, n => renderBtnCSS(n)));
    return React.createElement(Fragment, null, renderCSS, React.createElement("div", {
      id: `kt-btns_${uniqueID}`,
      className: `${className} kt-btn-align-${hAlign}${forceFullwidth ? ' kt-force-btn-fullwidth' : ''}`
    }, React.createElement(BlockControls, null, React.createElement(AlignmentToolbar, {
      value: hAlign,
      onChange: value => setAttributes({
        hAlign: value
      })
    })), React.createElement(Fragment, null, React.createElement(InspectorControls, null, React.createElement(PanelBody, {
      title: __('Button Count', 'inclind-link-cards'),
      initialOpen: true
    }, React.createElement(RangeControl, {
      label: __('Number of Buttons', 'inclind-link-cards'),
      value: btnCount,
      onChange: newcount => {
        const newbtns = btns;

        if (newbtns.length < newcount) {
          const amount = Math.abs(newcount - newbtns.length);
          {
            (0, _times.default)(amount, n => {
              newbtns.push({
                text: newbtns[0].text,
                link: newbtns[0].link,
                target: newbtns[0].target,
                size: newbtns[0].size,
                paddingBT: newbtns[0].paddingBT,
                paddingLR: newbtns[0].paddingLR,
                color: newbtns[0].color,
                background: newbtns[0].background,
                border: newbtns[0].border,
                backgroundOpacity: newbtns[0].backgroundOpacity,
                borderOpacity: newbtns[0].borderOpacity,
                colorHover: newbtns[0].colorHover,
                backgroundHover: newbtns[0].backgroundHover,
                borderHover: newbtns[0].borderHover,
                backgroundHoverOpacity: newbtns[0].backgroundHoverOpacity,
                borderHoverOpacity: newbtns[0].borderHoverOpacity,
                icon: newbtns[0].icon,
                iconSide: newbtns[0].iconSide,
                iconHover: newbtns[0].iconHover,
                cssClass: newbtns[0].cssClass ? newbtns[0].cssClass : '',
                noFollow: newbtns[0].noFollow ? newbtns[0].noFollow : false,
                // responsiveSize:
                // (newbtns[0].responsiveSize ?
                // newbtns[0].responsiveSize : ['',
                // '']),
                gradient: newbtns[0].gradient ? newbtns[0].gradient : ['#999999', 1, 0, 100, 'linear', 180, 'center center'],
                gradientHover: newbtns[0].gradientHover ? newbtns[0].gradientHover : ['#777777', 1, 0, 100, 'linear', 180, 'center center'],
                btnStyle: newbtns[0].btnStyle ? newbtns[0].btnStyle : 'basic',
                backgroundType: newbtns[0].backgroundType ? newbtns[0].backgroundType : 'solid',
                backgroundHoverType: newbtns[0].backgroundHoverType ? newbtns[0].backgroundHoverType : 'solid',
                width: newbtns[0].width ? newbtns[0].width : ['', '', ''] // responsivePaddingBT:
                // (newbtns[0].responsivePaddingBT ?
                // newbtns[0].responsivePaddingBT :
                // ['', '']), responsivePaddingLR:
                // (newbtns[0].responsivePaddingLR ?
                // newbtns[0].responsivePaddingLR :
                // ['', '']), boxShadow:
                // (newbtns[0].boxShadow ?
                // newbtns[0].boxShadow : [false,
                // '#000000', 0.2, 1, 1, 2, 0, false]),
                // boxShadowHover:
                // (newbtns[0].boxShadowHover ?
                // newbtns[0].boxShadowHover : [false,
                // '#000000', 0.4, 2, 2, 3, 0, false]),

              });
            });
          }
          setAttributes({
            btns: newbtns
          });
          this.saveArrayUpdate({
            iconSide: btns[0].iconSide
          }, 0);
        }

        setAttributes({
          btnCount: newcount
        });
      },
      min: 1,
      max: 24
    }), React.createElement(Fragment, null, React.createElement("div", {
      className: "components-base-control__field"
    }, React.createElement("label", {
      className: "kt-beside-btn-group"
    }, __('Grid / Layout Options', 'inclind-link-cards')), React.createElement(ButtonGroup, {
      className: "kt-button-size-type-options",
      "aria-label": __('Button Layout', 'inclind-link-cards')
    }, (0, _map.default)(gridLayout, ({
      name,
      key
    }) => React.createElement(Button, {
      key: key,
      className: "kt-btn-grid-btn",
      isSmall: true,
      isPrimary: btnLayoutStyle === key,
      "aria-pressed": btnLayoutStyle === key,
      onClick: () => setAttributes({
        btnLayoutStyle: key
      })
    }, name)))))), renderArray)), React.createElement("div", {
      id: `animate-id${uniqueID}`,
      className: 'btn-inner-wrap'
    }, renderPreviewArray)));
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-link-cards') && blocks[category.slug + '/inclind-link-cards']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-link-cards', {
      title: __('Button Group', 'inclind-link-cards'),
      description: __('Create a row or grid of buttons (links). Style each one.', 'inclind-link-cards'),
      category: 'inclind-blocks',
      keywords: [__('Button', 'inclind-link-cards'), __('Button grid', 'inclind-link-cards'), __('inclind', 'inclind-link-cards'), __('custom', 'inclind-link-cards')],
      attributes: {
        hAlign: {
          type: 'string',
          default: 'center'
        },
        thAlign: {
          type: 'string',
          default: ''
        },
        mhAlign: {
          type: 'string',
          default: ''
        },
        btnCount: {
          type: 'number',
          default: 1
        },
        uniqueID: {
          type: 'string',
          default: ''
        },
        btns: {
          type: 'array',
          default: [{
            text: 'Start Button...',
            link: '',
            target: '_self',
            size: '',
            paddingBT: '',
            paddingLR: '',
            color: '#555555',
            background: '',
            border: '#555555',
            backgroundOpacity: 1,
            borderOpacity: 1,
            colorHover: '#ffffff',
            backgroundHover: '#444444',
            borderHover: '#444444',
            backgroundHoverOpacity: 1,
            borderHoverOpacity: 1,
            icon: '',
            iconSide: 'left',
            iconHover: false,
            cssClass: '',
            noFollow: false,
            gradient: ['#999999', 1, 0, 100, 'linear', 180, 'center center'],
            gradientHover: ['#777777', 1, 0, 100, 'linear', 180, 'center center'],
            btnStyle: 'basic',
            backgroundType: 'yellow',
            backgroundHoverType: 'yellow',
            width: ['', '', '']
          }]
        },
        forceFullwidth: {
          type: 'bool',
          default: false
        },
        btnLayoutStyle: {
          type: 'string',
          default: 'inline'
        }
      },

      // Render the block components.
      getEditWrapperProps({
        blockAlignment
      }) {
        if ('left' === blockAlignment || 'right' === blockAlignment || 'center' === blockAlignment) {
          return {
            'data-align': blockAlignment
          };
        }
      },

      edit: InclindLinkCards,
      save: props => {
        const {
          attributes: {
            btnCount,
            btns,
            hAlign,
            uniqueID,
            forceFullwidth,
            thAlign,
            mhAlign,
            btnLayoutStyle
          }
        } = props;

        const renderSaveBtns = (index, layout) => {
          let relAttr;

          if ('_blank' === btns[index].target && true === btns[index].noFollow) {
            relAttr = 'noreferrer noopener nofollow';
          } else if ('_blank' === btns[index].target) {
            relAttr = 'noreferrer noopener';
          } else if (true === btns[index].noFollow) {
            relAttr = 'nofollow';
          } else {
            relAttr = undefined;
          }

          return React.createElement("div", {
            className: `${layout} kt-btn-wrap kt-btn-wrap-${index}`
          }, React.createElement("a", {
            className: `btn kt-btn-${index}-action
                kt-btn-svg-show-${!btns[index].iconHover ? 'always' : 'hover'} kt-btn-has-text-${!btns[index].text ? 'false' : 'true'}
                ${!btns[index].icon ? '' : 'btn-icon'}${btns[index].cssClass ? ' ' + btns[index].cssClass : ''}
                ${btns[index].backgroundHoverType === 'gradient' ? ' btn-arrow btn-cta btn-square' : btns[index].backgroundHoverType === 'yellow' ? ' btn-secondary' : 'btn-primary'} `,
            href: !btns[index].link ? 'javascript:void(0);' : btns[index].link,
            target: '_blank' === btns[index].target ? btns[index].target : undefined,
            rel: relAttr
          }, btns[index].icon && 'left' === btns[index].iconSide && React.createElement(_genicon.default, {
            className: `color-fill--white svg svg--icon js-svg-exists kt-btn-svg-icon-${btns[index].icon} kt-btn-side-${btns[index].iconSide}`,
            name: btns[index].icon,
            size: !btns[index].size ? '14' : btns[index].size,
            icon: _svgicons.default[btns[index].icon]
          }), React.createElement(RichText.Content, {
            tagName: 'span',
            className: "kt-btn-inner-text",
            value: btns[index].text
          }), btns[index].icon && 'left' !== btns[index].iconSide && React.createElement(_genicon.default, {
            className: `color-fill--white svg svg--icon js-svg-exists kt-btn-svg-icon-${btns[index].icon} kt-btn-side-${btns[index].iconSide}`,
            name: btns[index].icon,
            size: !btns[index].size ? '14' : btns[index].size,
            icon: _svgicons.default[btns[index].icon]
          }), btns[index].backgroundHoverType && 'gradient' === btns[index].backgroundHoverType && !btns[index].icon && React.createElement(_genicon.default, {
            className: `svg svg--colorable js-svg-exists`,
            name: `bb`,
            htmltag: `span`
          })));
        };

        let gridClasses = 'justify-content-center link-card-grid row button-layout-inline'; // for "inline"

        let btnClasses = 'col-xs-12 col-md-6 col-lg-4 mb-4';

        if (btnLayoutStyle == 'grid') {
          gridClasses = 'justify-content-center link-card-grid row button-layout-grid';
          btnClasses = 'col-xs-12 col-sm-6 pb-2 pr-1 pl-1';
        } else if (btnLayoutStyle == 'banners') {
          gridClasses = 'justify-content-center link-card-grid row button-layout-banner';
          btnClasses = 'col m-0 p-0';
        }

        return React.createElement("div", {
          className: `${gridClasses} kt-btn-align-${hAlign} kt-btn-tablet-align-${thAlign ? thAlign : 'inherit'} kt-btn-mobile-align-${mhAlign ? mhAlign : 'inherit'} kt-btns${uniqueID}`
        }, (0, _times.default)(btnCount, n => renderSaveBtns(n, btnClasses)));
      }
    });
  }
}

},{"../../genicon":52,"../../hex-to-rgba":53,"../../svgicons":56,"../../svgiconsnames":57,"./components/link-cards":39,"@fonticonpicker/react-fonticonpicker":59,"lodash/map":182,"lodash/times":187}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Pane wrapper Component.
 */

class Pane extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = ''; // if (this.props.className !== 'wp-block-inclind-blocks-inclind-pane') {
    //   className = className + ' card ' + this.props.className
    // }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = Pane;

},{}],42:[function(require,module,exports){
"use strict";

var _pane = _interopRequireDefault(require("./components/pane"));

var _genicon = _interopRequireDefault(require("../../genicon"));

var _svgiconsnames = _interopRequireDefault(require("../../svgiconsnames"));

var _svgicons = _interopRequireDefault(require("../../svgicons"));

var _reactFonticonpicker = _interopRequireDefault(require("@fonticonpicker/react-fonticonpicker"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// import classnames from "classnames";
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component,
  Fragment
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  InnerBlocks,
  RichText
} = wp.blockEditor; // Register components

const {
  PanelBody
} = wp.components;
const {
  dispatch,
  select
} = wp.data;
/**
 * This allows for checking to see if the block needs to generate a new ID.
 */

const ktpaneUniqueIDs = [];
const ktpaneUniqueIDsCount = [];

class InclindPane extends Component {
  constructor() {
    super(...arguments);
  }

  componentDidMount() {
    if (!this.props.attributes.uniqueID) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktpaneUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else if (ktpaneUniqueIDs.includes(this.props.attributes.uniqueID)) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      ktpaneUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else {
      ktpaneUniqueIDs.push(this.props.attributes.uniqueID);
    }

    const rootID = wp.data.select('core/block-editor').getBlockRootClientId(this.props.clientId);

    if (!this.props.attributes.id) {
      const accordionBlock = wp.data.select('core/block-editor').getBlocksByClientId(rootID);
      const newPaneCount = accordionBlock[0].attributes.paneCount + 1;
      this.props.setAttributes({
        id: newPaneCount
      });

      if (undefined === ktpaneUniqueIDsCount[rootID]) {
        ktpaneUniqueIDsCount.push(rootID);
        ktpaneUniqueIDsCount[rootID].push(newPaneCount);
      } else if (undefined !== ktpaneUniqueIDsCount[rootID]) {
        ktpaneUniqueIDsCount[rootID].push(newPaneCount);
      }

      wp.data.dispatch('core/block-editor').updateBlockAttributes(rootID, {
        paneCount: newPaneCount
      });
    } else if (undefined === ktpaneUniqueIDsCount[rootID]) {
      ktpaneUniqueIDsCount[rootID] = [this.props.attributes.id];
    } else if (undefined !== ktpaneUniqueIDsCount[rootID]) {
      if (ktpaneUniqueIDsCount[rootID].includes(this.props.attributes.id)) {
        const accordionBlock = wp.data.select('core/block-editor').getBlocksByClientId(rootID);
        const newPaneCount = accordionBlock[0].attributes.paneCount + 1;
        this.props.setAttributes({
          id: newPaneCount
        });
        wp.data.dispatch('core/block-editor').updateBlockAttributes(rootID, {
          paneCount: newPaneCount
        });
        ktpaneUniqueIDsCount[rootID].push(newPaneCount);
      } else {
        ktpaneUniqueIDsCount[rootID].push(this.props.attributes.id);
      }
    }
  } // Render element while editing in Gutenberg:


  render() {
    const {
      attributes: {
        id,
        uniqueID,
        parentID,
        startCollapsed,
        title,
        icon,
        iconSide,
        hideLabel,
        titleTag
      },
      setAttributes
    } = this.props;

    const renderSVG = svg => React.createElement(_genicon.default, {
      name: svg,
      icon: 'fa' === svg.substring(0, 2) ? FaIco[svg] : _svgicons.default[svg]
    });

    const HtmlTagOut = !titleTag ? 'div' : titleTag;
    return React.createElement("div", {
      className: `kt-accordion-pane kt-accordion-pane-${id} kt-pane${uniqueID}`
    }, React.createElement(HtmlTagOut, {
      className: 'kt-accordion-header-wrap'
    }, React.createElement("div", {
      className: `kt-blocks-accordion-header kt-acccordion-button-label-${hideLabel ? 'hide' : 'show'}`
    }, React.createElement("div", {
      className: "kt-blocks-accordion-title-wrap"
    }, icon && 'left' === iconSide && React.createElement(_genicon.default, {
      className: `kt-btn-svg-icon kt-btn-svg-icon-${icon} kt-btn-side-${iconSide}`,
      name: icon,
      icon: 'fa' === icon.substring(0, 2) ? FaIco[icon] : _svgicons.default[icon]
    }), React.createElement(RichText, {
      className: "kt-blocks-accordion-title",
      tagName: 'div',
      placeholder: __('Add Title'),
      onChange: value => setAttributes({
        title: value
      }),
      value: title,
      keepPlaceholderOnFocus: true
    }), icon && 'right' === iconSide && React.createElement(_genicon.default, {
      className: `kt-btn-svg-icon kt-btn-svg-icon-${icon} kt-btn-side-${iconSide}`,
      name: icon,
      icon: 'fa' === icon.substring(0, 2) ? FaIco[icon] : _svgicons.default[icon]
    })), React.createElement("div", {
      className: "kt-blocks-accordion-icon-trigger"
    }))), React.createElement("div", {
      className: 'kt-accordion-panel'
    }, React.createElement("div", {
      className: 'kt-accordion-panel-inner'
    }, React.createElement(InnerBlocks, {
      templateLock: false
    }))));
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/accordion-bootstrap') && blocks[category.slug + '/accordion-bootstrap']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-pane', {
      title: __('Pane', 'inclind-pane'),
      description: __('Accordion pane.', 'inclind-pane'),
      parent: [category.slug + '/accordion-bootstrap'],
      category: 'inclind-blocks',
      attributes: {
        id: {
          type: 'number',
          default: 1
        },
        title: {
          type: 'array',
          source: 'children',
          selector: '.kt-blocks-accordion-title',
          default: ''
        },
        titleTag: {
          type: 'string',
          default: 'h5'
        },
        hideLabel: {
          type: 'bool',
          default: false
        },
        startCollapsed: {
          type: 'bool',
          default: false
        },
        icon: {
          type: 'string',
          default: ''
        },
        iconSide: {
          type: 'string',
          default: 'right'
        },
        uniqueID: {
          type: 'string',
          default: ''
        },
        parentID: {
          type: 'string',
          default: ''
        }
      },
      supports: {
        inserter: false,
        reusable: false,
        html: false,
        anchor: true
      },

      getEditWrapperProps(attributes) {
        return {
          'data-pane': attributes.id
        };
      },

      edit: InclindPane,
      save: props => {
        const {
          attributes: {
            id,
            uniqueID,
            parentID,
            startCollapsed,
            title,
            icon,
            iconSide,
            hideLabel,
            titleTag
          }
        } = props;
        const HtmlTagOut = !titleTag ? 'h5' : titleTag; // Render the section on Front-end:

        return React.createElement("div", {
          className: `card mb-0 pane-${id} pane${uniqueID}`
        }, React.createElement("div", {
          className: "card-header p-0",
          id: `acc-header${uniqueID}`
        }, React.createElement(HtmlTagOut, {
          className: `mb-0 ${icon ? 'has-icon' : ''}`
        }, icon && 'left' === iconSide && React.createElement(_genicon.default, {
          className: `btn-svg-icon btn-svg-icon-${icon} btn-side-${iconSide}`,
          name: icon,
          icon: _svgicons.default[icon]
        }), React.createElement("button", {
          className: "p-4 pr-6 col-12 btn btn-link text-left",
          type: "button",
          "data-toggle": "collapse",
          "data-target": `#acc-body${uniqueID}`,
          "aria-expanded": "false" // aria-expanded={`${((!startCollapsed && id == 1) ? 'true' : 'false')}`}
          ,
          "aria-controls": `acc-body${uniqueID}`
        }, React.createElement(RichText.Content, {
          className: 'kt-blocks-accordion-title acc-title-inner',
          tagName: 'span',
          value: title
        })), icon && 'right' === iconSide && React.createElement(_genicon.default, {
          className: `btn-svg-icon btn-svg-icon-${icon} btn-side-${iconSide}`,
          name: icon,
          icon: _svgicons.default[icon]
        }))), React.createElement("div", {
          id: `acc-body${uniqueID}` // className={`collapse ${((!startCollapsed && id == 1) ? 'show' : '')}`}
          ,
          className: "collapse",
          "aria-labelledby": `acc-header${uniqueID}`,
          "data-parent": `#${parentID}`
        }, React.createElement("div", {
          className: "card-body"
        }, React.createElement(InnerBlocks.Content, null))));
      }
    });
  }
}

},{"../../genicon":52,"../../svgicons":56,"../../svgiconsnames":57,"./components/pane":41,"@fonticonpicker/react-fonticonpicker":59}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a SectionWrap wrapper Component.
 */

class SectionWrap extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = '';
    let gradient = '';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-section-wrap') {
      className = className + ' ' + this.props.className;
    }

    if (this.props.backgroundType === 'gradient') {
      className = className + ' gradient-bg';
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = SectionWrap;

},{}],44:[function(require,module,exports){
"use strict";

var _sectionWrap = _interopRequireDefault(require("./components/section-wrap"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
} // import GenIcon from "../../genicon";
// import Ico from "../../svgicons";
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component,
  Fragment
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  BlockAlignmentToolbar,
  InnerBlocks,
  InspectorControls,
  BlockControls,
  AlignmentToolbar,
  MediaUpload
} = wp.blockEditor; // Register components

const {
  IconButton,
  PanelBody,
  SelectControl,
  BaseControl
} = wp.components;
const {
  dispatch,
  select
} = wp.data;

class InclindSectionWrap extends Component {
  constructor() {
    super(...arguments);
  } // Render element while editing in Gutenberg:


  render() {
    const {
      attributes: {
        backgroundType,
        backgroundColor,
        backgroundImage,
        backgroundImageData,
        overlayOpacity,
        overlayColor,
        align,
        margin,
        padding,
        contentWidth,
        uniqueID,
        hAlign
      },
      className,
      setAttributes,
      isSelected
    } = this.props;
    const hasImageBg = backgroundType === 'image';
    const containerStyle = {
      backgroundColor: !hasImageBg && backgroundType !== 'none' ? backgroundColor : '',
      'box-shadow': '1px 1px 14px -7px grey',
      backgroundImage: hasImageBg && `url('${backgroundImage}')`,
      'background-size': hasImageBg && 'cover'
    };
    const overlayStyle = !hasImageBg ? {} : {
      display: 'block',
      backgroundColor: overlayColor || '#2e358f',
      opacity: parseInt(overlayOpacity, 10) / 100
    };
    const wrapperStyle = {
      maxWidth: contentWidth && `${contentWidth}px`
    };
    const classes = [className, `text-${hAlign}`, `py-4`, (0, _classnames.default)(`align${align ? align : 'none'}`)];

    if (backgroundType === 'gradient') {
      classes.push('gradient-bg');
      classes.push('has-overlay');
    } else if (backgroundType === 'gray') {
      classes.push('bg-lighter-gray');
    } else if (backgroundType !== 'none') {
      classes.push('has-overlay');
      classes.push('text-white');
    }

    if (margin) {
      classes.push(`my-${margin}`);
    }

    if (padding) {
      classes.push(`py-${padding}`);
    }

    const vOptions = [{
      label: __('None'),
      value: ''
    }, {
      label: __('Small'),
      value: '3'
    }, {
      label: __('Medium'),
      value: '4'
    }, {
      label: __('Large'),
      value: '5'
    }];
    const buttonCls = {
      [align]: 'is-active'
    };

    const onSelectImage = (media, field) => {
      const dataAttrs = {};

      if (media.data) {
        dataAttrs[`${field}Data`] = Object.keys(media.data).reduce((result, key) => {
          result[`data-${key.replace('_', '-')}`] = media.data[key];
          return result;
        }, {});
      }

      setAttributes({
        [field]: media.url,
        ...dataAttrs
      });
    };

    return React.createElement(Fragment, null, React.createElement(BlockControls, null, React.createElement(AlignmentToolbar, {
      value: hAlign,
      onChange: value => setAttributes({
        hAlign: value
      })
    }), React.createElement(BlockAlignmentToolbar, {
      value: align,
      controls: ['center', 'wide', 'full', 'left', 'right'],
      onChange: value => setAttributes({
        align: value
      })
    })), React.createElement(Fragment, null, React.createElement(InspectorControls, null, React.createElement(PanelBody, {
      title: __('Block Settings')
    }, React.createElement(SelectControl, {
      label: __('Background Type'),
      value: backgroundType,
      options: [{
        label: __('Transparent'),
        value: 'none'
      }, {
        label: __('Gray Gradient'),
        value: 'gradient'
      }, {
        label: __('Blue'),
        value: 'color'
      }, {
        label: __('Gray'),
        value: 'gray'
      }, {
        label: __('Image w/Overlay'),
        value: 'image'
      }],
      onChange: value => setAttributes({
        backgroundType: value
      })
    }), hasImageBg && React.createElement(BaseControl, {
      label: __('Choose background image')
    }, React.createElement(MediaUpload, {
      allowedTypes: ['image'],
      onSelect: media => onSelectImage(media, 'backgroundImage'),
      render: ({
        open
      }) => React.createElement(IconButton, {
        className: "components-toolbar__control",
        label: __('Edit image'),
        icon: "format-image",
        onClick: open
      })
    }))))), React.createElement("div", {
      className: "kt-section-selecter"
    }, __('Section Wrap placeholder', 'inclind-blocks')), React.createElement("div", _extends({
      id: `kt-btns_${uniqueID}`,
      className: classes.join(' '),
      style: containerStyle
    }, backgroundImageData), React.createElement("div", {
      className: "g-section-overlay",
      style: overlayStyle
    }), React.createElement("div", {
      className: `g-section-wrapper ${align == 'full' ? ' container' : ' container-fluid'}`,
      style: wrapperStyle
    }, React.createElement(InnerBlocks, {
      template: [],
      templateLock: false
    }))));
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-section-wrap') && blocks[category.slug + '/inclind-section-wrap']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-section-wrap', {
      title: __('Section Wrapper', 'inclind-section-wrap'),
      description: __('Wrap the content into a container and select full width display or contained to a grid. Adds ability to turn on/off gradient on the wrapper.', 'inclind-section-wrap'),
      category: 'inclind-blocks',
      keywords: [__('Section', 'inclind-section-wrap'), __('Wrapper', 'inclind-section-wrap'), __('inclind', 'inclind-section-wrap'), __('custom', 'inclind-section-wrap')],
      attributes: {
        backgroundType: {
          type: 'string',
          default: 'none'
        },
        backgroundColor: {
          type: 'string',
          default: '#2e358f'
        },
        backgroundImage: {
          type: 'string',
          default: 'https://placeimg.com/1200/600/nature/grayscale'
        },
        backgroundImageData: {
          type: 'object',
          default: {}
        },
        overlayOpacity: {
          type: 'number',
          default: 80
        },
        overlayColor: {
          type: 'string',
          default: '#2e358f'
        },
        padding: {
          type: 'string',
          default: ''
        },
        margin: {
          type: 'string',
          default: ''
        },
        align: {
          type: 'string',
          default: 'none'
        },
        contentWidth: {
          type: 'number'
        },
        uniqueID: {
          type: 'string',
          default: ''
        },
        hAlign: {
          type: 'string',
          default: 'left'
        }
      },

      // Render the block components.
      getEditWrapperProps({
        blockAlignment
      }) {
        if ('left' === blockAlignment || 'right' === blockAlignment || 'center' === blockAlignment) {
          return {
            'data-align': blockAlignment
          };
        }
      },

      edit: InclindSectionWrap,
      save: props => {
        const {
          attributes: {
            backgroundType,
            backgroundColor,
            backgroundImage,
            backgroundImageData,
            overlayOpacity,
            overlayColor,
            align,
            margin,
            padding,
            contentWidth,
            uniqueID,
            hAlign
          }
        } = props;
        const hasImageBg = backgroundType === 'image';
        const containerStyle = {
          backgroundColor: !hasImageBg && backgroundType !== 'none' ? backgroundColor : '',
          backgroundImage: hasImageBg && `url('${backgroundImage}')`,
          'background-size': 'cover'
        };
        const overlayStyle = !hasImageBg ? {} : {
          display: 'block',
          backgroundColor: overlayColor || '#2e358f',
          opacity: parseInt(overlayOpacity, 10) / 100
        };
        const wrapperStyle = {
          maxWidth: contentWidth && `${contentWidth}px`
        };
        const classes = [`text-${hAlign}`, `py-4`, (0, _classnames.default)(`align${align ? align : 'none'}`)];

        if (backgroundType === 'gradient') {
          classes.push('gradient-bg');
          classes.push('has-overlay');
        } else if (backgroundType === 'gray') {
          classes.push('bg-lighter-gray');
        } else if (backgroundType !== 'none') {
          classes.push('has-overlay');
          classes.push('text-white');
        }

        if (margin) {
          classes.push(`my-${margin}`);
        }

        if (padding) {
          classes.push(`py-${padding}`);
        } // Render the section on Front-end:


        return React.createElement("div", _extends({
          className: classes.join(' '),
          style: containerStyle
        }, backgroundImageData), React.createElement("div", {
          className: "g-section-overlay",
          style: backgroundType !== 'gradient' && backgroundType !== 'none' ? overlayStyle : ''
        }), React.createElement("div", {
          className: `g-section-wrapper ${align == 'full' ? ' container' : ' container-fluid'}`,
          style: wrapperStyle
        }, React.createElement(InnerBlocks.Content, null)));
      }
    });
  }
}

},{"./components/section-wrap":43,"classnames":60}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0; // Setup the block.

const {
  Component
} = wp.element;
/**
 * Create a Tab wrapper Component.
 */

class Tab extends Component {
  constructor(props) {
    super(...arguments);
  }

  render() {
    let className = '';

    if (this.props.className !== 'wp-block-inclind-blocks-inclind-tab') {
      className = className + ' ' + this.props.className;
    }

    return React.createElement("div", {
      className: className
    }, this.props.children);
  }

}

exports.default = Tab;

},{}],46:[function(require,module,exports){
"use strict";

var _tab = _interopRequireDefault(require("./components/tab"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} // Import block dependencies and components
// import attributes from "../tabs/attributes";
// import edit from "../tabs/edit";
// import save from "../tabs/save";
// Internationalization


const __ = Drupal.t; // Extend component

const {
  Component,
  Fragment
} = wp.element; // Register block

const {
  registerBlockType
} = wp.blocks; // Register editor components

const {
  InnerBlocks
} = wp.blockEditor; // Register components
// const {
//   Fragment,
//   Component,
// } = wp.components;

const {
  dispatch,
  select
} = wp.data;
/**
 * This allows for checking to see if the block needs to generate a new ID.
 */

const kttabUniqueIDs = [];

class InclindTab extends Component {
  constructor() {
    super(...arguments);
    this.state = {
      settings: {}
    };
  }

  componentDidMount() {
    if (!this.props.attributes.uniqueID) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      kttabUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else if (kttabUniqueIDs.includes(this.props.attributes.uniqueID)) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      kttabUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else {
      kttabUniqueIDs.push(this.props.attributes.uniqueID);
    }
  } // Render element while editing in Gutenberg:


  render() {
    const {
      attributes: {
        id,
        uniqueID,
        parentID
      }
    } = this.props;
    return React.createElement(Fragment, null, React.createElement("div", {
      className: `kt-tab-inner-content kt-inner-tab-${id} kt-inner-tab${uniqueID}`
    }, React.createElement(InnerBlocks, {
      templateLock: false
    })));
  }

} //  Start Drupal Specific.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]); // End Drupal Specific.

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-tabs') && blocks[category.slug + '/inclind-tabs']) {
    // Register the block.
    registerBlockType(category.slug + '/inclind-tab', {
      title: __('Tab (Bootstrap)', 'inclind-tab'),
      description: __('Single Tab element for Tabs creation.', 'inclind-tab'),
      category: 'inclind-blocks',
      parent: [category.slug + '/inclind-tabs'],
      keywords: [__('Tab', 'inclind-tab'), __('inclind', 'inclind-tab'), __('custom', 'inclind-tab')],
      attributes: {
        id: {
          type: 'number',
          default: 1
        },
        uniqueID: {
          type: 'string',
          default: ''
        },
        parentID: {
          type: 'string',
          default: ''
        }
      },
      supports: {
        inserter: false,
        reusable: false,
        html: false
      },

      // Render the block components.
      getEditWrapperProps(attributes) {
        return {
          'data-tab': attributes.id
        };
      },

      edit: InclindTab,

      save({
        attributes
      }) {
        const {
          id,
          uniqueID,
          parentID
        } = attributes;
        const backupAnchor = `${parentID}-tab-${id}`;
        const ref = `${parentID}-tabcontent-${id}`;
        const sel_tab = `${id == 1 ? 'true' : 'false'}`;
        const sel_tab_class = `${id == 1 ? 'show active' : ''}`; // Render the Tab on Front-end:

        return React.createElement("div", {
          className: `tab-pane fade ${sel_tab_class}`,
          id: `${ref}`,
          role: "tabpanel",
          "aria-labelledby": `${backupAnchor}`
        }, React.createElement(InnerBlocks.Content, null)) // <div
        //     className={`kt-tab-inner-content kt-inner-tab-${id} kt-inner-tab${uniqueID}`}>
        //   <div className={'kt-tab-inner-content-inner'}>
        //     <InnerBlocks.Content/>
        //   </div>
        // </div>
        ;
      }

    });
  }
}

},{"./components/tab":45}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * @file
 * BLOCK: Inclind Tabs Attributes.
 */
// Internationalization.

const __ = Drupal.t;
const attributes = {
  uniqueID: {
    type: 'string',
    default: ''
  },
  tabCount: {
    type: 'number',
    default: 3
  },
  layout: {
    type: 'string',
    default: 'tabs'
  },
  mobileLayout: {
    type: 'string',
    default: 'inherit'
  },
  tabletLayout: {
    type: 'string',
    default: 'inherit'
  },
  currentTab: {
    type: 'number',
    default: 1
  },
  minHeight: {
    type: 'number',
    default: ''
  },
  maxWidth: {
    type: 'number',
    default: ''
  },
  contentBgColor: {
    type: 'string',
    default: ''
  },
  contentBorderColor: {
    type: 'string',
    default: ''
  },
  contentBorder: {
    type: 'array',
    default: [1, 1, 1, 1]
  },
  contentBorderControl: {
    type: 'string',
    default: 'linked'
  },
  innerPadding: {
    type: 'array',
    default: [20, 20, 20, 20]
  },
  innerPaddingControl: {
    type: 'string',
    default: 'linked'
  },
  innerPaddingM: {
    type: 'array'
  },
  tabAlignment: {
    type: 'string',
    default: 'left'
  },
  blockAlignment: {
    type: 'string',
    default: 'none'
  },
  titles: {
    type: 'array',
    default: [{
      text: __('Tab 1'),
      icon: '',
      iconSide: 'right',
      onlyIcon: false,
      subText: '',
      anchor: ''
    }, {
      text: __('Tab 2'),
      icon: '',
      iconSide: 'right',
      onlyIcon: false,
      subText: '',
      anchor: ''
    }, {
      text: __('Tab 3'),
      icon: '',
      iconSide: 'right',
      onlyIcon: false,
      subText: '',
      anchor: ''
    }]
  },
  iSize: {
    type: 'number',
    default: 14
  },
  titleColor: {
    type: 'string'
  },
  titleColorHover: {
    type: 'string'
  },
  titleColorActive: {
    type: 'string'
  },
  titleBg: {
    type: 'string'
  },
  titleBgHover: {
    type: 'string'
  },
  titleBgActive: {
    type: 'string',
    default: '#ffffff'
  },
  titleBorder: {
    type: 'string'
  },
  titleBorderHover: {
    type: 'string'
  },
  titleBorderActive: {
    type: 'string'
  },
  titleBorderWidth: {
    type: 'array'
  },
  titleBorderControl: {
    type: 'string',
    default: 'individual'
  },
  titleBorderRadius: {
    type: 'array'
  },
  titleBorderRadiusControl: {
    type: 'string',
    default: 'individual'
  },
  titlePadding: {
    type: 'array'
  },
  titlePaddingControl: {
    type: 'string',
    default: 'individual'
  },
  titleMargin: {
    type: 'array'
  },
  titleMarginControl: {
    type: 'string',
    default: 'individual'
  },
  size: {
    type: 'number'
  },
  sizeType: {
    type: 'string',
    default: 'px'
  },
  lineHeight: {
    type: 'number'
  },
  lineType: {
    type: 'string',
    default: 'px'
  },
  tabSize: {
    type: 'number'
  },
  tabLineHeight: {
    type: 'number'
  },
  mobileSize: {
    type: 'number'
  },
  mobileLineHeight: {
    type: 'number'
  },
  letterSpacing: {
    type: 'number'
  },
  typography: {
    type: 'string',
    default: ''
  },
  googleFont: {
    type: 'boolean',
    default: false
  },
  loadGoogleFont: {
    type: 'boolean',
    default: true
  },
  fontSubset: {
    type: 'string',
    default: ''
  },
  fontVariant: {
    type: 'string',
    default: ''
  },
  fontWeight: {
    type: 'string',
    default: 'regular'
  },
  fontStyle: {
    type: 'string',
    default: 'normal'
  },
  startTab: {
    type: 'number',
    default: ''
  },
  showPresets: {
    type: 'bool',
    default: false
  },
  subtitleFont: {
    type: 'array',
    default: [{
      size: ['', '', ''],
      sizeType: 'px',
      lineHeight: ['', '', ''],
      lineType: 'px',
      letterSpacing: '',
      textTransform: '',
      family: '',
      google: false,
      style: '',
      weight: '',
      variant: '',
      subset: '',
      loadGoogle: true,
      padding: [0, 0, 0, 0],
      paddingControl: 'linked',
      margin: [0, 0, 0, 0],
      marginControl: 'linked'
    }]
  },
  enableSubtitle: {
    type: 'bool',
    default: false
  },
  widthType: {
    type: 'string',
    default: 'normal'
  },
  tabWidth: {
    type: 'array',
    default: [4, '', '']
  },
  gutter: {
    type: 'array',
    default: [10, '', '']
  }
};
var _default = attributes;
exports.default = _default;

},{}],48:[function(require,module,exports){
"use strict";

var _attributes = _interopRequireDefault(require("./attributes"));

var _classnames = _interopRequireDefault(require("classnames"));

var _times = _interopRequireDefault(require("lodash/times"));

var _edit = _interopRequireDefault(require("./edit"));

var _save = _interopRequireDefault(require("./save"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * @file
 * BLOCK: Inclind Tabs.
 */
// Import Attributes.
// Import Edit.
// Import Save.
// import Icon from "../infobox/components/icon";
// import Infobox from "../infobox/components/infobox";
// Internationalization


const __ = Drupal.t; // Internal block libraries.

const {
  sprintf
} = wp.i18n;
const {
  registerBlockType
} = wp.blocks;
const {
  Fragment
} = wp.element;
const {
  select,
  dispatch
} = wp.data;
const {
  InnerBlocks,
  RichText
} = wp.blockEditor;
/**
 * Strip alpha-numeric characters from a string.
 *
 * @param string
 *   The string to be stripped.
 *
 * @return {*}
 *   The transformed string.
 */

function stripStringRender(string) {
  return string.toLowerCase().replace(/[^0-9a-z-]/g, '');
} // Initialize a Category for the block.


const category = {
  slug: 'inclind-blocks',
  title: __('Custom Blocks')
}; // Grab the current categories and merge in the new category if not present.

const currentCategories = select('core/blocks').getCategories().filter(item => item.slug !== category.slug);
dispatch('core/blocks').setCategories([category, ...currentCategories]);

if (drupalSettings && drupalSettings.editor.formats.gutenberg.editorSettings !== undefined) {
  const blocks = drupalSettings.editor.formats.gutenberg.editorSettings.allowedBlocks;

  if (blocks.hasOwnProperty(category.slug + '/inclind-tabs') && blocks[category.slug + '/inclind-tabs']) {
    // Register the block.
    registerBlockType('inclind-blocks/inclind-tabs', {
      title: __('Tabs'),
      category: 'inclind-blocks',
      keywords: [__('tabs'), __('tab'), __('Inclind')],
      supports: {
        anchor: true
      },
      attributes: _attributes.default,

      /**
       * Implement getEditoorWrapperProps().
       *
       * @param blockAlignment
       *   Alignment property value.
       *
       * @return {{"data-align": *}}
       *   An object containing data attributes for the wrapper.
       */
      getEditWrapperProps({
        blockAlignment
      }) {
        if ('full' === blockAlignment || 'wide' === blockAlignment || 'center' === blockAlignment) {
          return {
            'data-align': blockAlignment
          };
        }
      },

      edit: _edit.default,
      save: _save.default // deprecated: [
      //   {
      //     attributes: {
      //       uniqueID: {
      //         type: 'string',
      //         default: '',
      //       },
      //       tabCount: {
      //         type: 'number',
      //         default: 3,
      //       },
      //       layout: {
      //         type: 'string',
      //         default: 'tabs',
      //       },
      //       mobileLayout: {
      //         type: 'string',
      //         default: 'inherit',
      //       },
      //       tabletLayout: {
      //         type: 'string',
      //         default: 'inherit',
      //       },
      //       currentTab: {
      //         type: 'number',
      //         default: 1,
      //       },
      //       minHeight: {
      //         type: 'number',
      //         default: '',
      //       },
      //       maxWidth: {
      //         type: 'number',
      //         default: '',
      //       },
      //       contentBgColor: {
      //         type: 'string',
      //         default: '',
      //       },
      //       contentBorderColor: {
      //         type: 'string',
      //         default: '',
      //       },
      //       contentBorder: {
      //         type: 'array',
      //         default: [ 1, 1, 1, 1 ],
      //       },
      //       contentBorderControl: {
      //         type: 'string',
      //         default: 'linked',
      //       },
      //       innerPadding: {
      //         type: 'array',
      //         default: [ 20, 20, 20, 20 ],
      //       },
      //       innerPaddingControl: {
      //         type: 'string',
      //         default: 'linked',
      //       },
      //       innerPaddingM: {
      //         type: 'array',
      //       },
      //       tabAlignment: {
      //         type: 'string',
      //         default: 'left',
      //       },
      //       blockAlignment: {
      //         type: 'string',
      //         default: 'none',
      //       },
      //       titles: {
      //         type: 'array',
      //         default: [ {
      //           text: __('Tab 1'),
      //           icon: '',
      //           iconSide: 'right',
      //           onlyIcon: false,
      //         }, {
      //           text: __('Tab 2'),
      //           icon: '',
      //           iconSide: 'right',
      //           onlyIcon: false,
      //         }, {
      //           text: __('Tab 3'),
      //           icon: '',
      //           iconSide: 'right',
      //           onlyIcon: false,
      //         } ],
      //       },
      //       iSize: {
      //         type: 'number',
      //         default: 14,
      //       },
      //       titleColor: {
      //         type: 'string',
      //       },
      //       titleColorHover: {
      //         type: 'string',
      //       },
      //       titleColorActive: {
      //         type: 'string',
      //       },
      //       titleBg: {
      //         type: 'string',
      //       },
      //       titleBgHover: {
      //         type: 'string',
      //       },
      //       titleBgActive: {
      //         type: 'string',
      //         default: '#ffffff',
      //       },
      //       titleBorder: {
      //         type: 'string',
      //       },
      //       titleBorderHover: {
      //         type: 'string',
      //       },
      //       titleBorderActive: {
      //         type: 'string',
      //       },
      //       titleBorderWidth: {
      //         type: 'array',
      //       },
      //       titleBorderControl: {
      //         type: 'string',
      //         default: 'individual',
      //       },
      //       titleBorderRadius: {
      //         type: 'array',
      //       },
      //       titleBorderRadiusControl: {
      //         type: 'string',
      //         default: 'individual',
      //       },
      //       titlePadding: {
      //         type: 'array',
      //       },
      //       titlePaddingControl: {
      //         type: 'string',
      //         default: 'individual',
      //       },
      //       titleMargin: {
      //         type: 'array',
      //       },
      //       titleMarginControl: {
      //         type: 'string',
      //         default: 'individual',
      //       },
      //       size: {
      //         type: 'number',
      //       },
      //       sizeType: {
      //         type: 'string',
      //         default: 'px',
      //       },
      //       lineHeight: {
      //         type: 'number',
      //       },
      //       lineType: {
      //         type: 'string',
      //         default: 'px',
      //       },
      //       tabSize: {
      //         type: 'number',
      //       },
      //       tabLineHeight: {
      //         type: 'number',
      //       },
      //       mobileSize: {
      //         type: 'number',
      //       },
      //       mobileLineHeight: {
      //         type: 'number',
      //       },
      //       letterSpacing: {
      //         type: 'number',
      //       },
      //       typography: {
      //         type: 'string',
      //         default: '',
      //       },
      //       googleFont: {
      //         type: 'boolean',
      //         default: false,
      //       },
      //       loadGoogleFont: {
      //         type: 'boolean',
      //         default: true,
      //       },
      //       fontSubset: {
      //         type: 'string',
      //         default: '',
      //       },
      //       fontVariant: {
      //         type: 'string',
      //         default: '',
      //       },
      //       fontWeight: {
      //         type: 'string',
      //         default: 'regular',
      //       },
      //       fontStyle: {
      //         type: 'string',
      //         default: 'normal',
      //       },
      //     },
      //     save: ({attributes}) => {
      //       const { tabCount, blockAlignment, currentTab, mobileLayout, layout, tabletLayout, uniqueID, titles, iSize, maxWidth, tabAlignment } = attributes;
      //       const layoutClass = (! layout ? 'tabs' : layout);
      //       const tabLayoutClass = (! tabletLayout ? 'inherit' : tabletLayout);
      //       const mobileLayoutClass = (! mobileLayout ? 'inherit' : mobileLayout);
      //       const accordionClass = ((mobileLayout && 'accordion' === mobileLayout) || (tabletLayout && 'accordion' === tabletLayout) ? 'kt-create-accordion' : '');
      //       const classId = (! uniqueID ? 'notset' : uniqueID);
      //       const classes = classnames(`align${ blockAlignment }`);
      //       const innerClasses = classnames(`kt-tabs-wrap kt-tabs-id${ classId } kt-tabs-has-${ tabCount }-tabs kt-active-tab-${ currentTab } kt-tabs-layout-${ layoutClass } kt-tabs-tablet-layout-${ tabLayoutClass } kt-tabs-mobile-layout-${ mobileLayoutClass } kt-tab-alignment-${ tabAlignment } ${ accordionClass }`);
      //       const renderTitles = (index) => {
      //         return (
      //           <Fragment>
      //             <li id={ `tab-${ ( titles[ index ] && titles[ index ].text ? stripStringRender( titles[ index ].text.toString() ) : stripStringRender( __( 'Tab' ) + ( 1 + index ) ) ) }` } className={ `kt-title-item kt-title-item-${ 1 + index } kt-tabs-svg-show-${ ( titles[ index ] && titles[ index ].onlyIcon ? 'only' : 'always' ) } kt-tabs-icon-side-${ ( titles[ index ] && titles[ index ].iconSide ? titles[ index ].iconSide : 'right' ) } kt-tab-title-${ ( 1 + index === currentTab ? 'active' : 'inactive' ) }` }>
      //               <a href={ `#tab-${ ( titles[ index ] && titles[ index ].text ? stripStringRender( titles[ index ].text.toString() ) : stripStringRender( __( 'Tab' ) + ( 1 + index ) ) ) }` } data-tab={ 1 + index } className={ `kt-tab-title kt-tab-title-${ 1 + index } ` } >
      //                 <RichText.Content
      //                   tagName="span"
      //                   value={ ( titles[ index ] && titles[ index ].text ? titles[ index ].text : sprintf( __( 'Tab %d' ), ( 1 + index ) ) ) }
      //                   className={ 'kt-title-text' }
      //                 />
      //               </a>
      //             </li>
      //           </Fragment>
      //         );
      //       };
      //       return (
      //         <div className={ classes } >
      //           <div className={ innerClasses } style={ {
      //             maxWidth: ( maxWidth ? maxWidth + 'px' : 'none' ),
      //           } }>
      //             <ul className="kt-tabs-title-list">
      //               { times( tabCount, n => renderTitles( n ) ) }
      //             </ul>
      //             <div className="kt-tabs-content-wrap">
      //               <InnerBlocks.Content />
      //             </div>
      //           </div>
      //         </div>
      //       );
      //     },
      //   },
      // ],

    });
  }
}

},{"./attributes":47,"./edit":49,"./save":50,"classnames":60,"lodash/times":187}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("../../icons"));

var _times = _interopRequireDefault(require("lodash/times"));

var _map = _interopRequireDefault(require("lodash/map"));

var _classnames = _interopRequireDefault(require("classnames"));

var _memize = _interopRequireDefault(require("memize"));

var _filter = _interopRequireDefault(require("lodash/filter"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * @file
 * BLOCK: Inclind Tabs Editor.
 */
// Import Icons.
// Import External.
// Internationalization


const __ = Drupal.t; // Internal block libraries.

const {
  sprintf
} = wp.i18n;
const {
  createBlock
} = wp.blocks;
const {
  compose
} = wp.compose;
const {
  withSelect,
  withDispatch
} = wp.data;
const {
  Component,
  Fragment
} = wp.element;
const {
  InnerBlocks,
  InspectorControls,
  RichText,
  BlockControls,
  AlignmentToolbar,
  BlockAlignmentToolbar
} = wp.blockEditor;
const {
  Button,
  ButtonGroup,
  Tooltip,
  TabPanel,
  IconButton,
  Dashicon,
  PanelBody,
  ToggleControl,
  TextControl
} = wp.components;
const ALLOWED_BLOCKS = ['inclind-blocks/inclind-tab'];
/**
 * Regular expression matching invalid anchor characters for replacement.
 *
 * @type {RegExp}
 */

const ANCHOR_REGEX = /[\s#]/g;
/**
 * Returns the layouts configuration for a given number of panes.
 *
 * @param {number} panes Number of panes.
 * @param {string} parent The ID of the Parent container.
 *
 * @return {Object[]} Panes layout configuration.
 */

const getPanesTemplate = (0, _memize.default)((panes, parent) => {
  return (0, _times.default)(panes, n => ['inclind-blocks/inclind-tab', {
    id: n + 1,
    parentID: parent
  }]);
}); // This allows for checking to see if the block needs to generate a new ID.

const kttabsUniqueIDs = [];
/**
 * Class InclindTabs.
 */

class InclindTabs extends Component {
  /**
   * InclindTabs Constructor.
   */
  constructor() {
    super(...arguments);
    this.showSettings = this.showSettings.bind(this);
    this.onMoveForward = this.onMoveForward.bind(this);
    this.onMoveBack = this.onMoveBack.bind(this);
    this.state = {
      hovered: 'false',
      showPreset: false,
      settings: {}
    };
  }

  componentDidMount() {
    if (!this.props.attributes.uniqueID) {
      if (this.props.attributes.showPresets) {
        this.setState({
          showPreset: true
        });
      }

      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      kttabsUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else if (kttabsUniqueIDs.includes(this.props.attributes.uniqueID)) {
      this.props.setAttributes({
        uniqueID: '_' + this.props.clientId.substr(2, 9)
      });
      kttabsUniqueIDs.push('_' + this.props.clientId.substr(2, 9));
    } else {
      kttabsUniqueIDs.push(this.props.attributes.uniqueID);
    }

    const blockSettings = {};

    if (blockSettings['inclind-blocks/inclind-tabs'] !== undefined && typeof blockSettings['inclind-blocks/inclind-tabs'] === 'object') {
      this.setState({
        settings: blockSettings['inclind-blocks/inclind-tabs']
      });
    }
  }
  /**
   * Returns a value determining whether or not to show various settings.
   *
   * This can probably be removed since we are not checking roles on the editor
   * side.
   *
   * @param key
   *   String value that was the WP User Role.
   *
   * @return {boolean}
   *   Return TRUE indicating show all settings.
   */


  showSettings(key) {
    return true;
  }
  /**
   * Save updates to the attributes arry when content changes are made to tabs.
   *
   * @param value
   * @param index
   */


  saveArrayUpdate(value, index) {
    const {
      attributes,
      setAttributes
    } = this.props;
    const {
      titles
    } = attributes;
    const newItems = titles.map((item, thisIndex) => {
      if (index === thisIndex) {
        item = { ...item,
          ...value
        };
      }

      return item;
    });
    setAttributes({
      titles: newItems
    });
  }
  /**
   * Move the tab titles and call to move the tab.
   *
   * @param oldIndex
   * @param newIndex
   */


  onMove(oldIndex, newIndex) {
    const titles = [...this.props.attributes.titles];
    titles.splice(newIndex, 1, this.props.attributes.titles[oldIndex]);
    titles.splice(oldIndex, 1, this.props.attributes.titles[newIndex]);
    this.props.setAttributes({
      titles: titles,
      currentTab: parseInt(newIndex + 1)
    });

    if (this.props.attributes.startTab === oldIndex + 1) {
      this.props.setAttributes({
        startTab: newIndex + 1
      });
    } else if (this.props.attributes.startTab === newIndex + 1) {
      this.props.setAttributes({
        startTab: oldIndex + 1
      });
    }

    this.props.moveTab(this.props.tabsBlock.innerBlocks[oldIndex].clientId, newIndex);
    this.props.resetOrder();
    this.props.setAttributes({
      currentTab: parseInt(newIndex + 1)
    });
  }
  /**
   * Handler for moving a tab to the right.
   *
   * @param oldIndex
   *   The current position of the tab being moved.
   *
   * @return {function(...[*]=)}
   */


  onMoveForward(oldIndex) {
    return () => {
      if (oldIndex === this.props.realTabsCount - 1) {
        return;
      }

      this.onMove(oldIndex, oldIndex + 1);
    };
  }
  /**
   * Handler for moving a tab to the left.
   *
   * @param oldIndex
   *   The current position of the tab being moved.
   *
   * @return {function(...[*]=)}
   */


  onMoveBack(oldIndex) {
    return () => {
      if (oldIndex === 0) {
        return;
      }

      this.onMove(oldIndex, oldIndex - 1);
    };
  }
  /**
   * Render Callback for the Editor.
   *
   * @return {*}
   */


  render() {
    const {
      attributes: {
        uniqueID,
        tabCount,
        blockAlignment,
        mobileLayout,
        currentTab,
        tabletLayout,
        layout,
        innerPadding,
        minHeight,
        maxWidth,
        titles,
        titleColor,
        titleColorHover,
        titleColorActive,
        titleBg,
        titleBgHover,
        titleBgActive,
        size,
        sizeType,
        lineType,
        lineHeight,
        tabLineHeight,
        tabSize,
        mobileSize,
        mobileLineHeight,
        letterSpacing,
        borderRadius,
        titleBorderWidth,
        titleBorderControl,
        titleBorder,
        titleBorderHover,
        titleBorderActive,
        typography,
        fontVariant,
        fontWeight,
        fontStyle,
        fontSubset,
        googleFont,
        loadGoogleFont,
        innerPaddingControl,
        contentBorder,
        contentBorderControl,
        contentBorderColor,
        titlePadding,
        titlePaddingControl,
        titleMargin,
        titleMarginControl,
        contentBgColor,
        tabAlignment,
        titleBorderRadiusControl,
        titleBorderRadius,
        iSize,
        startTab,
        enableSubtitle,
        subtitleFont,
        tabWidth,
        gutter,
        widthType
      },
      clientId,
      className,
      setAttributes
    } = this.props;
    const layoutClass = !layout ? 'tabs' : layout;
    const sizeTypes = [{
      key: 'px',
      name: __('px')
    }, {
      key: 'em',
      name: __('em')
    }];
    const gconfig = {
      google: {
        families: [typography + (fontVariant ? ':' + fontVariant : '')]
      }
    };
    const sgconfig = {
      google: {
        families: [(subtitleFont && subtitleFont[0] && subtitleFont[0].family ? subtitleFont[0].family : '') + (subtitleFont && subtitleFont[0] && subtitleFont[0].variant ? ':' + subtitleFont[0].variant : '')]
      }
    };
    const sconfig = subtitleFont && subtitleFont[0] && subtitleFont[0].google ? sgconfig : '';

    const saveSubtitleFont = value => {
      let tempSubFont;

      if (undefined === subtitleFont || undefined !== subtitleFont && undefined === subtitleFont[0]) {
        tempSubFont = [{
          size: ['', '', ''],
          sizeType: 'px',
          lineHeight: ['', '', ''],
          lineType: 'px',
          letterSpacing: '',
          textTransform: '',
          family: '',
          google: false,
          style: '',
          weight: '',
          variant: '',
          subset: '',
          loadGoogle: true,
          padding: [0, 0, 0, 0],
          paddingControl: 'linked',
          margin: [0, 0, 0, 0],
          marginControl: 'linked'
        }];
      } else {
        tempSubFont = subtitleFont;
      }

      const newUpdate = tempSubFont.map((item, index) => {
        if (0 === index) {
          item = { ...item,
            ...value
          };
        }

        return item;
      });
      setAttributes({
        subtitleFont: newUpdate
      });
    };

    const startlayoutOptions = [{
      key: 'skip',
      name: __('Skip'),
      icon: __('Skip')
    }, {
      key: 'simple',
      name: __('Simple'),
      icon: _icons.default.tabsSimple
    }, {
      key: 'boldbg',
      name: __('Boldbg'),
      icon: _icons.default.tabsBold
    }, {
      key: 'center',
      name: __('Center'),
      icon: _icons.default.tabsCenter
    }, {
      key: 'vertical',
      name: __('Vertical'),
      icon: _icons.default.tabsVertical
    }];

    const setInitalLayout = key => {
      if ('skip' === key) {} else if ('simple' === key) {
        setAttributes({
          layout: 'tabs',
          tabAlignment: 'left',
          size: 1.1,
          sizeType: 'em',
          lineHeight: 1.4,
          lineType: 'em',
          titleBorderWidth: [1, 1, 0, 1],
          titleBorderControl: 'individual',
          titleBorderRadius: [4, 4, 0, 0],
          titleBorderRadiusControl: 'individual',
          titlePadding: [8, 20, 8, 20],
          titlePaddingControl: 'individual',
          titleMargin: [0, 8, -1, 0],
          titleMarginControl: 'individual',
          titleColor: '#444444',
          titleColorHover: '#444444',
          titleColorActive: '#444444',
          titleBg: '#ffffff',
          titleBgHover: '#ffffff',
          titleBgActive: '#ffffff',
          titleBorder: '#eeeeee',
          titleBorderHover: '#e2e2e2',
          titleBorderActive: '#bcbcbc',
          contentBgColor: '#ffffff',
          contentBorderColor: '#bcbcbc',
          contentBorder: [1, 1, 1, 1],
          contentBorderControl: 'linked'
        });
      } else if ('boldbg' === key) {
        setAttributes({
          layout: 'tabs',
          tabAlignment: 'left',
          size: 1.1,
          sizeType: 'em',
          lineHeight: 1.4,
          lineType: 'em',
          titleBorderWidth: [0, 0, 0, 0],
          titleBorderControl: 'linked',
          titleBorderRadius: [4, 4, 0, 0],
          titleBorderRadiusControl: 'individual',
          titlePadding: [8, 20, 8, 20],
          titlePaddingControl: 'individual',
          titleMargin: [0, 8, 0, 0],
          titleMarginControl: 'individual',
          titleColor: '#222222',
          titleColorHover: '#222222',
          titleColorActive: '#ffffff',
          titleBg: '#eeeeee',
          titleBgHover: '#e2e2e2',
          titleBgActive: '#0a6689',
          titleBorder: '#eeeeee',
          titleBorderHover: '#eeeeee',
          titleBorderActive: '#eeeeee',
          contentBgColor: '#ffffff',
          contentBorderColor: '#0a6689',
          contentBorder: [3, 0, 0, 0],
          contentBorderControl: 'individual'
        });
      } else if ('center' === key) {
        setAttributes({
          layout: 'tabs',
          tabAlignment: 'center',
          size: 1.1,
          sizeType: 'em',
          lineHeight: 1.4,
          lineType: 'em',
          titleBorderWidth: [0, 0, 4, 0],
          titleBorderControl: 'individual',
          titleBorderRadius: [4, 4, 0, 0],
          titleBorderRadiusControl: 'individual',
          titlePadding: [8, 20, 8, 20],
          titlePaddingControl: 'individual',
          titleMargin: [0, 8, 0, 0],
          titleMarginControl: 'individual',
          titleColor: '#555555',
          titleColorHover: '#555555',
          titleColorActive: '#0a6689',
          titleBg: '#ffffff',
          titleBgHover: '#ffffff',
          titleBgActive: '#ffffff',
          titleBorder: '#ffffff',
          titleBorderHover: '#eeeeee',
          titleBorderActive: '#0a6689',
          contentBgColor: '#ffffff',
          contentBorderColor: '#eeeeee',
          contentBorder: [1, 0, 0, 0],
          contentBorderControl: 'individual'
        });
      } else if ('vertical' === key) {
        setAttributes({
          layout: 'vtabs',
          mobileLayout: 'accordion',
          tabAlignment: 'left',
          size: 1.1,
          sizeType: 'em',
          lineHeight: 1.4,
          lineType: 'em',
          titleBorderWidth: [4, 0, 4, 4],
          titleBorderControl: 'individual',
          titleBorderRadius: [10, 0, 0, 10],
          titleBorderRadiusControl: 'individual',
          titlePadding: [12, 8, 12, 20],
          titlePaddingControl: 'individual',
          titleMargin: [0, -4, 10, 0],
          titleMarginControl: 'individual',
          titleColor: '#444444',
          titleColorHover: '#444444',
          titleColorActive: '#444444',
          titleBg: '#eeeeee',
          titleBgHover: '#e9e9e9',
          titleBgActive: '#ffffff',
          titleBorder: '#eeeeee',
          titleBorderHover: '#e9e9e9',
          titleBorderActive: '#eeeeee',
          contentBgColor: '#ffffff',
          contentBorderColor: '#eeeeee',
          contentBorder: [4, 4, 4, 4],
          contentBorderControl: 'linked',
          minHeight: 400
        });
      }
    };

    const config = googleFont ? gconfig : '';
    const fontMin = sizeType === 'em' ? 0.2 : 5;
    const fontMax = sizeType === 'em' ? 12 : 200;
    const fontStep = sizeType === 'em' ? 0.1 : 1;
    const lineMin = lineType === 'px' ? 5 : 0.2;
    const lineMax = lineType === 'px' ? 200 : 12;
    const lineStep = lineType === 'px' ? 1 : 0.1;
    const tabLayoutClass = !tabletLayout ? 'inherit' : tabletLayout;
    const mobileLayoutClass = !mobileLayout ? 'inherit' : mobileLayout;
    const classes = (0, _classnames.default)(className, `kt-tabs-wrap kt-tabs-id${uniqueID} kt-tabs-has-${tabCount}-tabs kt-active-tab-${currentTab} kt-tabs-layout-${layoutClass} kt-tabs-block kt-tabs-tablet-layout-${tabLayoutClass} kt-tabs-mobile-layout-${mobileLayoutClass} kt-tab-alignment-${tabAlignment}`); // Unique HTML ID for tabs:

    const acc_unique_id = `tabs_${this.props.clientId.substr(2, 9)}`;
    const mLayoutOptions = [{
      key: 'tabs',
      name: __('Tabs'),
      icon: _icons.default.tabs
    }, {
      key: 'vtabs',
      name: __('Vertical Tabs'),
      icon: _icons.default.vtabs
    }, {
      key: 'accordion',
      name: __('Accordion'),
      icon: _icons.default.accordion
    }];
    const layoutOptions = [{
      key: 'tabs',
      name: __('Tabs'),
      icon: _icons.default.tabs
    }, {
      key: 'vtabs',
      name: __('Vertical Tabs'),
      icon: _icons.default.vtabs
    }];
    const mobileControls = React.createElement("div", null, React.createElement(PanelBody, null, React.createElement("p", {
      className: "components-base-control__label"
    }, __('Mobile Layout')), React.createElement(ButtonGroup, {
      "aria-label": __('Mobile Layout')
    }, (0, _map.default)(mLayoutOptions, ({
      name,
      key,
      icon
    }) => React.createElement(Tooltip, {
      text: name
    }, React.createElement(Button, {
      key: key,
      className: "kt-layout-btn kt-tablayout",
      isSmall: true,
      isPrimary: mobileLayout === key,
      "aria-pressed": mobileLayout === key,
      onClick: () => setAttributes({
        mobileLayout: key
      })
    }, icon))))));
    const tabletControls = React.createElement(PanelBody, null, React.createElement("p", {
      className: "components-base-control__label"
    }, __('Tablet Layout')), React.createElement(ButtonGroup, {
      "aria-label": __('Tablet Layout')
    }, (0, _map.default)(mLayoutOptions, ({
      name,
      key,
      icon
    }) => React.createElement(Tooltip, {
      text: name
    }, React.createElement(Button, {
      key: key,
      className: "kt-layout-btn kt-tablayout",
      isSmall: true,
      isPrimary: tabletLayout === key,
      "aria-pressed": tabletLayout === key,
      onClick: () => setAttributes({
        tabletLayout: key
      })
    }, icon)))));
    const deskControls = React.createElement(Fragment, null, React.createElement(PanelBody, null, React.createElement("p", {
      className: "components-base-control__label"
    }, __('Layout')), React.createElement(ButtonGroup, {
      "aria-label": __('Layout')
    }, (0, _map.default)(layoutOptions, ({
      name,
      key,
      icon
    }) => React.createElement(Tooltip, {
      text: name
    }, React.createElement(Button, {
      key: key,
      className: "kt-layout-btn kt-tablayout",
      isSmall: true,
      isPrimary: layout === key,
      "aria-pressed": layout === key,
      onClick: () => {
        setAttributes({
          layout: key
        });
      }
    }, icon))))));
    const tabControls = React.createElement(TabPanel, {
      className: "kt-inspect-tabs",
      activeClass: "active-tab",
      tabs: [{
        name: 'desk',
        title: React.createElement(Dashicon, {
          icon: "desktop"
        }),
        className: 'kt-desk-tab'
      }, {
        name: 'tablet',
        title: React.createElement(Dashicon, {
          icon: "tablet"
        }),
        className: 'kt-tablet-tab'
      }, {
        name: 'mobile',
        title: React.createElement(Dashicon, {
          icon: "smartphone"
        }),
        className: 'kt-mobile-tab'
      }]
    }, tab => {
      let tabout; // if ( tab.name ) {
      // if ( 'mobile' === tab.name ) {
      //   tabout = mobileControls;
      // } else if ( 'tablet' === tab.name ) {
      //   tabout = tabletControls;
      // } else {

      tabout = deskControls; // }
      // }

      return React.createElement("div", null, tabout);
    });

    const renderTitles = index => {
      const subFont = subtitleFont && subtitleFont[0] && undefined !== subtitleFont[0].sizeType ? subtitleFont : [{
        size: ['', '', ''],
        sizeType: 'px',
        lineHeight: ['', '', ''],
        lineType: 'px',
        letterSpacing: '',
        textTransform: '',
        family: '',
        google: false,
        style: '',
        weight: '',
        variant: '',
        subset: '',
        loadGoogle: true,
        padding: [0, 0, 0, 0],
        paddingControl: 'linked',
        margin: [0, 0, 0, 0],
        marginControl: 'linked'
      }];
      return React.createElement(Fragment, null, React.createElement("li", {
        className: `kt-title-item kt-title-item-${index} kt-tabs-svg-show-${titles[index] && titles[index].onlyIcon ? 'only' : 'always'} kt-tabs-icon-side-${titles[index] && titles[index].iconSide ? titles[index].iconSide : 'right'} kt-tabs-has-icon-${titles[index] && titles[index].icon ? 'true' : 'false'} kt-tab-title-${1 + index === currentTab ? 'active' : 'inactive'}${enableSubtitle ? ' kb-tabs-have-subtitle' : ''}`,
        style: {
          margin: titleMargin ? titleMargin[0] + 'px ' + ('tabs' === layout && widthType === 'percent' ? '0px ' : titleMargin[1] + 'px ') + titleMargin[2] + 'px ' + ('tabs' === layout && widthType === 'percent' ? '0px ' : titleMargin[3] + 'px ') : ''
        }
      }, React.createElement("div", {
        className: `kt-tab-title kt-tab-title-${1 + index}`,
        style: {
          backgroundColor: titleBg,
          color: titleColor,
          fontSize: size + sizeType,
          lineHeight: lineHeight + lineType,
          fontWeight: fontWeight,
          fontStyle: fontStyle,
          letterSpacing: letterSpacing + 'px',
          fontFamily: typography ? typography : '',
          borderTopLeftRadius: borderRadius + 'px',
          borderTopRightRadius: borderRadius + 'px',
          borderWidth: titleBorderWidth ? titleBorderWidth[0] + 'px ' + titleBorderWidth[1] + 'px ' + titleBorderWidth[2] + 'px ' + titleBorderWidth[3] + 'px' : '',
          borderRadius: titleBorderRadius ? titleBorderRadius[0] + 'px ' + titleBorderRadius[1] + 'px ' + titleBorderRadius[2] + 'px ' + titleBorderRadius[3] + 'px' : '',
          padding: titlePadding ? titlePadding[0] + 'px ' + titlePadding[1] + 'px ' + titlePadding[2] + 'px ' + titlePadding[3] + 'px' : '',
          borderColor: titleBorder,
          marginRight: 'tabs' === layout && widthType === 'percent' ? gutter[0] + 'px' : undefined
        },
        onClick: () => setAttributes({
          currentTab: 1 + index
        }),
        onKeyPress: () => setAttributes({
          currentTab: 1 + index
        }),
        tabIndex: "0",
        role: "button"
      }, titles[index] && titles[index].icon && 'right' !== titles[index].iconSide && React.createElement(IconRender, {
        className: `kt-tab-svg-icon kt-tab-svg-icon-${titles[index].icon} kt-title-svg-side-${titles[index].iconSide}`,
        name: titles[index].icon,
        size: !iSize ? '14' : iSize,
        htmltag: "span"
      }), (undefined === enableSubtitle || !enableSubtitle) && React.createElement(RichText, {
        tagName: "div",
        placeholder: __('Tab Title'),
        value: titles[index] && titles[index].text ? titles[index].text : '',
        unstableOnFocus: () => setAttributes({
          currentTab: 1 + index
        }),
        onChange: value => {
          this.saveArrayUpdate({
            text: value
          }, index);
        },
        formattingControls: ['bold', 'italic', 'strikethrough'],
        allowedFormats: ['core/bold', 'core/italic', 'core/strikethrough'],
        className: 'kt-title-text',
        style: {
          lineHeight: lineHeight + lineType
        },
        keepPlaceholderOnFocus: true
      }), enableSubtitle && React.createElement("div", {
        className: "kb-tab-titles-wrap"
      }, React.createElement(RichText, {
        tagName: "div",
        placeholder: __('Tab Title'),
        value: titles[index] && titles[index].text ? titles[index].text : '',
        unstableOnFocus: () => setAttributes({
          currentTab: 1 + index
        }),
        onChange: value => {
          this.saveArrayUpdate({
            text: value
          }, index);
        },
        formattingControls: ['bold', 'italic', 'strikethrough'],
        allowedFormats: ['core/bold', 'core/italic', 'core/strikethrough'],
        className: 'kt-title-text',
        style: {
          lineHeight: lineHeight + lineType
        },
        keepPlaceholderOnFocus: true
      }), React.createElement(RichText, {
        tagName: "div",
        placeholder: __('Tab subtitle'),
        value: undefined !== titles[index] && undefined !== titles[index].subText ? titles[index].subText : '',
        unstableOnFocus: () => setAttributes({
          currentTab: 1 + index
        }),
        onChange: value => {
          this.saveArrayUpdate({
            subText: value
          }, index);
        },
        formattingControls: ['bold', 'italic', 'strikethrough'],
        allowedFormats: ['core/bold', 'core/italic', 'core/strikethrough'],
        className: 'kt-title-sub-text',
        style: {
          fontWeight: subFont[0].weight,
          fontStyle: subFont[0].style,
          fontSize: subFont[0].size[0] + subFont[0].sizeType,
          lineHeight: subFont[0].lineHeight && subFont[0].lineHeight[0] ? subFont[0].lineHeight[0] + subFont[0].lineType : undefined,
          letterSpacing: subFont[0].letterSpacing + 'px',
          fontFamily: subFont[0].family ? subFont[0].family : '',
          padding: subFont[0].padding ? subFont[0].padding[0] + 'px ' + subFont[0].padding[1] + 'px ' + subFont[0].padding[2] + 'px ' + subFont[0].padding[3] + 'px' : '',
          margin: subFont[0].margin ? subFont[0].margin[0] + 'px ' + subFont[0].margin[1] + 'px ' + subFont[0].margin[2] + 'px ' + subFont[0].margin[3] + 'px' : ''
        },
        keepPlaceholderOnFocus: true
      })), titles[index] && titles[index].icon && 'right' === titles[index].iconSide && React.createElement(IconRender, {
        className: `kt-tab-svg-icon kt-tab-svg-icon-${titles[index].icon} kt-title-svg-side-${titles[index].iconSide}`,
        name: titles[index].icon,
        size: !iSize ? '14' : iSize,
        htmltag: "span"
      })), React.createElement("div", {
        className: "inclind-blocks-tab-item__control-menu"
      }, index !== 0 && React.createElement(IconButton, {
        icon: 'vtabs' === layout ? 'arrow-up' : 'arrow-left',
        onClick: index === 0 ? undefined : this.onMoveBack(index),
        className: "inclind-blocks-tab-item__move-back",
        label: 'vtabs' === layout ? __('Move Item Up') : __('Move Item Back'),
        "aria-disabled": index === 0,
        disabled: index === 0
      }), index + 1 !== tabCount && React.createElement(IconButton, {
        icon: 'vtabs' === layout ? 'arrow-down' : 'arrow-right',
        onClick: index + 1 === tabCount ? undefined : this.onMoveForward(index),
        className: "inclind-blocks-tab-item__move-forward",
        label: 'vtabs' === layout ? __('Move Item Down') : __('Move Item Forward'),
        "aria-disabled": index + 1 === tabCount,
        disabled: index + 1 === tabCount
      }), tabCount > 1 && React.createElement(IconButton, {
        icon: "no-alt",
        onClick: () => {
          const removeClientId = this.props.tabsBlock.innerBlocks[index].clientId;
          const currentItems = (0, _filter.default)(this.props.attributes.titles, (item, i) => index !== i);
          const newCount = tabCount - 1;
          let newStartTab;

          if (startTab === index + 1) {
            newStartTab = '';
          } else if (startTab > index + 1) {
            newStartTab = startTab - 1;
          } else {
            newStartTab = startTab;
          }

          setAttributes({
            titles: currentItems,
            tabCount: newCount,
            currentTab: index === 0 ? 1 : index,
            startTab: newStartTab
          });
          this.props.removeTab(removeClientId);
          this.props.resetOrder();
        },
        className: "inclind-blocks-tab-item__remove",
        label: __('Remove Item'),
        disabled: !currentTab === index + 1
      }))));
    };

    const renderPreviewArray = React.createElement(Fragment, null, (0, _times.default)(tabCount, n => renderTitles(n)));

    const renderAnchorSettings = index => {
      return React.createElement(PanelBody, {
        title: __('Tab') + ' ' + (index + 1) + ' ' + __('Anchor'),
        initialOpen: false
      }, React.createElement(TextControl, {
        label: __('HTML Anchor'),
        help: __('Anchors lets you link directly to a tab.'),
        value: titles[index] && titles[index].anchor ? titles[index].anchor : '',
        onChange: nextValue => {
          nextValue = nextValue.replace(ANCHOR_REGEX, '-');
          this.saveArrayUpdate({
            anchor: nextValue
          }, index);
        }
      }));
    };

    const renderCSS = React.createElement("style", null, `.kt-tabs-id${uniqueID} .kt-title-item:hover .kt-tab-title {
					color: ${titleColorHover} !important;
					border-color: ${titleBorderHover} !important;
					background-color: ${titleBgHover} !important;
				}
				.kt-tabs-id${uniqueID} .kt-title-item.kt-tab-title-active .kt-tab-title, .kt-tabs-id${uniqueID} .kt-title-item.kt-tab-title-active:hover .kt-tab-title {
					color: ${titleColorActive} !important;
					border-color: ${titleBorderActive} !important;
					background-color: ${titleBgActive} !important;
				}`);
    return React.createElement(Fragment, null, renderCSS, React.createElement(BlockControls, null, React.createElement(BlockAlignmentToolbar, {
      value: blockAlignment,
      controls: ['center', 'wide', 'full'],
      onChange: value => setAttributes({
        blockAlignment: value
      })
    }), React.createElement(AlignmentToolbar, {
      value: tabAlignment,
      onChange: nextAlign => {
        setAttributes({
          tabAlignment: nextAlign
        });
      }
    })), this.showSettings('allSettings') && React.createElement(InspectorControls, null, React.createElement("div", null, deskControls), React.createElement(PanelBody, {
      title: __('Tab Subtitle Settings'),
      initialOpen: false
    }, React.createElement(ToggleControl, {
      label: __('Show Subtitles?'),
      checked: undefined !== enableSubtitle ? enableSubtitle : false,
      onChange: value => {
        setAttributes({
          enableSubtitle: value
        });
      }
    })), ","), React.createElement("div", {
      className: classes
    }, !this.state.showPreset && React.createElement("div", {
      className: "kt-tabs-wrap",
      style: {
        maxWidth: maxWidth + 'px'
      }
    }, React.createElement("div", {
      className: "kb-add-new-tab-contain"
    }, React.createElement(Button, {
      className: "kt-tab-add",
      isPrimary: true,
      onClick: () => {
        const newBlock = createBlock('inclind-blocks/inclind-tab', {
          id: tabCount + 1,
          parentID: acc_unique_id
        });
        setAttributes({
          tabCount: tabCount + 1
        });
        this.props.insertTab(newBlock);
        const newtabs = titles; // TODO: Should use an argument in the sprintf
        // function.

        newtabs.push({
          text: sprintf('Tab ' + (tabCount + 1).toString()),
          icon: titles[0].icon,
          iconSide: titles[0].iconSide,
          onlyIcon: titles[0].onlyIcon,
          subText: ''
        });
        setAttributes({
          titles: newtabs
        });
        this.saveArrayUpdate({
          iconSide: titles[0].iconSide
        }, 0);
      }
    }, React.createElement(Dashicon, {
      icon: "plus"
    }), __('Add Tab'))), React.createElement("ul", {
      className: `kt-tabs-title-list${'tabs' === layout && widthType === 'percent' ? ' kb-tabs-list-columns kb-tab-title-columns-' + tabWidth[0] : ''}`
    }, renderPreviewArray), React.createElement("div", {
      className: "kt-tabs-content-wrap",
      style: {
        padding: innerPadding ? innerPadding[0] + 'px ' + innerPadding[1] + 'px ' + innerPadding[2] + 'px ' + innerPadding[3] + 'px' : '',
        borderWidth: contentBorder ? contentBorder[0] + 'px ' + contentBorder[1] + 'px ' + contentBorder[2] + 'px ' + contentBorder[3] + 'px' : '',
        minHeight: minHeight + 'px',
        backgroundColor: contentBgColor,
        borderColor: contentBorderColor
      }
    }, React.createElement(InnerBlocks, {
      template: getPanesTemplate(tabCount, acc_unique_id),
      templateLock: false,
      allowedBlocks: ALLOWED_BLOCKS
    })))));
  }

}

var _default = compose([withSelect((select, ownProps) => {
  const {
    clientId
  } = ownProps;
  const {
    getBlock,
    getBlockOrder
  } = select('core/block-editor');
  const block = getBlock(clientId);
  return {
    tabsBlock: block,
    realTabsCount: block.innerBlocks.length,
    tabsInner: getBlockOrder(clientId)
  };
}), withDispatch((dispatch, {
  clientId
}, {
  select
}) => {
  const {
    getBlock
  } = select('core/block-editor');
  const {
    moveBlockToPosition,
    removeBlock,
    updateBlockAttributes,
    insertBlock
  } = dispatch('core/block-editor');
  const block = getBlock(clientId);
  return {
    resetOrder() {
      (0, _times.default)(block.innerBlocks.length, n => {
        updateBlockAttributes(block.innerBlocks[n].clientId, {
          id: n + 1
        });
      });
    },

    moveTab(tabId, newIndex) {
      moveBlockToPosition(tabId, clientId, clientId, parseInt(newIndex));
    },

    insertTab(newBlock) {
      insertBlock(newBlock, parseInt(block.innerBlocks.length), clientId);
    },

    removeTab(tabId) {
      removeBlock(tabId);
    }

  };
})])(InclindTabs);

exports.default = _default;

},{"../../icons":54,"classnames":60,"lodash/filter":167,"lodash/map":182,"lodash/times":187,"memize":192}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _times = _interopRequireDefault(require("lodash/times"));

var _genicon = _interopRequireDefault(require("../../genicon"));

var _svgicons = _interopRequireDefault(require("../../svgicons"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * @file
 * BLOCK: Inclind Tabs.
 */
// Internationalization


const __ = Drupal.t; // Internal block libraries.

const {
  sprintf
} = wp.i18n;
const {
  Component,
  Fragment
} = wp.element;
const {
  InnerBlocks,
  RichText
} = wp.blockEditor;

class InclindTabsSave extends Component {
  /**
   * Strip alpha-numeric characters from a string.
   *
   * @param string
   *   The string to be stripped.
   *
   * @return {*}
   *   The transformed string.
   */
  stripStringRender(string) {
    return string.toLowerCase().replace(/[^0-9a-z-]/g, '');
  }
  /**
   * Render Callback for the save process.
   *
   * @return {*}
   */


  render() {
    const {
      attributes: {
        tabCount,
        blockAlignment,
        currentTab,
        mobileLayout,
        layout,
        tabletLayout,
        uniqueID,
        titles,
        iSize,
        maxWidth,
        tabAlignment,
        startTab,
        enableSubtitle,
        widthType,
        tabWidth
      }
    } = this.props;
    const layoutClass = !layout ? 'tabs' : layout;
    const tabLayoutClass = !tabletLayout ? 'inherit' : tabletLayout;
    const mobileLayoutClass = !mobileLayout ? 'inherit' : mobileLayout;
    const accordionClass = mobileLayout && 'accordion' === mobileLayout || tabletLayout && 'accordion' === tabletLayout ? 'kt-create-accordion' : '';
    const classId = !uniqueID ? 'notset' : uniqueID;
    const classes = (0, _classnames.default)(`align${blockAlignment}`);
    const activeTab = startTab ? startTab : currentTab;
    const innerClasses = (0, _classnames.default)(`tabs-wrap tabs-id${classId} layout-${layoutClass} alignment-${tabAlignment} ${accordionClass}`);

    const renderTitles = index => {
      // const backupAnchor = `tabs-${ classId }-tab-${ ( titles[ index ] &&
      // titles[ index ].text ? this.stripStringRender( titles[ index
      // ].text.toString() ) : this.stripStringRender( __( 'Tab' ) + ( 1 +
      // index ) ) ) }`; const ref = `${ ( titles[ index ] && titles[ index
      // ].anchor ? titles[ index ].anchor : backupAnchor ) }`;
      const backupAnchor = `tabs${classId}-tab-${1 + index}`;
      const ref = `tabs${classId}-tabcontent-${1 + index}`;
      const sel_tab = `${index == 0 ? 'true' : 'false'}`;
      const sel_tab_class = `${index == 0 ? 'active' : ''}`;
      return React.createElement(Fragment, null, React.createElement("li", {
        className: "nav-item"
      }, React.createElement("a", {
        className: `nav-link ${sel_tab_class}`,
        id: backupAnchor,
        "data-toggle": "tab",
        href: `#${ref}`,
        role: "tab",
        "aria-controls": `${ref}`,
        "aria-selected": `${sel_tab}`
      }, titles[index] && titles[index].icon && 'right' !== titles[index].iconSide && React.createElement(_genicon.default, {
        className: `kt-tab-svg-icon kt-tab-svg-icon-${titles[index].icon} kt-title-svg-side-${titles[index].iconSide}`,
        name: titles[index].icon,
        size: !iSize ? '14' : iSize,
        icon: 'fa' === titles[index].icon.substring(0, 2) ? FaIco[titles[index].icon] : _svgicons.default[titles[index].icon],
        htmltag: "span"
      }), (!enableSubtitle || undefined !== titles[index] && undefined === titles[index].subText || undefined !== titles[index] && undefined !== titles[index].subText && '' === titles[index].subText) && React.createElement(RichText.Content, {
        tagName: "span",
        value: titles[index] && titles[index].text ? titles[index].text : sprintf(__('Tab %d'), 1 + index),
        className: 'kt-title-text'
      }), enableSubtitle && titles[index] && undefined !== titles[index].subText && '' !== titles[index].subText && React.createElement("div", {
        className: "kb-tab-titles-wrap"
      }, React.createElement(RichText.Content, {
        tagName: "span",
        value: titles[index] && titles[index].text ? titles[index].text : sprintf(__('Tab %d'), 1 + index),
        className: 'kt-title-text'
      }), React.createElement(RichText.Content, {
        tagName: "span",
        value: titles[index].subText,
        className: 'kt-title-sub-text'
      })), titles[index] && titles[index].icon && 'right' === titles[index].iconSide && React.createElement(_genicon.default, {
        className: `kt-tab-svg-icon kt-tab-svg-icon-${titles[index].icon} kt-title-svg-side-${titles[index].iconSide}`,
        name: titles[index].icon,
        size: !iSize ? '14' : iSize,
        icon: 'fa' === titles[index].icon.substring(0, 2) ? FaIco[titles[index].icon] : _svgicons.default[titles[index].icon],
        htmltag: "span"
      }))));
    };

    return React.createElement("div", {
      className: classes
    }, 'vtabs' === layout && React.createElement("div", {
      className: innerClasses,
      style: {
        maxWidth: maxWidth ? maxWidth + 'px' : 'none'
      }
    }, React.createElement("div", {
      class: "row"
    }, React.createElement("div", {
      className: "col-sm-12 col-md-3"
    }, React.createElement("ul", {
      className: "nav nav-justified nav-tabs",
      id: `tabs-list-${classId}`,
      role: "tablist",
      "aria-orientation": "vertical"
    }, (0, _times.default)(tabCount, n => renderTitles(n)))), React.createElement("div", {
      className: "col"
    }, React.createElement("div", {
      className: "tab-content",
      id: `tabs-content-${classId}`
    }, React.createElement(InnerBlocks.Content, null))))), 'vtabs' !== layout && React.createElement("div", {
      className: innerClasses,
      style: {
        maxWidth: maxWidth ? maxWidth + 'px' : 'none'
      }
    }, React.createElement("ul", {
      className: "nav nav-justified nav-tabs",
      id: `tabs-list-${classId}`,
      role: "tablist"
    }, (0, _times.default)(tabCount, n => renderTitles(n))), React.createElement("div", {
      className: "tab-content",
      id: `tabs-content-${classId}`
    }, React.createElement(InnerBlocks.Content, null))));
  }

}

var _default = InclindTabsSave;
exports.default = _default;

},{"../../genicon":52,"../../svgicons":56,"classnames":60,"lodash/times":187}],51:[function(require,module,exports){
"use strict"; // Add a style for the icon grid.

wp.blocks.registerBlockStyle("core/columns", {
  name: "icon-grid-style",
  label: "Icon Grid"
});
wp.blocks.registerBlockStyle("core/columns", {
  name: "70-30-grid-style",
  label: "70 / 30"
});
wp.blocks.registerBlockStyle("core/columns", {
  name: "30-70-grid-style",
  label: "30 / 70"
});
wp.blocks.registerBlockStyle("core/columns", {
  name: "default",
  label: "Default"
});
/*
 * Fix for error on changing style.
 * @see: https://github.com/WordPress/gutenberg/issues/9897#issuecomment-478362380
 */

var el = wp.element.createElement;
var allowColumnStyle = wp.compose.createHigherOrderComponent(function (BlockEdit) {
  return function (props) {
    var content = el(BlockEdit, props);

    if (props.name === 'core/columns' && typeof props.insertBlocksAfter === 'undefined') {
      content = el('div', {});
    }

    return el(wp.element.Fragment, {}, content);
  };
}, 'allowColumnStyle');
wp.hooks.addFilter('editor.BlockEdit', 'my/gutenberg', allowColumnStyle);

},{}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GenIcon = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _svgicons = _interopRequireDefault(require("./svgicons"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const {
  createElement
} = wp.element;

const walkChildren = children => {
  return children.map((child, idx) => {
    const {
      nE,
      aBs: attribsMap,
      children: gchildren = null
    } = child; //fill, stroke

    const attribs = Object.keys(attribsMap).filter(key => key !== 'fill' && key !== 'stroke' && attribsMap[key] !== 'none').reduce((partial, key) => {
      //partial[camelcase(key)] = attribsMap[key];
      partial[key] = attribsMap[key];
      return partial;
    }, {}); //special case, it has fill and stroke at the same time

    let merge = {};

    if (attribsMap.fill === 'none' && attribsMap.stroke) {
      merge = {
        fill: 'none',
        stroke: 'currentColor'
      };
    }

    return createElement(nE, {
      key: idx,
      ...attribs,
      ...merge
    }, gchildren === null ? gchildren : walkChildren(gchildren));
  });
};

const GenIcon = props => {
  const {
    style,
    className,
    icon,
    name,
    htmltag,
    ...others
  } = props;
  const type = name.substring(0, 2);
  const lineIcon = type && 'fe' == type ? true : false;
  const fill = lineIcon ? 'none' : 'currentColor';
  const strokeWidth = lineIcon ? props.strokeWidth : undefined;
  const stroke = lineIcon ? 'currentColor' : undefined;
  const strokeLinecap = lineIcon ? 'round' : undefined;
  const strokeLinejoin = lineIcon ? 'round' : undefined;
  const HtmlTagOut = htmltag ? htmltag : 'div';
  const strokeWidth2 = 'bb' === type ? props.strokeWidth : undefined;

  if ('si' === type) {
    return React.createElement(HtmlTagOut, {
      style: {
        display: 'inline-flex',
        justifyContent: 'center',
        alignItems: 'center',
        ...style
      },
      className: className
    }, icon);
  } else if ('bb' === type) {
    return React.createElement(HtmlTagOut, {
      style: {
        display: 'inline-flex',
        justifyContent: 'center',
        alignItems: 'center',
        ...style
      },
      className: className
    }, React.createElement("svg", {
      width: "12px",
      height: "18px",
      viewBox: "0 0 12 18",
      version: "1.1",
      xmlns: "http://www.w3.org/2000/svg",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    }, React.createElement("g", {
      stroke: "none",
      "stroke-width": "1",
      "fill-rule": "evenodd"
    }, React.createElement("g", {
      transform: "translate(-261.000000, -20.000000)"
    }, React.createElement("g", {
      transform: "translate(0.724974, 0.500000)"
    }, React.createElement("g", {
      transform: "translate(0.511719, 0.000000)"
    }, React.createElement("g", {
      transform: "translate(260.436180, 19.500000)"
    }, React.createElement("path", {
      d: "M10.0999102,8.0925637 L2.13967405,0.420412253 C1.66099873,-0.0409395785 0.882900332,-0.0409395785 0.404302242,0.420412253 C-0.0742958467,0.881764085 -0.0743730773,1.63170273 0.404302242,2.09298012 L7.50048237,8.93234611 L0.404302242,15.7717121 C-0.0743730773,16.2330639 -0.0743730773,16.9830026 0.404302242,17.44428 C0.882977562,17.9055574 1.66107596,17.9056318 2.13967405,17.44428 L10.0999102,9.77451046 C10.3428777,9.54033607 10.4607316,9.23515012 10.4582603,8.93465361 C10.4582603,8.6272346 10.3404063,8.32435615 10.0999102,8.0925637 Z"
    }))))))));
  } else {
    return React.createElement(HtmlTagOut, {
      style: {
        display: 'inline-flex',
        justifyContent: 'center',
        alignItems: 'center',
        ...style
      },
      className: className
    }, React.createElement("svg", {
      style: {
        display: 'inline-block',
        verticalAlign: 'middle'
      },
      viewBox: !props.icon ? '0 0 24 24' : props.icon.vB,
      height: props.size,
      width: props.size,
      fill: fill,
      stroke: stroke,
      xmlns: props.xmlns,
      "stroke-width": strokeWidth,
      "stroke-linecap": strokeLinecap,
      "stroke-linejoin": strokeLinejoin
    }, props.title ? React.createElement("title", null, props.title) : null, props.icon && walkChildren(props.icon.cD)));
  }
};

exports.GenIcon = GenIcon;
GenIcon.defaultProps = {
  size: 24,
  xmlns: 'http://www.w3.org/2000/svg',
  strokeWidth: 2,
  htmltag: 'div'
};
GenIcon.propTypes = {
  icon: _propTypes.default.string.isRequired,
  size: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  style: _propTypes.default.object,
  className: _propTypes.default.string
};
var _default = GenIcon;
exports.default = _default;

},{"./svgicons":56,"prop-types":198}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hexToRGBA;
/**
 * function to return string with capital letter.
 * @param {string} hex the color hex.
 * @param {number} alpha the alpha number.
 * @returns {string} rgba color.
 */

function hexToRGBA(hex, alpha) {
  if (null === hex) {
    return '';
  }

  hex = hex.replace('#', '');
  const r = parseInt(hex.length === 3 ? hex.slice(0, 1).repeat(2) : hex.slice(0, 2), 16);
  const g = parseInt(hex.length === 3 ? hex.slice(1, 2).repeat(2) : hex.slice(2, 4), 16);
  const b = parseInt(hex.length === 3 ? hex.slice(2, 3).repeat(2) : hex.slice(4, 6), 16);
  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';
}

},{}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const icons = {};
icons.blockRow = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M46.506,7.877l-45.012,0c-0.484,0 -0.882,0.398 -0.882,0.882l0,23.645c0,0.484 0.398,0.882 0.882,0.882l45.012,0c0.484,0 0.882,-0.398 0.882,-0.882l0,-23.65c-0.003,-0.482 -0.4,-0.877 -0.882,-0.877Zm-0.882,23.65l-43.248,0l0,-21.886l43.248,0l0,21.886Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("rect", {
  x: "4.587",
  y: "11.533",
  width: "38.825",
  height: "18.096",
  fill: "#179cd4"
}), React.createElement("path", {
  d: "M43.413,29.63l-38.826,0l0,-18.097l38.826,0l0,18.097Zm-37.061,-16.332l0,14.567l35.296,0l0,-14.567l-35.296,0Z",
  fill: "#179cd4"
}), React.createElement("path", {
  d: "M24,40.123c4.365,0 7.957,-3.592 7.957,-7.957c0,-4.365 -3.592,-7.957 -7.957,-7.957c-4.365,0 -7.957,3.592 -7.957,7.957c0,0.001 0,0.002 0,0.003c0,4.363 3.591,7.954 7.954,7.954c0.001,0 0.002,0 0.003,0Z",
  fill: "#179cd4",
  fillRule: "nonzero",
  stroke: "#fff",
  strokeWidth: "1.76"
}), React.createElement("path", {
  d: "M20.811,31.539l2.307,0l0,-2.309c0,-0.484 0.398,-0.882 0.882,-0.882c0.484,0 0.882,0.398 0.882,0.882l0,2.309l2.307,0c0.483,0 0.882,0.398 0.882,0.882c0,0.484 -0.399,0.882 -0.882,0.882l-2.307,0l0,2.307c0,0.484 -0.398,0.882 -0.882,0.882c-0.484,0 -0.882,-0.398 -0.882,-0.882l0,-2.307l-2.307,0c-0.483,0 -0.882,-0.398 -0.882,-0.882c0,-0.484 0.399,-0.882 0.882,-0.882Z",
  fill: "#fff",
  fillRule: "nonzero"
}));
icons.row = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "60.000",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.collapserow = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "60.000",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "16.000",
  width: "60.000",
  height: "14.000",
  fill: "#d5dadf"
}));
icons.collapserowthree = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "60.000",
  height: "9.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "10.500",
  width: "60.000",
  height: "9.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "21.000",
  width: "60.000",
  height: "9.000",
  fill: "#d5dadf"
}));
icons.collapserowfour = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "60.000",
  height: "6.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "8.000",
  width: "60.000",
  height: "6.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "16.000",
  width: "60.000",
  height: "6.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "24.000",
  width: "60.000",
  height: "6.000",
  fill: "#d5dadf"
}));
icons.collapserowfive = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "60.000",
  height: "5.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "6.000",
  width: "60.000",
  height: "5.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "12.000",
  width: "60.000",
  height: "5.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "18.000",
  width: "60.000",
  height: "5.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "24.000",
  width: "60.000",
  height: "5.000",
  fill: "#d5dadf"
}));
icons.collapserowsix = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "60.000",
  height: "4.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "5.000",
  width: "60.000",
  height: "4.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "10.000",
  width: "60.000",
  height: "4.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "15.000",
  width: "60.000",
  height: "4.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "20.000",
  width: "60.000",
  height: "4.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "25.000",
  width: "60.000",
  height: "4.000",
  fill: "#d5dadf"
}));
icons.twocol = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "31.000",
  y: "0.000",
  width: "29.000",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "29.000",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.grid = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "31.000",
  y: "0.000",
  width: "29.000",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "29.000",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "31.000",
  y: "16.000",
  width: "29.000",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "16.000",
  width: "29.000",
  height: "14.000",
  fill: "#d5dadf"
}));
icons.threecol = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "18.500",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "20.500",
  y: "0.000",
  width: "19.000",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "41.500",
  y: "0.000",
  width: "18.500",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.threegrid = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "18.500",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "20.500",
  y: "0.000",
  width: "19.000",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "41.500",
  y: "0.000",
  width: "18.500",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "16.000",
  width: "18.500",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "20.500",
  y: "16.000",
  width: "19.000",
  height: "14.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "41.500",
  y: "16.000",
  width: "18.500",
  height: "14.000",
  fill: "#d5dadf"
}));
icons.lastrow = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "31",
  width: "29",
  height: "14",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "-0.024",
  width: "29",
  height: "14",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "-0.024",
  y: "16",
  width: "60",
  height: "14",
  fill: "#d5dadf"
}));
icons.firstrow = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "31",
  y: "16",
  width: "29",
  height: "14",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "-0.024",
  y: "16",
  width: "29",
  height: "14",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "-0.024",
  y: "-0.003",
  width: "60",
  height: "14",
  fill: "#d5dadf"
}));
icons.twoleftgolden = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "41.000",
  y: "0.000",
  width: "19.000",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "39.000",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.tworightgolden = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "21.000",
  y: "0.000",
  width: "39.000",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "19.000",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.lefthalf = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "29.000",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "31",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "46.500",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.righthalf = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "15.500",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "31.000",
  y: "0.000",
  width: "29.000",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.centerhalf = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "15.500",
  y: "0.000",
  width: "29.000",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "46.500",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.widecenter = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "11.000",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "13.000",
  y: "0.000",
  width: "34.000",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "49.000",
  y: "0.000",
  width: "11.000",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.exwidecenter = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "7.200",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "9.200",
  y: "0.000",
  width: "41.600",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "52.800",
  y: "0.000",
  width: "7.200",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.fourcol = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "15.500",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "31.000",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "46.500",
  y: "0.000",
  width: "13.500",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.lfourforty = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "21.600",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "23.600",
  y: "0.000",
  width: "10.800",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "36.400",
  y: "0.000",
  width: "10.800",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "49.200",
  y: "0.000",
  width: "10.800",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.rfourforty = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "10.800",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "12.800",
  y: "0.000",
  width: "10.800",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "25.600",
  y: "0.000",
  width: "10.800",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "38.400",
  y: "0.000",
  width: "21.600",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.fivecol = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "10.400",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "12.400",
  y: "0.000",
  width: "10.400",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "24.800",
  y: "0.000",
  width: "10.400",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "37.200",
  y: "0.000",
  width: "10.400",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "49.600",
  y: "0.000",
  width: "10.400",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.sixcol = React.createElement("svg", {
  viewBox: "0 0 60 30",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "0.000",
  y: "0.000",
  width: "8.350",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "10.330",
  y: "0.000",
  width: "8.350",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "20.660",
  y: "0.000",
  width: "8.350",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "30.990",
  y: "0.000",
  width: "8.350",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "41.320",
  y: "0.000",
  width: "8.350",
  height: "30.000",
  fill: "#d5dadf"
}), React.createElement("rect", {
  x: "51.650",
  y: "0.000",
  width: "8.350",
  height: "30.000",
  fill: "#d5dadf"
}));
icons.aligntop = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M17.294,17.287l-14.588,0l0,-14.574l14.588,0c0,4.858 0,9.716 0,14.574Zm-13.738,-0.85l12.888,0l0,-12.874l-12.888,0c0,4.291 0,8.583 0,12.874Z",
  fillRule: "nonzero"
}), React.createElement("rect", {
  x: "4.489",
  y: "4.545",
  width: "11.022",
  height: "2.512"
}));
icons.alignmiddle = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M17.294,17.287l-14.588,0l0,-14.574l14.588,0c0,4.858 0,9.716 0,14.574Zm-13.738,-0.85l12.888,0l0,-12.874l-12.888,0c0,4.291 0,8.583 0,12.874Z",
  fillRule: "nonzero"
}), React.createElement("rect", {
  x: "4.489",
  y: "8.744",
  width: "11.022",
  height: "2.512"
}));
icons.alignbottom = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M17.294,17.287l-14.588,0l0,-14.574l14.588,0c0,4.858 0,9.716 0,14.574Zm-13.738,-0.85l12.888,0l0,-12.874l-12.888,0c0,4.291 0,8.583 0,12.874Z",
  fillRule: "nonzero"
}), React.createElement("rect", {
  x: "4.489",
  y: "12.802",
  width: "11.022",
  height: "2.512"
}));
icons.blockColumn = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M47.612,40.008l-19.999,0l0,-32.016l13.566,0l6.433,0.023l0,31.993Z",
  fill: "#97eaff",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M20.383,40l-20.036,0l0,-32l20.036,0.019l0,31.981Z",
  fill: "#00b5e2",
  fillRule: "nonzero"
}));
icons.outlinetop = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "2.714",
  y: "5.492",
  width: "1.048",
  height: "9.017",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "16.265",
  y: "5.498",
  width: "1.023",
  height: "9.003",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "5.518",
  y: "2.186",
  width: "8.964",
  height: "2.482",
  fill: "#272b2f"
}), React.createElement("rect", {
  x: "5.487",
  y: "16.261",
  width: "9.026",
  height: "1.037",
  fill: "#555d66"
}));
icons.outlineright = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "2.714",
  y: "5.492",
  width: "1.046",
  height: "9.017",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "15.244",
  y: "5.498",
  width: "2.518",
  height: "9.003",
  fill: "#272b2f"
}), React.createElement("rect", {
  x: "5.518",
  y: "2.719",
  width: "8.964",
  height: "0.954",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "5.487",
  y: "16.308",
  width: "9.026",
  height: "0.99",
  fill: "#555d66"
}));
icons.outlinebottom = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "2.714",
  y: "5.492",
  width: "1",
  height: "9.017",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "16.261",
  y: "5.498",
  width: "1.027",
  height: "9.003",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "5.518",
  y: "2.719",
  width: "8.964",
  height: "0.968",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "5.487",
  y: "15.28",
  width: "9.026",
  height: "2.499",
  fill: "#272b2f"
}));
icons.outlineleft = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "2.202",
  y: "5.492",
  width: "2.503",
  height: "9.017",
  fill: "#272b2f"
}), React.createElement("rect", {
  x: "16.276",
  y: "5.498",
  width: "1.012",
  height: "9.003",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "5.518",
  y: "2.719",
  width: "8.964",
  height: "0.966",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "5.487",
  y: "16.303",
  width: "9.026",
  height: "0.995",
  fill: "#555d66"
}));
icons.blocktabs = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M13.864,6.719l0.02,0l0.019,0.001l0.019,0.001l0.02,0.002l0.019,0.002l0.018,0.003l0.019,0.003l0.019,0.003l0.018,0.004l0.018,0.005l0.019,0.005l0.017,0.005l0.018,0.006l0.018,0.006l0.017,0.007l0.017,0.007l0.017,0.007l0.017,0.008l0.016,0.008l0.016,0.009l0.016,0.008l0.016,0.01l0.015,0.009l0.016,0.011l0.015,0.01l0.014,0.011l0.015,0.011l0.014,0.011l0.014,0.012l0.014,0.012l0.013,0.013l0.013,0.012l0.013,0.013l0.012,0.013l0.012,0.014l0.012,0.014l0.011,0.014l0.011,0.015l0.011,0.014l0.011,0.015l0.01,0.016l0.009,0.015l0.01,0.016l0.008,0.016l0.009,0.016l0.008,0.017l0.008,0.016l0.007,0.017l0.007,0.017l0.007,0.017l0.006,0.018l0.006,0.018l0.005,0.017l0.005,0.019l0.005,0.018l0.004,0.018l0.003,0.019l0.003,0.019l0.003,0.019l0.002,0.018l0.002,0.02l0.001,0.019l0.001,0.019l0,0.02l0,5.225l32.775,0.007l0,27.817l0,0.02l-0.001,0.019l-0.001,0.019l-0.002,0.02l-0.002,0.019l-0.003,0.019l-0.003,0.018l-0.004,0.019l-0.004,0.018l-0.004,0.018l-0.005,0.018l-0.005,0.018l-0.006,0.018l-0.006,0.018l-0.007,0.017l-0.007,0.017l-0.007,0.017l-0.008,0.017l-0.008,0.016l-0.009,0.016l-0.009,0.016l-0.009,0.016l-0.01,0.016l-0.01,0.015l-0.01,0.015l-0.011,0.014l-0.011,0.015l-0.011,0.014l-0.012,0.014l-0.012,0.013l-0.012,0.014l-0.013,0.013l-0.013,0.013l-0.014,0.012l-0.013,0.012l-0.014,0.012l-0.014,0.011l-0.015,0.011l-0.014,0.011l-0.015,0.01l-0.016,0.01l-0.015,0.01l-0.016,0.009l-0.016,0.009l-0.016,0.009l-0.016,0.008l-0.017,0.008l-0.017,0.007l-0.017,0.007l-0.018,0.007l-0.017,0.006l-0.018,0.006l-0.018,0.005l-0.018,0.005l-0.018,0.004l-0.018,0.004l-0.019,0.004l-0.019,0.003l-0.018,0.003l-0.02,0.002l-0.019,0.002l-0.019,0.001l-0.019,0.001l-0.02,0l-45.28,0l-0.02,0l-0.019,-0.001l-0.019,-0.001l-0.019,-0.002l-0.02,-0.002l-0.019,-0.003l-0.018,-0.003l-0.019,-0.004l-0.018,-0.004l-0.019,-0.004l-0.017,-0.005l-0.018,-0.005l-0.018,-0.006l-0.018,-0.006l-0.017,-0.007l-0.017,-0.007l-0.017,-0.007l-0.017,-0.008l-0.016,-0.008l-0.016,-0.009l-0.016,-0.009l-0.016,-0.009l-0.016,-0.01l-0.015,-0.01l-0.015,-0.01l-0.014,-0.011l-0.015,-0.011l-0.014,-0.011l-0.014,-0.012l-0.014,-0.012l-0.013,-0.012l-0.013,-0.013l-0.013,-0.013l-0.012,-0.014l-0.012,-0.013l-0.012,-0.014l-0.011,-0.014l-0.011,-0.015l-0.011,-0.014l-0.01,-0.015l-0.01,-0.015l-0.01,-0.016l-0.009,-0.016l-0.009,-0.016l-0.009,-0.016l-0.008,-0.016l-0.008,-0.017l-0.007,-0.017l-0.007,-0.017l-0.007,-0.017l-0.006,-0.018l-0.006,-0.018l-0.005,-0.018l-0.005,-0.018l-0.004,-0.018l-0.004,-0.018l-0.004,-0.019l-0.003,-0.018l-0.003,-0.019l-0.002,-0.019l-0.002,-0.02l-0.001,-0.019l-0.001,-0.019l0,-0.02l0,-33.052l0,-0.019l0.001,-0.02l0.001,-0.019l0.002,-0.019l0.002,-0.019l0.003,-0.019l0.003,-0.019l0.004,-0.019l0.004,-0.018l0.004,-0.018l0.005,-0.018l0.005,-0.018l0.006,-0.018l0.006,-0.017l0.007,-0.018l0.007,-0.017l0.007,-0.017l0.008,-0.016l0.008,-0.017l0.009,-0.016l0.009,-0.016l0.009,-0.016l0.01,-0.015l0.01,-0.015l0.01,-0.016l0.011,-0.014l0.011,-0.015l0.011,-0.014l0.012,-0.014l0.012,-0.013l0.012,-0.014l0.013,-0.013l0.013,-0.012l0.013,-0.013l0.014,-0.012l0.014,-0.011l0.014,-0.012l0.015,-0.011l0.014,-0.011l0.015,-0.01l0.015,-0.01l0.016,-0.01l0.016,-0.009l0.016,-0.009l0.016,-0.009l0.016,-0.008l0.017,-0.008l0.017,-0.007l0.017,-0.007l0.017,-0.007l0.018,-0.006l0.018,-0.005l0.018,-0.006l0.017,-0.005l0.019,-0.004l0.018,-0.004l0.019,-0.004l0.018,-0.003l0.019,-0.002l0.02,-0.003l0.019,-0.002l0.019,-0.001l0.019,-0.001l0.02,0l12.505,0.003Zm-11.496,32.798l43.262,0l0,-25.042l-32.775,-0.006l0,-5.984l-10.487,-0.002l0,31.034Z",
  fill: "#179cd4"
}), React.createElement("path", {
  d: "M30.246,6.72l0.021,0.001l0.02,0.001l0.02,0.002l0.02,0.002l0.019,0.003l0.02,0.003l0.019,0.004l0.019,0.004l0.019,0.005l0.019,0.005l0.019,0.006l0.018,0.006l0.019,0.006l0.018,0.007l0.018,0.007l0.017,0.008l0.018,0.008l0.017,0.009l0.017,0.009l0.016,0.009l0.017,0.01l0.016,0.01l0.016,0.01l0.016,0.011l0.015,0.011l0.015,0.012l0.015,0.012l0.029,0.024l0.013,0.014l0.014,0.013l0.013,0.013l0.013,0.014l0.013,0.014l0.012,0.015l0.012,0.015l0.012,0.015l0.011,0.015l0.01,0.016l0.011,0.016l0.01,0.016l0.01,0.016l0.009,0.017l0.009,0.017l0.009,0.017l0.008,0.017l0.007,0.018l0.008,0.018l0.007,0.018l0.006,0.018l0.006,0.019l0.005,0.018l0.006,0.019l0.004,0.019l0.005,0.019l0.003,0.02l0.003,0.019l0.003,0.02l0.002,0.02l0.002,0.02l0.001,0.02l0.001,0.02l0.001,0.021l0,6.165l-14.034,0l0,-6.165l0.001,-0.021l0.001,-0.02l0.001,-0.02l0.002,-0.02l0.002,-0.02l0.003,-0.02l0.003,-0.019l0.003,-0.02l0.005,-0.019l0.004,-0.019l0.006,-0.019l0.005,-0.018l0.006,-0.019l0.006,-0.018l0.007,-0.018l0.008,-0.018l0.007,-0.018l0.008,-0.017l0.009,-0.017l0.009,-0.017l0.009,-0.017l0.01,-0.016l0.01,-0.016l0.011,-0.016l0.01,-0.016l0.011,-0.015l0.012,-0.015l0.012,-0.015l0.012,-0.015l0.013,-0.014l0.013,-0.014l0.013,-0.013l0.014,-0.013l0.013,-0.014l0.015,-0.012l0.014,-0.012l0.015,-0.012l0.015,-0.012l0.015,-0.011l0.016,-0.011l0.016,-0.01l0.016,-0.01l0.017,-0.01l0.016,-0.009l0.017,-0.009l0.017,-0.009l0.018,-0.008l0.017,-0.008l0.018,-0.007l0.018,-0.007l0.019,-0.006l0.018,-0.006l0.019,-0.006l0.019,-0.005l0.019,-0.005l0.019,-0.004l0.019,-0.004l0.02,-0.003l0.019,-0.003l0.02,-0.002l0.02,-0.002l0.02,-0.001l0.021,-0.001l0.02,0l12.452,0l0.02,0Z",
  fill: "#179cd4"
}), React.createElement("path", {
  d: "M46.626,6.72l0.02,0.001l0.02,0.001l0.02,0.002l0.02,0.002l0.02,0.003l0.019,0.003l0.02,0.004l0.019,0.004l0.019,0.005l0.019,0.005l0.019,0.006l0.018,0.006l0.018,0.006l0.018,0.007l0.018,0.007l0.018,0.008l0.017,0.008l0.017,0.009l0.017,0.009l0.017,0.009l0.017,0.01l0.016,0.01l0.016,0.01l0.015,0.011l0.015,0.011l0.016,0.012l0.014,0.012l0.029,0.024l0.014,0.014l0.013,0.013l0.014,0.013l0.013,0.014l0.012,0.014l0.013,0.015l0.012,0.015l0.011,0.015l0.011,0.015l0.011,0.016l0.011,0.016l0.01,0.016l0.009,0.016l0.01,0.017l0.009,0.017l0.008,0.017l0.008,0.017l0.008,0.018l0.007,0.018l0.007,0.018l0.007,0.018l0.006,0.019l0.005,0.018l0.005,0.019l0.005,0.019l0.004,0.019l0.004,0.02l0.003,0.019l0.003,0.02l0.002,0.02l0.002,0.02l0.001,0.02l0.001,0.02l0,0.021l0,6.165l-14.033,0l0,-6.165l0,-0.021l0.001,-0.02l0.001,-0.02l0.002,-0.02l0.002,-0.02l0.003,-0.02l0.003,-0.019l0.004,-0.02l0.004,-0.019l0.005,-0.019l0.005,-0.019l0.006,-0.018l0.005,-0.019l0.007,-0.018l0.007,-0.018l0.007,-0.018l0.008,-0.018l0.008,-0.017l0.009,-0.017l0.008,-0.017l0.01,-0.017l0.009,-0.016l0.011,-0.016l0.01,-0.016l0.011,-0.016l0.011,-0.015l0.012,-0.015l0.012,-0.015l0.012,-0.015l0.013,-0.014l0.012,-0.014l0.014,-0.013l0.013,-0.013l0.014,-0.014l0.014,-0.012l0.015,-0.012l0.015,-0.012l0.015,-0.012l0.015,-0.011l0.016,-0.011l0.016,-0.01l0.016,-0.01l0.016,-0.01l0.017,-0.009l0.017,-0.009l0.017,-0.009l0.017,-0.008l0.018,-0.008l0.018,-0.007l0.018,-0.007l0.018,-0.006l0.019,-0.006l0.018,-0.006l0.019,-0.005l0.019,-0.005l0.019,-0.004l0.02,-0.004l0.019,-0.003l0.02,-0.003l0.02,-0.002l0.02,-0.002l0.02,-0.001l0.02,-0.001l0.021,0l12.452,0l0.02,0Z",
  fill: "#179cd4"
}), React.createElement("path", {
  d: "M19.753,18.081l-11.238,0c-0.485,0 -0.884,0.399 -0.884,0.883c0,0.485 0.399,0.884 0.884,0.884l11.238,0c0.484,0 0.883,-0.399 0.883,-0.884c0,-0.484 -0.399,-0.883 -0.883,-0.883Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M19.753,23.146l-11.238,0c-0.485,0 -0.884,0.399 -0.884,0.884c0,0.484 0.399,0.883 0.884,0.883l11.238,0c0.484,0 0.883,-0.399 0.883,-0.883c0,-0.485 -0.399,-0.884 -0.883,-0.884Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M19.753,28.681l-11.238,0c-0.485,0 -0.884,0.399 -0.884,0.883c0,0.485 0.399,0.884 0.884,0.884l11.238,0c0.484,0 0.883,-0.399 0.883,-0.884c0,-0.484 -0.399,-0.883 -0.883,-0.883Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M19.753,33.746l-11.238,0c-0.485,0 -0.884,0.399 -0.884,0.883c0,0.485 0.399,0.884 0.884,0.884l11.238,0c0.484,0 0.883,-0.399 0.883,-0.884c0,-0.484 -0.399,-0.883 -0.883,-0.883Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M39.461,18.081l-11.238,0c-0.485,0 -0.884,0.399 -0.884,0.883c0,0.485 0.399,0.884 0.884,0.884l11.238,0c0.484,0 0.883,-0.399 0.883,-0.884c0,-0.484 -0.399,-0.883 -0.883,-0.883Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M39.461,23.146l-11.238,0c-0.485,0 -0.884,0.399 -0.884,0.884c0,0.484 0.399,0.883 0.884,0.883l11.238,0c0.484,0 0.883,-0.399 0.883,-0.883c0,-0.485 -0.399,-0.884 -0.883,-0.884Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M39.461,28.681l-11.238,0c-0.485,0 -0.884,0.399 -0.884,0.883c0,0.485 0.399,0.884 0.884,0.884l11.238,0c0.484,0 0.883,-0.399 0.883,-0.884c0,-0.484 -0.399,-0.883 -0.883,-0.883Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M39.461,33.746l-11.238,0c-0.485,0 -0.884,0.399 -0.884,0.883c0,0.485 0.399,0.884 0.884,0.884l11.238,0c0.484,0 0.883,-0.399 0.883,-0.884c0,-0.484 -0.399,-0.883 -0.883,-0.883Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}));
icons.tabs = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M17.294,15.966l-14.588,0l0,-11.932l4.122,0.001l-0.002,3.473l10.468,0.007c0,4.339 0,4.112 0,8.451Zm-13.738,-0.76l12.888,0l0,-6.932l-10.448,0l-0.008,-3.541l-2.432,0.003c0,3.832 0,6.638 0,10.47Z",
  fill: "#555d66",
  fillRule: "nonzero"
}), React.createElement("rect", {
  x: "7.919",
  y: "4.042",
  width: "4.152",
  height: "2.669",
  fill: "#555d66"
}), React.createElement("rect", {
  x: "13.135",
  y: "4.045",
  width: "4.152",
  height: "2.657",
  fill: "#555d66"
}));
icons.vtabs = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M17.227,17.294l0,-14.588l-14.454,0l0.002,3.319l3.473,-0.003l0.006,11.272c4.339,0 6.634,0 10.973,0Zm-0.759,-13.738l0,12.888l-9.455,0l0.001,-11.251l-3.542,-0.008l0.002,-1.629c3.833,0 9.161,0 12.994,0Z",
  fill: "#555d66",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M2.82,9.846l0,-3.033l2.669,0l0,3.033l-2.669,0Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M2.823,13.676l0,-3.011l2.656,0l0,3.011l-2.656,0Z",
  fill: "#555d66"
}));
icons.accordion = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M17.275,9.664l-14.607,0l0,-3.036l14.607,0l0,3.036Zm-13.807,-2.236l0,1.436l13.007,0l0,-1.436l-13.007,0Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M17.305,6.28l-14.607,0l0,-3.036l14.607,0l0,3.036Zm-13.807,-2.236l0,1.436l13.007,0l0,-1.436l-13.007,0Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M17.316,16.771l-14.608,0l0,-3.036l14.608,0l0,3.036Zm-13.808,-2.236l0,1.436l13.008,0l0,-1.436l-13.008,0Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M16.392,13.423l-12.815,0l0,-4.553l12.815,0l0,4.553Zm-12.015,-3.753l0,2.953l11.215,0l0,-2.953l-11.215,0Z",
  fill: "#555d66"
}));
icons.linked = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M17.888,17.895l-15.776,0l0,-15.79l15.776,0l0,15.79Zm-13.276,-13.29l0,10.79l10.776,0l0,-10.79l-10.776,0Z"
}));
icons.individual = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "2.024",
  y: "5.486",
  width: "2.61",
  height: "9.027"
}), React.createElement("rect", {
  x: "15.379",
  y: "5.497",
  width: "2.56",
  height: "9.007"
}), React.createElement("rect", {
  x: "5.509",
  y: "1.999",
  width: "8.983",
  height: "2.582"
}), React.createElement("rect", {
  x: "5.51",
  y: "15.36",
  width: "8.979",
  height: "2.563"
}));
icons.radiuslinked = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M14.044,2.12l0.101,0.003l0.101,0.007l0.099,0.009l0.099,0.011l0.098,0.014l0.098,0.016l0.096,0.018l0.096,0.021l0.095,0.023l0.094,0.026l0.093,0.028l0.092,0.03l0.091,0.032l0.09,0.034l0.089,0.036l0.088,0.039l0.086,0.04l0.086,0.043l0.084,0.044l0.083,0.047l0.082,0.048l0.081,0.051l0.079,0.052l0.078,0.054l0.077,0.056l0.075,0.057l0.074,0.06l0.072,0.061l0.071,0.063l0.069,0.064l0.068,0.066l0.066,0.068l0.064,0.069l0.063,0.071l0.061,0.072l0.059,0.074l0.058,0.075l0.056,0.076l0.054,0.078l0.052,0.08l0.05,0.08l0.049,0.082l0.046,0.083l0.045,0.085l0.042,0.085l0.041,0.087l0.038,0.088l0.037,0.089l0.034,0.09l0.032,0.091l0.03,0.092l0.028,0.093l0.025,0.094l0.023,0.094l0.021,0.096l0.019,0.097l0.016,0.097l0.014,0.098l0.011,0.099l0.009,0.1l0.006,0.1l0.004,0.101l0.001,0.102l0,7.881l-0.001,0.102l-0.004,0.101l-0.006,0.1l-0.009,0.1l-0.011,0.098l-0.014,0.099l-0.016,0.097l-0.019,0.097l-0.021,0.095l-0.023,0.095l-0.025,0.094l-0.028,0.093l-0.03,0.092l-0.032,0.091l-0.034,0.09l-0.037,0.089l-0.038,0.088l-0.041,0.087l-0.042,0.085l-0.045,0.085l-0.046,0.083l-0.049,0.082l-0.05,0.08l-0.052,0.079l-0.054,0.078l-0.056,0.077l-0.058,0.075l-0.059,0.074l-0.061,0.072l-0.063,0.071l-0.064,0.069l-0.066,0.068l-0.068,0.066l-0.069,0.064l-0.071,0.063l-0.072,0.061l-0.074,0.06l-0.075,0.057l-0.077,0.056l-0.078,0.054l-0.079,0.052l-0.081,0.051l-0.082,0.048l-0.083,0.047l-0.084,0.044l-0.086,0.043l-0.086,0.04l-0.088,0.039l-0.089,0.036l-0.09,0.034l-0.091,0.032l-0.092,0.03l-0.093,0.028l-0.094,0.025l-0.095,0.023l-0.096,0.021l-0.096,0.019l-0.098,0.016l-0.098,0.014l-0.099,0.011l-0.099,0.009l-0.101,0.006l-0.101,0.004l-0.101,0.001l-7.905,0l-0.101,-0.001l-0.101,-0.004l-0.101,-0.006l-0.099,-0.009l-0.099,-0.011l-0.098,-0.014l-0.098,-0.016l-0.096,-0.019l-0.096,-0.021l-0.095,-0.023l-0.094,-0.025l-0.093,-0.028l-0.092,-0.03l-0.091,-0.032l-0.09,-0.034l-0.089,-0.036l-0.088,-0.039l-0.086,-0.04l-0.086,-0.043l-0.084,-0.044l-0.083,-0.047l-0.082,-0.048l-0.081,-0.051l-0.079,-0.052l-0.078,-0.054l-0.077,-0.056l-0.075,-0.057l-0.074,-0.06l-0.072,-0.061l-0.071,-0.063l-0.069,-0.064l-0.067,-0.066l-0.067,-0.068l-0.064,-0.069l-0.063,-0.071l-0.061,-0.072l-0.059,-0.074l-0.058,-0.075l-0.056,-0.077l-0.054,-0.078l-0.052,-0.079l-0.05,-0.08l-0.049,-0.082l-0.046,-0.083l-0.045,-0.085l-0.042,-0.085l-0.041,-0.087l-0.038,-0.088l-0.037,-0.089l-0.034,-0.09l-0.032,-0.091l-0.03,-0.092l-0.028,-0.093l-0.025,-0.094l-0.023,-0.095l-0.021,-0.095l-0.019,-0.097l-0.016,-0.097l-0.014,-0.099l-0.011,-0.098l-0.009,-0.1l-0.006,-0.1l-0.004,-0.101l-0.001,-0.102l0,-7.881l0.001,-0.102l0.004,-0.101l0.006,-0.1l0.009,-0.1l0.011,-0.099l0.014,-0.098l0.016,-0.097l0.019,-0.097l0.021,-0.096l0.023,-0.094l0.025,-0.094l0.028,-0.093l0.03,-0.092l0.032,-0.091l0.034,-0.09l0.037,-0.089l0.038,-0.088l0.041,-0.087l0.042,-0.085l0.045,-0.085l0.046,-0.083l0.049,-0.082l0.05,-0.08l0.052,-0.08l0.054,-0.078l0.056,-0.076l0.058,-0.075l0.059,-0.074l0.061,-0.072l0.063,-0.071l0.064,-0.069l0.067,-0.068l0.067,-0.066l0.069,-0.064l0.071,-0.063l0.072,-0.061l0.074,-0.06l0.075,-0.057l0.077,-0.056l0.078,-0.054l0.079,-0.052l0.081,-0.051l0.082,-0.048l0.083,-0.047l0.084,-0.044l0.086,-0.043l0.086,-0.04l0.088,-0.039l0.089,-0.036l0.09,-0.034l0.091,-0.032l0.092,-0.03l0.093,-0.028l0.094,-0.026l0.095,-0.023l0.096,-0.021l0.096,-0.018l0.098,-0.016l0.098,-0.014l0.099,-0.011l0.099,-0.009l0.101,-0.007l0.101,-0.003l0.101,-0.002l7.905,0l0.101,0.002Zm-7.99,2.498l-0.054,0.001l-0.038,0.001l-0.037,0.003l-0.036,0.003l-0.037,0.004l-0.035,0.005l-0.036,0.006l-0.035,0.007l-0.034,0.007l-0.034,0.009l-0.034,0.009l-0.034,0.01l-0.033,0.011l-0.033,0.011l-0.032,0.013l-0.032,0.013l-0.032,0.014l-0.032,0.014l-0.031,0.016l-0.03,0.016l-0.031,0.017l-0.03,0.018l-0.029,0.018l-0.029,0.019l-0.029,0.02l-0.028,0.021l-0.028,0.021l-0.027,0.022l-0.027,0.022l-0.026,0.024l-0.026,0.023l-0.025,0.025l-0.024,0.025l-0.024,0.026l-0.023,0.026l-0.023,0.026l-0.022,0.028l-0.021,0.027l-0.02,0.029l-0.02,0.028l-0.019,0.029l-0.019,0.03l-0.018,0.03l-0.017,0.03l-0.016,0.031l-0.015,0.031l-0.015,0.031l-0.014,0.032l-0.013,0.032l-0.012,0.033l-0.012,0.033l-0.011,0.033l-0.01,0.033l-0.009,0.034l-0.008,0.034l-0.008,0.035l-0.006,0.035l-0.006,0.035l-0.005,0.036l-0.004,0.036l-0.004,0.037l-0.002,0.037l-0.002,0.038l0,0.054l0,7.849l0,0.054l0.002,0.038l0.002,0.037l0.004,0.037l0.004,0.036l0.005,0.036l0.006,0.035l0.006,0.035l0.008,0.034l0.008,0.035l0.009,0.034l0.01,0.033l0.011,0.033l0.012,0.033l0.012,0.032l0.013,0.033l0.014,0.031l0.015,0.032l0.015,0.031l0.016,0.031l0.017,0.03l0.018,0.03l0.019,0.029l0.019,0.03l0.02,0.028l0.02,0.028l0.021,0.028l0.022,0.027l0.023,0.027l0.023,0.026l0.024,0.026l0.024,0.025l0.025,0.024l0.026,0.024l0.026,0.023l0.027,0.023l0.027,0.022l0.028,0.021l0.028,0.021l0.029,0.02l0.029,0.019l0.029,0.018l0.03,0.018l0.031,0.017l0.03,0.016l0.031,0.016l0.032,0.014l0.032,0.014l0.032,0.013l0.032,0.013l0.033,0.011l0.033,0.011l0.034,0.01l0.034,0.009l0.034,0.008l0.034,0.008l0.035,0.007l0.036,0.006l0.035,0.005l0.037,0.004l0.036,0.003l0.037,0.002l0.038,0.002l0.054,0l7.873,0l0.054,0l0.038,-0.002l0.037,-0.002l0.036,-0.003l0.037,-0.004l0.035,-0.005l0.036,-0.006l0.035,-0.007l0.034,-0.008l0.034,-0.008l0.034,-0.009l0.034,-0.01l0.033,-0.011l0.033,-0.011l0.032,-0.013l0.032,-0.013l0.032,-0.014l0.032,-0.014l0.031,-0.016l0.03,-0.016l0.031,-0.017l0.03,-0.018l0.029,-0.018l0.029,-0.019l0.029,-0.02l0.028,-0.021l0.028,-0.021l0.027,-0.022l0.027,-0.023l0.026,-0.023l0.026,-0.024l0.025,-0.024l0.024,-0.025l0.024,-0.026l0.023,-0.026l0.023,-0.027l0.022,-0.027l0.021,-0.028l0.021,-0.028l0.019,-0.028l0.02,-0.03l0.018,-0.029l0.018,-0.03l0.017,-0.03l0.016,-0.031l0.015,-0.031l0.015,-0.032l0.014,-0.031l0.013,-0.033l0.012,-0.032l0.012,-0.033l0.011,-0.033l0.01,-0.033l0.009,-0.034l0.008,-0.035l0.008,-0.034l0.006,-0.035l0.006,-0.035l0.005,-0.036l0.004,-0.036l0.004,-0.037l0.002,-0.037l0.002,-0.038l0,-0.054l0,-7.849l0,-0.054l-0.002,-0.038l-0.002,-0.037l-0.004,-0.037l-0.004,-0.036l-0.005,-0.036l-0.006,-0.035l-0.006,-0.035l-0.008,-0.035l-0.008,-0.034l-0.009,-0.034l-0.01,-0.033l-0.011,-0.033l-0.012,-0.033l-0.012,-0.033l-0.013,-0.032l-0.014,-0.032l-0.015,-0.031l-0.015,-0.031l-0.016,-0.031l-0.017,-0.03l-0.018,-0.03l-0.018,-0.03l-0.02,-0.029l-0.019,-0.028l-0.021,-0.029l-0.021,-0.027l-0.022,-0.028l-0.023,-0.026l-0.023,-0.026l-0.024,-0.026l-0.024,-0.025l-0.025,-0.025l-0.026,-0.023l-0.026,-0.024l-0.027,-0.022l-0.027,-0.022l-0.028,-0.021l-0.028,-0.021l-0.029,-0.02l-0.029,-0.019l-0.029,-0.018l-0.03,-0.018l-0.031,-0.017l-0.03,-0.016l-0.031,-0.016l-0.032,-0.014l-0.032,-0.014l-0.032,-0.013l-0.032,-0.013l-0.033,-0.011l-0.033,-0.011l-0.034,-0.01l-0.033,-0.009l-0.035,-0.009l-0.034,-0.007l-0.035,-0.007l-0.036,-0.006l-0.035,-0.005l-0.037,-0.004l-0.036,-0.003l-0.037,-0.003l-0.038,-0.001l-0.054,-0.001l-7.873,0Z",
  fill: "#555d66"
}));
icons.radiusindividual = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M14.044,2.12l0.101,0.003l0.101,0.007l0.099,0.009l0.099,0.011l0.098,0.014l0.098,0.016l0.096,0.018l0.096,0.021l0.095,0.023l0.094,0.026l0.093,0.028l0.092,0.03l0.091,0.032l0.09,0.034l0.089,0.036l0.088,0.039l0.086,0.04l0.086,0.043l0.084,0.044l0.083,0.047l0.082,0.048l0.081,0.051l0.079,0.052l0.078,0.054l0.077,0.056l0.075,0.057l0.074,0.06l0.072,0.061l0.071,0.063l0.069,0.064l0.068,0.066l0.066,0.068l0.064,0.069l0.063,0.071l0.061,0.072l0.059,0.074l0.058,0.075l0.056,0.076l0.054,0.078l0.052,0.08l0.05,0.08l0.049,0.082l0.046,0.083l0.045,0.085l0.042,0.085l0.041,0.087l0.038,0.088l0.037,0.089l0.034,0.09l0.032,0.091l0.03,0.092l0.028,0.093l0.025,0.094l0.023,0.094l0.021,0.096l0.019,0.097l0.016,0.097l0.014,0.098l0.011,0.099l0.009,0.1l0.006,0.1l0.004,0.101l0.001,0.102l0,1.273l-5.531,-5.214l1.591,0l0.101,0.002Zm-1.692,-0.002l5.531,5.214l-2.5,-0.012l0,-1.245l0,-0.054l-0.002,-0.038l-0.002,-0.037l-0.004,-0.037l-0.004,-0.036l-0.005,-0.036l-0.006,-0.035l-0.006,-0.035l-0.008,-0.035l-0.008,-0.034l-0.009,-0.034l-0.01,-0.033l-0.011,-0.033l-0.012,-0.033l-0.012,-0.033l-0.013,-0.032l-0.014,-0.032l-0.015,-0.031l-0.015,-0.031l-0.016,-0.031l-0.017,-0.03l-0.018,-0.03l-0.018,-0.03l-0.02,-0.029l-0.019,-0.028l-0.021,-0.029l-0.021,-0.027l-0.022,-0.028l-0.023,-0.026l-0.023,-0.026l-0.024,-0.026l-0.024,-0.025l-0.025,-0.025l-0.026,-0.023l-0.026,-0.024l-0.027,-0.022l-0.027,-0.022l-0.028,-0.021l-0.028,-0.021l-0.029,-0.02l-0.029,-0.019l-0.029,-0.018l-0.03,-0.018l-0.031,-0.017l-0.03,-0.016l-0.031,-0.016l-0.032,-0.014l-0.032,-0.014l-0.032,-0.013l-0.032,-0.013l-0.033,-0.011l-0.033,-0.011l-0.034,-0.01l-0.033,-0.009l-0.035,-0.009l-0.034,-0.007l-0.035,-0.007l-0.036,-0.006l-0.035,-0.005l-0.037,-0.004l-0.036,-0.003l-0.037,-0.003l-0.038,-0.001l-0.054,-0.001l-1.57,0l-0.005,-2.5Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M14.044,17.873l0.101,-0.003l0.101,-0.007l0.099,-0.009l0.099,-0.011l0.098,-0.014l0.098,-0.016l0.096,-0.018l0.096,-0.021l0.095,-0.023l0.094,-0.026l0.093,-0.028l0.092,-0.03l0.091,-0.032l0.09,-0.034l0.089,-0.036l0.088,-0.039l0.086,-0.04l0.086,-0.043l0.084,-0.044l0.083,-0.047l0.082,-0.048l0.081,-0.051l0.079,-0.052l0.078,-0.054l0.077,-0.056l0.075,-0.057l0.074,-0.06l0.072,-0.061l0.071,-0.063l0.069,-0.064l0.068,-0.066l0.066,-0.068l0.064,-0.069l0.063,-0.071l0.061,-0.072l0.059,-0.074l0.058,-0.075l0.056,-0.076l0.054,-0.078l0.052,-0.08l0.05,-0.08l0.049,-0.082l0.046,-0.083l0.045,-0.085l0.042,-0.085l0.041,-0.087l0.038,-0.088l0.037,-0.089l0.034,-0.09l0.032,-0.091l0.03,-0.092l0.028,-0.093l0.025,-0.094l0.023,-0.094l0.021,-0.096l0.019,-0.097l0.016,-0.097l0.014,-0.098l0.011,-0.099l0.009,-0.1l0.006,-0.1l0.004,-0.101l0.001,-0.102l0,-1.272l-5.531,5.213l1.591,0l0.101,-0.002Zm-1.692,0.002l5.531,-5.213l-2.5,0.012l0,1.244l0,0.054l-0.002,0.038l-0.002,0.037l-0.004,0.037l-0.004,0.036l-0.005,0.036l-0.006,0.035l-0.006,0.035l-0.008,0.035l-0.008,0.034l-0.009,0.034l-0.01,0.033l-0.011,0.033l-0.012,0.033l-0.012,0.033l-0.013,0.032l-0.014,0.032l-0.015,0.031l-0.015,0.031l-0.016,0.031l-0.017,0.03l-0.018,0.03l-0.018,0.03l-0.02,0.029l-0.019,0.028l-0.021,0.029l-0.021,0.027l-0.022,0.028l-0.023,0.026l-0.023,0.026l-0.024,0.026l-0.024,0.025l-0.025,0.025l-0.026,0.023l-0.026,0.024l-0.027,0.022l-0.027,0.022l-0.028,0.021l-0.028,0.021l-0.029,0.02l-0.029,0.019l-0.029,0.018l-0.03,0.018l-0.031,0.017l-0.03,0.016l-0.031,0.016l-0.032,0.014l-0.032,0.014l-0.032,0.013l-0.032,0.013l-0.033,0.011l-0.033,0.011l-0.034,0.01l-0.033,0.009l-0.035,0.009l-0.034,0.007l-0.035,0.007l-0.036,0.006l-0.035,0.005l-0.037,0.004l-0.036,0.003l-0.037,0.003l-0.038,0.001l-0.054,0.001l-1.57,0l-0.005,2.5Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M6.077,17.873l-0.101,-0.003l-0.101,-0.007l-0.099,-0.009l-0.099,-0.011l-0.098,-0.014l-0.098,-0.016l-0.096,-0.018l-0.096,-0.021l-0.095,-0.023l-0.094,-0.026l-0.093,-0.028l-0.092,-0.03l-0.091,-0.032l-0.09,-0.034l-0.089,-0.036l-0.088,-0.039l-0.086,-0.04l-0.086,-0.043l-0.084,-0.044l-0.083,-0.047l-0.082,-0.048l-0.081,-0.051l-0.079,-0.052l-0.078,-0.054l-0.077,-0.056l-0.075,-0.057l-0.074,-0.06l-0.072,-0.061l-0.071,-0.063l-0.069,-0.064l-0.068,-0.066l-0.066,-0.068l-0.064,-0.069l-0.063,-0.071l-0.061,-0.072l-0.059,-0.074l-0.058,-0.075l-0.056,-0.076l-0.054,-0.078l-0.052,-0.08l-0.05,-0.08l-0.049,-0.082l-0.046,-0.083l-0.045,-0.085l-0.042,-0.085l-0.041,-0.087l-0.038,-0.088l-0.037,-0.089l-0.034,-0.09l-0.032,-0.091l-0.03,-0.092l-0.028,-0.093l-0.025,-0.094l-0.023,-0.094l-0.021,-0.096l-0.019,-0.097l-0.016,-0.097l-0.014,-0.098l-0.011,-0.099l-0.009,-0.1l-0.006,-0.1l-0.004,-0.101l-0.001,-0.102l0,-1.272l5.531,5.213l-1.591,0l-0.101,-0.002Zm1.692,0.002l-5.531,-5.213l2.5,0.012l0,1.244l0,0.054l0.002,0.038l0.002,0.037l0.004,0.037l0.004,0.036l0.005,0.036l0.006,0.035l0.006,0.035l0.008,0.035l0.008,0.034l0.009,0.034l0.01,0.033l0.011,0.033l0.012,0.033l0.012,0.033l0.013,0.032l0.014,0.032l0.015,0.031l0.015,0.031l0.016,0.031l0.017,0.03l0.018,0.03l0.018,0.03l0.02,0.029l0.019,0.028l0.021,0.029l0.021,0.027l0.022,0.028l0.023,0.026l0.023,0.026l0.024,0.026l0.024,0.025l0.025,0.025l0.026,0.023l0.026,0.024l0.027,0.022l0.027,0.022l0.028,0.021l0.028,0.021l0.029,0.02l0.029,0.019l0.029,0.018l0.03,0.018l0.031,0.017l0.03,0.016l0.031,0.016l0.032,0.014l0.032,0.014l0.032,0.013l0.032,0.013l0.033,0.011l0.033,0.011l0.034,0.01l0.033,0.009l0.035,0.009l0.034,0.007l0.035,0.007l0.036,0.006l0.035,0.005l0.037,0.004l0.036,0.003l0.037,0.003l0.038,0.001l0.054,0.001l1.569,0l0.006,2.5Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M6.077,2.124l-0.101,0.003l-0.101,0.007l-0.099,0.009l-0.099,0.011l-0.098,0.014l-0.098,0.016l-0.096,0.018l-0.096,0.021l-0.095,0.023l-0.094,0.026l-0.093,0.028l-0.092,0.03l-0.091,0.032l-0.09,0.034l-0.089,0.036l-0.088,0.039l-0.086,0.04l-0.086,0.043l-0.084,0.044l-0.083,0.047l-0.082,0.048l-0.081,0.051l-0.079,0.052l-0.078,0.054l-0.077,0.056l-0.075,0.057l-0.074,0.06l-0.072,0.061l-0.071,0.063l-0.069,0.064l-0.068,0.066l-0.066,0.068l-0.064,0.069l-0.063,0.071l-0.061,0.072l-0.059,0.074l-0.058,0.075l-0.056,0.076l-0.054,0.078l-0.052,0.08l-0.05,0.08l-0.049,0.082l-0.046,0.083l-0.045,0.085l-0.042,0.085l-0.041,0.087l-0.038,0.088l-0.037,0.089l-0.034,0.09l-0.032,0.091l-0.03,0.092l-0.028,0.093l-0.025,0.094l-0.023,0.094l-0.021,0.096l-0.019,0.097l-0.016,0.097l-0.014,0.098l-0.011,0.099l-0.009,0.1l-0.006,0.1l-0.004,0.101l-0.001,0.102l0,1.272l5.531,-5.213l-1.591,0l-0.101,0.002Zm1.692,-0.002l-5.531,5.213l2.5,-0.011l0,-1.245l0,-0.054l0.002,-0.038l0.002,-0.037l0.004,-0.037l0.004,-0.036l0.005,-0.036l0.006,-0.035l0.006,-0.035l0.008,-0.035l0.008,-0.034l0.009,-0.034l0.01,-0.033l0.011,-0.033l0.012,-0.033l0.012,-0.033l0.013,-0.032l0.014,-0.032l0.015,-0.031l0.015,-0.031l0.016,-0.031l0.017,-0.03l0.018,-0.03l0.018,-0.03l0.02,-0.029l0.019,-0.028l0.021,-0.029l0.021,-0.027l0.022,-0.028l0.023,-0.026l0.023,-0.026l0.024,-0.026l0.024,-0.025l0.025,-0.025l0.026,-0.023l0.026,-0.024l0.027,-0.022l0.027,-0.022l0.028,-0.021l0.028,-0.021l0.029,-0.02l0.029,-0.019l0.029,-0.018l0.03,-0.018l0.031,-0.017l0.03,-0.016l0.031,-0.016l0.032,-0.014l0.032,-0.014l0.032,-0.013l0.032,-0.013l0.033,-0.011l0.033,-0.011l0.034,-0.01l0.033,-0.009l0.035,-0.009l0.034,-0.007l0.035,-0.007l0.036,-0.006l0.035,-0.005l0.037,-0.004l0.036,-0.003l0.037,-0.003l0.038,-0.001l0.054,-0.001l1.569,0l0.006,-2.5Z",
  fill: "#555d66"
}));
icons.topright = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M14.044,2.12l0.101,0.003l0.101,0.007l0.099,0.009l0.099,0.011l0.098,0.014l0.098,0.016l0.096,0.018l0.096,0.021l0.095,0.023l0.094,0.026l0.093,0.028l0.092,0.03l0.091,0.032l0.09,0.034l0.089,0.036l0.088,0.039l0.086,0.04l0.086,0.043l0.084,0.044l0.083,0.047l0.082,0.048l0.081,0.051l0.079,0.052l0.078,0.054l0.077,0.056l0.075,0.057l0.074,0.06l0.072,0.061l0.071,0.063l0.069,0.064l0.068,0.066l0.066,0.068l0.064,0.069l0.063,0.071l0.061,0.072l0.059,0.074l0.058,0.075l0.056,0.076l0.054,0.078l0.052,0.08l0.05,0.08l0.049,0.082l0.046,0.083l0.045,0.085l0.042,0.085l0.041,0.087l0.038,0.088l0.037,0.089l0.034,0.09l0.032,0.091l0.03,0.092l0.028,0.093l0.025,0.094l0.023,0.094l0.021,0.096l0.019,0.097l0.016,0.097l0.014,0.098l0.011,0.099l0.009,0.1l0.006,0.1l0.004,0.101l0.001,0.102l0,1.273l-5.531,-5.214l1.591,0l0.101,0.002Zm-1.692,-0.002l5.531,5.214l-2.5,-0.012l0,-1.245l0,-0.054l-0.002,-0.038l-0.002,-0.037l-0.004,-0.037l-0.004,-0.036l-0.005,-0.036l-0.006,-0.035l-0.006,-0.035l-0.008,-0.035l-0.008,-0.034l-0.009,-0.034l-0.01,-0.033l-0.011,-0.033l-0.012,-0.033l-0.012,-0.033l-0.013,-0.032l-0.014,-0.032l-0.015,-0.031l-0.015,-0.031l-0.016,-0.031l-0.017,-0.03l-0.018,-0.03l-0.018,-0.03l-0.02,-0.029l-0.019,-0.028l-0.021,-0.029l-0.021,-0.027l-0.022,-0.028l-0.023,-0.026l-0.023,-0.026l-0.024,-0.026l-0.024,-0.025l-0.025,-0.025l-0.026,-0.023l-0.026,-0.024l-0.027,-0.022l-0.027,-0.022l-0.028,-0.021l-0.028,-0.021l-0.029,-0.02l-0.029,-0.019l-0.029,-0.018l-0.03,-0.018l-0.031,-0.017l-0.03,-0.016l-0.031,-0.016l-0.032,-0.014l-0.032,-0.014l-0.032,-0.013l-0.032,-0.013l-0.033,-0.011l-0.033,-0.011l-0.034,-0.01l-0.033,-0.009l-0.035,-0.009l-0.034,-0.007l-0.035,-0.007l-0.036,-0.006l-0.035,-0.005l-0.037,-0.004l-0.036,-0.003l-0.037,-0.003l-0.038,-0.001l-0.054,-0.001l-1.57,0l-0.005,-2.5Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M6.136,2.516l-0.096,0.003l-0.096,0.006l-0.094,0.009l-0.094,0.01l-0.093,0.014l-0.093,0.015l-0.091,0.017l-0.091,0.02l-0.09,0.022l-0.09,0.024l-0.088,0.027l-0.087,0.029l-0.087,0.03l-0.085,0.032l-0.085,0.034l-0.084,0.037l-0.081,0.038l-0.082,0.041l-0.08,0.042l-0.079,0.045l-0.077,0.045l-0.077,0.049l-0.075,0.049l-0.075,0.051l-0.073,0.054l-0.071,0.054l-0.07,0.057l-0.069,0.058l-0.067,0.06l-0.066,0.06l-0.064,0.063l-0.063,0.065l-0.061,0.065l-0.059,0.068l-0.058,0.068l-0.056,0.07l-0.056,0.072l-0.053,0.072l-0.051,0.074l-0.049,0.076l-0.048,0.076l-0.046,0.078l-0.044,0.079l-0.043,0.08l-0.04,0.081l-0.039,0.083l-0.036,0.083l-0.035,0.085l-0.032,0.085l-0.031,0.087l-0.028,0.087l-0.027,0.088l-0.024,0.09l-0.021,0.089l-0.02,0.091l-0.018,0.092l-0.016,0.093l-0.013,0.093l-0.01,0.094l-0.009,0.095l-0.006,0.095l-0.003,0.096l-0.001,0.096l0,1.043l5.124,-4.786l-1.382,0l-0.096,0.002Zm1.478,-0.002l-5.124,4.786l0.95,-0.004l0,-1.033l0.001,-0.078l0.002,-0.072l0.004,-0.071l0.007,-0.071l0.008,-0.07l0.01,-0.07l0.011,-0.068l0.014,-0.069l0.014,-0.067l0.016,-0.068l0.018,-0.066l0.02,-0.066l0.021,-0.065l0.023,-0.064l0.024,-0.064l0.026,-0.063l0.027,-0.062l0.028,-0.062l0.03,-0.06l0.032,-0.059l0.033,-0.059l0.034,-0.058l0.036,-0.057l0.037,-0.057l0.038,-0.055l0.04,-0.054l0.041,-0.054l0.042,-0.052l0.044,-0.051l0.044,-0.051l0.046,-0.049l0.047,-0.048l0.048,-0.047l0.049,-0.045l0.051,-0.045l0.051,-0.044l0.052,-0.042l0.053,-0.041l0.054,-0.039l0.057,-0.039l0.056,-0.037l0.057,-0.035l0.057,-0.035l0.059,-0.033l0.06,-0.031l0.061,-0.031l0.061,-0.028l0.063,-0.028l0.062,-0.025l0.064,-0.024l0.064,-0.023l0.065,-0.021l0.066,-0.02l0.066,-0.018l0.068,-0.016l0.067,-0.015l0.068,-0.013l0.07,-0.012l0.069,-0.009l0.07,-0.008l0.071,-0.007l0.071,-0.004l0.072,-0.003l0.079,-0.001l1.392,0l-0.017,-0.95Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M13.856,17.518l0.096,-0.003l0.096,-0.006l0.094,-0.009l0.094,-0.01l0.093,-0.014l0.094,-0.015l0.091,-0.017l0.091,-0.02l0.09,-0.022l0.089,-0.024l0.089,-0.027l0.087,-0.029l0.087,-0.03l0.085,-0.032l0.085,-0.034l0.083,-0.038l0.082,-0.038l0.082,-0.04l0.079,-0.042l0.079,-0.045l0.078,-0.045l0.077,-0.049l0.075,-0.049l0.074,-0.052l0.073,-0.053l0.072,-0.054l0.07,-0.057l0.068,-0.058l0.068,-0.06l0.065,-0.06l0.065,-0.063l0.063,-0.065l0.06,-0.065l0.06,-0.068l0.058,-0.068l0.056,-0.07l0.055,-0.072l0.053,-0.072l0.052,-0.074l0.049,-0.076l0.048,-0.076l0.046,-0.078l0.044,-0.079l0.043,-0.08l0.039,-0.081l0.039,-0.083l0.037,-0.083l0.035,-0.085l0.032,-0.085l0.03,-0.087l0.029,-0.087l0.026,-0.089l0.024,-0.089l0.022,-0.089l0.02,-0.091l0.018,-0.092l0.015,-0.093l0.014,-0.093l0.01,-0.094l0.009,-0.095l0.005,-0.095l0.004,-0.096l0.001,-0.096l0,-1.043l-5.125,4.786l1.382,0l0.096,-0.002Zm-1.478,0.002l5.125,-4.786l-0.95,0.003l0,1.034l-0.001,0.078l-0.003,0.072l-0.004,0.071l-0.006,0.071l-0.009,0.07l-0.009,0.07l-0.012,0.068l-0.013,0.069l-0.014,0.067l-0.016,0.068l-0.018,0.066l-0.02,0.066l-0.021,0.065l-0.023,0.064l-0.025,0.064l-0.025,0.063l-0.027,0.062l-0.028,0.062l-0.031,0.06l-0.031,0.059l-0.033,0.059l-0.035,0.058l-0.036,0.057l-0.037,0.057l-0.038,0.055l-0.04,0.054l-0.04,0.054l-0.042,0.052l-0.044,0.051l-0.045,0.05l-0.045,0.05l-0.048,0.048l-0.047,0.047l-0.05,0.045l-0.05,0.045l-0.051,0.044l-0.052,0.042l-0.054,0.041l-0.054,0.039l-0.056,0.039l-0.056,0.037l-0.057,0.035l-0.058,0.035l-0.059,0.033l-0.06,0.031l-0.06,0.031l-0.061,0.028l-0.063,0.028l-0.063,0.025l-0.063,0.024l-0.065,0.023l-0.064,0.021l-0.066,0.02l-0.066,0.018l-0.068,0.016l-0.067,0.015l-0.069,0.013l-0.069,0.012l-0.069,0.009l-0.071,0.008l-0.07,0.007l-0.071,0.004l-0.072,0.003l-0.079,0.001l-1.393,0l0.017,0.95Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M6.191,17.518l-0.096,-0.003l-0.096,-0.006l-0.094,-0.009l-0.094,-0.01l-0.093,-0.014l-0.093,-0.015l-0.091,-0.017l-0.092,-0.02l-0.09,-0.022l-0.089,-0.024l-0.088,-0.027l-0.088,-0.029l-0.086,-0.03l-0.086,-0.032l-0.084,-0.034l-0.084,-0.038l-0.082,-0.038l-0.081,-0.04l-0.08,-0.042l-0.079,-0.045l-0.078,-0.045l-0.077,-0.049l-0.075,-0.049l-0.074,-0.052l-0.073,-0.053l-0.071,-0.054l-0.071,-0.057l-0.068,-0.058l-0.067,-0.06l-0.066,-0.06l-0.064,-0.063l-0.063,-0.065l-0.061,-0.065l-0.06,-0.068l-0.058,-0.068l-0.056,-0.07l-0.055,-0.072l-0.053,-0.072l-0.051,-0.074l-0.05,-0.076l-0.047,-0.076l-0.047,-0.078l-0.044,-0.079l-0.042,-0.08l-0.04,-0.081l-0.039,-0.083l-0.036,-0.083l-0.035,-0.085l-0.033,-0.085l-0.03,-0.087l-0.029,-0.087l-0.026,-0.089l-0.024,-0.089l-0.022,-0.089l-0.02,-0.091l-0.018,-0.092l-0.015,-0.093l-0.013,-0.093l-0.011,-0.094l-0.008,-0.095l-0.006,-0.095l-0.004,-0.096l-0.001,-0.096l0,-1.043l5.125,4.786l-1.382,0l-0.096,-0.002Zm1.478,0.002l-5.125,-4.786l0.95,0.003l0,1.034l0.001,0.078l0.003,0.072l0.004,0.071l0.006,0.071l0.009,0.07l0.01,0.07l0.011,0.068l0.013,0.069l0.014,0.067l0.017,0.068l0.018,0.066l0.02,0.066l0.021,0.065l0.022,0.064l0.025,0.064l0.026,0.063l0.026,0.062l0.029,0.062l0.03,0.06l0.031,0.059l0.034,0.059l0.034,0.058l0.036,0.057l0.037,0.057l0.038,0.055l0.04,0.054l0.041,0.054l0.042,0.052l0.043,0.051l0.045,0.05l0.046,0.05l0.047,0.048l0.048,0.047l0.049,0.045l0.05,0.045l0.052,0.044l0.052,0.042l0.053,0.041l0.054,0.039l0.056,0.039l0.056,0.037l0.057,0.035l0.058,0.035l0.059,0.033l0.06,0.031l0.061,0.031l0.06,0.028l0.063,0.028l0.063,0.025l0.063,0.024l0.065,0.023l0.065,0.021l0.065,0.02l0.067,0.018l0.067,0.016l0.068,0.015l0.068,0.013l0.069,0.012l0.07,0.009l0.07,0.008l0.07,0.007l0.071,0.004l0.073,0.003l0.079,0.001l1.392,0l-0.017,0.95Z",
  fill: "#555d66"
}));
icons.topleft = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M6.077,2.124l-0.101,0.003l-0.101,0.007l-0.099,0.009l-0.099,0.011l-0.098,0.014l-0.098,0.016l-0.096,0.018l-0.096,0.021l-0.095,0.023l-0.094,0.026l-0.093,0.028l-0.092,0.03l-0.091,0.032l-0.09,0.034l-0.089,0.036l-0.088,0.039l-0.086,0.04l-0.086,0.043l-0.084,0.044l-0.083,0.047l-0.082,0.048l-0.081,0.051l-0.079,0.052l-0.078,0.054l-0.077,0.056l-0.075,0.057l-0.074,0.06l-0.072,0.061l-0.071,0.063l-0.069,0.064l-0.068,0.066l-0.066,0.068l-0.064,0.069l-0.063,0.071l-0.061,0.072l-0.059,0.074l-0.058,0.075l-0.056,0.076l-0.054,0.078l-0.052,0.08l-0.05,0.08l-0.049,0.082l-0.046,0.083l-0.045,0.085l-0.042,0.085l-0.041,0.087l-0.038,0.088l-0.037,0.089l-0.034,0.09l-0.032,0.091l-0.03,0.092l-0.028,0.093l-0.025,0.094l-0.023,0.094l-0.021,0.096l-0.019,0.097l-0.016,0.097l-0.014,0.098l-0.011,0.099l-0.009,0.1l-0.006,0.1l-0.004,0.101l-0.001,0.102l0,1.272l5.531,-5.213l-1.591,0l-0.101,0.002Zm1.692,-0.002l-5.531,5.213l2.5,-0.011l0,-1.245l0,-0.054l0.002,-0.038l0.002,-0.037l0.004,-0.037l0.004,-0.036l0.005,-0.036l0.006,-0.035l0.006,-0.035l0.008,-0.035l0.008,-0.034l0.009,-0.034l0.01,-0.033l0.011,-0.033l0.012,-0.033l0.012,-0.033l0.013,-0.032l0.014,-0.032l0.015,-0.031l0.015,-0.031l0.016,-0.031l0.017,-0.03l0.018,-0.03l0.018,-0.03l0.02,-0.029l0.019,-0.028l0.021,-0.029l0.021,-0.027l0.022,-0.028l0.023,-0.026l0.023,-0.026l0.024,-0.026l0.024,-0.025l0.025,-0.025l0.026,-0.023l0.026,-0.024l0.027,-0.022l0.027,-0.022l0.028,-0.021l0.028,-0.021l0.029,-0.02l0.029,-0.019l0.029,-0.018l0.03,-0.018l0.031,-0.017l0.03,-0.016l0.031,-0.016l0.032,-0.014l0.032,-0.014l0.032,-0.013l0.032,-0.013l0.033,-0.011l0.033,-0.011l0.034,-0.01l0.033,-0.009l0.035,-0.009l0.034,-0.007l0.035,-0.007l0.036,-0.006l0.035,-0.005l0.037,-0.004l0.036,-0.003l0.037,-0.003l0.038,-0.001l0.054,-0.001l1.569,0l0.006,-2.5Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M13.85,2.516l0.096,0.003l0.096,0.006l0.094,0.009l0.094,0.01l0.093,0.014l0.093,0.015l0.092,0.017l0.091,0.02l0.09,0.022l0.089,0.024l0.089,0.027l0.087,0.029l0.087,0.03l0.085,0.032l0.085,0.034l0.083,0.037l0.082,0.038l0.082,0.041l0.079,0.042l0.079,0.045l0.078,0.045l0.077,0.049l0.075,0.049l0.074,0.051l0.073,0.054l0.072,0.054l0.07,0.057l0.068,0.058l0.068,0.06l0.065,0.06l0.065,0.063l0.062,0.065l0.061,0.065l0.06,0.068l0.058,0.068l0.056,0.07l0.055,0.072l0.053,0.072l0.052,0.074l0.049,0.076l0.048,0.076l0.046,0.078l0.044,0.079l0.043,0.08l0.039,0.081l0.039,0.083l0.036,0.083l0.036,0.085l0.032,0.085l0.03,0.087l0.029,0.087l0.026,0.088l0.024,0.09l0.022,0.089l0.02,0.091l0.018,0.092l0.015,0.093l0.013,0.093l0.011,0.094l0.008,0.095l0.006,0.095l0.004,0.096l0.001,0.096l0,1.043l-5.125,-4.786l1.382,0l0.096,0.002Zm-1.478,-0.002l5.125,4.786l-0.95,-0.004l0,-1.033l-0.001,-0.078l-0.003,-0.072l-0.004,-0.071l-0.006,-0.071l-0.009,-0.07l-0.009,-0.07l-0.012,-0.068l-0.013,-0.069l-0.014,-0.067l-0.016,-0.068l-0.018,-0.066l-0.02,-0.066l-0.021,-0.065l-0.023,-0.064l-0.025,-0.064l-0.025,-0.063l-0.027,-0.062l-0.028,-0.062l-0.031,-0.06l-0.031,-0.059l-0.033,-0.059l-0.035,-0.058l-0.036,-0.057l-0.037,-0.057l-0.038,-0.055l-0.04,-0.054l-0.041,-0.054l-0.041,-0.052l-0.044,-0.051l-0.045,-0.051l-0.045,-0.049l-0.048,-0.048l-0.047,-0.047l-0.05,-0.045l-0.05,-0.045l-0.051,-0.044l-0.053,-0.042l-0.053,-0.041l-0.054,-0.039l-0.056,-0.039l-0.056,-0.037l-0.057,-0.035l-0.058,-0.035l-0.059,-0.033l-0.06,-0.031l-0.06,-0.031l-0.061,-0.028l-0.063,-0.028l-0.063,-0.025l-0.063,-0.024l-0.065,-0.023l-0.064,-0.021l-0.066,-0.02l-0.066,-0.018l-0.068,-0.016l-0.067,-0.015l-0.069,-0.013l-0.069,-0.012l-0.069,-0.009l-0.071,-0.008l-0.07,-0.007l-0.071,-0.004l-0.072,-0.003l-0.079,-0.001l-1.393,0l0.017,-0.95Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M13.856,17.518l0.096,-0.003l0.096,-0.006l0.094,-0.009l0.094,-0.01l0.093,-0.014l0.094,-0.015l0.091,-0.017l0.091,-0.02l0.09,-0.022l0.089,-0.024l0.089,-0.027l0.087,-0.029l0.087,-0.03l0.085,-0.032l0.085,-0.034l0.083,-0.038l0.082,-0.038l0.082,-0.04l0.079,-0.042l0.079,-0.045l0.078,-0.045l0.077,-0.049l0.075,-0.049l0.074,-0.052l0.073,-0.053l0.072,-0.054l0.07,-0.057l0.068,-0.058l0.068,-0.06l0.065,-0.06l0.065,-0.063l0.063,-0.065l0.06,-0.065l0.06,-0.068l0.058,-0.068l0.056,-0.07l0.055,-0.072l0.053,-0.072l0.052,-0.074l0.049,-0.076l0.048,-0.076l0.046,-0.078l0.044,-0.079l0.043,-0.08l0.039,-0.081l0.039,-0.083l0.037,-0.083l0.035,-0.085l0.032,-0.085l0.03,-0.087l0.029,-0.087l0.026,-0.089l0.024,-0.089l0.022,-0.089l0.02,-0.091l0.018,-0.092l0.015,-0.093l0.014,-0.093l0.01,-0.094l0.009,-0.095l0.005,-0.095l0.004,-0.096l0.001,-0.096l0,-1.043l-5.125,4.786l1.382,0l0.096,-0.002Zm-1.478,0.002l5.125,-4.786l-0.95,0.003l0,1.034l-0.001,0.078l-0.003,0.072l-0.004,0.071l-0.006,0.071l-0.009,0.07l-0.009,0.07l-0.012,0.068l-0.013,0.069l-0.014,0.067l-0.016,0.068l-0.018,0.066l-0.02,0.066l-0.021,0.065l-0.023,0.064l-0.025,0.064l-0.025,0.063l-0.027,0.062l-0.028,0.062l-0.031,0.06l-0.031,0.059l-0.033,0.059l-0.035,0.058l-0.036,0.057l-0.037,0.057l-0.038,0.055l-0.04,0.054l-0.04,0.054l-0.042,0.052l-0.044,0.051l-0.045,0.05l-0.045,0.05l-0.048,0.048l-0.047,0.047l-0.05,0.045l-0.05,0.045l-0.051,0.044l-0.052,0.042l-0.054,0.041l-0.054,0.039l-0.056,0.039l-0.056,0.037l-0.057,0.035l-0.058,0.035l-0.059,0.033l-0.06,0.031l-0.06,0.031l-0.061,0.028l-0.063,0.028l-0.063,0.025l-0.063,0.024l-0.065,0.023l-0.064,0.021l-0.066,0.02l-0.066,0.018l-0.068,0.016l-0.067,0.015l-0.069,0.013l-0.069,0.012l-0.069,0.009l-0.071,0.008l-0.07,0.007l-0.071,0.004l-0.072,0.003l-0.079,0.001l-1.393,0l0.017,0.95Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M6.191,17.518l-0.096,-0.003l-0.096,-0.006l-0.094,-0.009l-0.094,-0.01l-0.093,-0.014l-0.093,-0.015l-0.091,-0.017l-0.092,-0.02l-0.09,-0.022l-0.089,-0.024l-0.088,-0.027l-0.088,-0.029l-0.086,-0.03l-0.086,-0.032l-0.084,-0.034l-0.084,-0.038l-0.082,-0.038l-0.081,-0.04l-0.08,-0.042l-0.079,-0.045l-0.078,-0.045l-0.077,-0.049l-0.075,-0.049l-0.074,-0.052l-0.073,-0.053l-0.071,-0.054l-0.071,-0.057l-0.068,-0.058l-0.067,-0.06l-0.066,-0.06l-0.064,-0.063l-0.063,-0.065l-0.061,-0.065l-0.06,-0.068l-0.058,-0.068l-0.056,-0.07l-0.055,-0.072l-0.053,-0.072l-0.051,-0.074l-0.05,-0.076l-0.047,-0.076l-0.047,-0.078l-0.044,-0.079l-0.042,-0.08l-0.04,-0.081l-0.039,-0.083l-0.036,-0.083l-0.035,-0.085l-0.033,-0.085l-0.03,-0.087l-0.029,-0.087l-0.026,-0.089l-0.024,-0.089l-0.022,-0.089l-0.02,-0.091l-0.018,-0.092l-0.015,-0.093l-0.013,-0.093l-0.011,-0.094l-0.008,-0.095l-0.006,-0.095l-0.004,-0.096l-0.001,-0.096l0,-1.043l5.125,4.786l-1.382,0l-0.096,-0.002Zm1.478,0.002l-5.125,-4.786l0.95,0.003l0,1.034l0.001,0.078l0.003,0.072l0.004,0.071l0.006,0.071l0.009,0.07l0.01,0.07l0.011,0.068l0.013,0.069l0.014,0.067l0.017,0.068l0.018,0.066l0.02,0.066l0.021,0.065l0.022,0.064l0.025,0.064l0.026,0.063l0.026,0.062l0.029,0.062l0.03,0.06l0.031,0.059l0.034,0.059l0.034,0.058l0.036,0.057l0.037,0.057l0.038,0.055l0.04,0.054l0.041,0.054l0.042,0.052l0.043,0.051l0.045,0.05l0.046,0.05l0.047,0.048l0.048,0.047l0.049,0.045l0.05,0.045l0.052,0.044l0.052,0.042l0.053,0.041l0.054,0.039l0.056,0.039l0.056,0.037l0.057,0.035l0.058,0.035l0.059,0.033l0.06,0.031l0.061,0.031l0.06,0.028l0.063,0.028l0.063,0.025l0.063,0.024l0.065,0.023l0.065,0.021l0.065,0.02l0.067,0.018l0.067,0.016l0.068,0.015l0.068,0.013l0.069,0.012l0.07,0.009l0.07,0.008l0.07,0.007l0.071,0.004l0.073,0.003l0.079,0.001l1.392,0l-0.017,0.95Z",
  fill: "#555d66"
}));
icons.bottomleft = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M6.077,17.873l-0.101,-0.003l-0.101,-0.007l-0.099,-0.009l-0.099,-0.011l-0.098,-0.014l-0.098,-0.016l-0.096,-0.018l-0.096,-0.021l-0.095,-0.023l-0.094,-0.026l-0.093,-0.028l-0.092,-0.03l-0.091,-0.032l-0.09,-0.034l-0.089,-0.036l-0.088,-0.039l-0.086,-0.04l-0.086,-0.043l-0.084,-0.044l-0.083,-0.047l-0.082,-0.048l-0.081,-0.051l-0.079,-0.052l-0.078,-0.054l-0.077,-0.056l-0.075,-0.057l-0.074,-0.06l-0.072,-0.061l-0.071,-0.063l-0.069,-0.064l-0.068,-0.066l-0.066,-0.068l-0.064,-0.069l-0.063,-0.071l-0.061,-0.072l-0.059,-0.074l-0.058,-0.075l-0.056,-0.076l-0.054,-0.078l-0.052,-0.08l-0.05,-0.08l-0.049,-0.082l-0.046,-0.083l-0.045,-0.085l-0.042,-0.085l-0.041,-0.087l-0.038,-0.088l-0.037,-0.089l-0.034,-0.09l-0.032,-0.091l-0.03,-0.092l-0.028,-0.093l-0.025,-0.094l-0.023,-0.094l-0.021,-0.096l-0.019,-0.097l-0.016,-0.097l-0.014,-0.098l-0.011,-0.099l-0.009,-0.1l-0.006,-0.1l-0.004,-0.101l-0.001,-0.102l0,-1.272l5.531,5.213l-1.591,0l-0.101,-0.002Zm1.692,0.002l-5.531,-5.213l2.5,0.012l0,1.244l0,0.054l0.002,0.038l0.002,0.037l0.004,0.037l0.004,0.036l0.005,0.036l0.006,0.035l0.006,0.035l0.008,0.035l0.008,0.034l0.009,0.034l0.01,0.033l0.011,0.033l0.012,0.033l0.012,0.033l0.013,0.032l0.014,0.032l0.015,0.031l0.015,0.031l0.016,0.031l0.017,0.03l0.018,0.03l0.018,0.03l0.02,0.029l0.019,0.028l0.021,0.029l0.021,0.027l0.022,0.028l0.023,0.026l0.023,0.026l0.024,0.026l0.024,0.025l0.025,0.025l0.026,0.023l0.026,0.024l0.027,0.022l0.027,0.022l0.028,0.021l0.028,0.021l0.029,0.02l0.029,0.019l0.029,0.018l0.03,0.018l0.031,0.017l0.03,0.016l0.031,0.016l0.032,0.014l0.032,0.014l0.032,0.013l0.032,0.013l0.033,0.011l0.033,0.011l0.034,0.01l0.033,0.009l0.035,0.009l0.034,0.007l0.035,0.007l0.036,0.006l0.035,0.005l0.037,0.004l0.036,0.003l0.037,0.003l0.038,0.001l0.054,0.001l1.569,0l0.006,2.5Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M13.85,2.516l0.096,0.003l0.096,0.006l0.094,0.009l0.094,0.01l0.093,0.014l0.093,0.015l0.092,0.017l0.091,0.02l0.09,0.022l0.089,0.024l0.089,0.027l0.087,0.029l0.087,0.03l0.085,0.032l0.085,0.034l0.083,0.037l0.082,0.038l0.082,0.041l0.079,0.042l0.079,0.045l0.078,0.045l0.077,0.049l0.075,0.049l0.074,0.051l0.073,0.054l0.072,0.054l0.07,0.057l0.068,0.058l0.068,0.06l0.065,0.06l0.065,0.063l0.062,0.065l0.061,0.065l0.06,0.068l0.058,0.068l0.056,0.07l0.055,0.072l0.053,0.072l0.052,0.074l0.049,0.076l0.048,0.076l0.046,0.078l0.044,0.079l0.043,0.08l0.039,0.081l0.039,0.083l0.036,0.083l0.036,0.085l0.032,0.085l0.03,0.087l0.029,0.087l0.026,0.088l0.024,0.09l0.022,0.089l0.02,0.091l0.018,0.092l0.015,0.093l0.013,0.093l0.011,0.094l0.008,0.095l0.006,0.095l0.004,0.096l0.001,0.096l0,1.043l-5.125,-4.786l1.382,0l0.096,0.002Zm-1.478,-0.002l5.125,4.786l-0.95,-0.004l0,-1.033l-0.001,-0.078l-0.003,-0.072l-0.004,-0.071l-0.006,-0.071l-0.009,-0.07l-0.009,-0.07l-0.012,-0.068l-0.013,-0.069l-0.014,-0.067l-0.016,-0.068l-0.018,-0.066l-0.02,-0.066l-0.021,-0.065l-0.023,-0.064l-0.025,-0.064l-0.025,-0.063l-0.027,-0.062l-0.028,-0.062l-0.031,-0.06l-0.031,-0.059l-0.033,-0.059l-0.035,-0.058l-0.036,-0.057l-0.037,-0.057l-0.038,-0.055l-0.04,-0.054l-0.041,-0.054l-0.041,-0.052l-0.044,-0.051l-0.045,-0.051l-0.045,-0.049l-0.048,-0.048l-0.047,-0.047l-0.05,-0.045l-0.05,-0.045l-0.051,-0.044l-0.053,-0.042l-0.053,-0.041l-0.054,-0.039l-0.056,-0.039l-0.056,-0.037l-0.057,-0.035l-0.058,-0.035l-0.059,-0.033l-0.06,-0.031l-0.06,-0.031l-0.061,-0.028l-0.063,-0.028l-0.063,-0.025l-0.063,-0.024l-0.065,-0.023l-0.064,-0.021l-0.066,-0.02l-0.066,-0.018l-0.068,-0.016l-0.067,-0.015l-0.069,-0.013l-0.069,-0.012l-0.069,-0.009l-0.071,-0.008l-0.07,-0.007l-0.071,-0.004l-0.072,-0.003l-0.079,-0.001l-1.393,0l0.017,-0.95Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M6.136,2.516l-0.096,0.003l-0.096,0.006l-0.094,0.009l-0.094,0.01l-0.093,0.014l-0.093,0.015l-0.091,0.017l-0.091,0.02l-0.09,0.022l-0.09,0.024l-0.088,0.027l-0.087,0.029l-0.087,0.03l-0.085,0.032l-0.085,0.034l-0.084,0.037l-0.081,0.038l-0.082,0.041l-0.08,0.042l-0.079,0.045l-0.077,0.045l-0.077,0.049l-0.075,0.049l-0.075,0.051l-0.073,0.054l-0.071,0.054l-0.07,0.057l-0.069,0.058l-0.067,0.06l-0.066,0.06l-0.064,0.063l-0.063,0.065l-0.061,0.065l-0.059,0.068l-0.058,0.068l-0.056,0.07l-0.056,0.072l-0.053,0.072l-0.051,0.074l-0.049,0.076l-0.048,0.076l-0.046,0.078l-0.044,0.079l-0.043,0.08l-0.04,0.081l-0.039,0.083l-0.036,0.083l-0.035,0.085l-0.032,0.085l-0.031,0.087l-0.028,0.087l-0.027,0.088l-0.024,0.09l-0.021,0.089l-0.02,0.091l-0.018,0.092l-0.016,0.093l-0.013,0.093l-0.01,0.094l-0.009,0.095l-0.006,0.095l-0.003,0.096l-0.001,0.096l0,1.043l5.124,-4.786l-1.382,0l-0.096,0.002Zm1.478,-0.002l-5.124,4.786l0.95,-0.004l0,-1.033l0.001,-0.078l0.002,-0.072l0.004,-0.071l0.007,-0.071l0.008,-0.07l0.01,-0.07l0.011,-0.068l0.014,-0.069l0.014,-0.067l0.016,-0.068l0.018,-0.066l0.02,-0.066l0.021,-0.065l0.023,-0.064l0.024,-0.064l0.026,-0.063l0.027,-0.062l0.028,-0.062l0.03,-0.06l0.032,-0.059l0.033,-0.059l0.034,-0.058l0.036,-0.057l0.037,-0.057l0.038,-0.055l0.04,-0.054l0.041,-0.054l0.042,-0.052l0.044,-0.051l0.044,-0.051l0.046,-0.049l0.047,-0.048l0.048,-0.047l0.049,-0.045l0.051,-0.045l0.051,-0.044l0.052,-0.042l0.053,-0.041l0.054,-0.039l0.057,-0.039l0.056,-0.037l0.057,-0.035l0.057,-0.035l0.059,-0.033l0.06,-0.031l0.061,-0.031l0.061,-0.028l0.063,-0.028l0.062,-0.025l0.064,-0.024l0.064,-0.023l0.065,-0.021l0.066,-0.02l0.066,-0.018l0.068,-0.016l0.067,-0.015l0.068,-0.013l0.07,-0.012l0.069,-0.009l0.07,-0.008l0.071,-0.007l0.071,-0.004l0.072,-0.003l0.079,-0.001l1.392,0l-0.017,-0.95Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M13.856,17.518l0.096,-0.003l0.096,-0.006l0.094,-0.009l0.094,-0.01l0.093,-0.014l0.094,-0.015l0.091,-0.017l0.091,-0.02l0.09,-0.022l0.089,-0.024l0.089,-0.027l0.087,-0.029l0.087,-0.03l0.085,-0.032l0.085,-0.034l0.083,-0.038l0.082,-0.038l0.082,-0.04l0.079,-0.042l0.079,-0.045l0.078,-0.045l0.077,-0.049l0.075,-0.049l0.074,-0.052l0.073,-0.053l0.072,-0.054l0.07,-0.057l0.068,-0.058l0.068,-0.06l0.065,-0.06l0.065,-0.063l0.063,-0.065l0.06,-0.065l0.06,-0.068l0.058,-0.068l0.056,-0.07l0.055,-0.072l0.053,-0.072l0.052,-0.074l0.049,-0.076l0.048,-0.076l0.046,-0.078l0.044,-0.079l0.043,-0.08l0.039,-0.081l0.039,-0.083l0.037,-0.083l0.035,-0.085l0.032,-0.085l0.03,-0.087l0.029,-0.087l0.026,-0.089l0.024,-0.089l0.022,-0.089l0.02,-0.091l0.018,-0.092l0.015,-0.093l0.014,-0.093l0.01,-0.094l0.009,-0.095l0.005,-0.095l0.004,-0.096l0.001,-0.096l0,-1.043l-5.125,4.786l1.382,0l0.096,-0.002Zm-1.478,0.002l5.125,-4.786l-0.95,0.003l0,1.034l-0.001,0.078l-0.003,0.072l-0.004,0.071l-0.006,0.071l-0.009,0.07l-0.009,0.07l-0.012,0.068l-0.013,0.069l-0.014,0.067l-0.016,0.068l-0.018,0.066l-0.02,0.066l-0.021,0.065l-0.023,0.064l-0.025,0.064l-0.025,0.063l-0.027,0.062l-0.028,0.062l-0.031,0.06l-0.031,0.059l-0.033,0.059l-0.035,0.058l-0.036,0.057l-0.037,0.057l-0.038,0.055l-0.04,0.054l-0.04,0.054l-0.042,0.052l-0.044,0.051l-0.045,0.05l-0.045,0.05l-0.048,0.048l-0.047,0.047l-0.05,0.045l-0.05,0.045l-0.051,0.044l-0.052,0.042l-0.054,0.041l-0.054,0.039l-0.056,0.039l-0.056,0.037l-0.057,0.035l-0.058,0.035l-0.059,0.033l-0.06,0.031l-0.06,0.031l-0.061,0.028l-0.063,0.028l-0.063,0.025l-0.063,0.024l-0.065,0.023l-0.064,0.021l-0.066,0.02l-0.066,0.018l-0.068,0.016l-0.067,0.015l-0.069,0.013l-0.069,0.012l-0.069,0.009l-0.071,0.008l-0.07,0.007l-0.071,0.004l-0.072,0.003l-0.079,0.001l-1.393,0l0.017,0.95Z",
  fill: "#555d66"
}));
icons.bottomright = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M14.044,17.873l0.101,-0.003l0.101,-0.007l0.099,-0.009l0.099,-0.011l0.098,-0.014l0.098,-0.016l0.096,-0.018l0.096,-0.021l0.095,-0.023l0.094,-0.026l0.093,-0.028l0.092,-0.03l0.091,-0.032l0.09,-0.034l0.089,-0.036l0.088,-0.039l0.086,-0.04l0.086,-0.043l0.084,-0.044l0.083,-0.047l0.082,-0.048l0.081,-0.051l0.079,-0.052l0.078,-0.054l0.077,-0.056l0.075,-0.057l0.074,-0.06l0.072,-0.061l0.071,-0.063l0.069,-0.064l0.068,-0.066l0.066,-0.068l0.064,-0.069l0.063,-0.071l0.061,-0.072l0.059,-0.074l0.058,-0.075l0.056,-0.076l0.054,-0.078l0.052,-0.08l0.05,-0.08l0.049,-0.082l0.046,-0.083l0.045,-0.085l0.042,-0.085l0.041,-0.087l0.038,-0.088l0.037,-0.089l0.034,-0.09l0.032,-0.091l0.03,-0.092l0.028,-0.093l0.025,-0.094l0.023,-0.094l0.021,-0.096l0.019,-0.097l0.016,-0.097l0.014,-0.098l0.011,-0.099l0.009,-0.1l0.006,-0.1l0.004,-0.101l0.001,-0.102l0,-1.272l-5.531,5.213l1.591,0l0.101,-0.002Zm-1.692,0.002l5.531,-5.213l-2.5,0.012l0,1.244l0,0.054l-0.002,0.038l-0.002,0.037l-0.004,0.037l-0.004,0.036l-0.005,0.036l-0.006,0.035l-0.006,0.035l-0.008,0.035l-0.008,0.034l-0.009,0.034l-0.01,0.033l-0.011,0.033l-0.012,0.033l-0.012,0.033l-0.013,0.032l-0.014,0.032l-0.015,0.031l-0.015,0.031l-0.016,0.031l-0.017,0.03l-0.018,0.03l-0.018,0.03l-0.02,0.029l-0.019,0.028l-0.021,0.029l-0.021,0.027l-0.022,0.028l-0.023,0.026l-0.023,0.026l-0.024,0.026l-0.024,0.025l-0.025,0.025l-0.026,0.023l-0.026,0.024l-0.027,0.022l-0.027,0.022l-0.028,0.021l-0.028,0.021l-0.029,0.02l-0.029,0.019l-0.029,0.018l-0.03,0.018l-0.031,0.017l-0.03,0.016l-0.031,0.016l-0.032,0.014l-0.032,0.014l-0.032,0.013l-0.032,0.013l-0.033,0.011l-0.033,0.011l-0.034,0.01l-0.033,0.009l-0.035,0.009l-0.034,0.007l-0.035,0.007l-0.036,0.006l-0.035,0.005l-0.037,0.004l-0.036,0.003l-0.037,0.003l-0.038,0.001l-0.054,0.001l-1.57,0l-0.005,2.5Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M13.85,2.516l0.096,0.003l0.096,0.006l0.094,0.009l0.094,0.01l0.093,0.014l0.093,0.015l0.092,0.017l0.091,0.02l0.09,0.022l0.089,0.024l0.089,0.027l0.087,0.029l0.087,0.03l0.085,0.032l0.085,0.034l0.083,0.037l0.082,0.038l0.082,0.041l0.079,0.042l0.079,0.045l0.078,0.045l0.077,0.049l0.075,0.049l0.074,0.051l0.073,0.054l0.072,0.054l0.07,0.057l0.068,0.058l0.068,0.06l0.065,0.06l0.065,0.063l0.062,0.065l0.061,0.065l0.06,0.068l0.058,0.068l0.056,0.07l0.055,0.072l0.053,0.072l0.052,0.074l0.049,0.076l0.048,0.076l0.046,0.078l0.044,0.079l0.043,0.08l0.039,0.081l0.039,0.083l0.036,0.083l0.036,0.085l0.032,0.085l0.03,0.087l0.029,0.087l0.026,0.088l0.024,0.09l0.022,0.089l0.02,0.091l0.018,0.092l0.015,0.093l0.013,0.093l0.011,0.094l0.008,0.095l0.006,0.095l0.004,0.096l0.001,0.096l0,1.043l-5.125,-4.786l1.382,0l0.096,0.002Zm-1.478,-0.002l5.125,4.786l-0.95,-0.004l0,-1.033l-0.001,-0.078l-0.003,-0.072l-0.004,-0.071l-0.006,-0.071l-0.009,-0.07l-0.009,-0.07l-0.012,-0.068l-0.013,-0.069l-0.014,-0.067l-0.016,-0.068l-0.018,-0.066l-0.02,-0.066l-0.021,-0.065l-0.023,-0.064l-0.025,-0.064l-0.025,-0.063l-0.027,-0.062l-0.028,-0.062l-0.031,-0.06l-0.031,-0.059l-0.033,-0.059l-0.035,-0.058l-0.036,-0.057l-0.037,-0.057l-0.038,-0.055l-0.04,-0.054l-0.041,-0.054l-0.041,-0.052l-0.044,-0.051l-0.045,-0.051l-0.045,-0.049l-0.048,-0.048l-0.047,-0.047l-0.05,-0.045l-0.05,-0.045l-0.051,-0.044l-0.053,-0.042l-0.053,-0.041l-0.054,-0.039l-0.056,-0.039l-0.056,-0.037l-0.057,-0.035l-0.058,-0.035l-0.059,-0.033l-0.06,-0.031l-0.06,-0.031l-0.061,-0.028l-0.063,-0.028l-0.063,-0.025l-0.063,-0.024l-0.065,-0.023l-0.064,-0.021l-0.066,-0.02l-0.066,-0.018l-0.068,-0.016l-0.067,-0.015l-0.069,-0.013l-0.069,-0.012l-0.069,-0.009l-0.071,-0.008l-0.07,-0.007l-0.071,-0.004l-0.072,-0.003l-0.079,-0.001l-1.393,0l0.017,-0.95Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M6.136,2.516l-0.096,0.003l-0.096,0.006l-0.094,0.009l-0.094,0.01l-0.093,0.014l-0.093,0.015l-0.091,0.017l-0.091,0.02l-0.09,0.022l-0.09,0.024l-0.088,0.027l-0.087,0.029l-0.087,0.03l-0.085,0.032l-0.085,0.034l-0.084,0.037l-0.081,0.038l-0.082,0.041l-0.08,0.042l-0.079,0.045l-0.077,0.045l-0.077,0.049l-0.075,0.049l-0.075,0.051l-0.073,0.054l-0.071,0.054l-0.07,0.057l-0.069,0.058l-0.067,0.06l-0.066,0.06l-0.064,0.063l-0.063,0.065l-0.061,0.065l-0.059,0.068l-0.058,0.068l-0.056,0.07l-0.056,0.072l-0.053,0.072l-0.051,0.074l-0.049,0.076l-0.048,0.076l-0.046,0.078l-0.044,0.079l-0.043,0.08l-0.04,0.081l-0.039,0.083l-0.036,0.083l-0.035,0.085l-0.032,0.085l-0.031,0.087l-0.028,0.087l-0.027,0.088l-0.024,0.09l-0.021,0.089l-0.02,0.091l-0.018,0.092l-0.016,0.093l-0.013,0.093l-0.01,0.094l-0.009,0.095l-0.006,0.095l-0.003,0.096l-0.001,0.096l0,1.043l5.124,-4.786l-1.382,0l-0.096,0.002Zm1.478,-0.002l-5.124,4.786l0.95,-0.004l0,-1.033l0.001,-0.078l0.002,-0.072l0.004,-0.071l0.007,-0.071l0.008,-0.07l0.01,-0.07l0.011,-0.068l0.014,-0.069l0.014,-0.067l0.016,-0.068l0.018,-0.066l0.02,-0.066l0.021,-0.065l0.023,-0.064l0.024,-0.064l0.026,-0.063l0.027,-0.062l0.028,-0.062l0.03,-0.06l0.032,-0.059l0.033,-0.059l0.034,-0.058l0.036,-0.057l0.037,-0.057l0.038,-0.055l0.04,-0.054l0.041,-0.054l0.042,-0.052l0.044,-0.051l0.044,-0.051l0.046,-0.049l0.047,-0.048l0.048,-0.047l0.049,-0.045l0.051,-0.045l0.051,-0.044l0.052,-0.042l0.053,-0.041l0.054,-0.039l0.057,-0.039l0.056,-0.037l0.057,-0.035l0.057,-0.035l0.059,-0.033l0.06,-0.031l0.061,-0.031l0.061,-0.028l0.063,-0.028l0.062,-0.025l0.064,-0.024l0.064,-0.023l0.065,-0.021l0.066,-0.02l0.066,-0.018l0.068,-0.016l0.067,-0.015l0.068,-0.013l0.07,-0.012l0.069,-0.009l0.07,-0.008l0.071,-0.007l0.071,-0.004l0.072,-0.003l0.079,-0.001l1.392,0l-0.017,-0.95Z",
  fill: "#555d66"
}), React.createElement("path", {
  d: "M6.191,17.518l-0.096,-0.003l-0.096,-0.006l-0.094,-0.009l-0.094,-0.01l-0.093,-0.014l-0.093,-0.015l-0.091,-0.017l-0.092,-0.02l-0.09,-0.022l-0.089,-0.024l-0.088,-0.027l-0.088,-0.029l-0.086,-0.03l-0.086,-0.032l-0.084,-0.034l-0.084,-0.038l-0.082,-0.038l-0.081,-0.04l-0.08,-0.042l-0.079,-0.045l-0.078,-0.045l-0.077,-0.049l-0.075,-0.049l-0.074,-0.052l-0.073,-0.053l-0.071,-0.054l-0.071,-0.057l-0.068,-0.058l-0.067,-0.06l-0.066,-0.06l-0.064,-0.063l-0.063,-0.065l-0.061,-0.065l-0.06,-0.068l-0.058,-0.068l-0.056,-0.07l-0.055,-0.072l-0.053,-0.072l-0.051,-0.074l-0.05,-0.076l-0.047,-0.076l-0.047,-0.078l-0.044,-0.079l-0.042,-0.08l-0.04,-0.081l-0.039,-0.083l-0.036,-0.083l-0.035,-0.085l-0.033,-0.085l-0.03,-0.087l-0.029,-0.087l-0.026,-0.089l-0.024,-0.089l-0.022,-0.089l-0.02,-0.091l-0.018,-0.092l-0.015,-0.093l-0.013,-0.093l-0.011,-0.094l-0.008,-0.095l-0.006,-0.095l-0.004,-0.096l-0.001,-0.096l0,-1.043l5.125,4.786l-1.382,0l-0.096,-0.002Zm1.478,0.002l-5.125,-4.786l0.95,0.003l0,1.034l0.001,0.078l0.003,0.072l0.004,0.071l0.006,0.071l0.009,0.07l0.01,0.07l0.011,0.068l0.013,0.069l0.014,0.067l0.017,0.068l0.018,0.066l0.02,0.066l0.021,0.065l0.022,0.064l0.025,0.064l0.026,0.063l0.026,0.062l0.029,0.062l0.03,0.06l0.031,0.059l0.034,0.059l0.034,0.058l0.036,0.057l0.037,0.057l0.038,0.055l0.04,0.054l0.041,0.054l0.042,0.052l0.043,0.051l0.045,0.05l0.046,0.05l0.047,0.048l0.048,0.047l0.049,0.045l0.05,0.045l0.052,0.044l0.052,0.042l0.053,0.041l0.054,0.039l0.056,0.039l0.056,0.037l0.057,0.035l0.058,0.035l0.059,0.033l0.06,0.031l0.061,0.031l0.06,0.028l0.063,0.028l0.063,0.025l0.063,0.024l0.065,0.023l0.065,0.021l0.065,0.02l0.067,0.018l0.067,0.016l0.068,0.015l0.068,0.013l0.069,0.012l0.07,0.009l0.07,0.008l0.07,0.007l0.071,0.004l0.073,0.003l0.079,0.001l1.392,0l-0.017,0.95Z",
  fill: "#555d66"
}));
icons.h1 = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M9.229,3.5l0,5.2l-5,0l0,-5.2l-2.5,0l0,13l2.5,0l0,-5.2l5,0l0,5.2l2.5,0l0,-13l-2.5,0Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M12.993,9.914c0.232,-0.096 0.474,-0.206 0.726,-0.33c0.252,-0.124 0.498,-0.26 0.738,-0.408c0.24,-0.148 0.47,-0.304 0.69,-0.468c0.22,-0.164 0.418,-0.338 0.594,-0.522l1.248,0l0,8.316l-1.788,0l0,-5.988c-0.24,0.16 -0.508,0.306 -0.804,0.438c-0.296,0.132 -0.584,0.246 -0.864,0.342l-0.54,-1.38Z",
  fillRule: "nonzero"
}));
icons.h2 = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M9.229,3.5l0,5.2l-5,0l0,-5.2l-2.5,0l0,13l2.5,0l0,-5.2l5,0l0,5.2l2.5,0l0,-13l-2.5,0Z"
}), React.createElement("path", {
  d: "M18.019,10.342c0,0.304 -0.06,0.596 -0.18,0.876c-0.12,0.28 -0.276,0.55 -0.468,0.81c-0.192,0.26 -0.408,0.51 -0.648,0.75c-0.24,0.24 -0.476,0.468 -0.708,0.684c-0.12,0.112 -0.25,0.238 -0.39,0.378c-0.14,0.14 -0.274,0.282 -0.402,0.426c-0.128,0.144 -0.242,0.278 -0.342,0.402c-0.1,0.124 -0.162,0.226 -0.186,0.306l3.576,0l0,1.5l-5.544,0c-0.016,-0.088 -0.024,-0.2 -0.024,-0.336c0,-0.136 0,-0.232 0,-0.288c0,-0.384 0.062,-0.736 0.186,-1.056c0.124,-0.32 0.286,-0.618 0.486,-0.894c0.2,-0.276 0.426,-0.534 0.678,-0.774c0.252,-0.24 0.502,-0.48 0.75,-0.72c0.192,-0.184 0.372,-0.358 0.54,-0.522c0.168,-0.164 0.316,-0.324 0.444,-0.48c0.128,-0.156 0.228,-0.312 0.3,-0.468c0.072,-0.156 0.108,-0.314 0.108,-0.474c0,-0.352 -0.1,-0.6 -0.3,-0.744c-0.2,-0.144 -0.448,-0.216 -0.744,-0.216c-0.216,0 -0.418,0.034 -0.606,0.102c-0.188,0.068 -0.36,0.148 -0.516,0.24c-0.156,0.092 -0.29,0.184 -0.402,0.276c-0.112,0.092 -0.196,0.166 -0.252,0.222l-0.888,-1.248c0.352,-0.328 0.762,-0.598 1.23,-0.81c0.468,-0.212 0.97,-0.318 1.506,-0.318c0.488,0 0.908,0.056 1.26,0.168c0.352,0.112 0.642,0.27 0.87,0.474c0.228,0.204 0.396,0.452 0.504,0.744c0.108,0.292 0.162,0.622 0.162,0.99Z"
}));
icons.h3 = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M9.229,3.5l0,5.2l-5,0l0,-5.2l-2.5,0l0,13l2.5,0l0,-5.2l5,0l0,5.2l2.5,0l0,-13l-2.5,0Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M14.884,16.485c-0.216,0 -0.444,-0.014 -0.684,-0.042c-0.24,-0.028 -0.472,-0.066 -0.696,-0.114c-0.224,-0.048 -0.428,-0.1 -0.612,-0.156c-0.184,-0.056 -0.328,-0.108 -0.432,-0.156l0.348,-1.488c0.208,0.088 0.474,0.182 0.798,0.282c0.324,0.1 0.726,0.15 1.206,0.15c0.552,0 0.956,-0.104 1.212,-0.312c0.256,-0.208 0.384,-0.488 0.384,-0.84c0,-0.216 -0.046,-0.398 -0.138,-0.546c-0.092,-0.148 -0.218,-0.268 -0.378,-0.36c-0.16,-0.092 -0.35,-0.156 -0.57,-0.192c-0.22,-0.036 -0.454,-0.054 -0.702,-0.054l-0.696,0l0,-1.44l0.792,0c0.176,0 0.346,-0.016 0.51,-0.048c0.164,-0.032 0.31,-0.086 0.438,-0.162c0.128,-0.076 0.23,-0.18 0.306,-0.312c0.076,-0.132 0.114,-0.298 0.114,-0.498c0,-0.152 -0.032,-0.284 -0.096,-0.396c-0.064,-0.112 -0.146,-0.204 -0.246,-0.276c-0.1,-0.072 -0.216,-0.126 -0.348,-0.162c-0.132,-0.036 -0.266,-0.054 -0.402,-0.054c-0.344,0 -0.662,0.052 -0.954,0.156c-0.292,0.104 -0.558,0.232 -0.798,0.384l-0.636,-1.308c0.128,-0.08 0.278,-0.164 0.45,-0.252c0.172,-0.088 0.362,-0.168 0.57,-0.24c0.208,-0.072 0.43,-0.132 0.666,-0.18c0.236,-0.048 0.486,-0.072 0.75,-0.072c0.488,0 0.91,0.058 1.266,0.174c0.356,0.116 0.65,0.28 0.882,0.492c0.232,0.212 0.404,0.46 0.516,0.744c0.112,0.284 0.168,0.594 0.168,0.93c0,0.328 -0.092,0.646 -0.276,0.954c-0.184,0.308 -0.432,0.542 -0.744,0.702c0.432,0.176 0.766,0.438 1.002,0.786c0.236,0.348 0.354,0.766 0.354,1.254c0,0.384 -0.064,0.738 -0.192,1.062c-0.128,0.324 -0.328,0.604 -0.6,0.84c-0.272,0.236 -0.618,0.42 -1.038,0.552c-0.42,0.132 -0.918,0.198 -1.494,0.198Z",
  fillRule: "nonzero"
}));
icons.h4 = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M9.229,3.5l0,5.2l-5,0l0,-5.2l-2.5,0l0,13l2.5,0l0,-5.2l5,0l0,5.2l2.5,0l0,-13l-2.5,0Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M15.966,10.329c-0.312,0.408 -0.644,0.852 -0.996,1.332c-0.352,0.48 -0.648,0.972 -0.888,1.476l1.884,0l0,-2.808Zm1.752,-2.184l0,4.992l0.888,0l0,1.464l-0.888,0l0,1.86l-1.752,0l0,-1.86l-3.588,0l0,-1.308c0.176,-0.352 0.396,-0.75 0.66,-1.194c0.264,-0.444 0.558,-0.9 0.882,-1.368c0.324,-0.468 0.666,-0.926 1.026,-1.374c0.36,-0.448 0.72,-0.852 1.08,-1.212l1.692,0Z",
  fillRule: "nonzero"
}));
icons.h5 = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M9.229,3.5l0,5.2l-5,0l0,-5.2l-2.5,0l0,13l2.5,0l0,-5.2l5,0l0,5.2l2.5,0l0,-13l-2.5,0Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M16.468,13.857c0,-0.232 -0.052,-0.438 -0.156,-0.618c-0.104,-0.18 -0.284,-0.33 -0.54,-0.45c-0.256,-0.12 -0.6,-0.212 -1.032,-0.276c-0.432,-0.064 -0.976,-0.096 -1.632,-0.096c0.088,-0.744 0.16,-1.5 0.216,-2.268c0.056,-0.768 0.1,-1.488 0.132,-2.16l4.5,0l0,1.5l-3,0c-0.016,0.288 -0.034,0.566 -0.054,0.834c-0.02,0.268 -0.042,0.502 -0.066,0.702c1.168,0.08 2.03,0.354 2.586,0.822c0.556,0.468 0.834,1.118 0.834,1.95c0,0.384 -0.068,0.74 -0.204,1.068c-0.136,0.328 -0.34,0.612 -0.612,0.852c-0.272,0.24 -0.614,0.428 -1.026,0.564c-0.412,0.136 -0.894,0.204 -1.446,0.204c-0.216,0 -0.442,-0.014 -0.678,-0.042c-0.236,-0.028 -0.464,-0.064 -0.684,-0.108c-0.22,-0.044 -0.418,-0.09 -0.594,-0.138c-0.176,-0.048 -0.312,-0.096 -0.408,-0.144l0.324,-1.476c0.2,0.088 0.464,0.174 0.792,0.258c0.328,0.084 0.72,0.126 1.176,0.126c0.552,0 0.952,-0.11 1.2,-0.33c0.248,-0.22 0.372,-0.478 0.372,-0.774Z",
  fillRule: "nonzero"
}));
icons.h6 = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M9.229,3.5l0,5.2l-5,0l0,-5.2l-2.5,0l0,13l2.5,0l0,-5.2l5,0l0,5.2l2.5,0l0,-13l-2.5,0Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M15.436,12.393c-0.176,0 -0.364,0.016 -0.564,0.048c-0.2,0.032 -0.356,0.076 -0.468,0.132c0,0.032 -0.002,0.08 -0.006,0.144c-0.004,0.064 -0.006,0.12 -0.006,0.168c0,0.288 0.02,0.56 0.06,0.816c0.04,0.256 0.108,0.48 0.204,0.672c0.096,0.192 0.224,0.342 0.384,0.45c0.16,0.108 0.36,0.162 0.6,0.162c0.2,0 0.37,-0.042 0.51,-0.126c0.14,-0.084 0.256,-0.19 0.348,-0.318c0.092,-0.128 0.16,-0.27 0.204,-0.426c0.044,-0.156 0.066,-0.306 0.066,-0.45c0,-0.408 -0.102,-0.722 -0.306,-0.942c-0.204,-0.22 -0.546,-0.33 -1.026,-0.33Zm0.228,-1.392c0.52,0 0.962,0.07 1.326,0.21c0.364,0.14 0.662,0.33 0.894,0.57c0.232,0.24 0.4,0.52 0.504,0.84c0.104,0.32 0.156,0.66 0.156,1.02c0,0.32 -0.058,0.648 -0.174,0.984c-0.116,0.336 -0.292,0.64 -0.528,0.912c-0.236,0.272 -0.536,0.496 -0.9,0.672c-0.364,0.176 -0.794,0.264 -1.29,0.264c-1,0 -1.76,-0.316 -2.28,-0.948c-0.52,-0.632 -0.78,-1.504 -0.78,-2.616c0,-0.8 0.124,-1.508 0.372,-2.124c0.248,-0.616 0.602,-1.134 1.062,-1.554c0.46,-0.42 1.016,-0.74 1.668,-0.96c0.652,-0.22 1.386,-0.334 2.202,-0.342c0.016,0.248 0.032,0.49 0.048,0.726c0.016,0.236 0.032,0.482 0.048,0.738c-0.408,0.008 -0.79,0.046 -1.146,0.114c-0.356,0.068 -0.68,0.174 -0.972,0.318c-0.292,0.144 -0.546,0.33 -0.762,0.558c-0.216,0.228 -0.384,0.506 -0.504,0.834c0.176,-0.08 0.356,-0.136 0.54,-0.168c0.184,-0.032 0.356,-0.048 0.516,-0.048Z",
  fillRule: "nonzero"
}));
icons.infobox = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("g", {
  fill: "#179cd4",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M24,26.945c0.001,0 0.002,0 0.003,0c4.371,0 7.968,-3.597 7.968,-7.969c0,-4.371 -3.597,-7.968 -7.968,-7.968c-4.372,0 -7.969,3.597 -7.969,7.968c0,0.001 0,0.002 0,0.003c0,4.37 3.596,7.966 7.966,7.966Zm-4.098,-9.541l2.057,-0.297c0.218,-0.036 0.406,-0.175 0.504,-0.374l0.919,-1.862c0.115,-0.232 0.352,-0.379 0.61,-0.379c0.259,0 0.496,0.147 0.611,0.379l0.918,1.862c0.098,0.199 0.287,0.338 0.505,0.374l2.057,0.297c0.333,0.049 0.582,0.338 0.582,0.675c0,0.183 -0.073,0.358 -0.204,0.486l-1.489,1.451c-0.159,0.157 -0.231,0.382 -0.194,0.603l0.351,2.049c0.006,0.037 0.009,0.075 0.009,0.114c0,0.373 -0.307,0.681 -0.681,0.681c-0.111,0 -0.219,-0.027 -0.317,-0.079l-1.837,-0.966c-0.199,-0.103 -0.437,-0.103 -0.636,0l-1.837,0.966c-0.098,0.052 -0.207,0.079 -0.317,0.079c-0.374,0 -0.682,-0.308 -0.682,-0.681c0,-0.039 0.004,-0.077 0.01,-0.114l0.351,-2.049c0.037,-0.221 -0.036,-0.446 -0.195,-0.603l-1.488,-1.451c-0.13,-0.128 -0.203,-0.303 -0.203,-0.485c0,-0.341 0.257,-0.633 0.596,-0.676Z"
}), React.createElement("path", {
  d: "M46.529,6.719l-45.058,0c-0.485,0 -0.884,0.398 -0.884,0.883l0,32.796c0,0.485 0.399,0.883 0.884,0.883l45.058,0c0.485,0 0.884,-0.398 0.884,-0.883l0,-32.801c-0.003,-0.483 -0.401,-0.878 -0.884,-0.878Zm-0.883,32.801l-43.292,0l0,-31.035l43.292,0l0,31.035Z"
}), React.createElement("path", {
  d: "M29.659,30.091l-11.318,0c-0.485,0 -0.884,0.399 -0.884,0.883c0,0.485 0.399,0.883 0.884,0.883l11.318,0c0.485,0 0.884,-0.398 0.884,-0.883c0,-0.484 -0.399,-0.883 -0.884,-0.883Z"
}), React.createElement("path", {
  d: "M29.425,34.769l-10.85,0c-0.484,0 -0.883,0.399 -0.883,0.883c0,0.485 0.399,0.883 0.883,0.883l10.85,0c0.484,0 0.883,-0.398 0.883,-0.883c0,-0.484 -0.399,-0.883 -0.883,-0.883Z"
})));
icons.accordionBlock = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("g", {
  fill: "#179cd4"
}, React.createElement("path", {
  d: "M46.524,6.723l-45.048,0c-0.485,0 -0.883,0.398 -0.883,0.883l0,32.788c0,0.485 0.398,0.883 0.883,0.883l45.048,0c0.485,0 0.883,-0.398 0.883,-0.883l0,-32.793c-0.002,-0.483 -0.4,-0.878 -0.883,-0.878Zm-17.451,3.985c0,0.485 -0.399,0.883 -0.883,0.883l-18.249,0c-0.484,0 -0.882,-0.398 -0.882,-0.883c0,-0.484 0.398,-0.883 0.882,-0.883l18.249,0c0.484,0 0.883,0.399 0.883,0.883Zm-21.846,0c0,0.678 -0.558,1.236 -1.236,1.236c-0.678,0 -1.236,-0.558 -1.236,-1.236c0,-0.678 0.558,-1.236 1.236,-1.236c0.678,0 1.236,0.558 1.236,1.236Zm38.414,3.784l0,15.893l-43.282,0l0,-15.893l43.282,0Zm0,25.009l-43.282,0l0,-7.35l43.282,0l0,7.35Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M7.578,20.774l32.476,0.04c0.484,0 0.883,-0.399 0.883,-0.883c0,-0.484 -0.399,-0.883 -0.883,-0.883l-32.474,-0.04c-0.484,0 -0.883,0.398 -0.883,0.883c0,0.484 0.399,0.883 0.883,0.883l-0.002,0Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M40.046,24.194l-32.466,-0.04c-0.484,0 -0.883,0.398 -0.883,0.883c0,0.484 0.399,0.883 0.883,0.883l32.466,0.04c0.485,0 0.883,-0.398 0.883,-0.883c0,-0.484 -0.398,-0.883 -0.883,-0.883Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M10.925,36.734l14.942,0c0.484,0 0.883,-0.398 0.883,-0.883c0,-0.484 -0.399,-0.883 -0.883,-0.883l-14.942,0c-0.484,0 -0.883,0.399 -0.883,0.883c0,0.485 0.399,0.883 0.883,0.883Z",
  fillRule: "nonzero"
}), React.createElement("circle", {
  cx: "6.072",
  cy: "35.851",
  r: "1.236"
})));
icons.tabsSimple = React.createElement("svg", {
  viewBox: "0 0 400 300",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M170.032,39.692l0.085,0.001l0.083,0.001l0.084,0.003l0.083,0.004l0.084,0.005l0.082,0.005l0.083,0.007l0.082,0.008l0.082,0.009l0.082,0.01l0.081,0.011l0.081,0.011l0.081,0.013l0.08,0.014l0.08,0.015l0.08,0.016l0.079,0.016l0.079,0.018l0.079,0.019l0.078,0.02l0.078,0.02l0.077,0.022l0.077,0.022l0.077,0.023l0.076,0.025l0.076,0.025l0.075,0.026l0.075,0.027l0.075,0.028l0.074,0.028l0.074,0.03l0.073,0.031l0.073,0.031l0.072,0.032l0.072,0.033l0.072,0.034l0.071,0.035l0.07,0.035l0.07,0.037l0.07,0.037l0.069,0.038l0.068,0.039l0.068,0.04l0.067,0.04l0.067,0.041l0.067,0.042l0.065,0.043l0.066,0.043l0.064,0.045l0.065,0.045l0.063,0.046l0.063,0.046l0.063,0.047l0.061,0.048l0.062,0.049l0.06,0.05l0.06,0.05l0.06,0.051l0.059,0.051l0.058,0.052l0.057,0.053l0.057,0.054l0.056,0.054l0.056,0.055l0.055,0.056l0.054,0.056l0.054,0.057l0.053,0.058l0.052,0.058l0.052,0.059l0.05,0.059l0.051,0.06l0.049,0.061l0.049,0.061l0.048,0.062l0.047,0.062l0.047,0.063l0.045,0.064l0.045,0.064l0.045,0.065l0.043,0.065l0.043,0.066l0.042,0.066l0.041,0.067l0.041,0.067l0.039,0.068l0.039,0.069l0.038,0.069l0.037,0.069l0.037,0.07l0.035,0.071l0.035,0.071l0.034,0.071l0.033,0.072l0.032,0.072l0.032,0.073l0.03,0.073l0.03,0.074l0.029,0.074l0.027,0.075l0.027,0.075l0.026,0.075l0.026,0.076l0.024,0.076l0.023,0.077l0.023,0.077l0.021,0.078l0.021,0.078l0.019,0.078l0.019,0.078l0.018,0.079l0.017,0.08l0.015,0.079l0.015,0.08l0.014,0.081l0.013,0.08l0.012,0.081l0.011,0.082l0.009,0.081l0.009,0.082l0.008,0.082l0.007,0.083l0.006,0.083l0.004,0.083l0.004,0.083l0.003,0.084l0.001,0.084l0.001,0.084l0,14.143l-23.704,0.019l-50.727,-0.028l0,-14.229l0.001,-0.085l0.001,-0.083l0.003,-0.084l0.004,-0.083l0.005,-0.084l0.005,-0.082l0.007,-0.083l0.008,-0.082l0.009,-0.082l0.01,-0.082l0.011,-0.081l0.011,-0.081l0.013,-0.081l0.014,-0.08l0.015,-0.08l0.016,-0.08l0.017,-0.079l0.017,-0.079l0.019,-0.078l0.02,-0.079l0.02,-0.078l0.022,-0.077l0.022,-0.077l0.023,-0.077l0.025,-0.076l0.025,-0.076l0.026,-0.075l0.027,-0.075l0.028,-0.075l0.029,-0.074l0.029,-0.074l0.031,-0.073l0.031,-0.073l0.032,-0.072l0.033,-0.072l0.034,-0.072l0.035,-0.071l0.035,-0.07l0.037,-0.07l0.037,-0.07l0.038,-0.069l0.039,-0.068l0.04,-0.068l0.04,-0.067l0.041,-0.067l0.042,-0.067l0.043,-0.065l0.044,-0.066l0.044,-0.064l0.045,-0.065l0.046,-0.063l0.046,-0.063l0.048,-0.063l0.048,-0.061l0.048,-0.062l0.05,-0.06l0.05,-0.06l0.051,-0.06l0.051,-0.059l0.053,-0.058l0.052,-0.057l0.054,-0.057l0.054,-0.056l0.055,-0.056l0.056,-0.055l0.056,-0.054l0.057,-0.054l0.058,-0.053l0.058,-0.052l0.059,-0.052l0.059,-0.05l0.06,-0.051l0.061,-0.049l0.061,-0.049l0.062,-0.048l0.062,-0.047l0.063,-0.047l0.064,-0.045l0.064,-0.045l0.065,-0.045l0.065,-0.043l0.066,-0.043l0.066,-0.042l0.067,-0.041l0.067,-0.041l0.068,-0.039l0.069,-0.039l0.069,-0.038l0.069,-0.037l0.07,-0.037l0.071,-0.035l0.071,-0.035l0.071,-0.034l0.072,-0.033l0.072,-0.032l0.073,-0.032l0.073,-0.03l0.074,-0.03l0.074,-0.029l0.075,-0.027l0.075,-0.027l0.075,-0.026l0.076,-0.026l0.077,-0.024l0.076,-0.023l0.077,-0.023l0.078,-0.021l0.078,-0.021l0.078,-0.019l0.078,-0.019l0.079,-0.018l0.08,-0.016l0.079,-0.016l0.08,-0.015l0.081,-0.014l0.08,-0.013l0.081,-0.012l0.082,-0.011l0.081,-0.009l0.082,-0.009l0.082,-0.008l0.083,-0.007l0.083,-0.006l0.083,-0.004l0.083,-0.004l0.084,-0.003l0.084,-0.001l0.084,-0.001l61.401,0.095Zm-61.473,0.906l-0.071,0.001l-0.071,0.002l-0.07,0.003l-0.071,0.004l-0.07,0.005l-0.07,0.006l-0.07,0.007l-0.069,0.007l-0.069,0.008l-0.069,0.01l-0.068,0.01l-0.069,0.011l-0.068,0.011l-0.067,0.013l-0.068,0.013l-0.067,0.014l-0.066,0.015l-0.067,0.016l-0.066,0.017l-0.066,0.017l-0.065,0.018l-0.065,0.019l-0.065,0.02l-0.065,0.02l-0.064,0.022l-0.064,0.022l-0.063,0.023l-0.063,0.023l-0.063,0.024l-0.062,0.025l-0.062,0.026l-0.062,0.027l-0.061,0.027l-0.061,0.028l-0.06,0.029l-0.06,0.029l-0.06,0.03l-0.059,0.031l-0.059,0.031l-0.058,0.033l-0.058,0.033l-0.058,0.033l-0.057,0.034l-0.056,0.035l-0.056,0.036l-0.056,0.036l-0.055,0.037l-0.055,0.037l-0.055,0.039l-0.053,0.038l-0.054,0.04l-0.053,0.04l-0.052,0.04l-0.052,0.042l-0.051,0.042l-0.051,0.042l-0.051,0.043l-0.049,0.044l-0.05,0.044l-0.049,0.045l-0.048,0.046l-0.047,0.046l-0.048,0.046l-0.046,0.047l-0.046,0.048l-0.046,0.048l-0.044,0.049l-0.045,0.049l-0.043,0.05l-0.044,0.05l-0.042,0.051l-0.042,0.052l-0.041,0.052l-0.041,0.052l-0.04,0.053l-0.039,0.053l-0.039,0.054l-0.038,0.054l-0.038,0.055l-0.037,0.056l-0.036,0.055l-0.036,0.056l-0.034,0.057l-0.035,0.057l-0.033,0.058l-0.033,0.058l-0.032,0.058l-0.032,0.059l-0.031,0.059l-0.03,0.06l-0.029,0.06l-0.029,0.06l-0.028,0.061l-0.027,0.061l-0.026,0.062l-0.026,0.062l-0.025,0.062l-0.025,0.063l-0.023,0.063l-0.023,0.063l-0.022,0.064l-0.021,0.064l-0.021,0.065l-0.019,0.064l-0.019,0.065l-0.019,0.066l-0.017,0.066l-0.017,0.066l-0.015,0.066l-0.015,0.067l-0.015,0.067l-0.013,0.067l-0.012,0.068l-0.012,0.068l-0.011,0.068l-0.01,0.069l-0.009,0.069l-0.009,0.069l-0.007,0.069l-0.007,0.07l-0.006,0.07l-0.004,0.07l-0.004,0.07l-0.004,0.071l-0.002,0.071l-0.001,0.071l-0.001,0.075l0,13.227l49.727,0.027l22.704,-0.018l0,-13.141l-0.001,-0.075l-0.001,-0.071l-0.002,-0.071l-0.003,-0.071l-0.004,-0.07l-0.005,-0.07l-0.006,-0.07l-0.007,-0.07l-0.007,-0.069l-0.008,-0.069l-0.01,-0.069l-0.01,-0.069l-0.011,-0.068l-0.011,-0.068l-0.013,-0.067l-0.013,-0.068l-0.014,-0.067l-0.015,-0.067l-0.016,-0.066l-0.017,-0.066l-0.017,-0.066l-0.018,-0.065l-0.019,-0.065l-0.02,-0.065l-0.02,-0.065l-0.022,-0.064l-0.022,-0.064l-0.023,-0.063l-0.023,-0.063l-0.024,-0.063l-0.025,-0.062l-0.026,-0.062l-0.027,-0.062l-0.027,-0.061l-0.028,-0.061l-0.029,-0.06l-0.029,-0.06l-0.03,-0.06l-0.031,-0.059l-0.031,-0.059l-0.033,-0.058l-0.032,-0.058l-0.034,-0.058l-0.034,-0.057l-0.035,-0.056l-0.036,-0.056l-0.036,-0.056l-0.037,-0.056l-0.037,-0.054l-0.038,-0.055l-0.039,-0.054l-0.04,-0.053l-0.04,-0.053l-0.04,-0.052l-0.042,-0.052l-0.042,-0.051l-0.042,-0.051l-0.043,-0.051l-0.044,-0.049l-0.044,-0.05l-0.045,-0.049l-0.046,-0.048l-0.046,-0.048l-0.046,-0.047l-0.047,-0.046l-0.048,-0.046l-0.048,-0.046l-0.049,-0.045l-0.049,-0.044l-0.05,-0.044l-0.05,-0.043l-0.051,-0.042l-0.052,-0.042l-0.052,-0.041l-0.052,-0.041l-0.053,-0.04l-0.053,-0.039l-0.054,-0.039l-0.054,-0.038l-0.055,-0.038l-0.055,-0.037l-0.056,-0.036l-0.056,-0.036l-0.057,-0.034l-0.057,-0.035l-0.058,-0.033l-0.058,-0.033l-0.058,-0.032l-0.059,-0.032l-0.059,-0.031l-0.06,-0.03l-0.06,-0.029l-0.06,-0.029l-0.061,-0.028l-0.061,-0.027l-0.062,-0.027l-0.062,-0.025l-0.062,-0.025l-0.063,-0.025l-0.063,-0.023l-0.063,-0.023l-0.064,-0.022l-0.064,-0.021l-0.064,-0.021l-0.065,-0.02l-0.065,-0.019l-0.066,-0.018l-0.066,-0.017l-0.066,-0.017l-0.066,-0.015l-0.067,-0.015l-0.067,-0.015l-0.067,-0.013l-0.068,-0.012l-0.068,-0.012l-0.068,-0.011l-0.069,-0.01l-0.069,-0.009l-0.069,-0.009l-0.069,-0.007l-0.07,-0.007l-0.07,-0.006l-0.07,-0.004l-0.07,-0.005l-0.071,-0.003l-0.071,-0.002l-0.071,-0.001l-0.075,-0.001l-61.396,-0.095l-0.074,0.001Z",
  fill: "#b1b1b1"
}), React.createElement("path", {
  d: "M252.783,39.729l0.084,0l0.084,0.002l0.084,0.002l0.083,0.004l0.083,0.005l0.083,0.006l0.083,0.007l0.082,0.007l0.082,0.009l0.082,0.01l0.081,0.011l0.081,0.012l0.081,0.013l0.08,0.014l0.08,0.014l0.08,0.016l0.079,0.017l0.079,0.018l0.078,0.018l0.079,0.02l0.077,0.021l0.078,0.021l0.077,0.022l0.077,0.024l0.076,0.024l0.076,0.025l0.075,0.026l0.075,0.027l0.075,0.028l0.074,0.029l0.074,0.029l0.073,0.031l0.073,0.031l0.072,0.033l0.072,0.033l0.072,0.034l0.071,0.034l0.07,0.036l0.07,0.036l0.069,0.037l0.069,0.038l0.069,0.039l0.068,0.04l0.067,0.04l0.067,0.042l0.067,0.042l0.065,0.042l0.066,0.044l0.064,0.044l0.064,0.045l0.064,0.046l0.063,0.047l0.062,0.047l0.062,0.048l0.062,0.049l0.06,0.049l0.06,0.05l0.06,0.051l0.058,0.052l0.059,0.052l0.057,0.053l0.057,0.053l0.056,0.055l0.056,0.055l0.055,0.055l0.054,0.057l0.054,0.056l0.053,0.058l0.052,0.058l0.051,0.059l0.051,0.059l0.05,0.06l0.05,0.061l0.049,0.061l0.048,0.062l0.047,0.063l0.046,0.063l0.046,0.063l0.045,0.064l0.045,0.065l0.043,0.065l0.043,0.066l0.042,0.066l0.041,0.067l0.041,0.068l0.039,0.068l0.039,0.068l0.038,0.069l0.037,0.07l0.037,0.07l0.035,0.07l0.035,0.071l0.034,0.071l0.033,0.072l0.032,0.073l0.032,0.072l0.03,0.074l0.03,0.073l0.028,0.075l0.028,0.074l0.027,0.075l0.026,0.076l0.025,0.076l0.025,0.076l0.023,0.077l0.023,0.077l0.021,0.077l0.021,0.078l0.019,0.078l0.019,0.079l0.018,0.079l0.016,0.079l0.016,0.08l0.015,0.08l0.014,0.08l0.013,0.081l0.012,0.081l0.01,0.081l0.01,0.082l0.009,0.082l0.008,0.082l0.007,0.082l0.006,0.083l0.004,0.083l0.004,0.084l0.003,0.083l0.001,0.084l0.001,0.084l0,14.143l-23.704,0.019l-50.727,-0.027l0,-14.23l0.001,-0.084l0.001,-0.084l0.003,-0.084l0.004,-0.083l0.004,-0.083l0.006,-0.083l0.007,-0.082l0.008,-0.083l0.009,-0.082l0.01,-0.081l0.01,-0.082l0.012,-0.081l0.013,-0.08l0.014,-0.081l0.015,-0.08l0.016,-0.079l0.016,-0.08l0.018,-0.078l0.019,-0.079l0.019,-0.078l0.021,-0.078l0.022,-0.078l0.022,-0.077l0.023,-0.076l0.025,-0.077l0.025,-0.075l0.026,-0.076l0.027,-0.075l0.028,-0.075l0.028,-0.074l0.03,-0.073l0.03,-0.074l0.032,-0.073l0.032,-0.072l0.033,-0.072l0.034,-0.071l0.035,-0.071l0.035,-0.071l0.037,-0.07l0.037,-0.069l0.038,-0.069l0.039,-0.069l0.039,-0.068l0.041,-0.067l0.041,-0.067l0.042,-0.066l0.043,-0.066l0.043,-0.065l0.045,-0.065l0.045,-0.064l0.046,-0.064l0.046,-0.063l0.047,-0.062l0.048,-0.062l0.049,-0.061l0.05,-0.061l0.05,-0.06l0.051,-0.059l0.051,-0.059l0.052,-0.058l0.053,-0.058l0.054,-0.057l0.054,-0.056l0.055,-0.056l0.056,-0.054l0.056,-0.055l0.057,-0.053l0.057,-0.053l0.059,-0.053l0.058,-0.051l0.06,-0.051l0.06,-0.05l0.061,-0.05l0.061,-0.048l0.062,-0.048l0.062,-0.048l0.063,-0.046l0.064,-0.046l0.064,-0.045l0.064,-0.044l0.066,-0.044l0.066,-0.043l0.066,-0.042l0.067,-0.041l0.067,-0.04l0.068,-0.04l0.069,-0.039l0.069,-0.038l0.069,-0.037l0.07,-0.036l0.071,-0.036l0.07,-0.035l0.072,-0.034l0.072,-0.033l0.072,-0.032l0.073,-0.031l0.073,-0.031l0.074,-0.029l0.074,-0.029l0.075,-0.028l0.075,-0.027l0.075,-0.026l0.076,-0.025l0.076,-0.024l0.077,-0.024l0.077,-0.022l0.078,-0.022l0.077,-0.02l0.079,-0.02l0.078,-0.019l0.079,-0.017l0.08,-0.017l0.079,-0.016l0.08,-0.015l0.081,-0.014l0.08,-0.012l0.081,-0.012l0.081,-0.011l0.082,-0.01l0.082,-0.009l0.082,-0.008l0.083,-0.007l0.083,-0.005l0.083,-0.005l0.083,-0.004l0.084,-0.002l0.084,-0.002l0.084,-0.001l61.401,0.096Zm-61.473,0.905l-0.071,0.001l-0.071,0.003l-0.071,0.003l-0.07,0.004l-0.07,0.005l-0.07,0.005l-0.07,0.007l-0.069,0.008l-0.069,0.008l-0.069,0.009l-0.069,0.01l-0.068,0.011l-0.068,0.012l-0.067,0.012l-0.068,0.014l-0.067,0.014l-0.067,0.015l-0.066,0.016l-0.066,0.016l-0.066,0.018l-0.065,0.018l-0.066,0.019l-0.064,0.019l-0.065,0.021l-0.064,0.021l-0.064,0.022l-0.063,0.023l-0.063,0.024l-0.063,0.024l-0.062,0.025l-0.062,0.026l-0.062,0.026l-0.061,0.027l-0.061,0.028l-0.06,0.029l-0.06,0.029l-0.06,0.031l-0.059,0.03l-0.059,0.032l-0.058,0.032l-0.058,0.033l-0.058,0.033l-0.057,0.035l-0.056,0.035l-0.057,0.035l-0.055,0.036l-0.056,0.037l-0.054,0.038l-0.055,0.038l-0.054,0.039l-0.053,0.039l-0.053,0.04l-0.052,0.041l-0.052,0.041l-0.052,0.042l-0.05,0.043l-0.051,0.043l-0.05,0.043l-0.049,0.045l-0.049,0.045l-0.048,0.045l-0.048,0.046l-0.047,0.047l-0.046,0.047l-0.046,0.047l-0.046,0.049l-0.045,0.048l-0.044,0.05l-0.044,0.05l-0.043,0.05l-0.042,0.051l-0.042,0.051l-0.041,0.052l-0.041,0.052l-0.04,0.053l-0.04,0.054l-0.038,0.054l-0.038,0.054l-0.038,0.055l-0.037,0.055l-0.036,0.056l-0.036,0.056l-0.035,0.057l-0.034,0.057l-0.033,0.057l-0.033,0.058l-0.032,0.058l-0.032,0.059l-0.031,0.059l-0.03,0.06l-0.029,0.06l-0.029,0.06l-0.028,0.061l-0.027,0.062l-0.027,0.061l-0.025,0.062l-0.025,0.062l-0.025,0.063l-0.023,0.063l-0.023,0.064l-0.022,0.063l-0.021,0.064l-0.021,0.065l-0.02,0.065l-0.019,0.065l-0.018,0.065l-0.017,0.066l-0.017,0.066l-0.016,0.067l-0.014,0.066l-0.015,0.067l-0.013,0.068l-0.013,0.068l-0.011,0.067l-0.011,0.069l-0.01,0.068l-0.009,0.069l-0.009,0.069l-0.007,0.069l-0.007,0.07l-0.006,0.07l-0.005,0.07l-0.004,0.071l-0.003,0.07l-0.002,0.071l-0.001,0.072l-0.001,0.074l0,13.227l49.727,0.027l22.704,-0.018l0,-13.141l-0.001,-0.074l-0.001,-0.071l-0.002,-0.072l-0.003,-0.07l-0.004,-0.071l-0.005,-0.07l-0.006,-0.07l-0.007,-0.069l-0.007,-0.07l-0.009,-0.069l-0.009,-0.069l-0.01,-0.068l-0.011,-0.068l-0.011,-0.068l-0.013,-0.068l-0.013,-0.067l-0.014,-0.067l-0.015,-0.067l-0.016,-0.066l-0.017,-0.067l-0.017,-0.066l-0.018,-0.065l-0.019,-0.065l-0.02,-0.065l-0.021,-0.064l-0.021,-0.064l-0.022,-0.064l-0.023,-0.064l-0.023,-0.063l-0.025,-0.062l-0.025,-0.063l-0.025,-0.062l-0.027,-0.061l-0.027,-0.062l-0.028,-0.06l-0.029,-0.061l-0.029,-0.06l-0.03,-0.059l-0.031,-0.06l-0.032,-0.058l-0.032,-0.059l-0.033,-0.058l-0.033,-0.057l-0.034,-0.057l-0.035,-0.057l-0.036,-0.056l-0.036,-0.056l-0.037,-0.055l-0.037,-0.055l-0.039,-0.054l-0.038,-0.054l-0.04,-0.053l-0.04,-0.053l-0.041,-0.053l-0.041,-0.052l-0.042,-0.051l-0.042,-0.051l-0.043,-0.05l-0.044,-0.05l-0.044,-0.049l-0.045,-0.049l-0.046,-0.048l-0.046,-0.048l-0.046,-0.047l-0.047,-0.047l-0.048,-0.046l-0.048,-0.045l-0.049,-0.045l-0.049,-0.044l-0.05,-0.044l-0.051,-0.043l-0.05,-0.043l-0.052,-0.042l-0.052,-0.041l-0.052,-0.041l-0.053,-0.04l-0.053,-0.039l-0.054,-0.039l-0.055,-0.038l-0.054,-0.038l-0.056,-0.036l-0.055,-0.037l-0.057,-0.035l-0.056,-0.035l-0.057,-0.034l-0.058,-0.034l-0.058,-0.033l-0.058,-0.032l-0.059,-0.031l-0.059,-0.031l-0.06,-0.03l-0.06,-0.03l-0.06,-0.028l-0.061,-0.028l-0.061,-0.028l-0.062,-0.026l-0.062,-0.026l-0.062,-0.025l-0.063,-0.024l-0.063,-0.024l-0.063,-0.023l-0.064,-0.022l-0.064,-0.021l-0.065,-0.02l-0.064,-0.02l-0.066,-0.019l-0.065,-0.018l-0.066,-0.018l-0.066,-0.016l-0.066,-0.016l-0.067,-0.015l-0.067,-0.014l-0.068,-0.014l-0.067,-0.012l-0.068,-0.012l-0.068,-0.011l-0.069,-0.01l-0.069,-0.009l-0.069,-0.008l-0.069,-0.008l-0.07,-0.006l-0.07,-0.006l-0.07,-0.005l-0.07,-0.004l-0.071,-0.003l-0.071,-0.002l-0.071,-0.002l-0.076,0l-61.395,-0.096l-0.074,0.001Z",
  fill: "#b1b1b1"
}), React.createElement("path", {
  d: "M380.009,259.376l-360,0l0,-200l360,0l0,200Zm-359,-199l0,198l358,0l0,-198l-358,0Z",
  fill: "#757575"
}), React.createElement("path", {
  d: "M87.907,39.721l0.085,0l0.084,0.002l0.083,0.002l0.083,0.004l0.084,0.005l0.082,0.006l0.083,0.006l0.082,0.008l0.082,0.009l0.082,0.01l0.081,0.011l0.081,0.012l0.081,0.012l0.08,0.014l0.08,0.015l0.08,0.016l0.079,0.017l0.079,0.017l0.079,0.019l0.078,0.02l0.078,0.02l0.077,0.022l0.077,0.022l0.077,0.024l0.076,0.024l0.076,0.025l0.075,0.026l0.075,0.027l0.075,0.028l0.074,0.029l0.074,0.029l0.073,0.031l0.073,0.031l0.072,0.032l0.072,0.033l0.072,0.034l0.071,0.035l0.07,0.036l0.07,0.036l0.07,0.037l0.069,0.038l0.068,0.039l0.068,0.04l0.067,0.04l0.067,0.041l0.067,0.042l0.065,0.043l0.066,0.044l0.064,0.044l0.065,0.045l0.063,0.046l0.063,0.046l0.063,0.048l0.061,0.048l0.062,0.048l0.06,0.05l0.06,0.05l0.06,0.051l0.059,0.051l0.058,0.053l0.057,0.053l0.057,0.053l0.056,0.055l0.056,0.054l0.055,0.056l0.054,0.056l0.054,0.057l0.053,0.058l0.052,0.058l0.052,0.059l0.05,0.059l0.051,0.06l0.049,0.061l0.049,0.061l0.048,0.062l0.047,0.062l0.047,0.063l0.045,0.064l0.045,0.064l0.045,0.065l0.043,0.065l0.043,0.066l0.042,0.066l0.041,0.067l0.041,0.068l0.039,0.067l0.039,0.069l0.038,0.069l0.037,0.069l0.037,0.07l0.035,0.071l0.035,0.071l0.034,0.071l0.033,0.072l0.032,0.072l0.032,0.073l0.03,0.074l0.03,0.073l0.029,0.074l0.027,0.075l0.027,0.075l0.026,0.076l0.026,0.075l0.024,0.077l0.023,0.076l0.023,0.077l0.021,0.078l0.021,0.078l0.019,0.078l0.019,0.079l0.018,0.079l0.017,0.079l0.015,0.079l0.015,0.08l0.014,0.081l0.013,0.08l0.012,0.081l0.011,0.082l0.009,0.081l0.009,0.082l0.008,0.083l0.007,0.082l0.006,0.083l0.004,0.083l0.004,0.083l0.003,0.084l0.001,0.084l0.001,0.084l0,14.143l-23.704,0.019l-50.727,-0.027l0,-14.23l0.001,-0.084l0.001,-0.084l0.003,-0.084l0.004,-0.083l0.005,-0.083l0.005,-0.083l0.007,-0.083l0.008,-0.082l0.009,-0.082l0.01,-0.081l0.011,-0.082l0.011,-0.081l0.013,-0.08l0.014,-0.081l0.015,-0.08l0.016,-0.079l0.017,-0.08l0.017,-0.079l0.019,-0.078l0.02,-0.078l0.02,-0.078l0.022,-0.078l0.022,-0.077l0.023,-0.077l0.025,-0.076l0.025,-0.076l0.026,-0.075l0.027,-0.075l0.028,-0.075l0.029,-0.074l0.029,-0.074l0.031,-0.073l0.031,-0.073l0.032,-0.072l0.033,-0.072l0.034,-0.071l0.035,-0.071l0.035,-0.071l0.037,-0.07l0.037,-0.069l0.038,-0.069l0.039,-0.069l0.04,-0.068l0.04,-0.067l0.041,-0.067l0.042,-0.066l0.043,-0.066l0.044,-0.065l0.044,-0.065l0.045,-0.064l0.046,-0.064l0.046,-0.063l0.048,-0.062l0.048,-0.062l0.048,-0.061l0.05,-0.061l0.05,-0.06l0.051,-0.059l0.051,-0.059l0.053,-0.058l0.052,-0.058l0.054,-0.057l0.054,-0.056l0.055,-0.056l0.056,-0.055l0.056,-0.054l0.057,-0.054l0.058,-0.053l0.058,-0.052l0.059,-0.051l0.059,-0.051l0.06,-0.05l0.061,-0.05l0.061,-0.048l0.062,-0.049l0.062,-0.047l0.063,-0.046l0.064,-0.046l0.064,-0.045l0.065,-0.044l0.065,-0.044l0.066,-0.043l0.066,-0.042l0.067,-0.041l0.067,-0.04l0.068,-0.04l0.069,-0.039l0.069,-0.038l0.069,-0.037l0.07,-0.037l0.071,-0.035l0.071,-0.035l0.071,-0.034l0.072,-0.033l0.072,-0.032l0.073,-0.031l0.073,-0.031l0.074,-0.03l0.074,-0.028l0.075,-0.028l0.075,-0.027l0.075,-0.026l0.076,-0.025l0.077,-0.025l0.076,-0.023l0.077,-0.022l0.078,-0.022l0.078,-0.02l0.078,-0.02l0.078,-0.019l0.079,-0.017l0.08,-0.017l0.079,-0.016l0.08,-0.015l0.081,-0.014l0.08,-0.013l0.081,-0.011l0.082,-0.011l0.081,-0.01l0.082,-0.009l0.082,-0.008l0.083,-0.007l0.083,-0.005l0.083,-0.005l0.083,-0.004l0.084,-0.003l0.084,-0.001l0.084,-0.001l61.401,0.096Zm-61.473,0.905l-0.071,0.001l-0.071,0.002l-0.07,0.004l-0.071,0.004l-0.07,0.004l-0.07,0.006l-0.07,0.007l-0.069,0.007l-0.069,0.009l-0.069,0.009l-0.068,0.01l-0.069,0.011l-0.068,0.012l-0.067,0.012l-0.068,0.013l-0.067,0.015l-0.066,0.015l-0.067,0.015l-0.066,0.017l-0.066,0.017l-0.065,0.019l-0.065,0.018l-0.065,0.02l-0.065,0.021l-0.064,0.021l-0.064,0.022l-0.063,0.023l-0.063,0.023l-0.063,0.025l-0.062,0.025l-0.062,0.026l-0.062,0.026l-0.061,0.027l-0.061,0.028l-0.06,0.029l-0.06,0.029l-0.06,0.03l-0.059,0.031l-0.059,0.032l-0.058,0.032l-0.058,0.033l-0.058,0.033l-0.057,0.035l-0.056,0.034l-0.056,0.036l-0.056,0.036l-0.055,0.037l-0.055,0.038l-0.055,0.038l-0.053,0.039l-0.054,0.039l-0.053,0.04l-0.052,0.041l-0.052,0.041l-0.051,0.042l-0.051,0.042l-0.051,0.044l-0.049,0.043l-0.05,0.044l-0.049,0.045l-0.048,0.046l-0.047,0.046l-0.048,0.046l-0.046,0.048l-0.046,0.047l-0.046,0.048l-0.044,0.049l-0.045,0.049l-0.043,0.05l-0.044,0.051l-0.042,0.051l-0.042,0.051l-0.041,0.052l-0.041,0.052l-0.04,0.053l-0.039,0.054l-0.039,0.053l-0.038,0.055l-0.038,0.055l-0.037,0.055l-0.036,0.056l-0.036,0.056l-0.034,0.056l-0.035,0.057l-0.033,0.058l-0.033,0.058l-0.032,0.058l-0.032,0.059l-0.031,0.059l-0.03,0.06l-0.029,0.06l-0.029,0.06l-0.028,0.061l-0.027,0.061l-0.026,0.062l-0.026,0.062l-0.025,0.062l-0.025,0.063l-0.023,0.063l-0.023,0.063l-0.022,0.064l-0.021,0.064l-0.021,0.065l-0.019,0.065l-0.019,0.065l-0.019,0.065l-0.017,0.066l-0.017,0.066l-0.015,0.066l-0.015,0.067l-0.015,0.067l-0.013,0.068l-0.012,0.067l-0.012,0.068l-0.011,0.068l-0.01,0.069l-0.009,0.069l-0.009,0.069l-0.007,0.069l-0.007,0.07l-0.006,0.07l-0.004,0.07l-0.004,0.07l-0.004,0.071l-0.002,0.071l-0.001,0.071l-0.001,0.075l0,13.227l49.727,0.027l22.704,-0.018l0,-13.141l0,-0.074l-0.002,-0.072l-0.002,-0.071l-0.003,-0.07l-0.004,-0.071l-0.005,-0.07l-0.006,-0.07l-0.007,-0.069l-0.007,-0.07l-0.008,-0.069l-0.01,-0.069l-0.01,-0.068l-0.011,-0.069l-0.011,-0.067l-0.013,-0.068l-0.013,-0.068l-0.014,-0.067l-0.015,-0.066l-0.016,-0.067l-0.017,-0.066l-0.017,-0.066l-0.018,-0.065l-0.019,-0.065l-0.02,-0.065l-0.02,-0.065l-0.022,-0.064l-0.022,-0.063l-0.023,-0.064l-0.023,-0.063l-0.024,-0.063l-0.025,-0.062l-0.026,-0.062l-0.027,-0.061l-0.027,-0.062l-0.028,-0.06l-0.029,-0.061l-0.029,-0.06l-0.03,-0.06l-0.031,-0.059l-0.031,-0.059l-0.033,-0.058l-0.032,-0.058l-0.034,-0.057l-0.034,-0.057l-0.035,-0.057l-0.036,-0.056l-0.036,-0.056l-0.037,-0.055l-0.037,-0.055l-0.038,-0.054l-0.039,-0.054l-0.04,-0.054l-0.04,-0.053l-0.04,-0.052l-0.042,-0.052l-0.042,-0.051l-0.042,-0.051l-0.043,-0.05l-0.044,-0.05l-0.044,-0.05l-0.045,-0.048l-0.046,-0.049l-0.046,-0.047l-0.046,-0.047l-0.047,-0.047l-0.048,-0.046l-0.048,-0.045l-0.049,-0.045l-0.049,-0.045l-0.05,-0.043l-0.05,-0.043l-0.051,-0.043l-0.052,-0.042l-0.052,-0.041l-0.052,-0.041l-0.053,-0.04l-0.053,-0.039l-0.054,-0.039l-0.054,-0.038l-0.055,-0.038l-0.055,-0.037l-0.056,-0.036l-0.056,-0.035l-0.057,-0.035l-0.057,-0.034l-0.058,-0.034l-0.058,-0.033l-0.058,-0.032l-0.059,-0.032l-0.059,-0.03l-0.06,-0.031l-0.06,-0.029l-0.06,-0.029l-0.061,-0.028l-0.061,-0.027l-0.062,-0.026l-0.062,-0.026l-0.062,-0.025l-0.063,-0.024l-0.063,-0.024l-0.063,-0.023l-0.064,-0.022l-0.064,-0.021l-0.064,-0.021l-0.065,-0.019l-0.065,-0.019l-0.066,-0.018l-0.066,-0.018l-0.066,-0.016l-0.066,-0.016l-0.067,-0.015l-0.067,-0.014l-0.067,-0.014l-0.068,-0.012l-0.068,-0.012l-0.068,-0.011l-0.069,-0.01l-0.069,-0.009l-0.069,-0.008l-0.069,-0.008l-0.07,-0.007l-0.07,-0.005l-0.07,-0.005l-0.07,-0.004l-0.071,-0.003l-0.071,-0.003l-0.071,-0.001l-0.075,0l-61.396,-0.096l-0.074,0.001Z",
  fill: "#757575"
}), React.createElement("rect", {
  x: "21.028",
  y: "58.382",
  width: "72.386",
  height: "11.056",
  fill: "#fff"
}), React.createElement("g", {
  fill: "#bcbcbc"
}, React.createElement("rect", {
  x: "55",
  y: "93.191",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "122.266",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "151.341",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "180.416",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "209.491",
  width: "226.139",
  height: "15.846"
})));
icons.tabsBold = React.createElement("svg", {
  viewBox: "0 0 400 300",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M176.547,46.207c0,-3.596 -2.919,-6.515 -6.515,-6.515l-61.401,-0.095c-3.596,0 -6.515,2.919 -6.515,6.515l0,14.229l50.727,0.028l23.704,-0.019l0,-14.143Z",
  fill: "#ebebeb"
}), React.createElement("path", {
  d: "M259.298,46.243c0,-3.595 -2.919,-6.514 -6.515,-6.514l-61.401,-0.096c-3.596,0 -6.515,2.92 -6.515,6.515l0,14.23l50.727,0.027l23.704,-0.019l0,-14.143Z",
  fill: "#ebebeb"
}), React.createElement("path", {
  d: "M94.422,46.235c0,-3.595 -2.919,-6.514 -6.515,-6.514l-61.401,-0.096c-3.596,0 -6.515,2.919 -6.515,6.515l0,14.23l50.727,0.027l23.704,-0.019l0,-14.143Z",
  fill: "#0a6689"
}), React.createElement("rect", {
  x: "19.883",
  y: "58.847",
  width: "360.036",
  height: "2",
  fill: "#0a6689"
}), React.createElement("g", {
  fill: "#bcbcbc"
}, React.createElement("rect", {
  x: "55",
  y: "93.191",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "122.266",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "151.341",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "180.416",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "209.491",
  width: "226.139",
  height: "15.846"
})));
icons.tabsCenter = React.createElement("svg", {
  viewBox: "0 0 400 300",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "19.883",
  y: "59.342",
  width: "360.036",
  height: "1",
  fill: "#bcbcbc"
}), React.createElement("g", {
  fill: "#bcbcbc"
}, React.createElement("rect", {
  x: "55",
  y: "93.191",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "122.266",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "151.341",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "180.416",
  width: "290",
  height: "15.846"
}), React.createElement("rect", {
  x: "55",
  y: "209.491",
  width: "226.139",
  height: "15.846"
})), React.createElement("rect", {
  x: "162.653",
  y: "42.087",
  width: "74.142",
  height: "8.82",
  fill: "#bcbcbc"
}), React.createElement("rect", {
  x: "80.653",
  y: "42.087",
  width: "74.142",
  height: "8.82",
  fill: "#0a6689"
}), React.createElement("rect", {
  x: "80.653",
  y: "57.306",
  width: "74.142",
  height: "3",
  fill: "#0a6689"
}), React.createElement("rect", {
  x: "245.559",
  y: "42.087",
  width: "74.142",
  height: "8.82",
  fill: "#bcbcbc"
}));
icons.tabsVertical = React.createElement("svg", {
  viewBox: "0 0 400 300",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M95.571,83.809c0,-2.764 -2.244,-5.007 -5.008,-5.007l-65.67,0c-2.763,0 -5.007,2.243 -5.007,5.007l0,10.014c0,2.763 2.244,5.007 5.007,5.007l65.67,0c2.764,0 5.008,-2.244 5.008,-5.007l0,-10.014Z",
  fill: "#d3d3d3"
}), React.createElement("path", {
  d: "M95.798,54.938c0,-2.762 -2.242,-5.004 -5.004,-5.004l-65.677,0c-2.761,0 -5.003,2.242 -5.003,5.004l0,10.007c0,2.762 2.242,5.004 5.003,5.004l65.677,0c2.762,0 5.004,-2.242 5.004,-5.004l0,-10.007Z",
  fill: "#fff"
}), React.createElement("path", {
  d: "M90.859,49.934l0.064,0.001l0.064,0.002l0.064,0.003l0.064,0.004l0.064,0.004l0.063,0.006l0.063,0.006l0.063,0.006l0.063,0.008l0.062,0.008l0.063,0.009l0.062,0.01l0.061,0.011l0.062,0.011l0.061,0.013l0.061,0.012l0.061,0.014l0.06,0.014l0.06,0.015l0.06,0.016l0.059,0.017l0.059,0.017l0.059,0.018l0.059,0.019l0.058,0.019l0.058,0.02l0.058,0.021l0.057,0.021l0.057,0.022l0.113,0.046l0.112,0.049l0.11,0.052l0.108,0.054l0.107,0.056l0.106,0.059l0.104,0.062l0.102,0.064l0.101,0.066l0.099,0.068l0.097,0.071l0.096,0.074l0.093,0.075l0.092,0.078l0.09,0.079l0.088,0.082l0.086,0.084l0.084,0.086l0.081,0.088l0.08,0.09l0.078,0.091l0.075,0.094l0.073,0.096l0.071,0.097l0.069,0.099l0.066,0.1l0.064,0.103l0.062,0.104l0.059,0.105l0.056,0.107l0.054,0.109l0.052,0.11l0.048,0.112l0.047,0.113l0.022,0.057l0.021,0.057l0.021,0.058l0.02,0.057l0.019,0.059l0.019,0.058l0.018,0.059l0.017,0.059l0.016,0.06l0.016,0.06l0.015,0.06l0.015,0.06l0.013,0.061l0.013,0.061l0.012,0.061l0.012,0.061l0.01,0.062l0.01,0.062l0.009,0.062l0.009,0.063l0.007,0.062l0.007,0.063l0.006,0.064l0.005,0.063l0.005,0.064l0.003,0.063l0.003,0.064l0.002,0.065l0.002,0.064l0,0.065l0,10.007l0,0.065l-0.002,0.065l-0.002,0.064l-0.003,0.064l-0.003,0.064l-0.005,0.063l-0.005,0.064l-0.006,0.063l-0.007,0.063l-0.007,0.062l-0.009,0.063l-0.009,0.062l-0.01,0.062l-0.01,0.062l-0.012,0.061l-0.012,0.061l-0.013,0.061l-0.013,0.061l-0.015,0.06l-0.015,0.06l-0.016,0.06l-0.016,0.06l-0.017,0.059l-0.018,0.059l-0.019,0.058l-0.019,0.059l-0.02,0.058l-0.021,0.057l-0.021,0.058l-0.022,0.057l-0.047,0.112l-0.048,0.112l-0.052,0.11l-0.054,0.109l-0.056,0.107l-0.059,0.105l-0.062,0.104l-0.064,0.103l-0.066,0.1l-0.069,0.099l-0.071,0.098l-0.073,0.095l-0.075,0.094l-0.078,0.091l-0.08,0.09l-0.081,0.088l-0.084,0.086l-0.086,0.084l-0.088,0.082l-0.09,0.08l-0.092,0.077l-0.093,0.076l-0.096,0.073l-0.097,0.071l-0.099,0.068l-0.101,0.067l-0.102,0.064l-0.104,0.061l-0.106,0.059l-0.107,0.057l-0.108,0.054l-0.11,0.051l-0.112,0.049l-0.113,0.046l-0.057,0.022l-0.057,0.022l-0.058,0.02l-0.058,0.02l-0.058,0.02l-0.059,0.018l-0.059,0.018l-0.059,0.017l-0.059,0.017l-0.06,0.016l-0.06,0.015l-0.06,0.014l-0.061,0.014l-0.061,0.013l-0.061,0.012l-0.062,0.011l-0.061,0.011l-0.062,0.01l-0.063,0.009l-0.062,0.008l-0.063,0.008l-0.063,0.007l-0.063,0.006l-0.063,0.005l-0.064,0.004l-0.064,0.004l-0.064,0.003l-0.064,0.002l-0.064,0.001l-0.065,0l-65.677,0l-0.064,0l-0.065,-0.001l-0.064,-0.002l-0.064,-0.003l-0.064,-0.004l-0.063,-0.004l-0.064,-0.005l-0.063,-0.006l-0.063,-0.007l-0.062,-0.008l-0.063,-0.008l-0.062,-0.009l-0.062,-0.01l-0.062,-0.011l-0.061,-0.011l-0.061,-0.012l-0.061,-0.013l-0.061,-0.014l-0.06,-0.014l-0.06,-0.015l-0.06,-0.016l-0.06,-0.017l-0.059,-0.017l-0.059,-0.018l-0.058,-0.018l-0.059,-0.02l-0.058,-0.02l-0.057,-0.02l-0.058,-0.022l-0.057,-0.022l-0.112,-0.046l-0.112,-0.049l-0.11,-0.051l-0.109,-0.054l-0.107,-0.057l-0.105,-0.059l-0.104,-0.061l-0.103,-0.064l-0.1,-0.067l-0.099,-0.068l-0.098,-0.071l-0.095,-0.073l-0.094,-0.076l-0.091,-0.077l-0.09,-0.08l-0.088,-0.082l-0.086,-0.084l-0.084,-0.086l-0.082,-0.088l-0.08,-0.09l-0.077,-0.091l-0.076,-0.094l-0.073,-0.095l-0.071,-0.098l-0.068,-0.099l-0.067,-0.1l-0.064,-0.103l-0.061,-0.104l-0.059,-0.105l-0.057,-0.107l-0.054,-0.109l-0.051,-0.11l-0.049,-0.112l-0.046,-0.112l-0.022,-0.057l-0.022,-0.058l-0.02,-0.057l-0.02,-0.058l-0.02,-0.059l-0.018,-0.058l-0.018,-0.059l-0.017,-0.059l-0.017,-0.06l-0.016,-0.06l-0.015,-0.06l-0.014,-0.06l-0.014,-0.061l-0.013,-0.061l-0.012,-0.061l-0.011,-0.061l-0.011,-0.062l-0.01,-0.062l-0.009,-0.062l-0.008,-0.063l-0.008,-0.062l-0.007,-0.063l-0.006,-0.063l-0.005,-0.064l-0.004,-0.063l-0.004,-0.064l-0.003,-0.064l-0.002,-0.064l-0.001,-0.065l0,-0.065l0,-10.007l0,-0.065l0.001,-0.064l0.002,-0.065l0.003,-0.064l0.004,-0.063l0.004,-0.064l0.005,-0.063l0.006,-0.064l0.007,-0.063l0.008,-0.062l0.008,-0.063l0.009,-0.062l0.01,-0.062l0.011,-0.062l0.011,-0.061l0.012,-0.061l0.013,-0.061l0.014,-0.061l0.014,-0.06l0.015,-0.06l0.016,-0.06l0.017,-0.06l0.017,-0.059l0.018,-0.059l0.018,-0.058l0.02,-0.059l0.02,-0.057l0.02,-0.058l0.022,-0.057l0.022,-0.057l0.046,-0.113l0.049,-0.112l0.051,-0.11l0.054,-0.109l0.057,-0.107l0.059,-0.105l0.061,-0.104l0.064,-0.103l0.067,-0.1l0.068,-0.099l0.071,-0.097l0.073,-0.096l0.076,-0.094l0.077,-0.091l0.08,-0.09l0.082,-0.088l0.084,-0.086l0.086,-0.084l0.088,-0.082l0.09,-0.079l0.091,-0.078l0.094,-0.075l0.095,-0.074l0.098,-0.071l0.099,-0.068l0.1,-0.066l0.103,-0.064l0.104,-0.062l0.105,-0.059l0.107,-0.056l0.109,-0.054l0.11,-0.052l0.112,-0.049l0.112,-0.046l0.057,-0.022l0.058,-0.021l0.057,-0.021l0.058,-0.02l0.059,-0.019l0.058,-0.019l0.059,-0.018l0.059,-0.017l0.06,-0.017l0.06,-0.016l0.06,-0.015l0.06,-0.014l0.061,-0.014l0.061,-0.012l0.061,-0.013l0.061,-0.011l0.062,-0.011l0.062,-0.01l0.062,-0.009l0.063,-0.008l0.062,-0.008l0.063,-0.006l0.063,-0.006l0.064,-0.006l0.063,-0.004l0.064,-0.004l0.064,-0.003l0.064,-0.002l0.065,-0.001l0.064,0l65.677,0l0.065,0Zm-65.735,2l-0.046,0l-0.039,0.001l-0.039,0.001l-0.039,0.002l-0.038,0.002l-0.038,0.003l-0.039,0.003l-0.037,0.003l-0.038,0.004l-0.038,0.005l-0.037,0.005l-0.038,0.006l-0.037,0.005l-0.037,0.007l-0.037,0.007l-0.036,0.007l-0.037,0.008l-0.036,0.008l-0.036,0.008l-0.036,0.009l-0.035,0.01l-0.036,0.01l-0.035,0.01l-0.035,0.011l-0.035,0.011l-0.035,0.011l-0.035,0.012l-0.034,0.013l-0.034,0.012l-0.029,0.011l-0.073,0.03l-0.067,0.029l-0.065,0.031l-0.066,0.033l-0.064,0.033l-0.063,0.036l-0.062,0.037l-0.062,0.038l-0.061,0.04l-0.059,0.041l-0.059,0.043l-0.057,0.044l-0.056,0.046l-0.056,0.046l-0.054,0.048l-0.053,0.05l-0.052,0.05l-0.05,0.052l-0.05,0.053l-0.048,0.054l-0.047,0.056l-0.045,0.056l-0.044,0.058l-0.043,0.058l-0.041,0.06l-0.04,0.06l-0.038,0.062l-0.037,0.062l-0.036,0.063l-0.034,0.065l-0.032,0.065l-0.031,0.066l-0.029,0.066l-0.03,0.073l-0.011,0.029l-0.013,0.034l-0.012,0.034l-0.012,0.035l-0.012,0.035l-0.011,0.035l-0.01,0.035l-0.011,0.035l-0.01,0.036l-0.009,0.036l-0.009,0.035l-0.009,0.036l-0.008,0.037l-0.007,0.036l-0.008,0.037l-0.006,0.036l-0.007,0.037l-0.006,0.037l-0.005,0.038l-0.005,0.037l-0.005,0.038l-0.004,0.038l-0.003,0.038l-0.004,0.038l-0.002,0.038l-0.002,0.039l-0.002,0.038l-0.001,0.039l-0.001,0.039l0,0.046l0,9.995l0,0.046l0.001,0.039l0.001,0.039l0.002,0.038l0.002,0.039l0.002,0.038l0.004,0.039l0.003,0.037l0.004,0.038l0.005,0.038l0.005,0.037l0.005,0.038l0.006,0.037l0.007,0.037l0.006,0.036l0.008,0.037l0.007,0.036l0.008,0.037l0.009,0.036l0.009,0.036l0.009,0.035l0.01,0.036l0.011,0.035l0.01,0.035l0.011,0.035l0.012,0.035l0.012,0.035l0.012,0.034l0.013,0.034l0.011,0.029l0.03,0.073l0.029,0.067l0.031,0.065l0.032,0.065l0.034,0.065l0.036,0.063l0.037,0.062l0.038,0.062l0.04,0.06l0.041,0.06l0.043,0.059l0.044,0.057l0.045,0.056l0.047,0.056l0.048,0.054l0.05,0.053l0.05,0.052l0.052,0.05l0.053,0.05l0.054,0.048l0.056,0.047l0.056,0.045l0.057,0.044l0.059,0.043l0.06,0.041l0.06,0.04l0.062,0.038l0.062,0.037l0.063,0.036l0.064,0.034l0.066,0.032l0.065,0.031l0.067,0.029l0.073,0.03l0.029,0.011l0.034,0.013l0.034,0.012l0.035,0.012l0.035,0.012l0.035,0.011l0.035,0.01l0.035,0.011l0.036,0.009l0.035,0.01l0.036,0.009l0.036,0.008l0.037,0.009l0.036,0.007l0.036,0.008l0.037,0.006l0.037,0.007l0.037,0.006l0.038,0.005l0.037,0.005l0.038,0.005l0.038,0.004l0.038,0.003l0.038,0.004l0.038,0.002l0.039,0.002l0.038,0.002l0.039,0.001l0.039,0.001l0.046,0l65.664,0l0.045,0l0.039,-0.001l0.039,-0.001l0.039,-0.002l0.039,-0.002l0.038,-0.002l0.038,-0.004l0.038,-0.003l0.038,-0.004l0.037,-0.005l0.038,-0.005l0.037,-0.005l0.037,-0.006l0.037,-0.007l0.037,-0.006l0.036,-0.008l0.037,-0.007l0.036,-0.009l0.036,-0.008l0.036,-0.009l0.036,-0.01l0.035,-0.009l0.036,-0.011l0.035,-0.01l0.035,-0.011l0.035,-0.012l0.034,-0.012l0.035,-0.012l0.034,-0.013l0.028,-0.011l0.073,-0.03l0.067,-0.029l0.066,-0.031l0.065,-0.032l0.064,-0.034l0.064,-0.036l0.062,-0.037l0.061,-0.038l0.061,-0.04l0.06,-0.041l0.058,-0.043l0.058,-0.044l0.056,-0.045l0.055,-0.047l0.054,-0.048l0.054,-0.05l0.051,-0.05l0.051,-0.052l0.049,-0.053l0.048,-0.054l0.047,-0.056l0.046,-0.056l0.044,-0.057l0.042,-0.059l0.042,-0.06l0.04,-0.06l0.038,-0.062l0.037,-0.062l0.035,-0.063l0.034,-0.065l0.033,-0.065l0.03,-0.065l0.029,-0.067l0.03,-0.073l0.011,-0.029l0.013,-0.034l0.013,-0.034l0.011,-0.035l0.012,-0.035l0.011,-0.035l0.011,-0.035l0.01,-0.035l0.01,-0.036l0.009,-0.035l0.009,-0.036l0.009,-0.036l0.008,-0.037l0.008,-0.036l0.007,-0.037l0.007,-0.036l0.006,-0.037l0.006,-0.037l0.006,-0.038l0.005,-0.037l0.004,-0.038l0.004,-0.038l0.004,-0.038l0.003,-0.038l0.003,-0.038l0.002,-0.038l0.002,-0.039l0.001,-0.039l0.001,-0.039l0,-0.046l0,-9.995l0,-0.046l-0.001,-0.039l-0.001,-0.039l-0.002,-0.038l-0.002,-0.039l-0.003,-0.038l-0.003,-0.038l-0.004,-0.038l-0.004,-0.038l-0.004,-0.038l-0.005,-0.037l-0.006,-0.038l-0.006,-0.037l-0.006,-0.037l-0.007,-0.036l-0.007,-0.037l-0.008,-0.036l-0.008,-0.037l-0.009,-0.036l-0.009,-0.035l-0.009,-0.036l-0.01,-0.036l-0.01,-0.035l-0.011,-0.035l-0.011,-0.035l-0.011,-0.035l-0.012,-0.034l-0.013,-0.035l-0.013,-0.034l-0.011,-0.029l-0.03,-0.073l-0.029,-0.066l-0.03,-0.066l-0.033,-0.065l-0.034,-0.065l-0.035,-0.063l-0.037,-0.062l-0.038,-0.062l-0.04,-0.06l-0.042,-0.06l-0.042,-0.058l-0.044,-0.058l-0.046,-0.056l-0.047,-0.056l-0.048,-0.054l-0.049,-0.053l-0.051,-0.052l-0.052,-0.05l-0.053,-0.05l-0.054,-0.048l-0.055,-0.046l-0.056,-0.046l-0.058,-0.044l-0.058,-0.043l-0.06,-0.041l-0.061,-0.04l-0.061,-0.038l-0.062,-0.037l-0.064,-0.036l-0.064,-0.033l-0.065,-0.033l-0.066,-0.031l-0.067,-0.029l-0.073,-0.03l-0.028,-0.011l-0.034,-0.012l-0.035,-0.013l-0.034,-0.012l-0.035,-0.011l-0.035,-0.011l-0.035,-0.011l-0.036,-0.01l-0.035,-0.01l-0.036,-0.01l-0.036,-0.009l-0.036,-0.008l-0.036,-0.008l-0.036,-0.008l-0.037,-0.007l-0.037,-0.007l-0.037,-0.007l-0.037,-0.005l-0.037,-0.006l-0.037,-0.005l-0.038,-0.005l-0.038,-0.004l-0.038,-0.003l-0.038,-0.003l-0.038,-0.003l-0.039,-0.002l-0.039,-0.002l-0.039,-0.001l-0.039,-0.001l-0.045,0l-65.664,0Z",
  fill: "#d3d3d3"
}), React.createElement("path", {
  d: "M95.583,112.542c0,-2.762 -2.243,-5.004 -5.005,-5.004l-65.675,0c-2.762,0 -5.004,2.242 -5.004,5.004l0,10.01c0,2.762 2.242,5.005 5.004,5.005l65.675,0c2.762,0 5.005,-2.243 5.005,-5.005l0,-10.01Z",
  fill: "#d3d3d3"
}), React.createElement("rect", {
  x: "90",
  y: "50",
  width: "290",
  height: "200",
  fill: "#fff"
}), React.createElement("path", {
  d: "M380,250l-290,0l0,-200l290,0l0,200Zm-288,-198l0,196l286,0l0,-196l-286,0Z",
  fill: "#d3d3d3"
}), React.createElement("rect", {
  x: "84.867",
  y: "52.004",
  width: "15.81",
  height: "15.928",
  fill: "#fff"
}), React.createElement("g", {
  fill: "#bcbcbc"
}, React.createElement("rect", {
  x: "121.802",
  y: "85.088",
  width: "223.198",
  height: "15.846"
}), React.createElement("rect", {
  x: "121.802",
  y: "114.163",
  width: "223.198",
  height: "15.846"
}), React.createElement("rect", {
  x: "121.802",
  y: "143.238",
  width: "223.198",
  height: "15.846"
}), React.createElement("rect", {
  x: "121.802",
  y: "172.313",
  width: "223.198",
  height: "15.846"
}), React.createElement("rect", {
  x: "121.802",
  y: "201.388",
  width: "174.047",
  height: "15.846"
})));
icons.spacerblock = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("g", {
  fill: "#179cd4"
}, React.createElement("circle", {
  cx: "14.437",
  cy: "23.593",
  r: "2.77"
}), React.createElement("circle", {
  cx: "24.054",
  cy: "23.593",
  r: "2.77"
}), React.createElement("circle", {
  cx: "33.563",
  cy: "23.593",
  r: "2.77"
}), React.createElement("path", {
  d: "M46.88,14.158l-45.76,0c-0.492,0 -0.896,0.405 -0.896,0.897c0,0.492 0.404,0.897 0.896,0.897l45.76,0c0.492,0 0.896,-0.405 0.896,-0.897c0,-0.492 -0.404,-0.897 -0.896,-0.897Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M46.88,32.048l-18.939,0c-0.492,0 -0.897,0.405 -0.897,0.897c0,0.492 0.405,0.897 0.897,0.897l18.939,0c0.492,0 0.896,-0.405 0.896,-0.897c0,-0.492 -0.404,-0.897 -0.896,-0.897Z",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M0.224,32.945c0,0.492 0.404,0.897 0.896,0.897l18.919,0c0.492,0 0.896,-0.405 0.896,-0.897c0,-0.492 -0.404,-0.897 -0.896,-0.897l-18.919,0c-0.492,0 -0.896,0.405 -0.896,0.897Z",
  fillRule: "nonzero"
})));
icons.fontfamily = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M39.939,7.124l0,-3.751l-11.251,0l0,3.751l3.75,0l0,33.752l-3.75,0l0,3.751l11.251,0l0,-3.751l-3.751,0l0,-33.752l3.751,0Zm-11.251,4.391c0,-0.195 -0.366,-0.429 -0.6,-0.596c-1.033,-0.771 -2.175,-1.273 -3.443,-1.506c-1.268,-0.234 -2.747,-0.35 -4.45,-0.35c-1.234,0 -2.501,0.195 -3.797,0.592c-1.297,0.396 -2.4,0.876 -3.311,1.446c-1.056,0.667 -1.911,1.429 -2.569,2.278c-0.658,0.852 -0.988,1.744 -0.988,2.676c0,0.893 0.238,1.697 0.714,2.417c0.476,0.72 1.221,1.078 2.233,1.078c1.135,0 2.022,-0.292 2.661,-0.883c0.639,-0.585 0.958,-1.234 0.958,-1.944c0,-0.668 -0.097,-1.397 -0.289,-2.189c-0.195,-0.789 -0.288,-1.387 -0.288,-1.792c0.324,-0.345 0.887,-0.674 1.687,-0.989c0.799,-0.315 1.667,-0.47 2.599,-0.47c1.358,0 2.406,0.277 3.147,0.834c0.74,0.559 1.312,1.212 1.717,1.962c0.364,0.669 0.269,2.186 0.269,2.186l0,4.472c0,0.527 -2.545,1.257 -5.333,2.189c-2.789,0.931 -4.484,1.569 -5.397,1.914c-0.728,0.285 -1.429,0.666 -2.261,1.14c-0.831,0.478 -1.463,1.018 -1.971,1.628c-0.649,0.729 -1.116,1.549 -1.44,2.46c-0.325,0.911 -0.475,1.944 -0.475,3.101c0,2.23 0.73,4.034 2.179,5.412c1.448,1.376 3.3,2.068 5.549,2.068c2.128,0 3.947,-0.834 5.456,-1.603c1.514,-0.774 2.928,-1.92 4.244,-3.795l0.184,0c0.264,1.875 0.851,2.946 1.792,3.686l1.223,0.064l0,-27.486Zm-3.259,22.286c-0.75,0.955 -1.673,1.78 -2.766,2.483c-1.095,0.699 -2.363,1.052 -3.801,1.052c-1.359,0 -2.477,-0.396 -3.358,-1.191c-0.883,-0.791 -1.322,-2.029 -1.322,-3.712c0,-1.3 0.292,-2.425 0.883,-3.368c0.585,-0.947 1.388,-1.763 2.398,-2.453c1.118,-0.733 2.322,-1.341 3.619,-1.83c1.296,-0.488 2.622,-0.934 4.347,-1.438l0,10.457Z",
  fill: "#0e9cd1",
  fillRule: "nonzero"
}));
icons.infoSimple = React.createElement("svg", {
  viewBox: "0 0 400 400",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "49.173",
  y: "26.451",
  width: "301.653",
  height: "347.098",
  fill: "#f2f2f2"
}), React.createElement("path", {
  d: "M329.981,254.814c0,-3.137 -2.548,-5.684 -5.683,-5.684l-248.596,0c-3.136,0 -5.683,2.547 -5.683,5.684l0,2.674c0,3.137 2.547,5.683 5.683,5.683l248.596,0c3.135,0 5.683,-2.546 5.683,-5.683l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M329.981,279.093c0,-3.137 -2.548,-5.684 -5.683,-5.684l-248.596,0c-3.136,0 -5.683,2.547 -5.683,5.684l0,2.674c0,3.137 2.547,5.683 5.683,5.683l248.596,0c3.135,0 5.683,-2.546 5.683,-5.683l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M329.981,303.372c0,-3.137 -2.548,-5.684 -5.683,-5.684l-248.596,0c-3.136,0 -5.683,2.547 -5.683,5.684l0,2.674c0,3.137 2.547,5.683 5.683,5.683l248.596,0c3.135,0 5.683,-2.546 5.683,-5.683l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M306.87,327.889c0,-2.579 -2.095,-4.674 -4.673,-4.674l-204.394,0c-2.579,0 -4.673,2.095 -4.673,4.674l0,2.198c0,2.58 2.094,4.673 4.673,4.673l204.394,0c2.578,0 4.673,-2.093 4.673,-4.673l0,-2.198Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M289.818,221.146c0,-4.194 -3.406,-7.6 -7.6,-7.6l-164.435,0c-4.194,0 -7.6,3.406 -7.6,7.6l0,3.801c0,4.194 3.406,7.6 7.6,7.6l164.435,0c4.194,0 7.6,-3.406 7.6,-7.6l0,-3.801Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M200.87,55.888l0.871,0.014l0.87,0.027l0.864,0.041l0.857,0.048l0.863,0.061l0.85,0.068l0.857,0.081l0.85,0.096l0.843,0.102l0.843,0.108l1.673,0.259l0.836,0.143l0.83,0.156l0.823,0.163l0.823,0.17l0.816,0.184l0.816,0.197l0.809,0.204l0.809,0.211l0.802,0.224l0.803,0.231l0.795,0.245l0.789,0.252l0.782,0.258l0.782,0.272l0.782,0.279l0.775,0.285l0.769,0.3l0.761,0.306l0.762,0.319l0.755,0.327l0.748,0.333l0.748,0.34l0.734,0.353l0.741,0.361l0.728,0.367l0.727,0.381l0.721,0.381l0.714,0.394l0.707,0.401l0.707,0.415l0.694,0.415l0.694,0.428l0.693,0.435l0.68,0.442l1.347,0.912l0.666,0.469l0.66,0.476l0.652,0.483l0.646,0.489l0.64,0.497l0.632,0.503l0.632,0.517l0.619,0.516l0.619,0.531l0.612,0.53l0.598,0.544l0.599,0.551l0.591,0.551l0.578,0.564l0.578,0.571l0.571,0.578l0.565,0.578l0.551,0.592l0.55,0.598l0.544,0.599l0.531,0.612l0.53,0.618l0.517,0.619l0.517,0.633l0.503,0.632l0.496,0.639l0.49,0.646l0.483,0.653l0.476,0.66l0.469,0.666l0.456,0.673l0.448,0.673l0.449,0.68l0.435,0.694l0.429,0.693l0.415,0.694l0.414,0.707l0.402,0.707l0.394,0.714l0.381,0.721l0.381,0.728l0.367,0.727l0.36,0.742l0.354,0.734l0.34,0.748l0.333,0.748l0.326,0.755l0.32,0.761l0.306,0.762l0.299,0.768l0.286,0.775l0.278,0.782l0.272,0.782l0.259,0.782l0.251,0.789l0.245,0.796l0.231,0.802l0.225,0.803l0.211,0.809l0.204,0.809l0.197,0.816l0.183,0.816l0.17,0.823l0.164,0.823l0.156,0.829l0.143,0.837l0.258,1.672l0.109,0.843l0.102,0.844l0.095,0.85l0.082,0.856l0.068,0.85l0.061,0.864l0.048,0.857l0.04,0.863l0.028,0.871l0.013,0.87l0.007,0.871l-0.007,0.87l-0.013,0.87l-0.028,0.871l-0.04,0.863l-0.048,0.857l-0.061,0.864l-0.068,0.85l-0.082,0.856l-0.095,0.85l-0.102,0.844l-0.109,0.843l-0.129,0.836l-0.129,0.837l-0.143,0.836l-0.156,0.83l-0.164,0.822l-0.17,0.823l-0.183,0.816l-0.197,0.816l-0.204,0.809l-0.211,0.809l-0.225,0.803l-0.231,0.802l-0.245,0.789l-0.251,0.796l-0.259,0.782l-0.272,0.782l-0.278,0.782l-0.286,0.768l-0.299,0.775l-0.306,0.762l-0.32,0.761l-0.326,0.755l-0.333,0.748l-0.34,0.748l-0.354,0.735l-0.36,0.741l-0.367,0.727l-0.381,0.728l-0.381,0.721l-0.394,0.714l-0.402,0.707l-0.414,0.707l-0.415,0.694l-0.429,0.693l-0.435,0.694l-0.449,0.68l-0.448,0.673l-0.456,0.673l-0.469,0.667l-0.476,0.659l-0.483,0.653l-0.49,0.646l-0.496,0.639l-0.503,0.633l-0.517,0.632l-0.517,0.619l-0.53,0.618l-0.531,0.612l-0.544,0.599l-0.55,0.598l-0.551,0.592l-0.565,0.578l-0.571,0.578l-0.578,0.571l-0.578,0.564l-0.591,0.551l-0.599,0.551l-0.598,0.544l-0.612,0.53l-0.619,0.531l-0.619,0.517l-0.632,0.516l-0.632,0.504l-0.64,0.496l-0.646,0.49l-0.652,0.482l-0.66,0.476l-0.666,0.47l-0.674,0.455l-0.673,0.449l-0.68,0.449l-0.693,0.435l-0.694,0.428l-0.694,0.415l-0.707,0.415l-0.707,0.401l-0.714,0.394l-0.721,0.381l-0.727,0.381l-0.728,0.367l-0.741,0.361l-0.734,0.353l-0.748,0.34l-0.748,0.333l-0.755,0.327l-0.762,0.319l-0.761,0.306l-0.769,0.3l-0.775,0.285l-0.782,0.279l-0.782,0.272l-0.782,0.258l-0.789,0.252l-0.795,0.245l-0.803,0.231l-0.802,0.224l-0.809,0.211l-0.809,0.204l-0.816,0.197l-0.816,0.184l-0.823,0.17l-0.823,0.163l-0.83,0.157l-0.836,0.142l-0.836,0.13l-0.837,0.129l-0.843,0.109l-0.843,0.102l-0.85,0.095l-0.857,0.081l-0.85,0.068l-0.863,0.062l-0.857,0.047l-0.864,0.041l-0.87,0.027l-0.871,0.014l-0.87,0.007l-0.87,-0.007l-0.871,-0.014l-0.87,-0.027l-0.864,-0.041l-0.857,-0.047l-0.863,-0.062l-0.85,-0.068l-0.857,-0.081l-0.85,-0.095l-0.843,-0.102l-0.843,-0.109l-0.837,-0.129l-0.836,-0.13l-0.836,-0.142l-0.83,-0.157l-0.823,-0.163l-0.823,-0.17l-0.816,-0.184l-0.816,-0.197l-0.809,-0.204l-0.809,-0.211l-0.802,-0.224l-0.803,-0.231l-0.795,-0.245l-0.789,-0.252l-0.782,-0.258l-0.782,-0.272l-0.782,-0.279l-0.775,-0.285l-0.769,-0.3l-0.761,-0.306l-0.762,-0.319l-0.755,-0.327l-0.748,-0.333l-0.748,-0.34l-0.734,-0.353l-0.741,-0.361l-0.728,-0.367l-0.727,-0.381l-0.721,-0.381l-0.714,-0.394l-0.707,-0.401l-0.707,-0.415l-0.694,-0.415l-0.694,-0.428l-0.693,-0.435l-0.68,-0.449l-0.673,-0.449l-0.674,-0.455l-0.666,-0.47l-0.66,-0.476l-0.652,-0.482l-0.646,-0.49l-0.64,-0.496l-0.632,-0.504l-0.632,-0.516l-0.619,-0.517l-0.619,-0.531l-0.612,-0.53l-0.598,-0.544l-0.599,-0.551l-0.591,-0.551l-0.578,-0.564l-0.578,-0.571l-0.571,-0.578l-0.565,-0.578l-0.551,-0.592l-0.55,-0.598l-0.544,-0.599l-0.531,-0.612l-0.53,-0.618l-0.517,-0.619l-0.517,-0.632l-0.503,-0.633l-0.496,-0.639l-0.49,-0.646l-0.483,-0.653l-0.476,-0.659l-0.469,-0.667l-0.456,-0.673l-0.448,-0.673l-0.449,-0.68l-0.435,-0.694l-0.429,-0.693l-0.415,-0.694l-0.414,-0.707l-0.402,-0.707l-0.394,-0.714l-0.381,-0.721l-0.381,-0.728l-0.367,-0.727l-0.36,-0.741l-0.354,-0.735l-0.34,-0.748l-0.333,-0.748l-0.326,-0.755l-0.32,-0.761l-0.306,-0.762l-0.299,-0.775l-0.286,-0.768l-0.278,-0.782l-0.272,-0.782l-0.259,-0.782l-0.251,-0.796l-0.245,-0.789l-0.231,-0.802l-0.225,-0.803l-0.211,-0.809l-0.204,-0.809l-0.197,-0.816l-0.183,-0.816l-0.17,-0.823l-0.164,-0.822l-0.156,-0.83l-0.143,-0.836l-0.129,-0.837l-0.129,-0.836l-0.109,-0.843l-0.102,-0.844l-0.095,-0.85l-0.082,-0.856l-0.068,-0.85l-0.061,-0.864l-0.048,-0.857l-0.04,-0.863l-0.028,-0.871l-0.013,-0.87l-0.007,-0.87l0.007,-0.871l0.013,-0.87l0.028,-0.871l0.04,-0.863l0.048,-0.857l0.061,-0.864l0.068,-0.85l0.082,-0.856l0.095,-0.85l0.102,-0.844l0.109,-0.843l0.129,-0.836l0.129,-0.836l0.143,-0.837l0.156,-0.829l0.164,-0.823l0.17,-0.823l0.183,-0.816l0.197,-0.816l0.204,-0.809l0.211,-0.809l0.225,-0.803l0.231,-0.802l0.245,-0.796l0.251,-0.789l0.259,-0.782l0.272,-0.782l0.278,-0.782l0.286,-0.775l0.299,-0.768l0.306,-0.762l0.32,-0.761l0.326,-0.755l0.333,-0.748l0.34,-0.748l0.354,-0.734l0.36,-0.742l0.367,-0.727l0.381,-0.728l0.381,-0.721l0.394,-0.714l0.402,-0.707l0.414,-0.707l0.415,-0.694l0.429,-0.693l0.435,-0.694l0.449,-0.68l0.448,-0.673l0.456,-0.673l0.469,-0.666l0.476,-0.66l0.483,-0.653l0.49,-0.646l0.496,-0.639l0.503,-0.632l0.517,-0.633l0.517,-0.619l0.53,-0.618l0.531,-0.612l0.544,-0.599l0.55,-0.598l0.551,-0.592l0.565,-0.578l0.571,-0.578l0.578,-0.571l0.578,-0.564l0.591,-0.551l0.599,-0.551l0.598,-0.544l0.612,-0.53l0.619,-0.531l0.619,-0.516l0.632,-0.517l0.632,-0.503l0.64,-0.497l0.646,-0.489l0.652,-0.483l0.66,-0.476l0.666,-0.469l0.674,-0.456l0.673,-0.456l0.68,-0.442l0.693,-0.435l0.694,-0.428l0.694,-0.415l0.707,-0.415l0.707,-0.401l0.714,-0.394l0.721,-0.381l0.727,-0.381l0.728,-0.367l0.741,-0.361l0.734,-0.353l0.748,-0.34l0.748,-0.333l0.755,-0.327l0.762,-0.319l0.761,-0.306l0.769,-0.3l0.775,-0.285l0.782,-0.279l0.782,-0.272l0.782,-0.258l0.789,-0.252l0.795,-0.245l0.803,-0.231l0.802,-0.224l0.809,-0.211l0.809,-0.204l0.816,-0.197l0.816,-0.184l0.823,-0.17l0.823,-0.163l0.83,-0.156l0.836,-0.143l0.836,-0.129l0.837,-0.13l0.843,-0.108l0.843,-0.102l0.85,-0.096l0.857,-0.081l0.85,-0.068l0.863,-0.061l0.857,-0.048l0.864,-0.041l0.87,-0.027l0.871,-0.014l0.87,-0.006l0.87,0.006Zm-1.7,3.4l-0.822,0.014l-0.83,0.027l-0.816,0.034l-0.823,0.048l-0.816,0.061l-0.809,0.061l-0.809,0.082l-0.809,0.088l-0.803,0.095l-0.802,0.109l-0.796,0.116l-0.795,0.122l-0.789,0.136l-0.789,0.15l-0.782,0.156l-0.782,0.163l-0.775,0.177l-0.775,0.184l-0.769,0.19l-0.761,0.204l-0.762,0.211l-0.761,0.217l-0.755,0.232l-0.748,0.238l-0.748,0.251l-0.741,0.252l-0.741,0.265l-0.735,0.279l-0.727,0.279l-0.728,0.292l-0.721,0.299l-0.714,0.313l-0.714,0.313l-0.707,0.326l-0.7,0.333l-0.701,0.347l-0.693,0.347l-0.687,0.36l-0.687,0.368l-0.68,0.374l-0.673,0.38l-0.667,0.388l-0.666,0.401l-0.659,0.401l-0.653,0.415l-0.646,0.422l-0.639,0.428l-0.64,0.435l-0.632,0.442l-0.626,0.456l-0.618,0.456l-0.619,0.469l-0.605,0.469l-0.606,0.483l-0.598,0.482l-0.592,0.497l-0.584,0.503l-0.578,0.503l-0.572,0.517l-0.564,0.524l-0.564,0.523l-0.551,0.537l-0.551,0.538l-0.537,0.55l-0.537,0.551l-0.524,0.565l-0.523,0.564l-0.517,0.571l-0.503,0.578l-0.504,0.585l-0.496,0.592l-0.483,0.598l-0.483,0.605l-0.469,0.605l-0.469,0.619l-0.456,0.619l-0.448,0.625l-0.449,0.633l-0.435,0.639l-0.429,0.639l-0.421,0.646l-0.415,0.653l-0.401,0.66l-0.402,0.666l-0.387,0.666l-0.381,0.674l-0.374,0.68l-0.367,0.686l-0.361,0.687l-0.346,0.694l-0.347,0.7l-0.333,0.701l-0.327,0.707l-0.313,0.714l-0.312,0.714l-0.3,0.721l-0.292,0.727l-0.279,0.728l-0.279,0.734l-0.265,0.741l-0.251,0.741l-0.252,0.748l-0.238,0.748l-0.231,0.755l-0.218,0.762l-0.21,0.761l-0.204,0.762l-0.191,0.768l-0.183,0.776l-0.177,0.775l-0.163,0.782l-0.157,0.782l-0.149,0.789l-0.136,0.788l-0.123,0.796l-0.115,0.795l-0.109,0.803l-0.095,0.802l-0.089,0.809l-0.081,0.81l-0.062,0.809l-0.061,0.816l-0.047,0.823l-0.034,0.816l-0.028,0.829l-0.013,0.823l-0.007,0.83l0.007,0.829l0.013,0.823l0.028,0.83l0.034,0.815l0.047,0.823l0.061,0.816l0.062,0.809l0.081,0.81l0.089,0.809l0.095,0.802l0.109,0.803l0.115,0.795l0.123,0.796l0.136,0.789l0.149,0.788l0.157,0.782l0.163,0.782l0.177,0.776l0.183,0.775l0.191,0.768l0.204,0.762l0.21,0.761l0.218,0.762l0.231,0.755l0.238,0.748l0.252,0.748l0.251,0.741l0.265,0.741l0.279,0.734l0.279,0.728l0.292,0.728l0.3,0.72l0.625,1.428l0.327,0.708l0.333,0.7l0.347,0.7l0.346,0.694l0.361,0.687l0.367,0.686l0.374,0.68l0.381,0.674l0.387,0.666l0.402,0.666l0.401,0.66l0.415,0.653l0.421,0.646l0.429,0.639l0.435,0.639l0.449,0.633l0.448,0.625l0.456,0.619l0.469,0.619l0.469,0.605l0.483,0.605l0.483,0.599l0.496,0.584l0.504,0.592l0.503,0.578l0.517,0.571l1.047,1.129l1.074,1.101l1.102,1.075l1.128,1.047l0.572,0.517l0.578,0.503l0.591,0.503l0.585,0.497l0.598,0.482l0.606,0.483l0.605,0.469l0.619,0.47l0.618,0.455l0.626,0.449l0.632,0.449l0.64,0.435l0.639,0.428l0.646,0.422l0.653,0.415l0.659,0.401l0.666,0.401l0.667,0.388l0.673,0.381l0.68,0.374l0.687,0.367l0.687,0.36l0.693,0.347l0.701,0.347l0.7,0.333l0.707,0.326l1.428,0.626l0.721,0.299l0.728,0.292l0.727,0.279l0.735,0.279l0.741,0.265l0.741,0.252l0.748,0.251l0.748,0.238l0.755,0.232l0.761,0.217l0.762,0.211l0.761,0.204l0.769,0.19l0.775,0.184l0.775,0.177l0.782,0.163l0.782,0.156l0.789,0.15l0.789,0.136l0.795,0.122l0.796,0.116l0.802,0.109l0.803,0.095l0.809,0.088l0.809,0.082l0.809,0.061l0.816,0.061l0.823,0.048l0.816,0.034l0.83,0.027l0.822,0.014l0.83,0.007l0.83,-0.007l0.822,-0.014l0.83,-0.027l0.816,-0.034l0.823,-0.048l0.816,-0.061l0.809,-0.061l0.809,-0.082l0.809,-0.088l0.803,-0.095l0.802,-0.109l0.796,-0.116l0.795,-0.122l0.789,-0.136l0.789,-0.15l0.782,-0.156l0.782,-0.163l0.775,-0.177l0.775,-0.184l0.769,-0.19l0.761,-0.204l0.762,-0.211l0.761,-0.217l0.755,-0.232l0.748,-0.238l0.748,-0.251l0.741,-0.252l0.741,-0.265l0.735,-0.279l0.727,-0.279l0.728,-0.292l0.721,-0.299l0.714,-0.313l0.714,-0.313l0.707,-0.326l0.7,-0.333l0.701,-0.347l0.693,-0.347l0.687,-0.36l0.687,-0.367l0.68,-0.374l0.673,-0.381l0.667,-0.388l0.666,-0.401l0.659,-0.401l0.653,-0.415l0.646,-0.422l0.639,-0.428l0.64,-0.435l0.632,-0.449l0.626,-0.449l0.618,-0.455l0.619,-0.47l0.605,-0.469l0.606,-0.483l0.598,-0.482l0.585,-0.497l0.591,-0.503l0.578,-0.503l0.572,-0.517l0.564,-0.524l0.564,-0.523l0.551,-0.537l0.551,-0.538l0.537,-0.55l0.537,-0.551l0.524,-0.565l0.523,-0.564l0.517,-0.571l0.503,-0.578l0.504,-0.592l0.496,-0.584l0.483,-0.599l0.483,-0.605l0.469,-0.605l0.469,-0.619l0.456,-0.619l0.448,-0.625l0.449,-0.633l0.435,-0.639l0.429,-0.639l0.421,-0.646l0.415,-0.653l0.401,-0.66l0.402,-0.666l0.387,-0.666l0.381,-0.674l0.374,-0.68l0.367,-0.686l0.361,-0.687l0.346,-0.694l0.347,-0.7l0.333,-0.7l0.327,-0.708l0.313,-0.714l0.312,-0.714l0.3,-0.72l0.292,-0.728l0.279,-0.728l0.279,-0.734l0.265,-0.741l0.251,-0.741l0.252,-0.748l0.238,-0.748l0.231,-0.755l0.218,-0.762l0.21,-0.761l0.204,-0.762l0.191,-0.768l0.183,-0.775l0.177,-0.776l0.163,-0.782l0.157,-0.782l0.149,-0.788l0.136,-0.789l0.123,-0.796l0.115,-0.795l0.109,-0.803l0.095,-0.802l0.089,-0.809l0.081,-0.81l0.062,-0.809l0.061,-0.816l0.047,-0.823l0.034,-0.815l0.028,-0.83l0.013,-0.823l0.007,-0.829l-0.007,-0.83l-0.013,-0.823l-0.028,-0.829l-0.034,-0.816l-0.047,-0.823l-0.061,-0.816l-0.062,-0.809l-0.081,-0.81l-0.089,-0.809l-0.095,-0.802l-0.109,-0.803l-0.115,-0.795l-0.123,-0.796l-0.136,-0.788l-0.149,-0.789l-0.157,-0.782l-0.163,-0.782l-0.177,-0.775l-0.183,-0.776l-0.191,-0.768l-0.204,-0.762l-0.21,-0.761l-0.218,-0.762l-0.231,-0.755l-0.238,-0.748l-0.252,-0.748l-0.251,-0.741l-0.265,-0.741l-0.279,-0.734l-0.279,-0.728l-0.292,-0.727l-0.3,-0.721l-0.312,-0.714l-0.313,-0.714l-0.327,-0.707l-0.333,-0.701l-0.347,-0.7l-0.346,-0.694l-0.361,-0.687l-0.367,-0.686l-0.374,-0.68l-0.381,-0.674l-0.387,-0.666l-0.402,-0.666l-0.401,-0.66l-0.415,-0.653l-0.421,-0.646l-0.429,-0.639l-0.435,-0.639l-0.449,-0.633l-0.448,-0.625l-0.456,-0.619l-0.469,-0.619l-0.469,-0.605l-0.483,-0.605l-0.483,-0.598l-0.496,-0.592l-0.504,-0.585l-0.503,-0.578l-0.517,-0.571l-0.523,-0.564l-0.524,-0.565l-0.537,-0.551l-0.537,-0.55l-0.551,-0.538l-0.551,-0.537l-0.564,-0.523l-0.564,-0.524l-0.572,-0.517l-0.578,-0.503l-0.584,-0.503l-0.592,-0.497l-0.598,-0.482l-0.606,-0.483l-0.605,-0.469l-0.619,-0.469l-0.618,-0.456l-0.626,-0.456l-0.632,-0.442l-0.64,-0.435l-0.639,-0.428l-0.646,-0.422l-0.653,-0.415l-0.659,-0.401l-0.666,-0.401l-0.667,-0.388l-0.673,-0.38l-0.68,-0.374l-0.687,-0.368l-0.687,-0.36l-0.693,-0.347l-0.701,-0.347l-0.7,-0.333l-0.707,-0.326l-0.714,-0.313l-0.714,-0.313l-0.721,-0.299l-0.728,-0.292l-0.727,-0.279l-0.735,-0.279l-0.741,-0.265l-0.741,-0.252l-0.748,-0.251l-0.748,-0.238l-0.755,-0.232l-0.761,-0.217l-0.762,-0.211l-0.761,-0.204l-0.769,-0.19l-0.775,-0.184l-0.775,-0.177l-0.782,-0.163l-0.782,-0.156l-0.789,-0.15l-0.789,-0.136l-0.795,-0.122l-0.796,-0.116l-0.802,-0.109l-0.803,-0.095l-0.809,-0.088l-0.809,-0.082l-0.809,-0.061l-0.816,-0.061l-0.823,-0.048l-0.816,-0.034l-0.83,-0.027l-0.822,-0.014l-0.83,-0.006l-0.83,0.006Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M200.041,77.715l-10.968,33.042l-32.901,0l27.418,22.028l-10.967,33.041l27.418,-22.027l27.417,22.027l-10.967,-33.041l27.418,-22.028l-32.901,0l-10.967,-33.042Z",
  fill: "#444",
  fillRule: "nonzero"
}));
icons.infoLeft = React.createElement("svg", {
  viewBox: "0 0 400 400",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M390.993,128.492c0,-6.336 -5.144,-11.479 -11.479,-11.479l-359.028,0c-6.335,0 -11.479,5.143 -11.479,11.479l0,143.016c0,6.336 5.144,11.479 11.479,11.479l359.028,0c6.335,0 11.479,-5.143 11.479,-11.479l0,-143.016Z",
  fill: "#fff"
}), React.createElement("path", {
  d: "M379.694,114.514l0.179,0.003l0.179,0.006l0.179,0.008l0.178,0.01l0.177,0.012l0.177,0.015l0.177,0.017l0.175,0.019l0.176,0.021l0.174,0.023l0.174,0.026l0.173,0.027l0.173,0.03l0.172,0.032l0.171,0.034l0.17,0.036l0.17,0.038l0.169,0.04l0.168,0.042l0.167,0.045l0.166,0.046l0.166,0.048l0.165,0.05l0.164,0.052l0.163,0.054l0.162,0.056l0.161,0.058l0.16,0.06l0.16,0.062l0.158,0.064l0.158,0.065l0.156,0.067l0.156,0.07l0.154,0.071l0.153,0.072l0.153,0.075l0.151,0.076l0.15,0.079l0.149,0.079l0.148,0.082l0.147,0.083l0.146,0.086l0.145,0.086l0.143,0.089l0.143,0.09l0.141,0.091l0.14,0.094l0.139,0.095l0.137,0.097l0.137,0.098l0.135,0.1l0.133,0.101l0.133,0.103l0.131,0.104l0.13,0.106l0.129,0.108l0.127,0.109l0.126,0.11l0.125,0.112l0.123,0.114l0.122,0.115l0.121,0.116l0.119,0.118l0.118,0.119l0.116,0.12l0.115,0.122l0.113,0.124l0.112,0.124l0.111,0.126l0.109,0.128l0.107,0.128l0.106,0.13l0.105,0.132l0.103,0.132l0.101,0.134l0.1,0.135l0.098,0.136l0.097,0.138l0.095,0.139l0.093,0.14l0.092,0.141l0.09,0.142l0.088,0.144l0.087,0.144l0.085,0.146l0.083,0.147l0.082,0.148l0.08,0.149l0.078,0.151l0.076,0.151l0.075,0.152l0.073,0.154l0.071,0.154l0.069,0.155l0.067,0.157l0.066,0.157l0.063,0.159l0.062,0.159l0.06,0.161l0.058,0.161l0.056,0.162l0.054,0.163l0.052,0.163l0.05,0.165l0.049,0.166l0.046,0.167l0.044,0.167l0.042,0.168l0.04,0.169l0.039,0.17l0.035,0.17l0.034,0.171l0.032,0.172l0.03,0.172l0.028,0.173l0.025,0.174l0.024,0.175l0.021,0.175l0.019,0.176l0.016,0.176l0.015,0.177l0.012,0.178l0.011,0.178l0.008,0.178l0.005,0.179l0.004,0.18l0.001,0.172l0,143.032l-0.001,0.172l-0.004,0.18l-0.005,0.179l-0.008,0.178l-0.011,0.178l-0.012,0.178l-0.015,0.177l-0.016,0.176l-0.019,0.176l-0.021,0.175l-0.024,0.175l-0.025,0.174l-0.028,0.173l-0.03,0.172l-0.032,0.172l-0.034,0.171l-0.035,0.17l-0.039,0.17l-0.04,0.169l-0.042,0.168l-0.044,0.167l-0.046,0.167l-0.049,0.166l-0.05,0.165l-0.052,0.163l-0.054,0.163l-0.056,0.162l-0.058,0.161l-0.06,0.161l-0.061,0.159l-0.064,0.159l-0.066,0.157l-0.067,0.156l-0.069,0.156l-0.071,0.154l-0.073,0.154l-0.075,0.152l-0.076,0.151l-0.078,0.151l-0.08,0.149l-0.082,0.148l-0.083,0.147l-0.085,0.146l-0.087,0.144l-0.088,0.144l-0.09,0.142l-0.092,0.141l-0.093,0.14l-0.096,0.139l-0.096,0.138l-0.098,0.136l-0.1,0.135l-0.101,0.134l-0.103,0.132l-0.105,0.131l-0.106,0.131l-0.107,0.129l-0.109,0.127l-0.111,0.126l-0.112,0.124l-0.113,0.124l-0.115,0.122l-0.117,0.12l-0.117,0.119l-0.119,0.118l-0.121,0.116l-0.122,0.115l-0.123,0.114l-0.125,0.112l-0.126,0.11l-0.127,0.109l-0.129,0.108l-0.13,0.106l-0.131,0.104l-0.133,0.103l-0.134,0.101l-0.134,0.1l-0.137,0.098l-0.137,0.097l-0.139,0.095l-0.14,0.093l-0.141,0.092l-0.143,0.09l-0.143,0.089l-0.145,0.086l-0.146,0.086l-0.147,0.083l-0.148,0.082l-0.149,0.079l-0.15,0.079l-0.151,0.076l-0.153,0.074l-0.153,0.073l-0.154,0.071l-0.156,0.07l-0.156,0.067l-0.158,0.065l-0.158,0.064l-0.16,0.062l-0.16,0.06l-0.161,0.058l-0.162,0.056l-0.163,0.054l-0.164,0.052l-0.165,0.05l-0.166,0.048l-0.166,0.046l-0.167,0.045l-0.168,0.042l-0.169,0.04l-0.17,0.038l-0.17,0.036l-0.171,0.034l-0.172,0.032l-0.173,0.03l-0.173,0.027l-0.174,0.026l-0.174,0.023l-0.176,0.021l-0.175,0.019l-0.177,0.017l-0.177,0.015l-0.177,0.012l-0.178,0.01l-0.179,0.008l-0.179,0.006l-0.179,0.003l-0.172,0.001l-359.044,0l-0.172,-0.001l-0.179,-0.003l-0.179,-0.006l-0.179,-0.008l-0.178,-0.01l-0.177,-0.012l-0.177,-0.015l-0.177,-0.017l-0.175,-0.019l-0.176,-0.021l-0.174,-0.023l-0.174,-0.026l-0.173,-0.027l-0.173,-0.03l-0.172,-0.032l-0.171,-0.034l-0.17,-0.036l-0.17,-0.038l-0.169,-0.04l-0.168,-0.042l-0.167,-0.045l-0.166,-0.046l-0.166,-0.048l-0.165,-0.05l-0.164,-0.052l-0.163,-0.054l-0.162,-0.056l-0.161,-0.058l-0.16,-0.06l-0.16,-0.062l-0.158,-0.064l-0.158,-0.065l-0.156,-0.067l-0.156,-0.07l-0.154,-0.071l-0.153,-0.073l-0.153,-0.074l-0.151,-0.076l-0.15,-0.079l-0.149,-0.079l-0.149,-0.082l-0.146,-0.083l-0.146,-0.086l-0.145,-0.086l-0.143,-0.089l-0.143,-0.09l-0.141,-0.092l-0.14,-0.093l-0.139,-0.095l-0.137,-0.097l-0.136,-0.098l-0.135,-0.1l-0.134,-0.101l-0.133,-0.103l-0.131,-0.104l-0.13,-0.106l-0.129,-0.108l-0.127,-0.109l-0.126,-0.11l-0.125,-0.112l-0.123,-0.114l-0.122,-0.115l-0.121,-0.116l-0.119,-0.118l-0.118,-0.119l-0.116,-0.12l-0.115,-0.122l-0.113,-0.124l-0.112,-0.124l-0.111,-0.126l-0.109,-0.128l-0.107,-0.128l-0.106,-0.13l-0.105,-0.132l-0.103,-0.132l-0.101,-0.134l-0.1,-0.135l-0.098,-0.136l-0.096,-0.138l-0.096,-0.139l-0.093,-0.14l-0.092,-0.141l-0.09,-0.142l-0.088,-0.144l-0.087,-0.144l-0.085,-0.146l-0.083,-0.147l-0.082,-0.148l-0.08,-0.149l-0.078,-0.151l-0.076,-0.151l-0.075,-0.152l-0.073,-0.154l-0.071,-0.154l-0.069,-0.155l-0.067,-0.157l-0.066,-0.157l-0.064,-0.159l-0.061,-0.159l-0.06,-0.16l-0.058,-0.162l-0.056,-0.162l-0.054,-0.163l-0.052,-0.164l-0.051,-0.164l-0.048,-0.166l-0.046,-0.167l-0.044,-0.167l-0.042,-0.168l-0.04,-0.169l-0.039,-0.169l-0.036,-0.171l-0.033,-0.171l-0.032,-0.172l-0.03,-0.172l-0.028,-0.174l-0.025,-0.173l-0.023,-0.175l-0.022,-0.175l-0.019,-0.176l-0.016,-0.176l-0.015,-0.177l-0.012,-0.178l-0.011,-0.178l-0.008,-0.178l-0.005,-0.179l-0.004,-0.18l-0.001,-0.172l0,-143.032l0.001,-0.172l0.004,-0.18l0.005,-0.179l0.008,-0.178l0.011,-0.178l0.012,-0.178l0.015,-0.177l0.016,-0.176l0.019,-0.176l0.022,-0.175l0.023,-0.175l0.025,-0.174l0.028,-0.173l0.03,-0.172l0.032,-0.172l0.033,-0.171l0.036,-0.171l0.039,-0.169l0.04,-0.169l0.042,-0.168l0.044,-0.167l0.046,-0.167l0.048,-0.166l0.051,-0.164l0.052,-0.164l0.054,-0.163l0.056,-0.162l0.058,-0.162l0.06,-0.16l0.061,-0.159l0.064,-0.159l0.066,-0.157l0.067,-0.157l0.069,-0.155l0.071,-0.154l0.073,-0.154l0.075,-0.152l0.076,-0.151l0.078,-0.151l0.08,-0.149l0.082,-0.148l0.083,-0.147l0.085,-0.146l0.087,-0.144l0.088,-0.144l0.09,-0.142l0.092,-0.141l0.093,-0.14l0.095,-0.139l0.097,-0.138l0.098,-0.136l0.1,-0.135l0.101,-0.134l0.103,-0.132l0.105,-0.132l0.106,-0.13l0.107,-0.128l0.109,-0.128l0.111,-0.126l0.112,-0.124l0.113,-0.124l0.115,-0.122l0.116,-0.12l0.118,-0.119l0.119,-0.118l0.121,-0.116l0.122,-0.115l0.123,-0.114l0.125,-0.112l0.126,-0.11l0.127,-0.109l0.129,-0.108l0.13,-0.106l0.131,-0.104l0.133,-0.103l0.133,-0.101l0.136,-0.1l0.136,-0.098l0.137,-0.097l0.139,-0.095l0.14,-0.093l0.141,-0.092l0.143,-0.09l0.143,-0.089l0.145,-0.086l0.146,-0.086l0.147,-0.083l0.148,-0.082l0.149,-0.079l0.15,-0.079l0.151,-0.076l0.153,-0.075l0.153,-0.072l0.154,-0.071l0.156,-0.07l0.156,-0.067l0.158,-0.065l0.158,-0.064l0.16,-0.062l0.16,-0.06l0.161,-0.058l0.162,-0.056l0.163,-0.054l0.164,-0.052l0.165,-0.05l0.166,-0.048l0.166,-0.046l0.167,-0.045l0.168,-0.042l0.169,-0.04l0.17,-0.038l0.17,-0.036l0.171,-0.034l0.172,-0.032l0.173,-0.03l0.173,-0.027l0.174,-0.026l0.174,-0.023l0.176,-0.021l0.175,-0.019l0.177,-0.017l0.177,-0.015l0.177,-0.012l0.178,-0.01l0.179,-0.008l0.179,-0.006l0.179,-0.003l0.172,-0.001l359.044,0l0.172,0.001Zm-359.208,2.499l-0.148,0.001l-0.148,0.003l-0.147,0.004l-0.147,0.007l-0.147,0.008l-0.145,0.01l-0.146,0.012l-0.145,0.014l-0.144,0.016l-0.144,0.017l-0.143,0.019l-0.143,0.021l-0.142,0.023l-0.142,0.024l-0.141,0.026l-0.14,0.028l-0.14,0.03l-0.139,0.031l-0.138,0.033l-0.138,0.034l-0.137,0.037l-0.137,0.038l-0.136,0.039l-0.135,0.041l-0.134,0.043l-0.134,0.044l-0.133,0.046l-0.132,0.048l-0.131,0.049l-0.131,0.051l-0.13,0.052l-0.129,0.053l-0.128,0.056l-0.128,0.056l-0.127,0.059l-0.126,0.059l-0.125,0.062l-0.124,0.062l-0.123,0.064l-0.122,0.066l-0.122,0.067l-0.121,0.069l-0.119,0.069l-0.119,0.072l-0.118,0.072l-0.117,0.074l-0.116,0.076l-0.115,0.076l-0.114,0.078l-0.113,0.08l-0.112,0.08l-0.111,0.082l-0.11,0.084l-0.109,0.084l-0.108,0.086l-0.107,0.087l-0.105,0.089l-0.105,0.089l-0.104,0.091l-0.102,0.092l-0.102,0.094l-0.1,0.094l-0.099,0.096l-0.098,0.096l-0.097,0.098l-0.096,0.1l-0.094,0.1l-0.093,0.101l-0.092,0.103l-0.091,0.103l-0.09,0.105l-0.088,0.106l-0.087,0.107l-0.086,0.108l-0.085,0.108l-0.083,0.11l-0.082,0.111l-0.081,0.113l-0.079,0.113l-0.078,0.114l-0.077,0.115l-0.075,0.116l-0.074,0.116l-0.073,0.118l-0.071,0.119l-0.07,0.12l-0.068,0.12l-0.067,0.122l-0.066,0.122l-0.064,0.124l-0.063,0.124l-0.061,0.125l-0.06,0.126l-0.058,0.127l-0.057,0.127l-0.055,0.128l-0.054,0.129l-0.052,0.13l-0.051,0.131l-0.049,0.132l-0.047,0.132l-0.046,0.133l-0.045,0.133l-0.042,0.135l-0.041,0.135l-0.04,0.136l-0.038,0.136l-0.036,0.137l-0.035,0.138l-0.033,0.139l-0.031,0.139l-0.029,0.14l-0.028,0.14l-0.026,0.141l-0.025,0.141l-0.022,0.143l-0.021,0.142l-0.019,0.144l-0.018,0.143l-0.015,0.145l-0.014,0.145l-0.012,0.145l-0.01,0.146l-0.009,0.146l-0.006,0.147l-0.005,0.148l-0.003,0.147l-0.001,0.149l0,143.016l0.001,0.149l0.003,0.147l0.005,0.148l0.006,0.147l0.009,0.146l0.01,0.146l0.012,0.145l0.014,0.145l0.015,0.145l0.018,0.143l0.019,0.144l0.021,0.142l0.022,0.143l0.025,0.141l0.026,0.141l0.028,0.14l0.029,0.14l0.031,0.139l0.033,0.139l0.035,0.138l0.036,0.137l0.038,0.136l0.04,0.136l0.041,0.135l0.042,0.135l0.045,0.133l0.046,0.133l0.047,0.132l0.049,0.132l0.051,0.131l0.052,0.13l0.054,0.129l0.055,0.128l0.057,0.127l0.058,0.127l0.06,0.126l0.061,0.125l0.063,0.124l0.064,0.124l0.066,0.122l0.067,0.122l0.068,0.12l0.07,0.12l0.071,0.119l0.073,0.118l0.074,0.116l0.075,0.116l0.077,0.115l0.078,0.114l0.079,0.113l0.081,0.113l0.082,0.111l0.083,0.11l0.085,0.108l0.086,0.108l0.087,0.107l0.088,0.106l0.09,0.105l0.091,0.103l0.092,0.103l0.093,0.101l0.094,0.1l0.096,0.1l0.097,0.098l0.098,0.096l0.099,0.096l0.1,0.094l0.102,0.094l0.102,0.092l0.104,0.091l0.105,0.089l0.105,0.089l0.107,0.087l0.108,0.086l0.109,0.084l0.11,0.084l0.111,0.082l0.112,0.08l0.113,0.08l0.114,0.078l0.115,0.076l0.116,0.076l0.117,0.074l0.118,0.072l0.119,0.072l0.119,0.069l0.121,0.069l0.122,0.067l0.122,0.066l0.123,0.064l0.124,0.062l0.125,0.062l0.126,0.059l0.127,0.059l0.128,0.056l0.128,0.056l0.129,0.053l0.13,0.052l0.131,0.051l0.131,0.049l0.132,0.048l0.133,0.046l0.134,0.044l0.134,0.043l0.135,0.041l0.136,0.039l0.137,0.038l0.137,0.037l0.138,0.034l0.138,0.033l0.139,0.031l0.14,0.03l0.14,0.028l0.141,0.026l0.142,0.024l0.142,0.023l0.143,0.021l0.143,0.019l0.144,0.017l0.144,0.016l0.145,0.014l0.146,0.012l0.145,0.01l0.147,0.008l0.147,0.007l0.147,0.004l0.148,0.003l0.148,0.001l359.028,0l0.148,-0.001l0.148,-0.003l0.147,-0.004l0.147,-0.007l0.147,-0.008l0.145,-0.01l0.146,-0.012l0.145,-0.014l0.144,-0.016l0.144,-0.017l0.143,-0.019l0.143,-0.021l0.142,-0.023l0.142,-0.024l0.141,-0.026l0.14,-0.028l0.14,-0.03l0.139,-0.031l0.138,-0.033l0.138,-0.034l0.137,-0.037l0.137,-0.038l0.136,-0.039l0.135,-0.041l0.134,-0.043l0.134,-0.044l0.133,-0.046l0.132,-0.048l0.131,-0.049l0.131,-0.051l0.13,-0.052l0.129,-0.053l0.128,-0.056l0.128,-0.056l0.127,-0.059l0.126,-0.059l0.125,-0.062l0.124,-0.062l0.123,-0.064l0.122,-0.066l0.122,-0.067l0.121,-0.069l0.119,-0.069l0.119,-0.072l0.118,-0.072l0.117,-0.074l0.116,-0.076l0.115,-0.076l0.114,-0.078l0.113,-0.08l0.112,-0.08l0.111,-0.082l0.11,-0.084l0.109,-0.084l0.108,-0.086l0.107,-0.087l0.105,-0.089l0.105,-0.089l0.104,-0.091l0.102,-0.092l0.102,-0.094l0.1,-0.094l0.099,-0.096l0.098,-0.096l0.097,-0.098l0.096,-0.1l0.094,-0.1l0.093,-0.101l0.092,-0.103l0.091,-0.103l0.09,-0.105l0.088,-0.106l0.087,-0.107l0.086,-0.108l0.085,-0.108l0.083,-0.11l0.082,-0.111l0.081,-0.113l0.079,-0.113l0.078,-0.114l0.077,-0.115l0.075,-0.116l0.074,-0.116l0.073,-0.118l0.071,-0.119l0.07,-0.12l0.068,-0.12l0.067,-0.122l0.066,-0.122l0.064,-0.124l0.063,-0.124l0.061,-0.125l0.06,-0.126l0.058,-0.127l0.057,-0.127l0.055,-0.128l0.054,-0.129l0.052,-0.13l0.051,-0.131l0.049,-0.132l0.047,-0.132l0.046,-0.133l0.045,-0.133l0.042,-0.135l0.041,-0.135l0.04,-0.136l0.038,-0.136l0.036,-0.137l0.035,-0.138l0.033,-0.139l0.031,-0.139l0.029,-0.14l0.028,-0.14l0.026,-0.141l0.025,-0.141l0.022,-0.143l0.021,-0.142l0.019,-0.144l0.018,-0.143l0.015,-0.145l0.014,-0.145l0.012,-0.145l0.01,-0.146l0.009,-0.146l0.006,-0.147l0.005,-0.148l0.003,-0.147l0.001,-0.149l0,-143.016l-0.001,-0.149l-0.003,-0.147l-0.005,-0.148l-0.006,-0.147l-0.009,-0.146l-0.01,-0.146l-0.012,-0.145l-0.014,-0.145l-0.015,-0.145l-0.018,-0.143l-0.019,-0.144l-0.021,-0.142l-0.022,-0.143l-0.025,-0.141l-0.026,-0.141l-0.028,-0.14l-0.029,-0.14l-0.031,-0.139l-0.033,-0.139l-0.035,-0.138l-0.036,-0.137l-0.038,-0.136l-0.04,-0.136l-0.041,-0.135l-0.042,-0.135l-0.045,-0.133l-0.046,-0.133l-0.047,-0.132l-0.049,-0.132l-0.051,-0.131l-0.052,-0.13l-0.054,-0.129l-0.055,-0.128l-0.057,-0.127l-0.058,-0.127l-0.06,-0.126l-0.061,-0.125l-0.063,-0.124l-0.064,-0.124l-0.066,-0.122l-0.067,-0.122l-0.068,-0.12l-0.07,-0.12l-0.071,-0.119l-0.073,-0.118l-0.074,-0.116l-0.075,-0.116l-0.077,-0.115l-0.078,-0.114l-0.079,-0.113l-0.081,-0.113l-0.082,-0.111l-0.083,-0.11l-0.085,-0.108l-0.086,-0.108l-0.087,-0.107l-0.088,-0.106l-0.09,-0.105l-0.091,-0.103l-0.092,-0.103l-0.093,-0.101l-0.094,-0.1l-0.096,-0.1l-0.097,-0.098l-0.098,-0.096l-0.099,-0.096l-0.1,-0.094l-0.102,-0.094l-0.102,-0.092l-0.104,-0.091l-0.105,-0.089l-0.105,-0.089l-0.107,-0.087l-0.108,-0.086l-0.109,-0.084l-0.11,-0.084l-0.111,-0.082l-0.112,-0.08l-0.113,-0.08l-0.114,-0.078l-0.115,-0.076l-0.116,-0.076l-0.117,-0.074l-0.118,-0.072l-0.119,-0.072l-0.119,-0.069l-0.121,-0.069l-0.122,-0.067l-0.122,-0.066l-0.123,-0.064l-0.124,-0.062l-0.125,-0.062l-0.126,-0.059l-0.127,-0.059l-0.128,-0.056l-0.128,-0.056l-0.129,-0.053l-0.13,-0.052l-0.131,-0.051l-0.131,-0.049l-0.132,-0.048l-0.133,-0.046l-0.134,-0.044l-0.134,-0.043l-0.135,-0.041l-0.136,-0.039l-0.137,-0.038l-0.137,-0.037l-0.138,-0.034l-0.138,-0.033l-0.139,-0.031l-0.14,-0.03l-0.14,-0.028l-0.141,-0.026l-0.142,-0.024l-0.142,-0.023l-0.143,-0.021l-0.143,-0.019l-0.144,-0.017l-0.144,-0.016l-0.145,-0.014l-0.146,-0.012l-0.145,-0.01l-0.147,-0.008l-0.147,-0.007l-0.147,-0.004l-0.148,-0.003l-0.148,-0.001l-359.028,0Z",
  fill: "#888"
}), React.createElement("circle", {
  cx: "78.187",
  cy: "200",
  r: "59.757",
  fill: "#444"
}), React.createElement("path", {
  d: "M335.948,154.253c0,-4.187 -3.399,-7.586 -7.585,-7.586l-164.464,0c-4.187,0 -7.585,3.399 -7.585,7.586l0,3.834c0,4.187 3.398,7.585 7.585,7.585l164.464,0c4.186,0 7.585,-3.398 7.585,-7.585l0,-3.834Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M368.797,217.727c0,-3.137 -2.547,-5.683 -5.683,-5.683l-201.255,0c-3.137,0 -5.683,2.546 -5.683,5.683l0,2.674c0,3.137 2.546,5.684 5.683,5.684l201.255,0c3.136,0 5.683,-2.547 5.683,-5.684l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M303.84,244.975c0,-3.137 -2.547,-5.683 -5.683,-5.683l-136.298,0c-3.137,0 -5.683,2.546 -5.683,5.683l0,2.675c0,3.136 2.546,5.683 5.683,5.683l136.298,0c3.136,0 5.683,-2.547 5.683,-5.683l0,-2.675Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M368.797,189.852c0,-3.137 -2.547,-5.683 -5.683,-5.683l-201.255,0c-3.137,0 -5.683,2.546 -5.683,5.683l0,2.674c0,3.137 2.546,5.684 5.683,5.684l201.255,0c3.136,0 5.683,-2.547 5.683,-5.684l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M78.187,163.826l-8.793,26.38l-26.381,0l21.984,17.588l-8.793,26.38l21.983,-17.587l21.984,17.587l-8.793,-26.38l21.984,-17.588l-26.381,0l-8.794,-26.38Z",
  fill: "#eee",
  fillRule: "nonzero"
}));
icons.infoImage = React.createElement("svg", {
  viewBox: "0 0 400 400",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M350.827,47.314c0,-11.515 -9.348,-20.863 -20.863,-20.863l-259.928,0c-11.515,0 -20.863,9.348 -20.863,20.863l0,305.372c0,11.515 9.348,20.863 20.863,20.863l259.928,0c11.515,0 20.863,-9.348 20.863,-20.863l0,-305.372Z",
  fill: "#fff"
}), React.createElement("path", {
  d: "M330.137,20.452l0.173,0.001l0.172,0.003l0.172,0.004l0.172,0.005l0.172,0.006l0.172,0.007l0.171,0.008l0.171,0.009l0.171,0.011l0.171,0.011l0.17,0.012l0.17,0.014l0.17,0.014l0.17,0.016l0.169,0.017l0.169,0.018l0.169,0.018l0.168,0.02l0.168,0.021l0.168,0.022l0.168,0.023l0.167,0.024l0.167,0.025l0.167,0.026l0.166,0.027l0.166,0.028l0.165,0.029l0.166,0.03l0.165,0.031l0.164,0.032l0.165,0.033l0.163,0.035l0.164,0.035l0.163,0.036l0.163,0.037l0.163,0.038l0.162,0.039l0.162,0.04l0.161,0.041l0.161,0.042l0.16,0.043l0.161,0.044l0.159,0.045l0.16,0.046l0.159,0.047l0.158,0.047l0.159,0.049l0.157,0.05l0.158,0.05l0.157,0.052l0.156,0.052l0.156,0.054l0.156,0.054l0.155,0.055l0.155,0.056l0.154,0.057l0.154,0.058l0.153,0.059l0.153,0.06l0.153,0.061l0.152,0.061l0.151,0.063l0.151,0.063l0.151,0.065l0.15,0.065l0.149,0.066l0.15,0.067l0.149,0.068l0.148,0.068l0.147,0.07l0.148,0.07l0.146,0.071l0.146,0.073l0.146,0.073l0.145,0.073l0.145,0.075l0.144,0.076l0.143,0.076l0.143,0.077l0.143,0.078l0.142,0.079l0.141,0.08l0.141,0.08l0.141,0.082l0.139,0.082l0.14,0.083l0.138,0.083l0.138,0.085l0.138,0.085l0.137,0.086l0.137,0.087l0.136,0.088l0.135,0.089l0.135,0.089l0.134,0.09l0.134,0.091l0.132,0.092l0.133,0.092l0.132,0.093l0.131,0.094l0.131,0.095l0.13,0.096l0.129,0.096l0.129,0.097l0.136,0.103l0.247,0.192l0.252,0.201l0.25,0.203l0.247,0.207l0.245,0.209l0.242,0.213l0.239,0.215l0.237,0.218l0.235,0.22l0.231,0.224l0.229,0.226l0.226,0.229l0.224,0.232l0.22,0.234l0.218,0.236l0.215,0.24l0.213,0.242l0.209,0.245l0.207,0.247l0.203,0.25l0.201,0.252l0.192,0.248l0.103,0.135l0.097,0.129l0.096,0.129l0.096,0.13l0.095,0.131l0.094,0.131l0.093,0.132l0.092,0.133l0.092,0.132l0.091,0.134l0.09,0.134l0.089,0.135l0.089,0.136l0.088,0.135l0.087,0.137l0.086,0.137l0.085,0.138l0.085,0.138l0.083,0.138l0.083,0.14l0.082,0.139l0.082,0.141l0.08,0.141l0.08,0.141l0.079,0.142l0.078,0.142l0.077,0.144l0.076,0.143l0.076,0.144l0.075,0.145l0.073,0.145l0.073,0.146l0.072,0.146l0.072,0.147l0.07,0.147l0.07,0.147l0.068,0.149l0.068,0.148l0.067,0.149l0.066,0.15l0.065,0.15l0.065,0.151l0.063,0.151l0.062,0.151l0.062,0.152l0.061,0.153l0.059,0.152l0.06,0.154l0.058,0.154l0.057,0.154l0.056,0.154l0.055,0.156l0.054,0.156l0.054,0.156l0.052,0.156l0.052,0.157l0.05,0.158l0.05,0.158l0.049,0.158l0.047,0.158l0.047,0.159l0.046,0.159l0.045,0.16l0.044,0.161l0.043,0.16l0.042,0.161l0.041,0.162l0.04,0.161l0.039,0.162l0.038,0.163l0.037,0.163l0.036,0.163l0.035,0.163l0.035,0.165l0.033,0.164l0.032,0.164l0.031,0.166l0.03,0.164l0.029,0.166l0.028,0.166l0.027,0.166l0.026,0.167l0.025,0.167l0.024,0.167l0.023,0.168l0.022,0.168l0.021,0.168l0.02,0.168l0.018,0.168l0.018,0.17l0.017,0.17l0.015,0.169l0.015,0.17l0.014,0.17l0.012,0.17l0.011,0.171l0.011,0.171l0.009,0.17l0.008,0.172l0.007,0.172l0.006,0.172l0.005,0.172l0.004,0.171l0.003,0.173l0.001,0.173l0.001,0.163l0,305.392l-0.001,0.163l-0.001,0.173l-0.003,0.173l-0.004,0.172l-0.005,0.171l-0.006,0.172l-0.007,0.172l-0.008,0.172l-0.009,0.17l-0.011,0.171l-0.011,0.171l-0.012,0.17l-0.014,0.17l-0.015,0.17l-0.015,0.169l-0.017,0.17l-0.018,0.17l-0.018,0.167l-0.02,0.169l-0.021,0.168l-0.022,0.168l-0.023,0.168l-0.024,0.167l-0.025,0.167l-0.026,0.167l-0.027,0.166l-0.028,0.166l-0.029,0.166l-0.03,0.164l-0.031,0.166l-0.032,0.164l-0.033,0.164l-0.035,0.165l-0.035,0.163l-0.036,0.163l-0.037,0.163l-0.038,0.163l-0.039,0.162l-0.04,0.161l-0.041,0.162l-0.042,0.161l-0.043,0.16l-0.044,0.161l-0.045,0.16l-0.046,0.159l-0.047,0.159l-0.047,0.158l-0.049,0.158l-0.05,0.158l-0.05,0.158l-0.052,0.157l-0.052,0.156l-0.054,0.156l-0.054,0.156l-0.055,0.155l-0.056,0.155l-0.057,0.154l-0.058,0.154l-0.059,0.154l-0.06,0.152l-0.061,0.153l-0.061,0.152l-0.063,0.151l-0.063,0.151l-0.065,0.151l-0.065,0.15l-0.066,0.15l-0.067,0.149l-0.068,0.148l-0.068,0.149l-0.07,0.147l-0.07,0.148l-0.071,0.146l-0.073,0.146l-0.073,0.146l-0.073,0.145l-0.075,0.145l-0.076,0.144l-0.076,0.143l-0.077,0.144l-0.078,0.142l-0.079,0.142l-0.079,0.141l-0.081,0.142l-0.082,0.14l-0.082,0.139l-0.083,0.14l-0.083,0.138l-0.085,0.138l-0.085,0.138l-0.086,0.137l-0.087,0.137l-0.088,0.136l-0.089,0.135l-0.089,0.135l-0.09,0.134l-0.091,0.134l-0.092,0.132l-0.092,0.133l-0.093,0.132l-0.094,0.131l-0.095,0.131l-0.096,0.13l-0.096,0.129l-0.097,0.129l-0.103,0.136l-0.192,0.247l-0.201,0.252l-0.203,0.25l-0.207,0.247l-0.209,0.245l-0.213,0.242l-0.215,0.24l-0.217,0.236l-0.221,0.235l-0.224,0.231l-0.226,0.229l-0.229,0.226l-0.232,0.224l-0.234,0.22l-0.236,0.218l-0.24,0.215l-0.242,0.213l-0.245,0.209l-0.247,0.207l-0.25,0.203l-0.252,0.201l-0.248,0.192l-0.135,0.103l-0.129,0.097l-0.129,0.096l-0.13,0.096l-0.131,0.095l-0.131,0.094l-0.132,0.093l-0.133,0.093l-0.132,0.091l-0.134,0.091l-0.134,0.09l-0.135,0.089l-0.135,0.089l-0.136,0.088l-0.137,0.087l-0.137,0.086l-0.138,0.085l-0.138,0.085l-0.138,0.083l-0.14,0.083l-0.139,0.082l-0.14,0.082l-0.142,0.081l-0.141,0.079l-0.142,0.079l-0.142,0.078l-0.144,0.077l-0.143,0.076l-0.144,0.076l-0.145,0.075l-0.145,0.074l-0.146,0.072l-0.146,0.073l-0.146,0.071l-0.148,0.07l-0.147,0.07l-0.149,0.068l-0.148,0.068l-0.15,0.067l-0.149,0.066l-0.149,0.065l-0.152,0.065l-0.151,0.063l-0.151,0.063l-0.152,0.061l-0.153,0.061l-0.152,0.06l-0.154,0.059l-0.154,0.058l-0.154,0.057l-0.155,0.056l-0.155,0.055l-0.156,0.054l-0.156,0.054l-0.156,0.052l-0.157,0.052l-0.158,0.05l-0.158,0.05l-0.158,0.049l-0.158,0.047l-0.159,0.047l-0.159,0.046l-0.16,0.045l-0.161,0.044l-0.16,0.043l-0.161,0.042l-0.162,0.041l-0.161,0.04l-0.162,0.039l-0.163,0.038l-0.163,0.037l-0.163,0.036l-0.163,0.035l-0.165,0.035l-0.164,0.033l-0.164,0.032l-0.166,0.031l-0.164,0.03l-0.166,0.029l-0.167,0.028l-0.165,0.027l-0.167,0.026l-0.167,0.025l-0.167,0.024l-0.168,0.023l-0.168,0.022l-0.168,0.021l-0.169,0.02l-0.167,0.018l-0.17,0.018l-0.17,0.017l-0.169,0.015l-0.17,0.015l-0.17,0.014l-0.17,0.012l-0.171,0.011l-0.171,0.011l-0.17,0.009l-0.172,0.008l-0.172,0.007l-0.172,0.006l-0.172,0.005l-0.171,0.004l-0.173,0.003l-0.173,0.001l-0.163,0.001l-259.948,0l-0.163,-0.001l-0.173,-0.001l-0.173,-0.003l-0.171,-0.004l-0.172,-0.005l-0.172,-0.006l-0.172,-0.007l-0.172,-0.008l-0.17,-0.009l-0.171,-0.011l-0.171,-0.011l-0.17,-0.012l-0.17,-0.014l-0.17,-0.015l-0.169,-0.015l-0.17,-0.017l-0.17,-0.018l-0.167,-0.018l-0.169,-0.02l-0.168,-0.021l-0.168,-0.022l-0.168,-0.023l-0.167,-0.024l-0.167,-0.025l-0.167,-0.026l-0.165,-0.027l-0.167,-0.028l-0.166,-0.029l-0.164,-0.03l-0.166,-0.031l-0.164,-0.032l-0.164,-0.033l-0.165,-0.035l-0.163,-0.035l-0.163,-0.036l-0.163,-0.037l-0.163,-0.038l-0.162,-0.039l-0.161,-0.04l-0.162,-0.041l-0.161,-0.042l-0.16,-0.043l-0.161,-0.044l-0.159,-0.045l-0.16,-0.046l-0.159,-0.047l-0.158,-0.047l-0.158,-0.049l-0.158,-0.05l-0.158,-0.05l-0.157,-0.052l-0.156,-0.052l-0.156,-0.054l-0.156,-0.054l-0.155,-0.055l-0.155,-0.056l-0.154,-0.057l-0.154,-0.058l-0.154,-0.06l-0.152,-0.059l-0.153,-0.061l-0.152,-0.061l-0.151,-0.063l-0.151,-0.063l-0.151,-0.065l-0.15,-0.065l-0.149,-0.066l-0.15,-0.067l-0.148,-0.067l-0.149,-0.069l-0.147,-0.07l-0.147,-0.07l-0.147,-0.071l-0.146,-0.073l-0.146,-0.072l-0.145,-0.074l-0.145,-0.075l-0.144,-0.076l-0.143,-0.076l-0.144,-0.077l-0.142,-0.078l-0.142,-0.079l-0.141,-0.079l-0.141,-0.081l-0.141,-0.082l-0.139,-0.082l-0.14,-0.083l-0.138,-0.083l-0.138,-0.085l-0.138,-0.085l-0.137,-0.086l-0.137,-0.087l-0.135,-0.088l-0.136,-0.089l-0.135,-0.089l-0.134,-0.09l-0.134,-0.091l-0.132,-0.091l-0.133,-0.093l-0.132,-0.093l-0.131,-0.094l-0.131,-0.095l-0.13,-0.096l-0.129,-0.096l-0.129,-0.096l-0.135,-0.104l-0.248,-0.192l-0.252,-0.201l-0.25,-0.203l-0.247,-0.207l-0.245,-0.209l-0.242,-0.213l-0.24,-0.215l-0.236,-0.218l-0.234,-0.22l-0.232,-0.224l-0.229,-0.226l-0.226,-0.229l-0.224,-0.231l-0.221,-0.235l-0.217,-0.237l-0.215,-0.239l-0.213,-0.242l-0.209,-0.245l-0.207,-0.247l-0.203,-0.25l-0.201,-0.252l-0.192,-0.247l-0.103,-0.136l-0.097,-0.129l-0.097,-0.129l-0.095,-0.13l-0.095,-0.131l-0.094,-0.131l-0.093,-0.132l-0.092,-0.132l-0.092,-0.133l-0.091,-0.134l-0.09,-0.134l-0.089,-0.135l-0.089,-0.135l-0.088,-0.136l-0.086,-0.137l-0.087,-0.137l-0.085,-0.138l-0.085,-0.138l-0.083,-0.138l-0.083,-0.14l-0.082,-0.139l-0.082,-0.141l-0.08,-0.141l-0.08,-0.141l-0.079,-0.142l-0.078,-0.143l-0.077,-0.143l-0.076,-0.143l-0.076,-0.144l-0.075,-0.145l-0.073,-0.145l-0.073,-0.146l-0.073,-0.146l-0.071,-0.146l-0.07,-0.148l-0.07,-0.147l-0.068,-0.148l-0.068,-0.149l-0.067,-0.15l-0.066,-0.149l-0.065,-0.15l-0.065,-0.151l-0.063,-0.151l-0.063,-0.151l-0.061,-0.152l-0.061,-0.153l-0.06,-0.153l-0.059,-0.153l-0.057,-0.154l-0.058,-0.154l-0.056,-0.155l-0.055,-0.155l-0.054,-0.156l-0.054,-0.156l-0.052,-0.156l-0.052,-0.157l-0.05,-0.158l-0.05,-0.157l-0.049,-0.158l-0.047,-0.159l-0.047,-0.159l-0.046,-0.16l-0.045,-0.159l-0.044,-0.161l-0.043,-0.16l-0.042,-0.161l-0.041,-0.161l-0.04,-0.162l-0.039,-0.162l-0.038,-0.163l-0.037,-0.163l-0.036,-0.163l-0.035,-0.163l-0.035,-0.164l-0.033,-0.165l-0.032,-0.164l-0.031,-0.165l-0.03,-0.166l-0.029,-0.165l-0.028,-0.166l-0.027,-0.166l-0.026,-0.167l-0.025,-0.167l-0.024,-0.167l-0.023,-0.168l-0.022,-0.168l-0.021,-0.168l-0.02,-0.168l-0.018,-0.169l-0.018,-0.169l-0.017,-0.169l-0.015,-0.17l-0.015,-0.17l-0.014,-0.17l-0.012,-0.17l-0.011,-0.171l-0.011,-0.171l-0.009,-0.171l-0.008,-0.171l-0.007,-0.172l-0.006,-0.172l-0.005,-0.171l-0.004,-0.173l-0.003,-0.172l-0.001,-0.173l-0.001,-0.163l0,-305.392l0.001,-0.163l0.001,-0.173l0.003,-0.172l0.004,-0.172l0.005,-0.172l0.006,-0.172l0.007,-0.172l0.008,-0.171l0.009,-0.171l0.011,-0.171l0.011,-0.171l0.012,-0.17l0.014,-0.17l0.015,-0.17l0.015,-0.17l0.017,-0.169l0.018,-0.169l0.018,-0.169l0.02,-0.168l0.021,-0.168l0.022,-0.168l0.023,-0.168l0.024,-0.167l0.025,-0.167l0.026,-0.167l0.027,-0.166l0.028,-0.166l0.029,-0.165l0.03,-0.166l0.031,-0.165l0.032,-0.164l0.033,-0.165l0.035,-0.164l0.035,-0.163l0.036,-0.163l0.037,-0.163l0.038,-0.163l0.039,-0.162l0.04,-0.162l0.041,-0.161l0.042,-0.161l0.043,-0.16l0.044,-0.161l0.045,-0.159l0.046,-0.16l0.047,-0.159l0.047,-0.158l0.049,-0.159l0.05,-0.157l0.05,-0.158l0.052,-0.157l0.052,-0.156l0.054,-0.156l0.054,-0.156l0.055,-0.155l0.056,-0.155l0.057,-0.154l0.058,-0.154l0.059,-0.153l0.06,-0.153l0.061,-0.153l0.061,-0.152l0.063,-0.151l0.063,-0.151l0.065,-0.151l0.065,-0.15l0.066,-0.15l0.067,-0.149l0.068,-0.148l0.068,-0.149l0.07,-0.147l0.07,-0.147l0.072,-0.147l0.072,-0.146l0.073,-0.146l0.073,-0.145l0.075,-0.145l0.076,-0.144l0.076,-0.143l0.077,-0.143l0.078,-0.143l0.079,-0.142l0.08,-0.141l0.08,-0.141l0.082,-0.141l0.082,-0.139l0.083,-0.14l0.083,-0.138l0.085,-0.139l0.085,-0.137l0.086,-0.137l0.087,-0.137l0.088,-0.136l0.089,-0.135l0.089,-0.135l0.09,-0.134l0.091,-0.133l0.092,-0.134l0.092,-0.132l0.093,-0.132l0.094,-0.131l0.095,-0.131l0.095,-0.13l0.097,-0.129l0.097,-0.129l0.103,-0.136l0.192,-0.247l0.201,-0.252l0.203,-0.25l0.207,-0.247l0.209,-0.245l0.213,-0.242l0.215,-0.239l0.218,-0.237l0.22,-0.235l0.224,-0.231l0.226,-0.229l0.229,-0.226l0.231,-0.224l0.235,-0.22l0.237,-0.218l0.239,-0.215l0.242,-0.213l0.245,-0.209l0.247,-0.207l0.25,-0.203l0.252,-0.201l0.248,-0.192l0.135,-0.103l0.129,-0.097l0.129,-0.097l0.13,-0.095l0.131,-0.095l0.131,-0.094l0.132,-0.093l0.132,-0.092l0.134,-0.092l0.133,-0.091l0.134,-0.09l0.135,-0.089l0.135,-0.089l0.136,-0.088l0.137,-0.087l0.137,-0.086l0.137,-0.085l0.139,-0.085l0.138,-0.083l0.14,-0.083l0.139,-0.083l0.141,-0.081l0.141,-0.08l0.141,-0.08l0.142,-0.079l0.143,-0.078l0.143,-0.077l0.143,-0.076l0.144,-0.076l0.145,-0.075l0.145,-0.073l0.146,-0.073l0.146,-0.073l0.147,-0.071l0.147,-0.07l0.147,-0.07l0.149,-0.068l0.148,-0.068l0.149,-0.067l0.15,-0.066l0.15,-0.065l0.151,-0.065l0.151,-0.063l0.151,-0.063l0.152,-0.061l0.153,-0.061l0.153,-0.06l0.153,-0.059l0.154,-0.058l0.154,-0.057l0.155,-0.056l0.155,-0.055l0.156,-0.054l0.156,-0.054l0.156,-0.052l0.157,-0.052l0.158,-0.05l0.157,-0.05l0.159,-0.049l0.158,-0.047l0.159,-0.047l0.16,-0.046l0.159,-0.045l0.161,-0.044l0.16,-0.043l0.161,-0.042l0.162,-0.041l0.161,-0.04l0.162,-0.039l0.163,-0.038l0.163,-0.037l0.163,-0.036l0.163,-0.035l0.164,-0.035l0.165,-0.033l0.164,-0.032l0.165,-0.031l0.166,-0.03l0.165,-0.029l0.166,-0.028l0.167,-0.027l0.166,-0.026l0.167,-0.025l0.167,-0.024l0.168,-0.023l0.168,-0.022l0.168,-0.021l0.168,-0.02l0.169,-0.018l0.169,-0.018l0.169,-0.017l0.17,-0.016l0.17,-0.014l0.17,-0.014l0.17,-0.012l0.171,-0.011l0.171,-0.011l0.171,-0.009l0.171,-0.008l0.172,-0.007l0.172,-0.006l0.172,-0.005l0.172,-0.004l0.172,-0.003l0.173,-0.001l0.163,-0.001l259.948,0l0.163,0.001Zm-260.101,5.999l-0.135,0.001l-0.135,0.001l-0.134,0.002l-0.134,0.003l-0.134,0.004l-0.134,0.005l-0.134,0.005l-0.133,0.006l-0.133,0.008l-0.133,0.008l-0.133,0.008l-0.132,0.01l-0.133,0.011l-0.132,0.011l-0.131,0.012l-0.132,0.013l-0.131,0.014l-0.131,0.014l-0.131,0.016l-0.131,0.016l-0.13,0.017l-0.13,0.018l-0.13,0.018l-0.13,0.02l-0.129,0.02l-0.129,0.021l-0.129,0.022l-0.128,0.022l-0.128,0.024l-0.128,0.024l-0.128,0.025l-0.127,0.025l-0.128,0.027l-0.126,0.027l-0.127,0.028l-0.126,0.029l-0.126,0.029l-0.126,0.031l-0.125,0.031l-0.125,0.032l-0.125,0.032l-0.125,0.033l-0.124,0.034l-0.124,0.035l-0.123,0.036l-0.124,0.036l-0.123,0.037l-0.122,0.038l-0.122,0.038l-0.122,0.04l-0.122,0.039l-0.121,0.041l-0.121,0.042l-0.121,0.042l-0.12,0.042l-0.12,0.044l-0.12,0.044l-0.119,0.045l-0.119,0.046l-0.119,0.046l-0.118,0.047l-0.118,0.048l-0.117,0.049l-0.118,0.049l-0.116,0.05l-0.117,0.05l-0.116,0.051l-0.116,0.052l-0.115,0.053l-0.115,0.053l-0.114,0.054l-0.115,0.055l-0.113,0.055l-0.114,0.056l-0.113,0.057l-0.112,0.057l-0.113,0.058l-0.112,0.059l-0.111,0.059l-0.111,0.06l-0.111,0.06l-0.11,0.062l-0.11,0.061l-0.109,0.063l-0.109,0.063l-0.109,0.064l-0.108,0.064l-0.108,0.065l-0.107,0.066l-0.107,0.066l-0.106,0.067l-0.106,0.068l-0.106,0.068l-0.105,0.069l-0.105,0.069l-0.104,0.07l-0.104,0.071l-0.103,0.071l-0.103,0.072l-0.103,0.072l-0.102,0.073l-0.101,0.074l-0.102,0.074l-0.1,0.075l-0.1,0.076l-0.1,0.076l-0.198,0.153l-0.196,0.156l-0.194,0.159l-0.193,0.16l-0.19,0.163l-0.188,0.165l-0.187,0.168l-0.184,0.169l-0.182,0.172l-0.18,0.174l-0.178,0.176l-0.176,0.178l-0.174,0.18l-0.172,0.182l-0.169,0.184l-0.168,0.187l-0.165,0.188l-0.163,0.19l-0.16,0.192l-0.159,0.195l-0.156,0.196l-0.153,0.198l-0.076,0.1l-0.076,0.1l-0.075,0.1l-0.074,0.101l-0.073,0.102l-0.074,0.102l-0.072,0.103l-0.072,0.103l-0.071,0.103l-0.071,0.104l-0.07,0.104l-0.069,0.105l-0.069,0.105l-0.068,0.106l-0.068,0.106l-0.067,0.106l-0.066,0.107l-0.066,0.107l-0.065,0.108l-0.064,0.108l-0.064,0.109l-0.063,0.109l-0.063,0.109l-0.061,0.11l-0.062,0.11l-0.06,0.111l-0.06,0.111l-0.059,0.111l-0.059,0.112l-0.058,0.112l-0.057,0.113l-0.057,0.113l-0.056,0.114l-0.055,0.113l-0.055,0.115l-0.054,0.114l-0.053,0.115l-0.053,0.115l-0.052,0.116l-0.051,0.116l-0.05,0.117l-0.05,0.116l-0.049,0.118l-0.049,0.117l-0.048,0.118l-0.047,0.118l-0.046,0.119l-0.046,0.119l-0.045,0.119l-0.044,0.12l-0.043,0.12l-0.043,0.12l-0.042,0.121l-0.042,0.121l-0.04,0.121l-0.04,0.122l-0.04,0.121l-0.038,0.123l-0.038,0.122l-0.037,0.123l-0.036,0.124l-0.036,0.123l-0.035,0.124l-0.034,0.124l-0.033,0.125l-0.032,0.125l-0.032,0.125l-0.031,0.125l-0.031,0.126l-0.029,0.126l-0.029,0.126l-0.028,0.127l-0.027,0.126l-0.027,0.128l-0.025,0.127l-0.025,0.128l-0.024,0.128l-0.024,0.128l-0.022,0.128l-0.022,0.129l-0.021,0.129l-0.02,0.129l-0.02,0.13l-0.018,0.13l-0.018,0.13l-0.017,0.13l-0.016,0.131l-0.016,0.131l-0.014,0.131l-0.014,0.131l-0.013,0.132l-0.012,0.131l-0.011,0.132l-0.011,0.133l-0.01,0.132l-0.008,0.133l-0.008,0.133l-0.008,0.133l-0.006,0.133l-0.005,0.134l-0.005,0.134l-0.004,0.134l-0.003,0.134l-0.002,0.134l-0.001,0.135l-0.001,0.135l0,305.372l0.001,0.135l0.001,0.135l0.002,0.134l0.003,0.134l0.004,0.134l0.01,0.268l0.014,0.266l0.016,0.266l0.021,0.265l0.023,0.263l0.027,0.263l0.03,0.262l0.033,0.261l0.036,0.26l0.04,0.259l0.043,0.258l0.046,0.256l0.049,0.256l0.052,0.255l0.055,0.253l0.058,0.252l0.062,0.251l0.064,0.25l0.067,0.249l0.071,0.247l0.073,0.247l0.076,0.245l0.08,0.243l0.082,0.242l0.085,0.241l0.087,0.24l0.091,0.238l0.093,0.237l0.097,0.235l0.099,0.234l0.101,0.233l0.105,0.231l0.107,0.229l0.11,0.228l0.113,0.227l0.115,0.225l0.118,0.223l0.12,0.222l0.123,0.22l0.126,0.218l0.128,0.217l0.131,0.215l0.133,0.213l0.136,0.212l0.138,0.21l0.141,0.208l0.143,0.206l0.146,0.205l0.147,0.203l0.151,0.2l0.076,0.1l0.153,0.198l0.156,0.196l0.159,0.195l0.16,0.192l0.163,0.19l0.165,0.188l0.168,0.187l0.169,0.184l0.172,0.182l0.174,0.18l0.176,0.178l0.178,0.176l0.18,0.174l0.182,0.172l0.184,0.169l0.187,0.168l0.188,0.165l0.19,0.163l0.193,0.16l0.194,0.159l0.196,0.156l0.198,0.153l0.2,0.152l0.202,0.149l0.203,0.147l0.206,0.144l0.207,0.142l0.209,0.139l0.211,0.137l0.212,0.135l0.214,0.132l0.216,0.129l0.218,0.127l0.219,0.124l0.221,0.122l0.222,0.119l0.225,0.117l0.225,0.114l0.227,0.111l0.229,0.109l0.23,0.106l0.232,0.103l0.233,0.1l0.235,0.098l0.236,0.095l0.238,0.092l0.239,0.089l0.24,0.086l0.242,0.084l0.243,0.08l0.244,0.078l0.245,0.075l0.247,0.072l0.248,0.069l0.25,0.065l0.25,0.063l0.252,0.06l0.253,0.057l0.254,0.054l0.255,0.05l0.256,0.048l0.257,0.044l0.258,0.041l0.26,0.038l0.26,0.035l0.262,0.032l0.262,0.028l0.263,0.025l0.265,0.022l0.265,0.018l0.266,0.016l0.267,0.011l0.134,0.005l0.134,0.004l0.134,0.003l0.134,0.002l0.135,0.001l0.135,0.001l259.928,0l0.135,-0.001l0.135,-0.001l0.134,-0.002l0.134,-0.003l0.134,-0.004l0.134,-0.005l0.134,-0.005l0.133,-0.006l0.133,-0.008l0.133,-0.008l0.133,-0.008l0.132,-0.01l0.133,-0.011l0.132,-0.011l0.131,-0.012l0.132,-0.013l0.131,-0.014l0.131,-0.014l0.131,-0.016l0.131,-0.016l0.13,-0.017l0.13,-0.018l0.13,-0.018l0.13,-0.02l0.129,-0.02l0.129,-0.021l0.129,-0.022l0.128,-0.022l0.128,-0.024l0.128,-0.024l0.128,-0.025l0.127,-0.025l0.128,-0.027l0.126,-0.027l0.127,-0.028l0.126,-0.029l0.126,-0.029l0.126,-0.031l0.125,-0.031l0.125,-0.032l0.125,-0.032l0.125,-0.033l0.124,-0.034l0.124,-0.035l0.123,-0.036l0.124,-0.036l0.123,-0.037l0.122,-0.038l0.122,-0.038l0.122,-0.04l0.122,-0.039l0.121,-0.041l0.121,-0.042l0.121,-0.042l0.12,-0.042l0.12,-0.044l0.12,-0.044l0.119,-0.045l0.119,-0.046l0.119,-0.046l0.118,-0.047l0.118,-0.048l0.117,-0.049l0.118,-0.049l0.116,-0.05l0.117,-0.05l0.116,-0.051l0.116,-0.052l0.115,-0.053l0.115,-0.053l0.114,-0.054l0.115,-0.055l0.113,-0.055l0.114,-0.056l0.113,-0.057l0.112,-0.057l0.113,-0.058l0.112,-0.059l0.111,-0.059l0.111,-0.06l0.111,-0.06l0.11,-0.062l0.11,-0.061l0.109,-0.063l0.109,-0.063l0.109,-0.064l0.108,-0.064l0.108,-0.065l0.107,-0.066l0.107,-0.066l0.106,-0.067l0.106,-0.068l0.106,-0.068l0.105,-0.069l0.105,-0.069l0.104,-0.07l0.104,-0.071l0.103,-0.071l0.103,-0.072l0.103,-0.072l0.102,-0.073l0.101,-0.074l0.102,-0.074l0.1,-0.075l0.1,-0.076l0.1,-0.076l0.198,-0.153l0.196,-0.156l0.194,-0.159l0.193,-0.16l0.19,-0.163l0.188,-0.165l0.187,-0.168l0.184,-0.169l0.182,-0.172l0.18,-0.174l0.178,-0.176l0.176,-0.178l0.174,-0.18l0.172,-0.182l0.169,-0.184l0.168,-0.187l0.165,-0.188l0.163,-0.19l0.16,-0.192l0.159,-0.195l0.156,-0.196l0.153,-0.198l0.076,-0.1l0.076,-0.1l0.075,-0.1l0.074,-0.101l0.073,-0.102l0.074,-0.102l0.072,-0.103l0.072,-0.103l0.071,-0.103l0.071,-0.104l0.07,-0.104l0.069,-0.105l0.069,-0.105l0.068,-0.106l0.068,-0.106l0.067,-0.106l0.066,-0.107l0.066,-0.107l0.065,-0.108l0.064,-0.108l0.064,-0.109l0.063,-0.109l0.063,-0.109l0.061,-0.11l0.062,-0.11l0.06,-0.111l0.06,-0.111l0.059,-0.111l0.059,-0.112l0.058,-0.112l0.057,-0.113l0.057,-0.113l0.056,-0.114l0.055,-0.113l0.055,-0.115l0.054,-0.114l0.053,-0.115l0.053,-0.115l0.052,-0.116l0.051,-0.116l0.05,-0.117l0.05,-0.116l0.049,-0.118l0.049,-0.117l0.048,-0.118l0.047,-0.118l0.046,-0.119l0.046,-0.119l0.045,-0.119l0.044,-0.12l0.043,-0.12l0.043,-0.12l0.042,-0.121l0.042,-0.121l0.04,-0.121l0.04,-0.122l0.04,-0.121l0.038,-0.123l0.038,-0.122l0.037,-0.123l0.036,-0.124l0.036,-0.123l0.035,-0.124l0.034,-0.124l0.033,-0.125l0.032,-0.125l0.032,-0.125l0.031,-0.125l0.031,-0.126l0.029,-0.126l0.029,-0.126l0.028,-0.127l0.027,-0.126l0.027,-0.128l0.025,-0.127l0.025,-0.128l0.024,-0.128l0.024,-0.128l0.022,-0.128l0.022,-0.129l0.021,-0.129l0.02,-0.129l0.02,-0.13l0.018,-0.13l0.018,-0.13l0.017,-0.13l0.016,-0.131l0.016,-0.131l0.014,-0.131l0.014,-0.131l0.013,-0.132l0.012,-0.131l0.011,-0.132l0.011,-0.133l0.01,-0.132l0.008,-0.133l0.008,-0.133l0.008,-0.133l0.006,-0.133l0.005,-0.134l0.005,-0.134l0.004,-0.134l0.003,-0.134l0.002,-0.134l0.001,-0.135l0.001,-0.135l0,-305.372l-0.001,-0.135l-0.001,-0.135l-0.002,-0.134l-0.003,-0.134l-0.004,-0.134l-0.005,-0.134l-0.005,-0.134l-0.006,-0.133l-0.008,-0.133l-0.008,-0.133l-0.008,-0.133l-0.01,-0.132l-0.011,-0.133l-0.011,-0.132l-0.012,-0.131l-0.013,-0.132l-0.014,-0.131l-0.014,-0.131l-0.016,-0.131l-0.016,-0.131l-0.017,-0.13l-0.018,-0.13l-0.018,-0.13l-0.02,-0.13l-0.02,-0.129l-0.021,-0.129l-0.022,-0.129l-0.022,-0.128l-0.024,-0.128l-0.024,-0.128l-0.025,-0.128l-0.025,-0.127l-0.027,-0.128l-0.027,-0.126l-0.028,-0.127l-0.029,-0.126l-0.029,-0.126l-0.031,-0.126l-0.031,-0.125l-0.032,-0.125l-0.032,-0.125l-0.033,-0.125l-0.034,-0.124l-0.035,-0.124l-0.036,-0.123l-0.036,-0.124l-0.037,-0.123l-0.038,-0.122l-0.038,-0.123l-0.04,-0.121l-0.04,-0.122l-0.04,-0.121l-0.042,-0.121l-0.042,-0.121l-0.043,-0.12l-0.043,-0.12l-0.044,-0.12l-0.045,-0.119l-0.046,-0.119l-0.046,-0.119l-0.047,-0.118l-0.048,-0.118l-0.049,-0.117l-0.049,-0.118l-0.05,-0.116l-0.05,-0.117l-0.051,-0.116l-0.052,-0.116l-0.053,-0.115l-0.053,-0.115l-0.054,-0.114l-0.055,-0.115l-0.055,-0.113l-0.056,-0.114l-0.057,-0.113l-0.057,-0.113l-0.058,-0.112l-0.059,-0.112l-0.059,-0.111l-0.06,-0.111l-0.06,-0.111l-0.062,-0.11l-0.061,-0.11l-0.063,-0.109l-0.063,-0.109l-0.064,-0.109l-0.064,-0.108l-0.065,-0.108l-0.066,-0.107l-0.066,-0.107l-0.067,-0.106l-0.068,-0.106l-0.068,-0.106l-0.069,-0.105l-0.069,-0.105l-0.07,-0.104l-0.071,-0.104l-0.071,-0.103l-0.072,-0.103l-0.072,-0.103l-0.074,-0.102l-0.073,-0.102l-0.074,-0.101l-0.075,-0.1l-0.076,-0.1l-0.076,-0.1l-0.153,-0.198l-0.156,-0.196l-0.159,-0.195l-0.16,-0.192l-0.163,-0.19l-0.165,-0.188l-0.168,-0.187l-0.169,-0.184l-0.172,-0.182l-0.174,-0.18l-0.176,-0.178l-0.178,-0.176l-0.18,-0.174l-0.182,-0.172l-0.184,-0.169l-0.187,-0.168l-0.188,-0.165l-0.19,-0.163l-0.193,-0.16l-0.194,-0.159l-0.196,-0.156l-0.198,-0.153l-0.1,-0.076l-0.1,-0.076l-0.1,-0.075l-0.102,-0.074l-0.101,-0.074l-0.102,-0.073l-0.103,-0.072l-0.103,-0.072l-0.103,-0.071l-0.104,-0.071l-0.104,-0.07l-0.105,-0.069l-0.105,-0.069l-0.106,-0.068l-0.106,-0.068l-0.106,-0.067l-0.107,-0.066l-0.107,-0.066l-0.108,-0.065l-0.108,-0.064l-0.109,-0.064l-0.109,-0.063l-0.109,-0.063l-0.11,-0.061l-0.11,-0.062l-0.111,-0.06l-0.111,-0.06l-0.111,-0.059l-0.112,-0.059l-0.113,-0.058l-0.112,-0.057l-0.113,-0.057l-0.114,-0.056l-0.113,-0.055l-0.115,-0.055l-0.114,-0.054l-0.115,-0.053l-0.115,-0.053l-0.116,-0.052l-0.116,-0.051l-0.117,-0.05l-0.116,-0.05l-0.118,-0.049l-0.117,-0.049l-0.118,-0.048l-0.118,-0.047l-0.119,-0.046l-0.119,-0.046l-0.119,-0.045l-0.12,-0.044l-0.12,-0.044l-0.12,-0.042l-0.121,-0.042l-0.121,-0.042l-0.121,-0.041l-0.122,-0.039l-0.122,-0.04l-0.122,-0.038l-0.122,-0.038l-0.123,-0.037l-0.124,-0.036l-0.123,-0.036l-0.124,-0.035l-0.124,-0.034l-0.125,-0.033l-0.125,-0.032l-0.125,-0.032l-0.125,-0.031l-0.126,-0.031l-0.126,-0.029l-0.126,-0.029l-0.127,-0.028l-0.126,-0.027l-0.128,-0.027l-0.127,-0.025l-0.128,-0.025l-0.128,-0.024l-0.128,-0.024l-0.128,-0.022l-0.129,-0.022l-0.129,-0.021l-0.129,-0.02l-0.13,-0.02l-0.13,-0.018l-0.13,-0.018l-0.13,-0.017l-0.131,-0.016l-0.131,-0.016l-0.131,-0.014l-0.131,-0.014l-0.132,-0.013l-0.131,-0.012l-0.132,-0.011l-0.133,-0.011l-0.132,-0.01l-0.133,-0.008l-0.133,-0.008l-0.133,-0.008l-0.133,-0.006l-0.134,-0.005l-0.134,-0.005l-0.134,-0.004l-0.134,-0.003l-0.134,-0.002l-0.135,-0.001l-0.135,-0.001l-259.928,0Z",
  fill: "#eee"
}), React.createElement("circle", {
  cx: "200",
  cy: "119.069",
  r: "70.019",
  fill: "#eee"
}), React.createElement("path", {
  d: "M289.817,213.579c0,-4.187 -3.399,-7.586 -7.585,-7.586l-164.464,0c-4.186,0 -7.585,3.399 -7.585,7.586l0,3.834c0,4.187 3.399,7.586 7.585,7.586l164.464,0c4.186,0 7.585,-3.399 7.585,-7.586l0,-3.834Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M245.908,342.578c0,-3.085 -2.505,-5.59 -5.59,-5.59l-80.636,0c-3.085,0 -5.59,2.505 -5.59,5.59l0,2.813c0,3.085 2.505,5.59 5.59,5.59l80.636,0c3.085,0 5.59,-2.505 5.59,-5.59l0,-2.813Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M306.311,292.784c0,-3.137 -2.547,-5.683 -5.684,-5.683l-201.254,0c-3.137,0 -5.684,2.546 -5.684,5.683l0,2.674c0,3.137 2.547,5.684 5.684,5.684l201.254,0c3.137,0 5.684,-2.547 5.684,-5.684l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M326.619,270.022c0,-3.136 -2.547,-5.683 -5.683,-5.683l-248.595,0c-3.136,0 -5.683,2.547 -5.683,5.683l0,2.675c0,3.136 2.547,5.683 5.683,5.683l248.595,0c3.136,0 5.683,-2.547 5.683,-5.683l0,-2.675Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M326.619,247.261c0,-3.137 -2.547,-5.684 -5.683,-5.684l-248.595,0c-3.136,0 -5.683,2.547 -5.683,5.684l0,2.674c0,3.137 2.547,5.683 5.683,5.683l248.595,0c3.136,0 5.683,-2.546 5.683,-5.683l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M250.396,319.84c0,-0.453 -0.367,-0.82 -0.82,-0.82l-99.152,0c-0.453,0 -0.82,0.367 -0.82,0.82l0,0.41c0,0.452 0.367,0.82 0.82,0.82l99.152,0c0.453,0 0.82,-0.368 0.82,-0.82l0,-0.41Z",
  fill: "#676767"
}), React.createElement("path", {
  d: "M176.939,94.182l46.122,0c2.053,0 3.719,1.667 3.719,3.72l0,46.121c0,2.053 -1.666,3.719 -3.719,3.719l-46.122,0c-2.053,0 -3.719,-1.666 -3.719,-3.719l0,-46.121c0,-2.053 1.666,-3.72 3.719,-3.72Zm43.89,47.609l0,-41.658l-41.658,0l0,41.658l41.658,0Zm-20.829,-32.731c0,-3.273 -2.678,-5.951 -5.951,-5.951c-3.273,0 -5.951,2.678 -5.951,5.951c0,3.273 2.678,5.951 5.951,5.951c3.273,0 5.951,-2.678 5.951,-5.951Zm8.927,14.878c0,0 0,-17.854 8.926,-17.854l0,29.756c0,1.637 -1.339,2.976 -2.975,2.976l-29.756,0c-1.636,0 -2.975,-1.339 -2.975,-2.976l0,-20.829c5.951,0 8.926,11.902 8.926,11.902c0,0 2.976,-8.926 8.927,-8.926c5.951,0 8.927,5.951 8.927,5.951Z",
  fill: "#888",
  fillRule: "nonzero"
}));
icons.infoBackground = React.createElement("svg", {
  viewBox: "0 0 400 400",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "49.173",
  y: "68.261",
  width: "301.653",
  height: "263.478",
  fill: "#0a6689"
}), React.createElement("g", {
  fill: "#fff"
}, React.createElement("path", {
  d: "M289.818,251.349c0,-4.195 -3.406,-7.601 -7.6,-7.601l-164.435,0c-4.194,0 -7.6,3.406 -7.6,7.601l0,3.8c0,4.195 3.406,7.601 7.6,7.601l164.435,0c4.194,0 7.6,-3.406 7.6,-7.601l0,-3.8Z"
}), React.createElement("path", {
  d: "M238.631,288.345c0,-3.12 -2.533,-5.652 -5.652,-5.652l-65.958,0c-3.119,0 -5.652,2.532 -5.652,5.652l0,2.825c0,3.119 2.533,5.652 5.652,5.652l65.958,0c3.119,0 5.652,-2.533 5.652,-5.652l0,-2.825Z"
})), React.createElement("path", {
  d: "M199.486,97.833l-13.692,41.077l-41.077,0l34.231,27.385l-13.693,41.077l34.231,-27.384l34.231,27.384l-13.692,-41.077l34.231,-27.385l-41.077,0l-13.693,-41.077Z",
  fill: "#fff",
  fillRule: "nonzero"
}));
icons.advancedbtn = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("g", {
  fill: "#179cd4",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M42.82,13.431l-37.64,0c-2.742,0.003 -4.998,2.259 -5.001,5.001l0,11.136c0.003,2.742 2.259,4.998 5.001,5.001l37.64,0c2.742,-0.003 4.998,-2.259 5.001,-5.001l0,-11.136c-0.003,-2.742 -2.259,-4.998 -5.001,-5.001Zm3.204,5.001l0,8.687c-0.003,1.757 -1.448,3.201 -3.204,3.204l-37.64,0c-1.756,-0.003 -3.201,-1.447 -3.204,-3.204l0,-8.687c0.003,-1.757 1.448,-3.201 3.204,-3.204l37.64,0c1.756,0.003 3.201,1.447 3.204,3.204Z"
}), React.createElement("path", {
  d: "M40.471,26.364l-32.942,0c-0.493,0 -0.898,0.406 -0.898,0.899c0,0.493 0.405,0.898 0.898,0.898l32.942,0c0.493,0 0.898,-0.405 0.898,-0.898c0,-0.493 -0.405,-0.899 -0.898,-0.899Z"
})));
icons.opacity = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 20 20",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("g", {
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M14.043,7.612c2.23,2.178 2.23,5.726 0,7.904c-1.081,1.055 -2.515,1.638 -4.042,1.638c-1.527,0 -2.964,-0.583 -4.042,-1.638c-1.08,-1.056 -1.674,-2.46 -1.674,-3.952c0,-1.492 0.594,-2.896 1.676,-3.956l4.04,-4.026l4.038,4.026c0.002,0.002 0.004,0.002 0.004,0.004Z",
  fill: "url(#_Linear1)"
}), React.createElement("path", {
  d: "M15.595,6.066c3.082,3.013 3.082,7.917 -0.002,10.931c-1.493,1.461 -3.479,2.265 -5.591,2.265c-2.112,0 -4.097,-0.804 -5.593,-2.265c-1.493,-1.46 -2.315,-3.402 -2.315,-5.467c0,-2.065 0.822,-4.007 2.315,-5.466l5.176,-5.162c0.221,-0.219 0.614,-0.219 0.833,0l5.177,5.164Zm-0.826,10.124c2.629,-2.568 2.629,-6.751 0,-9.32c0,-0.002 -0.003,-0.002 -0.005,-0.004l-4.762,-4.749l-4.764,4.749c-1.276,1.249 -1.976,2.905 -1.976,4.664c0,1.76 0.7,3.416 1.974,4.66c1.272,1.245 2.966,1.932 4.766,1.932c1.801,0 3.493,-0.687 4.767,-1.932Z"
})), React.createElement("defs", null, React.createElement("linearGradient", {
  id: "_Linear1",
  x2: "1",
  gradientUnits: "userSpaceOnUse",
  gradientTransform: "matrix(11.4305 0 0 13.5721 4.285 10.368)"
}, React.createElement("stop", {
  offset: "0"
}), React.createElement("stop", {
  offset: "0.5",
  stopOpacity: "0.749"
}), React.createElement("stop", {
  offset: "1",
  stopOpacity: "0"
}))));
icons.iconlistBlock = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M5.945,18.719c2.916,0 5.284,2.368 5.284,5.284c0,2.916 -2.368,5.283 -5.284,5.283c-2.916,0 -5.283,-2.367 -5.283,-5.283c0,-2.916 2.367,-5.284 5.283,-5.284Zm-1.157,8.089c0.133,0.136 0.352,0.138 0.488,0.005l4.068,-3.986c0.137,-0.134 0.139,-0.352 0.006,-0.488l-0.574,-0.595c-0.133,-0.137 -0.351,-0.139 -0.488,-0.005l-3.271,3.203l-1.495,-1.527c-0.134,-0.136 -0.352,-0.138 -0.488,-0.005l-0.551,0.541c-0.136,0.133 -0.139,0.352 -0.005,0.488l2.31,2.369Z",
  fill: "#179cd4"
}), React.createElement("path", {
  d: "M5.895,2.016c2.916,0 5.283,2.367 5.283,5.283c0,2.916 -2.367,5.284 -5.283,5.284c-2.916,0 -5.283,-2.368 -5.283,-5.284c0,-2.916 2.367,-5.283 5.283,-5.283Zm-1.157,8.088c0.133,0.136 0.352,0.139 0.488,0.005l4.068,-3.986c0.136,-0.133 0.139,-0.352 0.005,-0.488l-0.573,-0.595c-0.133,-0.136 -0.352,-0.138 -0.488,-0.005l-3.271,3.204l-1.495,-1.527c-0.134,-0.136 -0.352,-0.139 -0.489,-0.005l-0.55,0.54c-0.137,0.134 -0.139,0.352 -0.006,0.489l2.311,2.368Z",
  fill: "#179cd4"
}), React.createElement("path", {
  d: "M5.895,35.427c2.916,0 5.283,2.367 5.283,5.283c0,2.916 -2.367,5.284 -5.283,5.284c-2.916,0 -5.283,-2.368 -5.283,-5.284c0,-2.916 2.367,-5.283 5.283,-5.283Zm-1.157,8.088c0.133,0.136 0.352,0.139 0.488,0.005l4.068,-3.986c0.136,-0.133 0.139,-0.351 0.005,-0.488l-0.573,-0.595c-0.133,-0.136 -0.352,-0.138 -0.488,-0.005l-3.271,3.204l-1.495,-1.527c-0.134,-0.136 -0.352,-0.139 -0.489,-0.005l-0.55,0.54c-0.137,0.134 -0.139,0.352 -0.006,0.489l2.311,2.368Z",
  fill: "#179cd4"
}), React.createElement("g", {
  fill: "#179cd4"
}, React.createElement("path", {
  d: "M47.451,6.488c0,-0.611 -0.496,-1.107 -1.107,-1.107l-30.283,0c-0.611,0 -1.107,0.496 -1.107,1.107l0,2.214c0,0.611 0.496,1.107 1.107,1.107l30.283,0c0.611,0 1.107,-0.496 1.107,-1.107l0,-2.214Z"
}), React.createElement("path", {
  d: "M47.451,23.074c0,-0.607 -0.493,-1.1 -1.1,-1.1l-30.297,0c-0.607,0 -1.1,0.493 -1.1,1.1l0,2.2c0,0.607 0.493,1.1 1.1,1.1l30.297,0c0.607,0 1.1,-0.493 1.1,-1.1l0,-2.2Z"
}), React.createElement("path", {
  d: "M47.451,39.902c0,-0.607 -0.493,-1.1 -1.1,-1.1l-30.297,0c-0.607,0 -1.1,0.493 -1.1,1.1l0,2.2c0,0.607 0.493,1.1 1.1,1.1l30.297,0c0.607,0 1.1,-0.493 1.1,-1.1l0,-2.2Z"
})));
icons.testimonialBlock = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("path", {
  d: "M46.053,6.607l0.053,0.004l0.052,0.007l0.051,0.009l0.05,0.011l0.049,0.014l0.048,0.017l0.047,0.018l0.046,0.021l0.045,0.023l0.043,0.025l0.042,0.027l0.041,0.029l0.039,0.031l0.038,0.032l0.036,0.034l0.034,0.036l0.033,0.038l0.031,0.039l0.028,0.041l0.027,0.042l0.025,0.043l0.023,0.045l0.021,0.046l0.019,0.047l0.016,0.048l0.014,0.049l0.011,0.05l0.01,0.051l0.006,0.052l0.004,0.053l0.002,0.053l0,26.999l-0.002,0.053l-0.004,0.053l-0.006,0.051l-0.01,0.051l-0.011,0.05l-0.014,0.05l-0.016,0.048l-0.019,0.047l-0.021,0.046l-0.023,0.044l-0.025,0.044l-0.027,0.042l-0.028,0.041l-0.031,0.039l-0.033,0.037l-0.034,0.036l-0.036,0.035l-0.038,0.032l-0.039,0.031l-0.041,0.029l-0.042,0.027l-0.043,0.025l-0.045,0.023l-0.046,0.021l-0.047,0.018l-0.048,0.016l-0.049,0.014l-0.05,0.012l-0.051,0.009l-0.052,0.007l-0.053,0.004l-0.053,0.001l-15.751,0l-6.366,5.717l-6.397,-5.717l-15.486,0l-0.053,-0.001l-0.053,-0.004l-0.052,-0.007l-0.051,-0.009l-0.05,-0.012l-0.049,-0.014l-0.048,-0.016l-0.047,-0.018l-0.046,-0.021l-0.045,-0.023l-0.043,-0.025l-0.042,-0.027l-0.041,-0.029l-0.039,-0.031l-0.038,-0.032l-0.036,-0.035l-0.034,-0.036l-0.033,-0.037l-0.031,-0.039l-0.028,-0.041l-0.027,-0.042l-0.025,-0.044l-0.023,-0.044l-0.021,-0.046l-0.019,-0.047l-0.016,-0.048l-0.014,-0.05l-0.011,-0.05l-0.01,-0.051l-0.006,-0.051l-0.004,-0.053l-0.002,-0.053l0,-26.999l0.002,-0.053l0.004,-0.053l0.006,-0.052l0.01,-0.051l0.011,-0.05l0.014,-0.049l0.016,-0.048l0.019,-0.047l0.021,-0.046l0.023,-0.045l0.025,-0.043l0.027,-0.042l0.028,-0.041l0.031,-0.039l0.033,-0.038l0.034,-0.036l0.036,-0.034l0.038,-0.032l0.039,-0.031l0.041,-0.029l0.042,-0.027l0.043,-0.025l0.045,-0.023l0.046,-0.021l0.047,-0.018l0.048,-0.017l0.049,-0.014l0.05,-0.011l0.051,-0.009l0.052,-0.007l0.053,-0.004l0.053,-0.001l44,0l0.053,0.001Zm-43.09,1.999l0,25.071l15.287,0l5.63,5.032l5.603,-5.032l15.554,0l0,-25.071l-42.074,0Z",
  fill: "#179cd4"
}), React.createElement("path", {
  d: "M5.395,19.137l2.412,-0.349c0.257,-0.042 0.477,-0.205 0.592,-0.438l1.078,-2.184c0.134,-0.272 0.413,-0.445 0.716,-0.445c0.304,0 0.582,0.173 0.716,0.445l1.078,2.184c0.115,0.233 0.336,0.396 0.592,0.438l2.412,0.349c0.391,0.058 0.684,0.396 0.684,0.791c0,0.215 -0.086,0.421 -0.24,0.571l-1.746,1.702c-0.187,0.184 -0.272,0.449 -0.228,0.708l0.411,2.403c0.008,0.044 0.012,0.089 0.012,0.134c0,0.438 -0.361,0.799 -0.8,0.799c-0.129,0 -0.257,-0.032 -0.372,-0.092l-2.155,-1.134c-0.233,-0.121 -0.512,-0.121 -0.746,0l-2.155,1.134c-0.114,0.06 -0.242,0.092 -0.372,0.092c-0.438,0 -0.799,-0.361 -0.799,-0.799c0,-0.045 0.004,-0.09 0.011,-0.134l0.411,-2.403c0.044,-0.259 -0.041,-0.524 -0.227,-0.708l-1.747,-1.702c-0.152,-0.15 -0.237,-0.355 -0.237,-0.569c0,-0.4 0.301,-0.742 0.699,-0.793Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M19.21,19.137l2.412,-0.349c0.257,-0.042 0.477,-0.205 0.591,-0.438l1.078,-2.184c0.134,-0.272 0.413,-0.445 0.716,-0.445c0.304,0 0.582,0.173 0.716,0.445l1.078,2.184c0.115,0.233 0.336,0.396 0.592,0.438l2.412,0.349c0.391,0.058 0.684,0.396 0.684,0.791c0,0.215 -0.085,0.421 -0.239,0.571l-1.746,1.702c-0.188,0.184 -0.272,0.449 -0.229,0.708l0.412,2.403c0.008,0.044 0.012,0.089 0.012,0.134c0,0.438 -0.361,0.799 -0.8,0.799c-0.13,0 -0.258,-0.032 -0.372,-0.092l-2.156,-1.134c-0.233,-0.121 -0.512,-0.121 -0.745,0l-2.156,1.134c-0.114,0.06 -0.242,0.092 -0.372,0.092c-0.438,0 -0.799,-0.361 -0.799,-0.799c0,-0.045 0.005,-0.09 0.011,-0.134l0.412,-2.403c0.044,-0.259 -0.041,-0.524 -0.227,-0.708l-1.747,-1.702c-0.152,-0.15 -0.237,-0.355 -0.237,-0.569c0,-0.4 0.3,-0.742 0.699,-0.793Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M33.067,19.137l2.412,-0.349c0.257,-0.042 0.477,-0.205 0.592,-0.438l1.078,-2.184c0.134,-0.272 0.413,-0.445 0.716,-0.445c0.304,0 0.582,0.173 0.716,0.445l1.078,2.184c0.115,0.233 0.336,0.396 0.592,0.438l2.412,0.349c0.391,0.058 0.684,0.396 0.684,0.791c0,0.215 -0.086,0.421 -0.24,0.571l-1.746,1.702c-0.187,0.184 -0.272,0.449 -0.228,0.708l0.411,2.403c0.008,0.044 0.012,0.089 0.012,0.134c0,0.438 -0.361,0.799 -0.8,0.799c-0.129,0 -0.257,-0.032 -0.372,-0.092l-2.155,-1.134c-0.233,-0.121 -0.512,-0.121 -0.746,0l-2.155,1.134c-0.114,0.06 -0.242,0.092 -0.372,0.092c-0.438,0 -0.799,-0.361 -0.799,-0.799c0,-0.045 0.004,-0.09 0.011,-0.134l0.411,-2.403c0.044,-0.259 -0.041,-0.524 -0.227,-0.708l-1.747,-1.702c-0.152,-0.15 -0.237,-0.355 -0.237,-0.569c0,-0.4 0.301,-0.742 0.699,-0.793Z",
  fill: "#179cd4",
  fillRule: "nonzero"
}));
icons.testimonialBasic = React.createElement("svg", {
  viewBox: "0 0 400 300",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "400",
  height: "300",
  fill: "none"
}), React.createElement("path", {
  d: "M393.782,50.876c0,-11.515 -9.348,-20.863 -20.863,-20.863l-345.838,0c-11.515,0 -20.863,9.348 -20.863,20.863l0,198.248c0,11.515 9.348,20.863 20.863,20.863l345.838,0c11.515,0 20.863,-9.348 20.863,-20.863l0,-198.248Z",
  fill: "#fff"
}), React.createElement("circle", {
  cx: "150.035",
  cy: "214.556",
  r: "28.108",
  fill: "#eee"
}), React.createElement("path", {
  d: "M277.897,201.379c0,-3.085 -2.505,-5.59 -5.59,-5.59l-80.636,0c-3.085,0 -5.59,2.505 -5.59,5.59l0,2.813c0,3.085 2.505,5.59 5.59,5.59l80.636,0c3.085,0 5.59,-2.505 5.59,-5.59l0,-2.813Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M278.073,223.98c0,-3.085 -2.505,-5.59 -5.59,-5.59l-80.636,0c-3.085,0 -5.59,2.505 -5.59,5.59l0,2.813c0,3.085 2.505,5.59 5.59,5.59l80.636,0c3.085,0 5.59,-2.505 5.59,-5.59l0,-2.813Z",
  fill: "#b0b0b0"
}), React.createElement("path", {
  d: "M140.132,202.697l20.939,0c0.932,0 1.689,0.757 1.689,1.689l0,20.939c0,0.932 -0.757,1.688 -1.689,1.688l-20.939,0c-0.932,0 -1.688,-0.756 -1.688,-1.688l0,-20.939c0,-0.932 0.756,-1.689 1.688,-1.689Zm19.926,21.615l0,-18.913l-18.912,0l0,18.913l18.912,0Zm-9.456,-14.86c0,-1.486 -1.216,-2.702 -2.702,-2.702c-1.486,0 -2.702,1.216 -2.702,2.702c0,1.486 1.216,2.702 2.702,2.702c1.486,0 2.702,-1.216 2.702,-2.702Zm4.053,6.754c0,0 0,-8.105 4.052,-8.105l0,13.509c0,0.743 -0.608,1.351 -1.351,1.351l-13.509,0c-0.743,0 -1.35,-0.608 -1.35,-1.351l0,-9.456c2.701,0 4.052,5.403 4.052,5.403c0,0 1.351,-4.052 4.053,-4.052c2.701,0 4.053,2.701 4.053,2.701Z",
  fill: "#888",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M333.379,65.119c0,-4.187 -3.399,-7.586 -7.585,-7.586l-251.588,0c-4.186,0 -7.585,3.399 -7.585,7.586l0,3.834c0,4.187 3.399,7.586 7.585,7.586l251.588,0c4.186,0 7.585,-3.399 7.585,-7.586l0,-3.834Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M347.747,153.688c0,-3.137 -2.547,-5.683 -5.684,-5.683l-284.126,0c-3.137,0 -5.684,2.546 -5.684,5.683l0,2.674c0,3.137 2.547,5.684 5.684,5.684l284.126,0c3.137,0 5.684,-2.547 5.684,-5.684l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M371.417,126.188c0,-3.136 -2.547,-5.683 -5.683,-5.683l-331.468,0c-3.136,0 -5.683,2.547 -5.683,5.683l0,2.675c0,3.136 2.547,5.683 5.683,5.683l331.468,0c3.136,0 5.683,-2.547 5.683,-5.683l0,-2.675Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M371.417,98.54c0,-3.137 -2.547,-5.684 -5.683,-5.684l-331.468,0c-3.136,0 -5.683,2.547 -5.683,5.684l0,2.674c0,3.137 2.547,5.683 5.683,5.683l331.468,0c3.136,0 5.683,-2.546 5.683,-5.683l0,-2.674Z",
  fill: "#888"
}));
icons.testimonialCard = React.createElement("svg", {
  viewBox: "0 0 400 300",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "400",
  height: "300",
  fill: "none"
}), React.createElement("rect", {
  x: "38.715",
  y: "5",
  width: "324.316",
  height: "290",
  fill: "#fff"
}), React.createElement("rect", {
  x: "50.019",
  y: "5.616",
  width: "299.963",
  height: "111.996",
  fill: "#eee"
}), React.createElement("circle", {
  cx: "189.601",
  cy: "36.677",
  r: "28.108",
  fill: "#eee"
}), React.createElement("path", {
  d: "M240.707,256.414c0,-2.676 -2.173,-4.85 -4.849,-4.85l-69.953,0c-2.676,0 -4.849,2.174 -4.849,4.85l0,2.44c0,2.676 2.173,4.85 4.849,4.85l69.953,0c2.676,0 4.849,-2.174 4.849,-4.85l0,-2.44Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M240.86,276.021c0,-2.676 -2.173,-4.85 -4.85,-4.85l-69.952,0c-2.677,0 -4.85,2.174 -4.85,4.85l0,2.44c0,2.676 2.173,4.85 4.85,4.85l69.952,0c2.677,0 4.85,-2.174 4.85,-4.85l0,-2.44Z",
  fill: "#b0b0b0"
}), React.createElement("path", {
  d: "M176.538,43.322l39.493,0c1.758,0 3.185,1.428 3.185,3.186l0,39.492c0,1.758 -1.427,3.184 -3.185,3.184l-39.493,0c-1.758,0 -3.184,-1.426 -3.184,-3.184l0,-39.492c0,-1.758 1.426,-3.186 3.184,-3.186Zm37.582,40.766l0,-35.67l-35.67,0l0,35.67l35.67,0Zm-17.835,-28.026c0,-2.803 -2.293,-5.096 -5.096,-5.096c-2.802,0 -5.095,2.293 -5.095,5.096c0,2.802 2.293,5.096 5.095,5.096c2.803,0 5.096,-2.294 5.096,-5.096Zm7.644,12.74c0,0 0,-15.288 7.643,-15.288l0,25.479c0,1.402 -1.147,2.548 -2.548,2.548l-25.479,0c-1.401,0 -2.547,-1.146 -2.547,-2.548l0,-17.835c5.096,0 7.643,10.191 7.643,10.191c0,0 2.548,-7.643 7.644,-7.643c5.096,0 7.644,5.096 7.644,5.096Z",
  fill: "#888",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M317.212,141.565c0,-4.187 -3.399,-7.586 -7.585,-7.586l-219.254,0c-4.186,0 -7.585,3.399 -7.585,7.586l0,3.834c0,4.187 3.399,7.586 7.585,7.586l219.254,0c4.186,0 7.585,-3.399 7.585,-7.586l0,-3.834Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M291.313,223.205c0,-2.939 -2.387,-5.324 -5.326,-5.324l-170.966,0c-2.939,0 -5.325,2.385 -5.325,5.324l0,2.506c0,2.939 2.386,5.325 5.325,5.325l170.966,0c2.939,0 5.326,-2.386 5.326,-5.325l0,-2.506Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M313.488,197.441c0,-2.938 -2.386,-5.324 -5.324,-5.324l-215.319,0c-2.938,0 -5.324,2.386 -5.324,5.324l0,2.506c0,2.938 2.386,5.325 5.324,5.325l215.319,0c2.938,0 5.324,-2.387 5.324,-5.325l0,-2.506Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M313.488,171.538c0,-2.939 -2.386,-5.325 -5.324,-5.325l-215.319,0c-2.938,0 -5.324,2.386 -5.324,5.325l0,2.505c0,2.939 2.386,5.325 5.324,5.325l215.319,0c2.938,0 5.324,-2.386 5.324,-5.325l0,-2.505Z",
  fill: "#888"
}));
icons.testimonialBubble = React.createElement("svg", {
  viewBox: "0 0 400 300",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "400",
  height: "300",
  fill: "none"
}), React.createElement("path", {
  d: "M393.782,50.876c0,-11.515 -9.348,-20.863 -20.863,-20.863l-345.838,0c-11.515,0 -20.863,9.348 -20.863,20.863l0,114.463c0,11.515 9.348,20.863 20.863,20.863l345.838,0c11.515,0 20.863,-9.348 20.863,-20.863l0,-114.463Z",
  fill: "#fff",
  stroke: "#888",
  strokeWidth: "4"
}), React.createElement("circle", {
  cx: "150.035",
  cy: "240.744",
  r: "28.108",
  fill: "#eee"
}), React.createElement("path", {
  d: "M277.897,227.567c0,-3.085 -2.505,-5.59 -5.59,-5.59l-80.636,0c-3.085,0 -5.59,2.505 -5.59,5.59l0,2.813c0,3.085 2.505,5.59 5.59,5.59l80.636,0c3.085,0 5.59,-2.505 5.59,-5.59l0,-2.813Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M278.073,250.168c0,-3.085 -2.505,-5.59 -5.59,-5.59l-80.636,0c-3.085,0 -5.59,2.505 -5.59,5.59l0,2.813c0,3.085 2.505,5.59 5.59,5.59l80.636,0c3.085,0 5.59,-2.505 5.59,-5.59l0,-2.813Z",
  fill: "#b0b0b0"
}), React.createElement("path", {
  d: "M140.132,228.885l20.939,0c0.932,0 1.689,0.757 1.689,1.689l0,20.939c0,0.932 -0.757,1.688 -1.689,1.688l-20.939,0c-0.932,0 -1.688,-0.756 -1.688,-1.688l0,-20.939c0,-0.932 0.756,-1.689 1.688,-1.689Zm19.926,21.615l0,-18.913l-18.912,0l0,18.913l18.912,0Zm-9.456,-14.86c0,-1.486 -1.216,-2.702 -2.702,-2.702c-1.486,0 -2.702,1.216 -2.702,2.702c0,1.486 1.216,2.702 2.702,2.702c1.486,0 2.702,-1.216 2.702,-2.702Zm4.053,6.754c0,0 0,-8.105 4.052,-8.105l0,13.509c0,0.743 -0.608,1.351 -1.351,1.351l-13.509,0c-0.743,0 -1.35,-0.608 -1.35,-1.351l0,-9.456c2.701,0 4.052,5.403 4.052,5.403c0,0 1.351,-4.052 4.053,-4.052c2.701,0 4.053,2.701 4.053,2.701Z",
  fill: "#888",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M333.379,63.119c0,-4.187 -3.399,-7.586 -7.585,-7.586l-251.588,0c-4.186,0 -7.585,3.399 -7.585,7.586l0,3.834c0,4.187 3.399,7.586 7.585,7.586l251.588,0c4.186,0 7.585,-3.399 7.585,-7.586l0,-3.834Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M347.747,151.688c0,-3.137 -2.547,-5.683 -5.684,-5.683l-284.126,0c-3.137,0 -5.684,2.546 -5.684,5.683l0,2.674c0,3.137 2.547,5.684 5.684,5.684l284.126,0c3.137,0 5.684,-2.547 5.684,-5.684l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M371.417,124.188c0,-3.136 -2.547,-5.683 -5.683,-5.683l-331.468,0c-3.136,0 -5.683,2.547 -5.683,5.683l0,2.675c0,3.136 2.547,5.683 5.683,5.683l331.468,0c3.136,0 5.683,-2.547 5.683,-5.683l0,-2.675Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M371.417,96.54c0,-3.137 -2.547,-5.684 -5.683,-5.684l-331.468,0c-3.136,0 -5.683,2.547 -5.683,5.684l0,2.674c0,3.137 2.547,5.683 5.683,5.683l331.468,0c3.136,0 5.683,-2.546 5.683,-5.683l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M200,202.637l16.507,-14.995l-33.014,0l16.507,14.995Z",
  fill: "#888"
}));
icons.testimonialInline = React.createElement("svg", {
  viewBox: "0 0 400 300",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "400",
  height: "300",
  fill: "none"
}), React.createElement("path", {
  d: "M393.782,80.651c0,-11.515 -9.348,-20.863 -20.863,-20.863l-345.838,0c-11.515,0 -20.863,9.348 -20.863,20.863l0,114.463c0,11.515 9.348,20.863 20.863,20.863l345.838,0c11.515,0 20.863,-9.348 20.863,-20.863l0,-114.463Z",
  fill: "#fff",
  stroke: "#888",
  strokeWidth: "4"
}), React.createElement("circle", {
  cx: "58.029",
  cy: "105.034",
  r: "28.108",
  fill: "#eee"
}), React.createElement("path", {
  d: "M323.808,231.809c0,-3.085 -2.505,-5.59 -5.59,-5.59l-111.083,0c-3.085,0 -5.59,2.505 -5.59,5.59l0,2.813c0,3.085 2.505,5.59 5.59,5.59l111.083,0c3.085,0 5.59,-2.505 5.59,-5.59l0,-2.813Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M48.126,93.175l20.939,0c0.932,0 1.689,0.757 1.689,1.689l0,20.939c0,0.932 -0.757,1.688 -1.689,1.688l-20.939,0c-0.932,0 -1.688,-0.756 -1.688,-1.688l0,-20.939c0,-0.932 0.756,-1.689 1.688,-1.689Zm19.926,21.615l0,-18.913l-18.912,0l0,18.913l18.912,0Zm-9.456,-14.86c0,-1.486 -1.216,-2.702 -2.702,-2.702c-1.486,0 -2.702,1.216 -2.702,2.702c0,1.486 1.216,2.702 2.702,2.702c1.486,0 2.702,-1.216 2.702,-2.702Zm4.053,6.754c0,0 0,-8.105 4.052,-8.105l0,13.509c0,0.743 -0.608,1.351 -1.351,1.351l-13.509,0c-0.743,0 -1.35,-0.608 -1.35,-1.351l0,-9.456c2.701,0 4.052,5.403 4.052,5.403c0,0 1.351,-4.052 4.053,-4.052c2.701,0 4.053,2.701 4.053,2.701Z",
  fill: "#888",
  fillRule: "nonzero"
}), React.createElement("path", {
  d: "M360.415,93.146c0,-4.187 -3.399,-7.586 -7.585,-7.586l-241.001,0c-4.186,0 -7.585,3.399 -7.585,7.586l0,3.834c0,4.187 3.399,7.586 7.585,7.586l241.001,0c4.186,0 7.585,-3.399 7.585,-7.586l0,-3.834Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M323.405,181.463c0,-3.137 -2.547,-5.683 -5.684,-5.683l-284.126,0c-3.137,0 -5.684,2.546 -5.684,5.683l0,2.674c0,3.137 2.547,5.684 5.684,5.684l284.126,0c3.137,0 5.684,-2.547 5.684,-5.684l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M371.417,153.963c0,-3.136 -2.547,-5.683 -5.683,-5.683l-331.468,0c-3.136,0 -5.683,2.547 -5.683,5.683l0,2.675c0,3.136 2.547,5.683 5.683,5.683l331.468,0c3.136,0 5.683,-2.547 5.683,-5.683l0,-2.675Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M371.417,126.315c0,-3.137 -2.547,-5.684 -5.683,-5.684l-255.823,0c-3.136,0 -5.683,2.547 -5.683,5.684l0,2.674c0,3.137 2.547,5.683 5.683,5.683l255.823,0c3.136,0 5.683,-2.546 5.683,-5.683l0,-2.674Z",
  fill: "#888"
}), React.createElement("path", {
  d: "M348.967,232.413l16.507,-14.996l-33.014,0l16.507,14.996Z",
  fill: "#888"
}));
icons.accord01 = React.createElement("svg", {
  viewBox: "0 0 400 240",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "4",
  y: "30.098",
  width: "390",
  height: "120.406",
  fill: "#fff"
}), React.createElement("path", {
  d: "M394,150.504l-390,0l0,-120.406l390,0l0,120.406Zm-389,-119.406l0,118.406l388,0l0,-118.406l-388,0Z",
  fill: "#eee"
}), React.createElement("rect", {
  x: "4",
  y: "30.125",
  width: "390",
  height: "30",
  fill: "#444"
}), React.createElement("rect", {
  x: "4",
  y: "149.759",
  width: "390",
  height: "30",
  fill: "#eee"
}), React.createElement("rect", {
  x: "4",
  y: "179.902",
  width: "390",
  height: "30",
  fill: "#eee"
}), React.createElement("rect", {
  x: "366.177",
  y: "162.759",
  width: "16",
  height: "4",
  fill: "#444"
}), React.createElement("rect", {
  x: "366.177",
  y: "43.125",
  width: "16",
  height: "4",
  fill: "#fff"
}), React.createElement("rect", {
  x: "366.177",
  y: "192.902",
  width: "16",
  height: "4",
  fill: "#444"
}), React.createElement("path", {
  d: "M376.177,172.759l0,-16l-4,0l0,16l4,0Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M376.177,202.902l0,-16l-4,0l0,16l4,0Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M190.685,42.625c0,-1.38 -1.12,-2.5 -2.5,-2.5l-170,0c-1.379,0 -2.5,1.12 -2.5,2.5l0,5c0,1.38 1.121,2.5 2.5,2.5l170,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#fff",
  fillOpacity: "0.349"
}), React.createElement("path", {
  d: "M240.685,162.259c0,-1.38 -1.12,-2.5 -2.5,-2.5l-220,0c-1.379,0 -2.5,1.12 -2.5,2.5l0,5c0,1.379 1.121,2.5 2.5,2.5l220,0c1.38,0 2.5,-1.121 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M160.685,192.402c0,-1.379 -1.12,-2.5 -2.5,-2.5l-140,0c-1.379,0 -2.5,1.121 -2.5,2.5l0,5c0,1.38 1.121,2.5 2.5,2.5l140,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.349"
}), React.createElement("path", {
  d: "M375.067,99.771c0,-0.827 -0.672,-1.5 -1.5,-1.5l-356.425,0c-0.827,0 -1.5,0.673 -1.5,1.5l0,3c0,0.828 0.673,1.5 1.5,1.5l356.425,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M375.067,114.124c0,-0.828 -0.672,-1.5 -1.5,-1.5l-356.425,0c-0.827,0 -1.5,0.672 -1.5,1.5l0,3c0,0.828 0.673,1.5 1.5,1.5l356.425,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M320.956,128.477c0,-0.828 -0.672,-1.5 -1.5,-1.5l-302.314,0c-0.827,0 -1.5,0.672 -1.5,1.5l0,3c0,0.828 0.673,1.5 1.5,1.5l302.314,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M219.025,79.795c0,-1.104 -0.896,-2 -2,-2l-199.383,0c-1.103,0 -2,0.896 -2,2l0,4c0,1.104 0.897,2 2,2l199.383,0c1.104,0 2,-0.896 2,-2l0,-4Z",
  fill: "#444",
  fillOpacity: "0.353"
}));
icons.accord02 = React.createElement("svg", {
  viewBox: "0 0 400 240",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "5",
  y: "13.744",
  width: "390",
  height: "212.512",
  fill: "#fff"
}), React.createElement("path", {
  d: "M395,23.771c0,-5.519 -4.481,-10 -10,-10l-370,0c-5.519,0 -10,4.481 -10,10l0,20c0,5.519 4.481,10 10,10l370,0c5.519,0 10,-4.481 10,-10l0,-20Z",
  fill: "#f3690e"
}), React.createElement("path", {
  d: "M395,153.164c0,-5.519 -4.481,-10 -10,-10l-370,0c-5.519,0 -10,4.481 -10,10l0,20c0,5.519 4.481,10 10,10l370,0c5.519,0 10,-4.481 10,-10l0,-20Z",
  fill: "#eee"
}), React.createElement("path", {
  d: "M395,195.992c0,-5.519 -4.481,-10 -10,-10l-370,0c-5.519,0 -10,4.481 -10,10l0,20c0,5.519 4.481,10 10,10l370,0c5.519,0 10,-4.481 10,-10l0,-20Z",
  fill: "#eee"
}), React.createElement("rect", {
  x: "367.177",
  y: "161.163",
  width: "16",
  height: "4",
  fill: "#444"
}), React.createElement("rect", {
  x: "367.177",
  y: "31.715",
  width: "16",
  height: "4",
  fill: "#fff"
}), React.createElement("rect", {
  x: "367.177",
  y: "204.295",
  width: "16",
  height: "4",
  fill: "#444"
}), React.createElement("path", {
  d: "M377.177,171.163l0,-16l-4,0l0,16l4,0Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M377.177,214.295l0,-16l-4,0l0,16l4,0Z",
  fill: "#444"
}), React.createElement("path", {
  d: "M191.685,31.271c0,-1.379 -1.12,-2.5 -2.5,-2.5l-170,0c-1.379,0 -2.5,1.121 -2.5,2.5l0,5c0,1.38 1.121,2.5 2.5,2.5l170,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#fff",
  fillOpacity: "0.349"
}), React.createElement("path", {
  d: "M241.685,160.664c0,-1.38 -1.12,-2.5 -2.5,-2.5l-220,0c-1.379,0 -2.5,1.12 -2.5,2.5l0,5c0,1.38 1.121,2.5 2.5,2.5l220,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M161.685,203.492c0,-1.38 -1.12,-2.5 -2.5,-2.5l-140,0c-1.379,0 -2.5,1.12 -2.5,2.5l0,5c0,1.38 1.121,2.5 2.5,2.5l140,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.349"
}), React.createElement("path", {
  d: "M375.067,91.903c0,-0.827 -0.672,-1.5 -1.5,-1.5l-356.425,0c-0.827,0 -1.5,0.673 -1.5,1.5l0,3c0,0.828 0.673,1.5 1.5,1.5l356.425,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M375.067,106.256c0,-0.828 -0.672,-1.5 -1.5,-1.5l-356.425,0c-0.827,0 -1.5,0.672 -1.5,1.5l0,3c0,0.828 0.673,1.5 1.5,1.5l356.425,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M320.956,120.609c0,-0.828 -0.672,-1.5 -1.5,-1.5l-302.314,0c-0.827,0 -1.5,0.672 -1.5,1.5l0,3c0,0.828 0.673,1.5 1.5,1.5l302.314,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M219.025,71.927c0,-1.104 -0.896,-2 -2,-2l-199.383,0c-1.103,0 -2,0.896 -2,2l0,4c0,1.104 0.897,2 2,2l199.383,0c1.104,0 2,-0.896 2,-2l0,-4Z",
  fill: "#444",
  fillOpacity: "0.353"
}));
icons.accord03 = React.createElement("svg", {
  viewBox: "0 0 400 240",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "5.009",
  y: "9.637",
  width: "390",
  height: "131.134",
  fill: "#fff"
}), React.createElement("path", {
  d: "M395.009,140.771l-390,0l0,-131.134l390,0l0,131.134Zm-389,-130.134l0,129.134l388,0l0,-129.134l-388,0Z",
  fill: "#eee"
}), React.createElement("path", {
  d: "M375.076,89.387c0,-0.827 -0.672,-1.5 -1.5,-1.5l-356.424,0c-0.828,0 -1.5,0.673 -1.5,1.5l0,3c0,0.828 0.672,1.5 1.5,1.5l356.424,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M375.076,103.74c0,-0.828 -0.672,-1.5 -1.5,-1.5l-356.424,0c-0.828,0 -1.5,0.672 -1.5,1.5l0,3c0,0.828 0.672,1.5 1.5,1.5l356.424,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M320.966,118.093c0,-0.828 -0.673,-1.5 -1.5,-1.5l-302.314,0c-0.828,0 -1.5,0.672 -1.5,1.5l0,3c0,0.828 0.672,1.5 1.5,1.5l302.314,0c0.827,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M219.035,69.411c0,-1.104 -0.897,-2 -2,-2l-199.383,0c-1.104,0 -2,0.896 -2,2l0,4c0,1.104 0.896,2 2,2l199.383,0c1.103,0 2,-0.896 2,-2l0,-4Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("rect", {
  x: "5.009",
  y: "9.664",
  width: "390",
  height: "40",
  fill: "#fff"
}), React.createElement("path", {
  d: "M395.009,49.664l-390,0l0,-40l390,0l0,40Zm-389,-39l0,38l388,0l0,-38l-388,0Z",
  fill: "#eee"
}), React.createElement("rect", {
  x: "5.009",
  y: "145.401",
  width: "390",
  height: "40",
  fill: "#fff"
}), React.createElement("path", {
  d: "M395.009,185.401l-390,0l0,-40l390,0l0,40Zm-389,-39l0,38l388,0l0,-38l-388,0Z",
  fill: "#eee"
}), React.createElement("rect", {
  x: "5.961",
  y: "145.419",
  width: "1.018",
  height: "40.003",
  fill: "#eee"
}), React.createElement("rect", {
  x: "4.991",
  y: "9.615",
  width: "2.022",
  height: "40.003",
  fill: "#0e9cd1"
}), React.createElement("rect", {
  x: "5.009",
  y: "190.384",
  width: "390",
  height: "40",
  fill: "#fff",
  stroke: "#eee"
}), React.createElement("rect", {
  x: "5.429",
  y: "190.382",
  width: "1.018",
  height: "40.003",
  fill: "#eee"
}), React.createElement("g", {
  fill: "#444"
}, React.createElement("path", {
  d: "M376.465,168.229l-7.071,-7.071l-1.414,1.415l7.071,7.071l1.414,-1.415Z"
}), React.createElement("path", {
  d: "M375.321,169.644l7.071,-7.071l-1.414,-1.415l-7.071,7.071l1.414,1.415Z"
})), React.createElement("g", {
  fill: "#444"
}, React.createElement("path", {
  d: "M376.465,212.916l-7.071,-7.071l-1.414,1.414l7.071,7.071l1.414,-1.414Z"
}), React.createElement("path", {
  d: "M375.321,214.33l7.071,-7.071l-1.414,-1.414l-7.071,7.071l1.414,1.414Z"
})), React.createElement("g", {
  fill: "#444"
}, React.createElement("path", {
  d: "M373.907,26.836l7.071,7.071l1.414,-1.414l-7.071,-7.071l-1.414,1.414Z"
}), React.createElement("path", {
  d: "M375.051,25.422l-7.071,7.071l1.414,1.414l7.071,-7.071l-1.414,-1.414Z"
})), React.createElement("path", {
  d: "M191.695,27.164c0,-1.379 -1.12,-2.5 -2.5,-2.5l-170,0c-1.38,0 -2.5,1.121 -2.5,2.5l0,5c0,1.38 1.12,2.5 2.5,2.5l170,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.553"
}), React.createElement("path", {
  d: "M241.695,162.901c0,-1.38 -1.12,-2.5 -2.5,-2.5l-220,0c-1.38,0 -2.5,1.12 -2.5,2.5l0,5c0,1.38 1.12,2.5 2.5,2.5l220,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M161.695,207.587c0,-1.379 -1.12,-2.5 -2.5,-2.5l-140,0c-1.38,0 -2.5,1.121 -2.5,2.5l0,5c0,1.38 1.12,2.5 2.5,2.5l140,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.349"
}));
icons.accord04 = React.createElement("svg", {
  viewBox: "0 0 400 240",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("rect", {
  x: "4.957",
  y: "11.561",
  width: "390",
  height: "132.583",
  fill: "#fff"
}), React.createElement("rect", {
  x: "4.957",
  y: "11.588",
  width: "390",
  height: "40",
  fill: "#fff"
}), React.createElement("rect", {
  x: "5.043",
  y: "148.355",
  width: "390",
  height: "40",
  fill: "#fff"
}), React.createElement("rect", {
  x: "4.957",
  y: "188.439",
  width: "390",
  height: "40",
  fill: "#fff"
}), React.createElement("rect", {
  x: "4.957",
  y: "224.446",
  width: "390",
  height: "3.993",
  fill: "#eee"
}), React.createElement("rect", {
  x: "4.957",
  y: "184.362",
  width: "390",
  height: "3.993",
  fill: "#eee"
}), React.createElement("rect", {
  x: "4.957",
  y: "47.595",
  width: "390",
  height: "3.993",
  fill: "#0e9cd1"
}), React.createElement("path", {
  d: "M191.642,29.088c0,-1.38 -1.12,-2.5 -2.5,-2.5l-170,0c-1.379,0 -2.5,1.12 -2.5,2.5l0,5c0,1.38 1.121,2.5 2.5,2.5l170,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.651"
}), React.createElement("path", {
  d: "M241.642,165.597c0,-1.379 -1.12,-2.5 -2.5,-2.5l-220,0c-1.379,0 -2.5,1.121 -2.5,2.5l0,5c0,1.38 1.121,2.5 2.5,2.5l220,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M376.067,92.996c0,-0.828 -0.672,-1.5 -1.5,-1.5l-356.425,0c-0.827,0 -1.5,0.672 -1.5,1.5l0,3c0,0.828 0.673,1.5 1.5,1.5l356.425,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M376.067,107.349c0,-0.828 -0.672,-1.5 -1.5,-1.5l-356.425,0c-0.827,0 -1.5,0.672 -1.5,1.5l0,3c0,0.828 0.673,1.5 1.5,1.5l356.425,0c0.828,0 1.5,-0.672 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M321.956,121.702c0,-0.828 -0.672,-1.5 -1.5,-1.5l-302.314,0c-0.827,0 -1.5,0.672 -1.5,1.5l0,3c0,0.827 0.673,1.5 1.5,1.5l302.314,0c0.828,0 1.5,-0.673 1.5,-1.5l0,-3Z",
  fill: "#444",
  fillOpacity: "0.353"
}), React.createElement("path", {
  d: "M161.642,205.643c0,-1.38 -1.12,-2.5 -2.5,-2.5l-140,0c-1.379,0 -2.5,1.12 -2.5,2.5l0,5c0,1.38 1.121,2.5 2.5,2.5l140,0c1.38,0 2.5,-1.12 2.5,-2.5l0,-5Z",
  fill: "#444",
  fillOpacity: "0.349"
}), React.createElement("path", {
  d: "M220.025,73.019c0,-1.104 -0.896,-2 -2,-2l-199.383,0c-1.103,0 -2,0.896 -2,2l0,4c0,1.104 0.897,2 2,2l199.383,0c1.104,0 2,-0.896 2,-2l0,-4Z",
  fill: "#444",
  fillOpacity: "0.353"
}));
icons.headingBlock = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "1.414"
}, React.createElement("g", {
  fill: "#179cd4",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M45.013,46.298c0.705,0 1.285,-0.58 1.285,-1.285l0,-42.026c0,-0.705 -0.58,-1.285 -1.285,-1.285l-42.026,0c-0.705,0 -1.285,0.58 -1.285,1.285l0,42.026c0,0.705 0.58,1.285 1.285,1.285l42.026,0Zm-40.741,-42.026l39.456,0l0,39.456l-39.456,0l0,-39.456Z"
}), React.createElement("path", {
  d: "M11.221,8.736l7.36,0l0,12.117l10.838,0l0,-12.117l7.361,0l0,30.518l-7.361,0l0,-12.743l-10.838,0l0,12.743l-7.36,0l0,-30.518Z"
})));
icons.gallery = React.createElement("svg", {
  width: "20px",
  height: "20px",
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "2"
}, React.createElement("g", {
  fill: "#179cd4",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M46.652,11.743l-38.504,0c-0.414,0 -0.755,0.341 -0.755,0.755l0,28.023c0,0.414 0.341,0.755 0.755,0.755l38.504,0c0.414,0 0.755,-0.341 0.755,-0.755l0,-28.029c-0.003,-0.412 -0.344,-0.749 -0.755,-0.749Zm-0.754,28.017l-36.995,0l0,-26.508l36.995,0l0,26.508Z"
}), React.createElement("path", {
  d: "M1.53,5.125l38.504,0c0.412,0 0.752,0.337 0.755,0.749l0,4.421l-1.509,0l0,-3.66l-36.995,0l0,26.507l3.772,0l0,1.516l-4.527,0c-0.414,0 -0.755,-0.341 -0.755,-0.755l0,-28.023c0,-0.414 0.341,-0.755 0.755,-0.755Z"
}), React.createElement("path", {
  d: "M35,37.002l8.603,0l-9.256,-11.785l-4.302,5.476l-6.946,-8.846l-11.902,15.155l23.803,0Z"
}), React.createElement("path", {
  d: "M37.607,24.719c2.402,-0.003 4.378,-1.98 4.378,-4.382c0,-2.403 -1.978,-4.381 -4.382,-4.381c-2.403,0 -4.381,1.978 -4.381,4.381c0.003,2.404 1.981,4.381 4.385,4.382Zm0,-7.254c1.574,0.003 2.868,1.299 2.868,2.872c0,1.576 -1.297,2.872 -2.872,2.872c-1.576,0 -2.872,-1.296 -2.872,-2.872c0.001,-1.575 1.299,-2.872 2.874,-2.872l0.002,0Z"
})));
icons.galCarousel = React.createElement("svg", {
  viewBox: "0 0 48 37",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "2"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "47.974",
  height: "36.014",
  fill: "none"
}), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M22.456,10.263l-20.191,0c-0.217,0 -0.396,0.179 -0.396,0.396l0,14.696c0,0.217 0.179,0.396 0.396,0.396l20.191,0c0.217,0 0.396,-0.179 0.396,-0.396l0,-14.699c-0.002,-0.216 -0.18,-0.393 -0.396,-0.393Zm-0.395,14.692l-19.401,0l0,-13.9l19.401,0l0,13.9Z"
}), React.createElement("path", {
  d: "M16.346,23.509l4.512,0l-4.854,-6.18l-2.256,2.872l-3.643,-4.639l-6.242,7.947l12.483,0Z"
}), React.createElement("path", {
  d: "M17.713,17.068c1.26,-0.001 2.296,-1.038 2.296,-2.298c0,-1.26 -1.038,-2.297 -2.298,-2.297c-1.26,0 -2.298,1.037 -2.298,2.297c0.002,1.261 1.039,2.298 2.3,2.298Zm0,-3.804c0.825,0.002 1.504,0.681 1.504,1.506c0,0.826 -0.68,1.506 -1.506,1.506c-0.827,0 -1.506,-0.68 -1.506,-1.506c0,-0.826 0.681,-1.506 1.507,-1.506l0.001,0Z"
})), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M45.661,10.263l-20.192,0c-0.217,0 -0.396,0.179 -0.396,0.396l0,14.696c0,0.217 0.179,0.396 0.396,0.396l20.192,0c0.217,0 0.396,-0.179 0.396,-0.396l0,-14.699c-0.002,-0.216 -0.18,-0.393 -0.396,-0.393Zm-0.396,14.692l-19.4,0l0,-13.9l19.4,0l0,13.9Z"
}), React.createElement("path", {
  d: "M39.551,23.509l4.511,0l-4.854,-6.18l-2.256,2.872l-3.642,-4.639l-6.242,7.947l12.483,0Z"
}), React.createElement("path", {
  d: "M40.918,17.068c1.259,-0.001 2.295,-1.038 2.295,-2.298c0,-1.26 -1.037,-2.297 -2.297,-2.297c-1.261,0 -2.298,1.037 -2.298,2.297c0.002,1.261 1.039,2.298 2.3,2.298Zm0,-3.804c0.825,0.002 1.504,0.681 1.504,1.506c0,0.826 -0.68,1.506 -1.506,1.506c-0.827,0 -1.507,-0.68 -1.507,-1.506c0.001,-0.826 0.681,-1.506 1.507,-1.506l0.002,0Z"
})), React.createElement("circle", {
  cx: "21.053",
  cy: "27.427",
  r: "0.518",
  fill: "#3a3a3a"
}), React.createElement("circle", {
  cx: "24.053",
  cy: "27.427",
  r: "0.518",
  fill: "#3a3a3a"
}), React.createElement("circle", {
  cx: "27.053",
  cy: "27.427",
  r: "0.518",
  fill: "#3a3a3a"
}));
icons.galFluid = React.createElement("svg", {
  viewBox: "0 0 48 37",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "2"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "47.974",
  height: "36.014",
  fill: "none"
}), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M10.287,17.068c1.259,-0.001 2.295,-1.038 2.295,-2.298c0,-1.26 -1.037,-2.297 -2.298,-2.297c-1.26,0 -2.297,1.037 -2.297,2.297c0.002,1.261 1.039,2.298 2.3,2.298Zm0,-3.804c0.825,0.002 1.503,0.681 1.503,1.506c0,0.826 -0.68,1.506 -1.506,1.506c-0.826,0 -1.506,-0.68 -1.506,-1.506c0.001,-0.826 0.681,-1.506 1.507,-1.506l0.002,0Z"
}), React.createElement("path", {
  d: "M0.871,17.863l1.807,-2.301l3.643,4.639l2.256,-2.872l4.854,6.18l-12.56,0l0,-5.646Z"
}), React.createElement("path", {
  d: "M15.03,10.263c0.215,0 0.394,0.177 0.396,0.393l0,14.699c0,0.217 -0.179,0.396 -0.396,0.396l-14.159,0l0,-0.796l13.763,0l0,-13.9l-13.763,0l0,-0.792l14.159,0Z"
})), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M47.053,12.922l0,1.2c-0.095,0.197 -0.149,0.417 -0.149,0.648c0,0.232 0.053,0.452 0.149,0.649l0,1.199c-0.568,-0.42 -0.94,-1.094 -0.941,-1.848c0,-0.754 0.372,-1.428 0.941,-1.848Z"
}), React.createElement("path", {
  d: "M47.053,23.509l-12.491,0l6.242,-7.947l3.643,4.639l2.256,-2.872l0.35,0.446l0,5.734Z"
}), React.createElement("path", {
  d: "M32.964,10.263l14.089,0l0,0.792l-13.694,0l0,13.9l13.694,0l0,0.796l-14.089,0c-0.217,0 -0.396,-0.179 -0.396,-0.396l0,-14.696c0,-0.217 0.179,-0.396 0.396,-0.396Z"
})), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M30.712,10.263l-13.451,0c-0.217,0 -0.395,0.179 -0.395,0.396l0,14.696c0,0.217 0.178,0.396 0.395,0.396l13.451,0c0.217,0 0.396,-0.179 0.396,-0.396l0,-14.699c-0.002,-0.216 -0.18,-0.393 -0.396,-0.393Zm-0.395,14.692l-12.66,0l0,-13.9l12.66,0l0,13.9Z"
}), React.createElement("path", {
  d: "M26.263,23.458l2.443,0l-2.628,-3.347l-1.222,1.555l-1.973,-2.512l-3.38,4.304l6.76,0Z"
}), React.createElement("path", {
  d: "M26.836,17.145c0.837,-0.001 1.527,-0.691 1.527,-1.529c0,-0.838 -0.69,-1.528 -1.529,-1.528c-0.838,0 -1.528,0.69 -1.528,1.528c0.001,0.839 0.691,1.529 1.53,1.529Zm0,-2.531c0.548,0.001 1,0.453 1,1.002c0,0.55 -0.452,1.002 -1.002,1.002c-0.55,0 -1.002,-0.452 -1.002,-1.002c0,-0.549 0.453,-1.002 1.003,-1.002l0.001,0Z"
})), React.createElement("circle", {
  cx: "21.053",
  cy: "27.427",
  r: "0.518",
  fill: "#3a3a3a"
}), React.createElement("circle", {
  cx: "24.053",
  cy: "27.427",
  r: "0.518",
  fill: "#3a3a3a"
}), React.createElement("circle", {
  cx: "27.053",
  cy: "27.427",
  r: "0.518",
  fill: "#3a3a3a"
}));
icons.galGrid = React.createElement("svg", {
  viewBox: "0 0 48 37",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "2"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "47.974",
  height: "36.014",
  fill: "none"
}), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M45.54,1.456l-20.192,0c-0.217,0 -0.396,0.179 -0.396,0.396l0,14.696c0,0.217 0.179,0.395 0.396,0.395l20.192,0c0.217,0 0.396,-0.178 0.396,-0.395l0,-14.699c-0.002,-0.216 -0.181,-0.393 -0.396,-0.393Zm-0.396,14.692l-19.4,0l0,-13.9l19.4,0l0,13.9Z"
}), React.createElement("path", {
  d: "M39.43,14.702l4.511,0l-4.854,-6.18l-2.256,2.872l-3.643,-4.639l-6.241,7.947l12.483,0Z"
}), React.createElement("path", {
  d: "M40.797,8.261c1.259,-0.002 2.295,-1.038 2.295,-2.298c0,-1.26 -1.037,-2.297 -2.298,-2.297c-1.26,0 -2.297,1.037 -2.297,2.297c0.002,1.261 1.039,2.297 2.3,2.298Zm0,-3.804c0.825,0.001 1.503,0.681 1.503,1.506c0,0.826 -0.679,1.506 -1.506,1.506c-0.826,0 -1.506,-0.68 -1.506,-1.506c0.001,-0.826 0.681,-1.506 1.507,-1.506l0.002,0Z"
}), React.createElement("path", {
  d: "M22.626,1.456l-20.192,0c-0.217,0 -0.396,0.179 -0.396,0.396l0,14.696c0,0.217 0.179,0.395 0.396,0.395l20.192,0c0.217,0 0.396,-0.178 0.396,-0.395l0,-14.699c-0.002,-0.216 -0.181,-0.393 -0.396,-0.393Zm-0.396,14.692l-19.4,0l0,-13.9l19.4,0l0,13.9Z"
}), React.createElement("path", {
  d: "M16.515,14.702l4.512,0l-4.854,-6.18l-2.256,2.872l-3.643,-4.639l-6.241,7.947l12.482,0Z"
}), React.createElement("path", {
  d: "M17.883,8.261c1.259,-0.002 2.295,-1.038 2.295,-2.298c0,-1.26 -1.037,-2.297 -2.298,-2.297c-1.26,0 -2.297,1.037 -2.297,2.297c0.002,1.261 1.039,2.297 2.3,2.298Zm0,-3.804c0.825,0.001 1.503,0.681 1.503,1.506c0,0.826 -0.68,1.506 -1.506,1.506c-0.826,0 -1.506,-0.68 -1.506,-1.506c0.001,-0.826 0.681,-1.506 1.507,-1.506l0.002,0Z"
}), React.createElement("g", null, React.createElement("path", {
  d: "M45.54,19.071l-20.192,0c-0.217,0 -0.396,0.178 -0.396,0.395l0,14.696c0,0.217 0.179,0.396 0.396,0.396l20.192,0c0.217,0 0.396,-0.179 0.396,-0.396l0,-14.699c-0.002,-0.216 -0.181,-0.392 -0.396,-0.392Zm-0.396,14.692l-19.4,0l0,-13.901l19.4,0l0,13.901Z"
}), React.createElement("path", {
  d: "M39.43,32.317l4.511,0l-4.854,-6.181l-2.256,2.872l-3.643,-4.639l-6.241,7.948l12.483,0Z"
}), React.createElement("path", {
  d: "M40.797,25.875c1.259,-0.001 2.295,-1.038 2.295,-2.297c0,-1.261 -1.037,-2.298 -2.298,-2.298c-1.26,0 -2.297,1.037 -2.297,2.298c0.002,1.26 1.039,2.297 2.3,2.297Zm0,-3.803c0.825,0.001 1.503,0.68 1.503,1.506c0,0.826 -0.679,1.506 -1.506,1.506c-0.826,0 -1.506,-0.68 -1.506,-1.506c0.001,-0.827 0.681,-1.506 1.507,-1.506l0.002,0Z"
})), React.createElement("g", null, React.createElement("path", {
  d: "M22.626,19.071l-20.192,0c-0.217,0 -0.396,0.178 -0.396,0.395l0,14.696c0,0.217 0.179,0.396 0.396,0.396l20.192,0c0.217,0 0.396,-0.179 0.396,-0.396l0,-14.699c-0.002,-0.216 -0.181,-0.392 -0.396,-0.392Zm-0.396,14.692l-19.4,0l0,-13.901l19.4,0l0,13.901Z"
}), React.createElement("path", {
  d: "M16.515,32.317l4.512,0l-4.854,-6.181l-2.256,2.872l-3.643,-4.639l-6.241,7.948l12.482,0Z"
}), React.createElement("path", {
  d: "M17.883,25.875c1.259,-0.001 2.295,-1.038 2.295,-2.297c0,-1.261 -1.037,-2.298 -2.298,-2.298c-1.26,0 -2.297,1.037 -2.297,2.298c0.002,1.26 1.039,2.297 2.3,2.297Zm0,-3.803c0.825,0.001 1.503,0.68 1.503,1.506c0,0.826 -0.68,1.506 -1.506,1.506c-0.826,0 -1.506,-0.68 -1.506,-1.506c0.001,-0.827 0.681,-1.506 1.507,-1.506l0.002,0Z"
}))));
icons.galMasonry = React.createElement("svg", {
  viewBox: "0 0 48 37",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "2"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "47.974",
  height: "36.014",
  fill: "none"
}), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M45.54,1.456l-20.192,0c-0.217,0 -0.396,0.179 -0.396,0.396l0,11.139c0,0.217 0.179,0.396 0.396,0.396l20.192,0c0.217,0 0.396,-0.179 0.396,-0.396l0,-11.142c-0.002,-0.216 -0.181,-0.393 -0.396,-0.393Zm-0.396,11.136l-19.4,0l0,-10.344l19.4,0l0,10.344Z"
}), React.createElement("path", {
  d: "M36.728,11.438l3.535,0l-3.803,-4.843l-1.768,2.25l-2.854,-3.635l-4.891,6.228l9.781,0Z"
}), React.createElement("path", {
  d: "M40.797,8.261c1.259,-0.002 2.295,-1.038 2.295,-2.298c0,-1.26 -1.037,-2.297 -2.298,-2.297c-1.26,0 -2.297,1.037 -2.297,2.297c0.002,1.261 1.039,2.297 2.3,2.298Zm0,-3.804c0.825,0.001 1.503,0.681 1.503,1.506c0,0.826 -0.679,1.506 -1.506,1.506c-0.826,0 -1.506,-0.68 -1.506,-1.506c0.001,-0.826 0.681,-1.506 1.507,-1.506l0.002,0Z"
})), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M22.626,1.456l-20.192,0c-0.217,0 -0.396,0.179 -0.396,0.396l0,21.375c0,0.217 0.179,0.396 0.396,0.396l20.192,0c0.217,0 0.396,-0.179 0.396,-0.396l0,-21.378c-0.002,-0.216 -0.181,-0.393 -0.396,-0.393Zm-0.396,21.372l-19.4,0l0,-20.58l19.4,0l0,20.58Z"
}), React.createElement("path", {
  d: "M16.515,19.869l4.512,0l-4.854,-6.18l-2.256,2.871l-3.643,-4.639l-6.241,7.948l12.482,0Z"
}), React.createElement("path", {
  d: "M17.883,9.509c1.259,-0.001 2.295,-1.038 2.295,-2.298c0,-1.26 -1.037,-2.297 -2.298,-2.297c-1.26,0 -2.297,1.037 -2.297,2.297c0.002,1.261 1.039,2.297 2.3,2.298Zm0,-3.804c0.825,0.002 1.503,0.681 1.503,1.506c0,0.826 -0.68,1.506 -1.506,1.506c-0.826,0 -1.506,-0.68 -1.506,-1.506c0.001,-0.826 0.681,-1.506 1.507,-1.506l0.002,0Z"
})), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M45.54,15.418l-20.192,0c-0.217,0 -0.396,0.179 -0.396,0.396l0,18.143c0,0.217 0.179,0.396 0.396,0.396l20.192,0c0.217,0 0.396,-0.179 0.396,-0.396l0,-18.146c-0.002,-0.216 -0.181,-0.393 -0.396,-0.393Zm-0.396,18.14l-19.4,0l0,-17.348l19.4,0l0,17.348Z"
}), React.createElement("path", {
  d: "M39.43,31.64l4.511,0l-4.854,-6.18l-2.256,2.872l-3.643,-4.639l-6.241,7.947l12.483,0Z"
}), React.createElement("path", {
  d: "M40.797,23.21c1.259,-0.002 2.295,-1.039 2.295,-2.298c0,-1.26 -1.037,-2.298 -2.298,-2.298c-1.26,0 -2.297,1.038 -2.297,2.298c0.002,1.26 1.039,2.297 2.3,2.298Zm0,-3.804c0.825,0.001 1.503,0.681 1.503,1.506c0,0.826 -0.679,1.506 -1.506,1.506c-0.826,0 -1.506,-0.68 -1.506,-1.506c0.001,-0.826 0.681,-1.506 1.507,-1.506l0.002,0Z"
})), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M2.434,25.752l20.192,0c0.215,0.001 0.394,0.177 0.396,0.393l0,8.438l-0.792,0l0,-8.039l-19.4,0l0,8.039l-0.792,0l0,-8.435c0,-0.217 0.179,-0.395 0.396,-0.396Z"
}), React.createElement("path", {
  d: "M13.048,34.583l-5.548,0l2.774,-3.532l2.774,3.532Zm4.511,0l-2.772,0l1.386,-1.765l1.386,1.765Z"
}), React.createElement("path", {
  d: "M17.883,32.557c1.259,-0.001 2.295,-1.038 2.295,-2.298c0,-1.26 -1.037,-2.297 -2.298,-2.297c-1.26,0 -2.297,1.037 -2.297,2.297c0.002,1.261 1.039,2.298 2.3,2.298Zm0,-3.804c0.825,0.002 1.503,0.681 1.503,1.506c0,0.827 -0.68,1.506 -1.506,1.506c-0.826,0 -1.506,-0.679 -1.506,-1.506c0.001,-0.826 0.681,-1.506 1.507,-1.506l0.002,0Z"
})));
icons.galSlider = React.createElement("svg", {
  viewBox: "0 0 48 37",
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "2"
}, React.createElement("rect", {
  id: "Artboard1",
  width: "47.974",
  height: "36.014",
  fill: "none"
}), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M40.817,5.098l-33.661,0c-0.361,0 -0.659,0.298 -0.659,0.66l0,24.498c0,0.362 0.298,0.66 0.659,0.66l33.661,0c0.362,0 0.66,-0.298 0.66,-0.66l0,-24.503c-0.003,-0.361 -0.3,-0.655 -0.66,-0.655Zm-0.659,24.493l-32.342,0l0,-23.173l32.342,0l0,23.173Z"
}), React.createElement("path", {
  d: "M30.631,27.18l7.521,0l-8.092,-10.303l-3.76,4.788l-6.073,-7.734l-10.405,13.249l20.809,0Z"
}), React.createElement("path", {
  d: "M32.91,16.442c2.1,-0.003 3.827,-1.731 3.827,-3.831c0,-2.101 -1.729,-3.83 -3.831,-3.83c-2.101,0 -3.83,1.729 -3.83,3.83c0.003,2.102 1.732,3.83 3.834,3.831Zm0,-6.341c1.376,0.002 2.507,1.135 2.507,2.51c0,1.377 -1.133,2.511 -2.511,2.511c-1.377,0 -2.51,-1.134 -2.51,-2.511c0.001,-1.377 1.135,-2.51 2.512,-2.51l0.002,0Z"
})), React.createElement("circle", {
  cx: "21.053",
  cy: "32.743",
  r: "0.518",
  fill: "#3a3a3a"
}), React.createElement("circle", {
  cx: "24.053",
  cy: "32.743",
  r: "0.518",
  fill: "#3a3a3a"
}), React.createElement("circle", {
  cx: "27.053",
  cy: "32.743",
  r: "0.518",
  fill: "#3a3a3a"
}));
icons.galtiles = React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "2",
  clipRule: "evenodd",
  viewBox: "0 0 48 37"
}, React.createElement("path", {
  fill: "none",
  d: "M0 0H47.974V36.014H0z"
}), React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M45.54 1.456H31.111a.398.398 0 00-.396.396v14.696c0 .217.179.395.396.395H45.54a.397.397 0 00.396-.395V1.849a.399.399 0 00-.396-.393zm-.396 14.692H31.507v-13.9h13.637v13.9z"
}), React.createElement("path", {
  d: "M41.123 14.376h3.023l-3.253-4.143-1.513 1.926-2.442-3.11-4.183 5.327h8.368zM41.598 6.658a1.504 1.504 0 001.494-1.496c0-.821-.675-1.496-1.496-1.496S40.1 4.341 40.1 5.162a1.506 1.506 0 001.498 1.496zm0-2.477a.985.985 0 01.978.981c0 .537-.442.98-.98.98a.986.986 0 01-.981-.98.987.987 0 01.981-.981h.002zM28.89 1.456H2.434a.398.398 0 00-.396.396v14.696c0 .217.179.395.396.395H28.89a.397.397 0 00.396-.395V1.849a.399.399 0 00-.396-.393zm-.396 14.692H2.83v-13.9h25.664v13.9z"
}), React.createElement("path", {
  d: "M19.501 14.702h4.512l-4.854-6.18-2.256 2.872-3.643-4.639-6.241 7.947h12.482zM21.245 8.261a2.31 2.31 0 002.295-2.298 2.308 2.308 0 00-2.298-2.297 2.308 2.308 0 00-2.297 2.297 2.312 2.312 0 002.3 2.298zm0-3.804a1.513 1.513 0 011.503 1.506c0 .826-.68 1.506-1.506 1.506s-1.506-.68-1.506-1.506a1.515 1.515 0 011.507-1.506h.002z"
}), React.createElement("g", null, React.createElement("path", {
  d: "M45.54 19.071H16.57a.397.397 0 00-.396.395v14.696c0 .217.179.396.396.396h28.97a.398.398 0 00.396-.396V19.463a.398.398 0 00-.396-.392zm-.396 14.692H16.966V19.862h28.178v13.901z"
}), React.createElement("path", {
  d: "M34.842 32.317h4.511l-4.854-6.181-2.256 2.872-3.643-4.639-6.241 7.948h12.483zM38.68 25.875a2.308 2.308 0 002.295-2.297 2.309 2.309 0 00-2.298-2.298 2.308 2.308 0 00-2.297 2.298 2.311 2.311 0 002.3 2.297zm0-3.803c.825.001 1.503.68 1.503 1.506s-.679 1.506-1.506 1.506c-.826 0-1.506-.68-1.506-1.506a1.514 1.514 0 011.507-1.506h.002z"
})), React.createElement("g", null, React.createElement("path", {
  d: "M14.099 19.071H2.434a.397.397 0 00-.396.395v14.696c0 .217.179.396.396.396h11.665a.398.398 0 00.396-.396V19.463a.398.398 0 00-.396-.392zm-.396 14.692H2.83V19.862h10.873v13.901z"
}), React.createElement("path", {
  d: "M10.271 32.317h2.255L10.1 29.228l-1.127 1.435-1.821-2.318-3.119 3.972h6.238zM10.674 24.896a1.288 1.288 0 001.28-1.281c0-.703-.579-1.282-1.282-1.282-.702 0-1.281.579-1.281 1.282a1.29 1.29 0 001.283 1.281zm0-2.121c.46.001.838.379.838.84 0 .461-.379.84-.84.84a.844.844 0 01-.84-.84.845.845 0 01.841-.84h.001z"
}))));
icons.thumbslider = React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  fillRule: "evenodd",
  strokeLinejoin: "round",
  strokeMiterlimit: "2",
  clipRule: "evenodd",
  viewBox: "0 0 48 37"
}, React.createElement("g", {
  fill: "#3a3a3a",
  fillRule: "nonzero"
}, React.createElement("path", {
  d: "M40.856 2.066H7.195a.663.663 0 00-.659.66v24.498c0 .362.298.66.659.66h33.661c.362 0 .66-.298.66-.66V2.721a.663.663 0 00-.66-.655zm-.659 24.493H7.855V3.386h32.342v23.173z"
}), React.createElement("path", {
  d: "M30.67 24.148h7.521l-8.092-10.303-3.76 4.788-6.073-7.734L9.861 24.148H30.67zM32.949 13.41c2.1-.003 3.827-1.731 3.827-3.831 0-2.101-1.729-3.83-3.831-3.83a3.848 3.848 0 00-3.83 3.83 3.854 3.854 0 003.834 3.831zm0-6.341a2.523 2.523 0 012.507 2.51 2.523 2.523 0 01-2.511 2.511 2.523 2.523 0 01-2.51-2.511 2.524 2.524 0 012.512-2.51h.002zM14.706 28.741H6.631a.16.16 0 00-.158.159v5.876c0 .087.072.158.158.158h8.075a.159.159 0 00.158-.158v-5.878a.16.16 0 00-.158-.157zm-.159 5.875H6.79v-5.558h7.757v5.558z"
}), React.createElement("path", {
  d: "M12.262 34.038h1.804l-1.941-2.471-.902 1.148-1.456-1.855-2.496 3.178h4.991zM12.809 31.462a.923.923 0 00.918-.919.923.923 0 00-.919-.918.923.923 0 00-.919.918.924.924 0 00.92.919zm0-1.521c.33.001.601.273.601.602a.605.605 0 01-.602.603.605.605 0 01-.602-.603c0-.33.272-.602.602-.602h.001z"
}), React.createElement("g", null, React.createElement("path", {
  d: "M23.535 28.741H15.46a.16.16 0 00-.158.159v5.876c0 .087.072.158.158.158h8.075a.159.159 0 00.158-.158v-5.878a.16.16 0 00-.158-.157zm-.158 5.875h-7.758v-5.558h7.758v5.558z"
}), React.createElement("path", {
  d: "M21.091 34.038h1.804l-1.941-2.471-.902 1.148-1.456-1.855-2.496 3.178h4.991zM21.638 31.462a.923.923 0 00.918-.919.923.923 0 00-.919-.918.923.923 0 00-.919.918.924.924 0 00.92.919zm0-1.521c.33.001.601.273.601.602a.605.605 0 01-.602.603.605.605 0 01-.602-.603c0-.33.272-.602.602-.602h.001z"
})), React.createElement("g", null, React.createElement("path", {
  d: "M32.452 28.741h-8.074a.16.16 0 00-.158.159v5.876c0 .087.071.158.158.158h8.074a.16.16 0 00.159-.158v-5.878a.16.16 0 00-.159-.157zm-.158 5.875h-7.758v-5.558h7.758v5.558z"
}), React.createElement("path", {
  d: "M30.009 34.038h1.804l-1.941-2.471-.902 1.148-1.457-1.855-2.495 3.178h4.991zM30.556 31.462a.923.923 0 00.918-.919.923.923 0 00-.919-.918.923.923 0 00-.919.918.924.924 0 00.92.919zm0-1.521c.33.001.601.273.601.602a.605.605 0 01-.602.603.605.605 0 01-.602-.603c0-.33.272-.602.602-.602h.001z"
})), React.createElement("g", null, React.createElement("path", {
  d: "M41.369 28.741h-8.075a.16.16 0 00-.158.159v5.876c0 .087.072.158.158.158h8.075a.159.159 0 00.158-.158v-5.878a.16.16 0 00-.158-.157zm-.159 5.875h-7.757v-5.558h7.757v5.558z"
}), React.createElement("path", {
  d: "M38.925 34.038h1.804l-1.941-2.471-.902 1.148-1.456-1.855-2.496 3.178h4.991zM39.472 31.462a.923.923 0 00.918-.919.923.923 0 00-.919-.918.923.923 0 00-.919.918.924.924 0 00.92.919zm0-1.521c.33.001.601.273.601.602a.605.605 0 01-.602.603.605.605 0 01-.602-.603c0-.33.272-.602.602-.602h.001z"
}))));
icons.formBlock = React.createElement("svg", {
  viewBox: "0 0 48 48",
  fillRule: "evenodd",
  clipRule: "evenodd",
  strokeLinejoin: "round",
  width: "20px",
  height: "20px",
  strokeMiterlimit: "2"
}, React.createElement("path", {
  d: "M45.073 15.23l.052.002.051.003.05.005.05.005.05.007.05.009.049.009.048.011.049.011.047.013.048.014.046.015.047.017.045.017.045.019.045.019.044.021.044.021.042.023.043.024.041.024.041.026.041.026.039.028.039.028.038.029.038.031.036.031.036.032.035.032.035.034.033.034.033.035.032.036.031.037.03.037.03.039.028.039.027.039.027.04.025.041.025.042.024.042.022.043.022.044.021.044.019.044.019.045.017.046.016.046.015.047.014.047.013.048.012.048.011.049.009.049.008.049.007.05.006.051.005.05.003.051.002.051v16.075l-.002.051-.003.051-.005.051-.006.05-.007.05-.008.05-.009.049-.011.048-.012.049-.013.047-.014.048-.015.046-.016.047-.017.045-.019.045-.019.045-.021.044-.022.044-.022.042-.024.043-.025.041-.025.041-.027.04-.027.04-.028.039-.03.038-.03.038-.031.036-.032.036-.033.035-.033.035-.035.033-.035.033-.036.032-.036.031-.038.03-.038.029-.039.029-.039.027-.041.027-.041.025-.041.025-.043.024-.042.022-.044.022-.044.02-.045.02-.045.018-.045.018-.047.016-.046.015-.048.014-.047.013-.049.012-.048.011-.049.009-.05.008-.05.007-.05.006-.05.005-.051.003-.052.002H2.975l-.052-.002-.051-.003-.05-.005-.051-.006-.049-.007-.05-.008-.049-.009-.049-.011-.048-.012-.048-.013-.047-.014-.047-.015-.046-.016-.046-.018-.045-.018-.044-.02-.044-.02-.044-.022-.043-.022-.042-.024-.042-.025-.04-.025-.041-.027-.039-.027-.039-.029-.038-.029-.038-.03-.037-.031-.036-.032-.035-.033-.034-.033-.034-.035-.032-.035-.032-.036-.031-.036-.03-.038-.03-.038-.028-.039-.028-.04-.026-.04-.026-.041-.024-.041-.024-.043-.023-.042-.021-.044-.021-.044-.019-.045-.019-.045-.017-.045-.016-.047-.016-.046-.014-.048-.013-.047-.011-.049-.011-.048-.009-.049-.009-.05-.007-.05-.005-.05-.005-.051-.003-.051-.002-.051-.001-.052V17.231l.001-.052.002-.051.003-.051.005-.05.005-.051.007-.05.009-.049.009-.049.011-.049.011-.048.013-.048.014-.047.016-.047.016-.046.017-.046.019-.045.019-.044.021-.044.021-.044.023-.043.024-.042.024-.042.026-.041.026-.04.028-.039.028-.039.03-.039.03-.037.031-.037.032-.036.032-.035.034-.034.034-.034.035-.032.036-.032.037-.031.038-.031.038-.029.039-.028.039-.028.041-.026.04-.026.042-.024.042-.024.043-.023.044-.021.044-.021.044-.019.045-.019.046-.017.046-.017.047-.015.047-.014.048-.013.048-.011.049-.011.049-.009.05-.009.049-.007.051-.005.05-.005.051-.003.052-.002.051-.001h41.996l.051.001zM3.524 17.729v14.975h40.999V17.729H3.524zM46.281 5.839l.04.003.039.005.038.007.038.008.037.011.037.012.035.014.035.016.034.017.032.019.032.021.031.021.03.024.028.024.027.026.026.027.025.029.023.029.022.031.02.032.019.033.017.033.016.035.014.036.012.036.011.037.009.038.006.038.005.04.003.039.001.041v6.244l-.001.041-.003.039-.005.04-.006.038-.009.038-.011.037-.012.036-.014.036-.016.035-.017.033-.019.033-.02.032-.022.031-.023.029-.025.029-.026.027-.027.026-.028.024-.03.024-.031.021-.032.021-.032.019-.034.017-.035.016-.035.014-.037.012-.037.01-.038.009-.038.007-.039.005-.04.003-.04.001H1.807l-.04-.001-.04-.003-.039-.005-.039-.007-.037-.009-.038-.01-.036-.012-.035-.014-.035-.016-.034-.017-.033-.019-.031-.021-.031-.021-.03-.024-.028-.024-.027-.026-.026-.027-.025-.029-.023-.029-.022-.031-.02-.032-.019-.033-.017-.033-.016-.035-.014-.036-.012-.036-.011-.037-.009-.038-.007-.038-.005-.04-.003-.039-.001-.041V6.621l.001-.041.003-.039.005-.04.007-.038.009-.038.011-.037.012-.036.014-.036.016-.035.017-.033.019-.033.02-.032.022-.031.023-.029.025-.029.026-.027.027-.026.028-.024.03-.024.031-.021.031-.021.033-.019.034-.017.035-.016.035-.014.036-.012.038-.011.037-.008.039-.007.039-.005.04-.003.04-.001h44.434l.04.001zM3.524 8.338v2.81h40.999v-2.81H3.524zM22.012 38.096c0-.748-.607-1.355-1.355-1.355H2.332c-.748 0-1.355.607-1.355 1.355v2.711c0 .748.607 1.355 1.355 1.355h18.325c.748 0 1.355-.607 1.355-1.355v-2.711z",
  fill: "#179cd4"
}));
var _default = icons;
exports.default = _default;

},{}],55:[function(require,module,exports){
"use strict";

require("./blocks/accordion/index.js");

require("./blocks/accordion-item/index.js");

require("./blocks/card/index.js");

require("./blocks/infobox/index.js");

require("./blocks/call-to-action/index.js");

require("./blocks/icon-grid-container/index.js");

require("./blocks/icon-grid-item/index.js");

require("./blocks/icon-link/index.js");

require("./blocks/infographic/index.js");

require("./blocks/accordion-bootstrap/index.js");

require("./blocks/pane/index.js");

require("./blocks/advanced-btn/index.js");

require("./blocks/jumbotron/index.js");

require("./blocks/link-cards/index.js");

require("./blocks/section-wrap/index.js");

require("./blocks/infobox-bootstrap/index.js");

require("./blocks/tab/index.js");

require("./blocks/tabs/block.js");

require("./config/styles");

var _svgicons = _interopRequireDefault(require("./svgicons"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

},{"./blocks/accordion-bootstrap/index.js":2,"./blocks/accordion-item/index.js":6,"./blocks/accordion/index.js":8,"./blocks/advanced-btn/index.js":10,"./blocks/call-to-action/index.js":13,"./blocks/card/index.js":17,"./blocks/icon-grid-container/index.js":19,"./blocks/icon-grid-item/index.js":23,"./blocks/icon-link/index.js":27,"./blocks/infobox-bootstrap/index.js":29,"./blocks/infobox/index.js":33,"./blocks/infographic/index.js":36,"./blocks/jumbotron/index.js":38,"./blocks/link-cards/index.js":40,"./blocks/pane/index.js":42,"./blocks/section-wrap/index.js":44,"./blocks/tab/index.js":46,"./blocks/tabs/block.js":48,"./config/styles":51,"./svgicons":56}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("./icons"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const Ico = {};
Ico['si_beebe'] = React.createElement("svg", {
  width: "160px",
  height: "55px",
  viewBox: "0 0 160 55",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("defs", null, React.createElement("polygon", {
  points: "0 53.9388235 159.241763 53.9388235 159.241763 0 0 0"
})), React.createElement("path", {
  d: "M24.5533288,25.0776275 C24.8196339,24.6786078 25.2513627,24.6570392 25.6033627,24.5055196 C27.0260068,23.8935098 28.3645831,23.1456176 29.5740746,22.1761078 C35.8845831,17.1236569 35.5982102,8.28645098 28.9758373,3.65620588 C26.5628203,1.969 23.8466169,1.08630392 20.9742102,0.57404902 L18.5161763,0.133509804 C18.2363119,0.854980392 18.5074983,1.79051961 17.6321085,2.28498039 C17.2584136,2.49635294 17.6380746,2.66404902 17.7465492,2.78213725 C19.1279729,4.27846078 19.6014644,6.08860784 19.7923797,8.06159804 C19.9377356,9.559 20.5327186,10.8671373 21.6955661,11.9903235 C22.8144814,13.0719902 23.6736,14.4254216 24.6037695,15.6898824 C24.8966508,16.0878235 25.2220746,16.6173333 24.6970576,17.0627255 C24.1281085,17.5447843 23.4989559,17.4358627 22.9891254,16.9381667 C21.7818034,15.7578235 20.6070237,14.5451275 19.4083797,13.3561569 C19.1865492,13.1361569 19.0178712,12.6028725 18.6034983,12.9479706 C18.3013966,13.1992451 18.5026169,13.6074314 18.7005831,13.9169412 C20.1291932,16.1498333 20.6346847,18.8027745 22.0220746,21.0680196 C22.453261,21.7722353 22.8871593,22.9272353 21.7465492,23.4276275 C20.6005153,23.9312549 20.1883119,22.8727745 19.8200407,22.0413039 C19.3432949,20.9671863 18.6376678,20.0041471 18.3030237,18.8588529 C18.1961763,18.4932647 17.9748881,18.151402 17.3430237,18.0236078 C17.9065492,19.7162059 18.4256,21.3106667 18.9696,22.8970392 C19.2624814,23.7538529 19.7641763,24.6656667 18.6837695,25.2938529 C17.826278,25.7926275 16.9617356,25.2000294 16.3938712,23.9037549 C15.3210576,21.451402 14.5536,18.8987549 13.8197695,16.3331667 C13.7291932,16.0188039 13.7709559,15.4833627 13.2898712,15.6127745 C12.9058712,15.7157647 13.1933288,16.159 13.2453966,16.4388529 C13.693939,18.8728725 13.3988881,21.376451 13.9770576,23.8029216 C14.1413966,24.4947353 13.8962441,25.1849314 13.0425492,25.3148824 C12.2279051,25.4383627 11.8650576,24.9018431 11.5911593,24.2170392 C11.0151593,22.7751765 10.7233627,21.2545882 10.7038373,19.7399314 C10.6637017,16.6588529 9.39237966,13.8543922 8.89448136,10.8827745 C8.80336271,10.3408627 8.54193898,9.72777451 7.96810847,9.61184314 C7.38397288,9.49267647 6.95821017,10.0070882 6.64200678,10.4535588 C6.23414237,11.0294412 5.91631186,11.6673333 5.53610847,12.2626275 C4.83265085,13.3599314 3.94912542,14.2183627 2.56824407,14.3903725 C2.06275254,14.4534608 1.59631186,14.3612549 1.30180339,13.9352745 C0.951430508,13.428951 1.49271864,13.1895392 1.69882034,12.8449804 C2.77705763,11.0369902 3.99576949,9.32282353 5.00512542,7.46145098 C6.0936678,5.4544902 7.18709153,3.36341176 9.24865085,2.06228431 C9.93475254,1.62929412 10.4337356,1.0442451 10.2081085,0.133509804 C8.70465085,0.133509804 1.44119322,0.895421569 0.000108474576,1.07767647 L0.000108474576,53.4700294 C2.04810847,53.6129216 4.09502373,53.7628235 6.1435661,53.8927745 C6.51183729,53.9159608 6.92078644,54.0610098 7.1816678,53.5843431 C8.42858305,51.3066961 9.47210847,49.0236569 8.62221017,46.3076275 C8.04783729,44.4732157 7.59658305,42.5994412 7.13665085,40.728902 C6.5975322,38.5359118 6.06980339,36.3218922 5.09515932,34.2577745 C4.90315932,33.8522843 4.68295593,33.4565 5.18736271,33.1248824 C5.63970169,32.8266961 6.00743051,33.0294412 6.35183729,33.3465 C7.06993898,34.0086569 7.41922712,34.8908137 7.82275254,35.7443922 C8.12322712,36.3817451 8.30329492,37.1053725 8.97800678,37.6095392 C9.09190508,37.0616961 8.91943051,36.6524314 8.85868475,36.2291471 C8.56851525,34.2108627 8.2756339,32.1925784 8.03861695,30.1683627 C7.96810847,29.5644412 7.90410847,28.796598 8.83048136,28.7399804 C9.67387119,28.6882157 9.84526102,29.3525294 9.93095593,30.0049804 C10.1186169,31.4425294 10.3534644,32.8692941 10.8296678,34.2561569 C11.0053966,32.2993431 10.7992949,30.3657157 10.5297356,28.4277745 C10.4364475,27.7591471 10.2623458,26.9179706 11.2722441,26.7222353 C12.2170576,26.5394412 12.6661424,27.1147843 12.8082441,27.9543431 C13.232922,30.4606176 13.6353627,32.9695882 14.0622102,35.5729216 C13.9607864,33.1917451 14.4597695,30.9124804 14.2992271,28.5992451 C14.2618034,28.0627255 14.2200407,27.5305196 14.8746847,27.3536569 C15.5900746,27.1611569 15.9762441,27.5558627 16.2176,28.1851275 C16.7279729,29.5159118 17.0702102,30.8785098 17.141261,32.3068922 C17.2361763,34.2275784 17.1776,36.1601275 17.5713627,38.056549 C17.7064136,38.7057647 17.7774644,39.4153725 18.6273627,39.821402 C18.7287864,38.4388529 19.1344814,37.3065 19.8520407,36.2933137 C20.3466847,35.5966471 20.9351593,35.0417941 21.8702102,35.0250784 C22.7032949,35.0110588 23.0927186,35.3211078 22.7287864,36.1741471 C22.2775322,37.2304706 22.1354305,38.3757647 21.7752949,39.4498824 C21.2985492,40.8717941 21.378278,42.3993922 20.7632271,43.7943431 C19.8439051,45.8800294 19.0384814,48.0093922 17.4466169,49.7305686 C16.9112949,50.3102255 16.6997695,51.0942451 16.4958373,51.8658627 C15.957261,53.8987059 15.9404475,53.9175784 18.0670915,53.6900294 C22.2238373,53.2446373 26.2797017,52.4347353 29.8707525,50.1376765 C37.9607864,44.9622843 39.1079051,32.0712549 28.853261,26.7443431 C27.4832271,26.0325784 26.0405153,25.521402 24.5533288,25.0776275 Z",
  fill: "#2E358E"
}), React.createElement("path", {
  d: "M79.9027525,17.5410637 C79.9027525,15.8285147 79.1575322,12.9588088 75.8989559,12.9588088 C72.9197017,12.9588088 71.7096678,15.6435637 71.5230915,17.5410637 L79.9027525,17.5410637 Z M71.5697356,22.3546422 C71.8024136,25.2701814 74.688922,26.6586618 77.9936,26.6586618 C80.4147525,26.6586618 82.3700068,26.3345931 84.2786169,25.7328284 L85.2098712,30.5000343 C82.8820068,31.4258676 80.0421424,31.8885147 76.9696,31.8885147 C69.2424136,31.8885147 64.8193627,27.4453775 64.8193627,20.3643971 C64.8193627,14.6255245 68.4044475,8.28434804 76.3182102,8.28434804 C83.6738712,8.28434804 86.4665492,13.9773873 86.4665492,19.5776814 C86.4665492,20.7806716 86.3271593,21.8450833 86.2338712,22.3546422 L71.5697356,22.3546422 Z",
  fill: "#2E3092"
}), React.createElement("path", {
  d: "M102.619932,17.5410637 C102.619932,15.8285147 101.874712,12.9588088 98.6155932,12.9588088 C95.636339,12.9588088 94.4263051,15.6435637 94.2402712,17.5410637 L102.619932,17.5410637 Z M94.2869153,22.3546422 C94.5190508,25.2701814 97.4055593,26.6586618 100.71078,26.6586618 C103.13139,26.6586618 105.087186,26.3345931 106.995254,25.7328284 L107.926508,30.5000343 C105.599186,31.4258676 102.759322,31.8885147 99.6867797,31.8885147 C91.9590508,31.8885147 87.5365424,27.4453775 87.5365424,20.3643971 C87.5365424,14.6255245 91.1210847,8.28434804 99.0353898,8.28434804 C106.390508,8.28434804 109.183729,13.9773873 109.183729,19.5776814 C109.183729,20.7806716 109.044339,21.8450833 108.951051,22.3546422 L94.2869153,22.3546422 Z",
  fill: "#2E3092"
}), React.createElement("path", {
  d: "M122.916014,26.3809657 C120.868014,26.3809657 119.238183,24.9461127 118.772827,23.0486127 C118.679539,22.6781716 118.633437,22.2618971 118.633437,21.7987108 L118.633437,18.4668971 C118.633437,18.0037108 118.679539,17.5874363 118.772827,17.1706225 C119.238183,15.1345441 121.006861,13.6996912 122.916014,13.6996912 C126.221776,13.6996912 127.80442,16.476652 127.80442,19.9939559 C127.80442,24.066652 125.941912,26.3809657 122.916014,26.3809657 M125.616488,8.28434804 C122.450658,8.28434804 120.076692,9.53425 118.726183,11.4781225 L118.633437,11.4781225 L118.633437,0.623710784 L111.371064,0.729397059 L111.557098,24.6684167 C111.557098,27.2140539 111.464353,29.9446422 111.371064,31.4258676 L117.376217,31.4258676 L117.655539,28.2784657 L117.748827,28.2784657 C119.378115,30.9632206 121.938115,31.9348873 124.591946,31.9348873 C129.805776,31.9348873 135.019607,27.8621912 135.019607,19.7162598 C135.066251,12.7738578 131.062997,8.28434804 125.616488,8.28434804",
  fill: "#2E3092"
}), React.createElement("path", {
  d: "M151.450956,17.5410637 C151.450956,15.8285147 150.706278,12.9588088 147.447159,12.9588088 C144.467905,12.9588088 143.257871,15.6435637 143.071837,17.5410637 L151.450956,17.5410637 Z M143.117939,22.3546422 C143.350617,25.2701814 146.237125,26.6586618 149.541803,26.6586618 C151.962956,26.6586618 153.91821,26.3345931 155.82682,25.7328284 L156.758075,30.5000343 C154.43021,31.4258676 151.590888,31.8885147 148.518346,31.8885147 C140.790617,31.8885147 136.367566,27.4453775 136.367566,20.3643971 C136.367566,14.6255245 139.952651,8.28434804 147.866414,8.28434804 C155.222075,8.28434804 158.015295,13.9773873 158.015295,19.5776814 C158.015295,20.7806716 157.875363,21.8450833 157.782617,22.3546422 L143.117939,22.3546422 Z",
  fill: "#2E3092"
}), React.createElement("path", {
  d: "M49.5984814,26.5197598 C48.3884475,26.5197598 47.5504814,26.5197598 46.8519051,26.4275539 L46.8519051,17.6340245 L49.2725153,17.6340245 C52.8104136,17.6340245 55.650278,18.8833873 55.650278,22.03025 C55.650278,25.3167696 52.8104136,26.5197598 49.5984814,26.5197598 Z M46.8519051,5.32265196 C47.4571932,5.22990686 48.3418034,5.13770098 49.8778034,5.13770098 C53.0897356,5.13770098 54.9056,6.38706373 54.9056,8.74775 C54.9056,11.0615245 52.9037017,12.5891225 49.1797695,12.5891225 L46.8519051,12.5891225 L46.8519051,5.32265196 Z M56.8608542,14.625201 L56.8608542,14.5329951 C60.3987525,13.2367206 62.0280407,10.64525 62.0280407,7.86828922 C62.0280407,5.04495588 60.4453966,2.91613235 58.2574644,1.75897549 C55.9762441,0.416867647 53.3229559,5.39215686e-05 48.9931932,5.39215686e-05 C45.4552949,5.39215686e-05 41.6841763,0.27775 39.8222102,0.648191176 L39.8222102,31.2869657 C41.4053966,31.5188284 44.0120407,31.750152 47.5038373,31.750152 C53.7416678,31.750152 57.5588881,30.7315735 59.8401085,28.9262794 C61.7953627,27.352848 63.0992271,25.1312794 63.0992271,22.3079461 C63.0992271,18.2816225 60.4453966,15.5974069 56.8608542,14.625201 Z",
  fill: "#2E3092"
}), React.createElement("polygon", {
  fill: "#FEC122",
  points: "43.6069424 34.562701 43.6069424 41.8884853 50.7483661 41.8884853 50.7483661 34.562701 55.0732475 34.562701 55.0732475 53.62775 50.7483661 53.62775 50.7483661 45.6505931 43.6069424 45.6505931 43.6069424 53.62775 39.2538576 53.62775 39.2538576 34.562701"
}), React.createElement("path", {
  d: "M60.224,45.1416275 C60.3378983,43.9823137 61.0776949,42.3414804 62.8984407,42.3414804 C64.8905763,42.3414804 65.3456271,44.0950098 65.3456271,45.1416275 L60.224,45.1416275 Z M69.3570169,46.3866765 C69.3570169,42.9637353 67.6501695,39.4847157 63.1549831,39.4847157 C58.3181017,39.4847157 56.1269153,43.3595196 56.1269153,46.8671176 C56.1269153,51.195402 58.8301017,53.9103529 63.5530847,53.9103529 C65.4307797,53.9103529 67.1663729,53.6278039 68.5890169,53.0616275 L68.0200678,50.1482451 C66.8534237,50.5159902 65.6585763,50.7138824 64.1789831,50.7138824 C62.1586441,50.7138824 60.3948475,49.8656961 60.2527458,48.0835882 L69.2149153,48.0835882 C69.2718644,47.7724608 69.3570169,47.1216275 69.3570169,46.3866765 Z",
  fill: "#FEC122"
}), React.createElement("path", {
  d: "M77.6376949,47.0933725 C75.3613559,47.0653333 73.5975593,47.6023922 73.5975593,49.2718039 C73.5975593,50.3745 74.3373559,50.912098 75.3044068,50.912098 C76.3858983,50.912098 77.2677966,50.2051863 77.552,49.3278824 C77.6094915,49.101951 77.6376949,48.8474412 77.6376949,48.5923922 L77.6376949,47.0933725 Z M78.1496949,53.6275882 L77.8936949,52.2412647 L77.8085424,52.2412647 C76.8978983,53.3445 75.4752542,53.9387157 73.8253559,53.9387157 C71.0082712,53.9387157 69.3296271,51.902098 69.3296271,49.6956275 C69.3296271,46.1033725 72.5735593,44.3778824 77.4955932,44.4064608 L77.4955932,44.2080294 C77.4955932,43.4730784 77.0969492,42.4264608 74.9632542,42.4264608 C73.5406102,42.4264608 72.0328136,42.906902 71.1221695,43.4730784 L70.3254237,40.7009706 C71.2930169,40.1633725 73.1989153,39.4845 75.7312542,39.4845 C80.3690847,39.4845 81.848678,42.1999902 81.848678,45.4530784 L81.848678,50.2612647 C81.848678,51.5909706 81.9056271,52.8640588 82.0477288,53.6275882 L78.1496949,53.6275882 Z",
  fill: "#FEC122"
}), React.createElement("mask", {
  fill: "white"
}, React.createElement("use", {
  "xlink:href": "#path-1"
})), React.createElement("polygon", {
  fill: "#FEC122",
  mask: "url(#mask-2)",
  points: "83.5568814 53.6276961 87.8812203 53.6276961 87.8812203 33.5440686 83.5568814 33.5440686"
}), React.createElement("path", {
  d: "M94.5108068,35.8356814 L94.5108068,39.7956814 L97.6120949,39.7956814 L97.6120949,42.9635735 L94.5108068,42.9635735 L94.5108068,47.9701912 C94.5108068,49.6390637 94.9089085,50.4031324 96.2176542,50.4031324 C96.7584,50.4031324 97.1857898,50.3465147 97.498739,50.2898971 L97.5269424,53.5429853 C96.9579932,53.7689167 95.9334508,53.9107304 94.7098576,53.9107304 C93.3159593,53.9107304 92.1493153,53.42975 91.4664678,52.722299 C90.669722,51.902152 90.2716203,50.5729853 90.2716203,48.6204853 L90.2716203,42.9635735 L88.4221288,42.9635735 L88.4221288,39.7956814 L90.2716203,39.7956814 L90.2716203,36.7971029 L94.5108068,35.8356814 Z",
  fill: "#FEC122",
  mask: "url(#mask-2)"
}), React.createElement("path", {
  d: "M98.4091119,33.5442843 L102.733993,33.5442843 L102.733993,41.4362451 L102.7904,41.4362451 C103.245993,40.8420294 103.814942,40.3896275 104.49779,40.0218824 C105.123688,39.6827157 105.948637,39.4848235 106.745383,39.4848235 C109.504976,39.4848235 111.61101,41.3796275 111.61101,45.5375196 L111.61101,53.6279118 L107.285586,53.6279118 L107.285586,46.0185 C107.285586,44.2083529 106.660231,42.9638431 105.038536,42.9638431 C103.900095,42.9638431 103.189044,43.6993333 102.875553,44.4628627 C102.761654,44.7454118 102.733993,45.1136961 102.733993,45.4248235 L102.733993,53.6279118 L98.4091119,53.6279118 L98.4091119,33.5442843 Z",
  fill: "#FEC122",
  mask: "url(#mask-2)"
}), React.createElement("path", {
  d: "M123.817492,53.2880441 C123.049492,53.62775 121.598102,53.910299 119.948203,53.910299 C115.452475,53.910299 112.578983,51.195348 112.578983,46.8390245 C112.578983,42.7938284 115.367322,39.4846618 120.545898,39.4846618 C121.683254,39.4846618 122.935593,39.6825539 123.846237,40.0217206 L123.162847,43.2181912 C122.650847,42.9917206 121.882847,42.7938284 120.744949,42.7938284 C118.469153,42.7938284 116.989017,44.4060833 117.017763,46.6691716 C117.017763,49.2148088 118.72461,50.5445147 120.830102,50.5445147 C121.854644,50.5445147 122.650847,50.3746618 123.305492,50.120152 L123.817492,53.2880441 Z",
  fill: "#FEC122",
  mask: "url(#mask-2)"
}), React.createElement("path", {
  d: "M132.011878,47.0933725 C129.736081,47.0653333 127.971742,47.6023922 127.971742,49.2718039 C127.971742,50.3745 128.711539,50.912098 129.67859,50.912098 C130.760081,50.912098 131.64198,50.2051863 131.926725,49.3278824 C131.983675,49.101951 132.011878,48.8474412 132.011878,48.5923922 L132.011878,47.0933725 Z M132.523878,53.6275882 L132.26842,52.2412647 L132.182183,52.2412647 C131.272624,53.3445 129.84998,53.9387157 128.199539,53.9387157 C125.382454,53.9387157 123.704353,51.902098 123.704353,49.6956275 C123.704353,46.1033725 126.9472,44.3778824 131.869234,44.4064608 L131.869234,44.2080294 C131.869234,43.4730784 131.471132,42.4264608 129.337437,42.4264608 C127.914793,42.4264608 126.406997,42.906902 125.496353,43.4730784 L124.700149,40.7009706 C125.6672,40.1633725 127.573098,39.4845 130.105437,39.4845 C134.743268,39.4845 136.222861,42.1999902 136.222861,45.4530784 L136.222861,50.2612647 C136.222861,51.5909706 136.27981,52.8640588 136.421912,53.6275882 L132.523878,53.6275882 Z",
  fill: "#FEC122",
  mask: "url(#mask-2)"
}), React.createElement("path", {
  d: "M137.930847,44.3498971 C137.930847,42.3132794 137.873898,40.9835735 137.816949,39.7956814 L141.544136,39.7956814 L141.686237,42.3413186 L141.800136,42.3413186 C142.511186,40.3332794 144.218576,39.4845539 145.556068,39.4845539 C145.954169,39.4845539 146.15322,39.4845539 146.466169,39.5411716 L146.466169,43.5858284 C146.15322,43.5292108 145.783864,43.4731324 145.300068,43.4731324 C143.706034,43.4731324 142.625085,44.3213186 142.340881,45.6510245 C142.28339,45.9341127 142.255729,46.2727402 142.255729,46.6124461 L142.255729,53.6276422 L137.930847,53.6276422 L137.930847,44.3498971 Z",
  fill: "#FEC122",
  mask: "url(#mask-2)"
}), React.createElement("path", {
  d: "M155.230102,45.1416275 C155.230102,44.0950098 154.774508,42.3414804 152.782915,42.3414804 C150.962169,42.3414804 150.222915,43.9823137 150.109017,45.1416275 L155.230102,45.1416275 Z M150.13722,48.0835882 C150.279322,49.8656961 152.043119,50.7138824 154.063458,50.7138824 C155.543051,50.7138824 156.737898,50.5159902 157.904542,50.1482451 L158.473492,53.0616275 C157.050847,53.6278039 155.315254,53.9103529 153.437559,53.9103529 C148.714576,53.9103529 146.011932,51.195402 146.011932,46.8671176 C146.011932,43.3595196 148.202576,39.4847157 153.039458,39.4847157 C157.534644,39.4847157 159.241492,42.9637353 159.241492,46.3866765 C159.241492,47.1216275 159.156339,47.7724608 159.09939,48.0835882 L150.13722,48.0835882 Z",
  fill: "#FEC122",
  mask: "url(#mask-2)"
}));
Ico['si_blood-vessel'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M35.9073871,-5.00000432e-08 C37.6245484,-5.00000432e-08 39.0214839,1.39693544 39.0215807,3.11409673 L39.0215807,44.8164194 C39.0215807,46.5335807 37.6246452,47.9305162 35.9074839,47.9305162 L34.1869355,47.9305162 C32.4697742,47.9305162 31.0728387,46.5335807 31.0728387,44.8164194 L31.0728387,20.9614839 C30.6505161,21.4160323 30.0475161,21.9713226 29.2164194,22.5485806 C28.9565807,22.7289677 28.6876452,22.8989032 28.4141613,23.0551935 C28.4711613,24.0087097 28.442129,25.3839677 28.0623871,26.9240323 C27.7824194,28.0593871 27.3438387,29.1370645 26.757871,30.1297742 C27.0530323,31.7143549 27.5908065,36.294871 24.6352258,38.8380968 C24.3324194,39.0985162 23.9459032,39.2420323 23.5469032,39.2420323 C23.0599355,39.2420323 22.5985161,39.0303871 22.2810968,38.6615807 C21.9901935,38.3235484 21.8484194,37.8925162 21.8817097,37.4478387 C21.915,37.0031613 22.1195806,36.5980645 22.4576129,36.3072581 C23.2049032,35.6641936 23.5077097,34.6087742 23.6123226,33.6277742 C22.8571935,34.1981613 22.0177742,34.705742 21.1066452,35.1424839 C20.8792258,35.2515484 20.6367097,35.3068065 20.3859677,35.3068065 C19.7470645,35.3068065 19.155871,34.9347097 18.8797742,34.3587097 C18.6574839,33.8950645 18.6684193,33.3676452 18.8764839,32.9245161 C16.911871,32.5653871 16.1713548,32.198129 15.7044193,31.7670968 C15.3737419,31.461871 15.1762258,31.0955807 15.133258,30.7078065 C15.0871935,30.2927419 15.2298387,29.882129 15.534871,29.5517419 C15.790258,29.2750645 16.1587742,28.9574516 16.7459032,28.9574516 C17.0356451,28.9574516 17.3654516,29.031871 17.7828387,29.1914516 C18.3823548,29.3669032 20.3431935,29.844 22.62,30.0694839 C24.6066774,28.0543548 25.0479677,25.6681936 25.1009032,24.1710968 C24.8424194,24.1985806 24.584129,24.2125161 24.3286452,24.2125161 C23.4782903,24.2125161 22.6282258,24.0610645 21.7992581,23.7620323 C20.7362903,24.2294516 18.4586129,25.4035161 17.1155806,27.357 C16.8040645,27.8100968 16.2894193,28.0806774 15.738871,28.0806774 C15.738871,28.0806774 15.7386774,28.0806774 15.7385806,28.0806774 C15.4004516,28.0806774 15.0739355,27.9790645 14.794258,27.786871 C14.4269032,27.5341936 14.1797419,27.1536774 14.0985484,26.7151936 C14.0174516,26.2767097 14.1118064,25.8329032 14.3644839,25.4654516 C15.474,23.8517419 16.9844516,22.6698387 18.2204516,21.8903226 C17.5505806,21.4678064 16.8807097,21.0076452 16.2210968,20.5164193 C15.6242903,20.6381613 14.608258,20.8030645 13.4840322,20.8030645 C11.8261935,20.8030645 10.5118064,20.4476129 9.57716126,19.7466774 C9.22045158,19.4791935 8.98916126,19.0887097 8.92616126,18.6473226 C8.86306448,18.2059355 8.97570965,17.7662903 9.24329029,17.4095806 C9.57687094,16.9648064 10.0118709,16.7296451 10.5010645,16.7296451 C10.831258,16.7296451 11.1816774,16.8376451 11.5425484,17.0505484 C11.8024838,17.2039355 12.1669355,17.3206451 12.5859677,17.390129 C12.104129,16.9112903 11.8259032,16.6012258 11.7836129,16.5537097 C11.4871935,16.2209032 11.3379677,15.7923871 11.3638064,15.3472258 C11.3895484,14.9020645 11.5870645,14.4935806 11.9200645,14.1969677 C12.2261613,13.9243548 12.6203226,13.774258 13.0298709,13.774258 C13.5059032,13.774258 13.9604516,13.9779677 14.2769032,14.3333226 C14.2896774,14.3476451 15.4891935,15.6780968 17.4243871,17.2224193 C17.3094193,16.3956774 17.0084516,15.5225806 16.5250645,14.6162903 C16.0919032,13.804258 16.4002258,12.7910322 17.2123548,12.3577742 C17.4537097,12.2291613 17.724871,12.1612258 17.9969032,12.1612258 C18.6152903,12.1612258 19.1801613,12.4999355 19.4709677,13.0451613 C20.9339032,15.7882258 20.9531613,18.0101613 20.6640968,19.469129 C21.2838387,19.8345484 21.9044516,20.1631935 22.5124839,20.4479032 C23.1056129,20.7257419 23.7148065,20.8666452 24.323129,20.8666452 C25.277129,20.8666452 26.2656774,20.5215484 27.2614839,19.8410322 C28.4207419,19.0487419 30.4585161,16.6293871 31.072742,15.8634193 L31.072742,3.11409673 C31.072742,1.39693544 32.4696774,-5.00000432e-08 34.1868387,-5.00000432e-08 L35.9073871,-5.00000432e-08 Z M31.8953226,3.11409673 L31.8953226,3.1543548 C31.8953226,4.41793544 32.9232581,5.44587093 34.1868387,5.44587093 L35.9073871,5.44587093 C37.1709678,5.44587093 38.1989033,4.41793544 38.1989033,3.1543548 L38.1989033,3.11409673 C38.1989033,1.85051608 37.1709678,0.822580597 35.9073871,0.822580597 L34.1868387,0.822580597 C32.9232581,0.822580597 31.8953226,1.85051608 31.8953226,3.11409673 Z M38.1989033,44.8163226 L38.1983226,44.8163226 L38.1983226,5.26025803 C37.8050323,5.68790319 37.293871,6.00522577 36.7169033,6.16083867 C36.7173871,6.16925803 36.7194194,6.17719351 36.7194194,6.18570964 L36.7194194,30.4760323 C36.7194194,30.7031613 36.5352581,30.8873226 36.3081291,30.8873226 C36.081,30.8873226 35.8968387,30.7031613 35.8968387,30.4760323 L35.8968387,6.2683548 L34.1862581,6.2683548 C33.2805484,6.2683548 32.4642581,5.87951609 31.894742,5.26025803 L31.894742,16.0065484 C31.894742,16.0913226 31.8686129,16.1740645 31.819742,16.2433548 C31.7997097,16.2718064 29.2292903,19.4917742 27.7250323,20.5198064 C26.5899677,21.2955484 25.4452258,21.6888387 24.3225484,21.6888387 C23.5926774,21.6888387 22.8661935,21.5218064 22.1630323,21.1924839 C21.4460323,20.8566774 20.7132581,20.4628064 19.985129,20.0215161 C19.8318387,19.9286129 19.7562581,19.7470645 19.7985484,19.572871 C20.1150968,18.2664193 20.189129,16.1403871 18.7445806,13.4317742 C18.5970968,13.1551935 18.3103548,12.9833226 17.9963226,12.9833226 C17.8569677,12.9833226 17.7232258,13.0169032 17.598871,13.0831935 C17.187,13.3029677 17.0305161,13.8168387 17.2502903,14.2288064 C17.9740645,15.585871 18.3265161,16.8919355 18.2980645,18.1106129 C18.2943871,18.2647742 18.2049677,18.4038387 18.0662903,18.4710968 C17.9277097,18.5383548 17.763,18.5223871 17.6398064,18.4297742 C15.2135806,16.6063548 13.6776774,14.8976129 13.6624838,14.8805806 C13.5015484,14.6998064 13.2709355,14.5964516 13.0292903,14.5964516 C12.8217097,14.5964516 12.6218709,14.6726129 12.4665484,14.8109032 C12.2976774,14.9612903 12.1974193,15.1685806 12.1843548,15.3943548 C12.1712903,15.6202258 12.2469677,15.8375806 12.3974516,16.0064516 C12.4213548,16.0333548 12.9906774,16.671 13.9620968,17.5700322 C14.0848064,17.6836451 14.1265161,17.8602581 14.0675806,18.0168387 C14.0086451,18.1734193 13.8607742,18.2787097 13.6935484,18.2830645 C12.6780968,18.3102581 11.7285484,18.1154516 11.1239032,17.7588387 C10.8913548,17.6216129 10.6816451,17.5520322 10.5004838,17.5520322 C10.2740322,17.5520322 10.0778709,17.6668064 9.90077416,17.9029355 C9.76509674,18.0839032 9.7079032,18.3069677 9.73993545,18.5308064 C9.77187094,18.7547419 9.88916126,18.9528387 10.070129,19.0885161 C10.859129,19.6801935 12.0076451,19.9802903 13.4834516,19.9802903 C14.6569355,19.9802903 15.7077097,19.7880968 16.2297097,19.6735161 C16.3469032,19.647871 16.4696129,19.6744839 16.5654193,19.7467742 C17.4401613,20.406 18.3341613,21.0094839 19.2223548,21.5405806 C19.3475806,21.6154839 19.4238387,21.7512581 19.4225806,21.8971935 C19.4213226,22.043129 19.3427419,22.1775484 19.2161613,22.2502258 C17.9769677,22.9620968 16.2468387,24.1785484 15.0417097,25.9313226 C14.9135806,26.1176129 14.8657742,26.3428065 14.9069032,26.5651936 C14.948129,26.7875807 15.0734516,26.9806452 15.2598387,27.1087742 C15.4018064,27.2064194 15.5672903,27.258 15.7383871,27.2579032 C16.0180645,27.2579032 16.2793548,27.1205807 16.4373871,26.8907419 C17.9698064,24.6617419 20.5770968,23.3852903 21.6269032,22.9399355 C21.725129,22.8983226 21.8357419,22.8963871 21.9352258,22.9347097 C23.079871,23.375129 24.2612903,23.4973548 25.4464839,23.2923871 C25.5653226,23.2720645 25.6865806,23.3042903 25.7790968,23.3810323 C25.8716129,23.4577742 25.926,23.5712903 25.9278387,23.6914839 C25.9519355,25.2783871 25.6112903,28.311 23.0592581,30.7919032 C22.973129,30.8757097 22.8549677,30.9178065 22.734871,30.9065807 C20.3790968,30.6898065 18.3028064,30.2027419 17.5340322,29.9755161 C17.5233871,29.9724194 17.5129355,29.9688387 17.5026774,29.964871 C17.1796451,29.8403226 16.932,29.7798387 16.7456129,29.7798387 C16.5540968,29.7798387 16.3934516,29.8337419 16.1389355,30.1095484 C15.9939677,30.2665161 15.9305806,30.4373226 15.9505161,30.6170323 C15.9710322,30.8022581 16.0816451,30.996 16.2620322,31.1624516 C16.598129,31.4726129 17.268,31.8419032 19.689,32.2286129 C19.8517742,32.2546452 19.9831935,32.3752258 20.0231613,32.5350968 C20.063129,32.694871 20.0038064,32.8631613 19.8724839,32.9626452 C19.5536129,33.2040968 19.4480322,33.6417097 19.6212581,34.0030645 C19.7612903,34.2953226 20.0613871,34.4841291 20.3856774,34.4841291 C20.5123548,34.4841291 20.6351613,34.4560645 20.7507097,34.4006129 C21.8996129,33.8499678 22.9253226,33.1819355 23.7995806,32.4150968 C23.9212258,32.3084516 24.0940645,32.2829032 24.2411613,32.349871 C24.3883548,32.4168387 24.4826129,32.5638387 24.482129,32.7255484 C24.477871,34.0633549 24.2161935,35.8788387 22.9938387,36.9306774 C22.8223548,37.0781613 22.7186129,37.2836129 22.7016774,37.5091936 C22.6848387,37.7347742 22.7567419,37.9533871 22.9043226,38.124871 C23.0653548,38.3120323 23.2995484,38.4193549 23.5467097,38.4193549 C23.7489677,38.4193549 23.9449355,38.3465807 24.0985161,38.2144839 C26.8209677,35.871871 26.1814839,31.4371936 25.9206774,30.1338387 C25.9003548,30.0326129 25.9189355,29.9274194 25.9726452,29.8392581 C26.5562903,28.8804194 26.9906129,27.8333226 27.2635161,26.7269032 C27.6537097,25.1447419 27.6483871,23.7487742 27.5753226,22.8562258 C27.5620645,22.6933548 27.6463548,22.5379355 27.7902581,22.4605161 C28.1169678,22.2845806 28.4388387,22.086871 28.7469678,21.8728064 C30.2204516,20.8493226 30.9001936,19.9282258 31.1240323,19.5796452 C31.1347742,19.5630968 31.1422258,19.5517742 31.1464839,19.5456774 C31.224871,19.4332258 31.3520323,19.3694516 31.4840323,19.3694516 C31.5250645,19.3694516 31.5665807,19.3756452 31.6072258,19.3884193 C31.7786129,19.4423226 31.8953226,19.601129 31.8953226,19.7808387 L31.8953226,44.8163226 C31.8953226,46.0799033 32.9232581,47.1078388 34.1868387,47.1078388 L35.9073871,47.1078388 C37.1709678,47.1078388 38.1989033,46.0799033 38.1989033,44.8163226 Z M36.3087097,32.5465161 C36.5358387,32.5465161 36.72,32.7306774 36.72,32.9578065 L36.72,38.6045807 C36.72,38.8317097 36.5358387,39.015871 36.3087097,39.015871 C36.0815807,39.015871 35.8974194,38.8317097 35.8974194,38.6045807 L35.8974194,32.9578065 C35.8974194,32.7306774 36.0815807,32.5465161 36.3087097,32.5465161 Z"
}));
Ico['si_butterfly'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M10.2301276,10.6978723 C15.880851,10.6978723 20.4612766,15.2772766 20.4602553,20.9290213 C20.4602553,23.7640851 20.3530213,31.4839149 20.3530213,33.8062979 C20.3530213,37.6197447 17.2626383,40.7101277 13.4491915,40.7101277 C9.63676593,40.7101277 6.54536167,37.6187234 6.54536167,33.8062979 C6.54536167,32.6961702 6.81293613,31.650383 7.27863826,30.7210213 C3.06791485,29.4546383 -5.00000059e-08,25.5513192 -5.00000059e-08,20.928 C-5.00000059e-08,15.2772766 4.58042549,10.6978723 10.2301276,10.6978723 Z M47.2881703,20.9269787 C47.2881703,25.5513192 44.2202554,29.4525958 40.0095319,30.7189787 C40.4742128,31.6514043 40.7417873,32.6941277 40.7417873,33.8042553 C40.7417873,37.6177022 37.6524256,40.7080851 33.8379575,40.7080851 C30.0234894,40.7080851 26.9341277,37.6166809 26.9341277,33.8042553 C26.9341277,31.4808511 26.8279149,23.7620426 26.8279149,20.9269787 C26.8279149,15.2762553 31.4073192,10.696851 37.0580426,10.696851 C42.708766,10.696851 47.2881703,15.2772766 47.2881703,20.9269787 Z M24.875234,15.341617 C24.875234,15.341617 25.2949787,20.8820425 25.7157447,26.4214468 C25.8015319,27.1128511 25.7657872,27.8052766 25.7300426,28.4874894 C25.7004255,29.1686809 25.6718298,29.8396596 25.6452766,30.4891915 C25.5901277,31.7892766 25.5380426,32.9994894 25.4961702,34.039149 C25.4083404,36.1174468 25.3501277,37.5002553 25.3501277,37.5002553 C25.3113192,38.4439149 24.5147234,39.1761702 23.5731064,39.1363405 C22.6815319,39.0975319 21.9778723,38.3754894 21.9380425,37.5002553 C21.9380425,37.5002553 21.8798298,36.1154043 21.7930213,34.039149 C21.7491064,32.9994894 21.6980425,31.7872341 21.6439149,30.4891915 C21.6163404,29.8396596 21.588766,29.1686809 21.5601702,28.4874894 C21.5244255,27.8052766 21.4886808,27.1138723 21.5734468,26.4214468 C21.9931915,20.8820425 22.4139574,15.341617 22.4139574,15.341617 C22.4650213,14.6624681 23.058383,14.1538723 23.7375319,14.2049361 C24.354383,14.2519149 24.8292766,14.7441702 24.875234,15.341617 Z M21.7460425,14.9024681 C21.6418723,15.0485106 21.4764255,15.1271489 21.3079149,15.1281702 C21.2006808,15.1281702 21.090383,15.0944681 20.9964255,15.0270638 C18.7251064,13.4011915 17.0798298,11.1584681 16.3822979,8.77685103 C15.9206808,8.63693614 15.5836596,8.20902124 15.5836596,7.70144677 C15.5836596,7.0805106 16.0861276,6.57804252 16.7070638,6.57804252 C17.328,6.57804252 17.8304681,7.08153188 17.8304681,7.70144677 C17.8304681,8.04357443 17.6772766,8.34995741 17.4362553,8.55523401 C18.0796596,10.6784681 19.5697021,12.6852766 21.6214468,14.1538723 C21.8624681,14.3264681 21.9186383,14.6614468 21.7460425,14.9024681 Z M25.5421277,14.9024681 C25.3705532,14.6614468 25.4267234,14.3264681 25.6677447,14.1538723 C27.7184681,12.6852766 29.2105532,10.6784681 29.8529362,8.55523401 C29.6119149,8.34995741 29.4577021,8.04357443 29.4577021,7.70144677 C29.4577021,7.08153188 29.9611915,6.57804252 30.5821277,6.57804252 C31.2010213,6.57804252 31.7055319,7.0805106 31.7055319,7.70144677 C31.7055319,8.20902124 31.3695319,8.63693614 30.9068936,8.77685103 C30.2093617,11.1584681 28.5651064,13.4011915 26.292766,15.0270638 C26.196766,15.0944681 26.0885106,15.1281702 25.979234,15.1281702 C25.8107234,15.1271489 25.6473192,15.0485106 25.5421277,14.9024681 Z"
}));
Ico['si_calendar'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  xmlns: "http://www.w3.org/2000/svg"
}, React.createElement("path", {
  d: "M192 1664h288v-288h-288v288zm352 0h320v-288h-320v288zm-352-352h288v-320h-288v320zm352 0h320v-320h-320v320zm-352-384h288v-288h-288v288zm736 736h320v-288h-320v288zm-384-736h320v-288h-320v288zm768 736h288v-288h-288v288zm-384-352h320v-320h-320v320zm-352-864v-288q0-13-9.5-22.5t-22.5-9.5h-64q-13 0-22.5 9.5t-9.5 22.5v288q0 13 9.5 22.5t22.5 9.5h64q13 0 22.5-9.5t9.5-22.5zm736 864h288v-320h-288v320zm-384-384h320v-288h-320v288zm384 0h288v-288h-288v288zm32-480v-288q0-13-9.5-22.5t-22.5-9.5h-64q-13 0-22.5 9.5t-9.5 22.5v288q0 13 9.5 22.5t22.5 9.5h64q13 0 22.5-9.5t9.5-22.5zm384-64v1280q0 52-38 90t-90 38h-1408q-52 0-90-38t-38-90v-1280q0-52 38-90t90-38h128v-96q0-66 47-113t113-47h64q66 0 113 47t47 113v96h384v-96q0-66 47-113t113-47h64q66 0 113 47t47 113v96h128q52 0 90 38t38 90z"
}));
Ico['si_cardiology'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M35.25,3.09374996 C42.4652813,3.09374996 48.0000001,8.94806247 48.0000001,16.712625 C48.0000001,18.7385625 47.5943438,20.6089687 46.8474375,22.40625 L36.11925,22.40625 L33.6954375,17.558625 C33.2175,16.6055625 31.6575,16.6055625 31.1795625,17.558625 L26.8125,26.29275 L25.2579375,23.183625 C24.78,22.2305625 23.22,22.2305625 22.7420625,23.183625 L21.1875,26.29275 L16.8204375,17.5585312 C16.3425,16.6054687 14.7825,16.6054687 14.3045625,17.5585312 L11.88075,22.40625 L1.15256245,22.40625 C0.405656201,20.6089687 -4.99999899e-08,18.7385625 -4.99999899e-08,16.712625 C-4.99999899e-08,8.94806247 5.53471871,3.09374996 12.75,3.09374996 C18.4367812,3.09374996 22.0870312,7.03228121 24,10.5795937 C25.9129688,7.03237496 29.5632188,3.09374996 35.25,3.09374996 Z M35.25,25.21875 L45.3713438,25.21875 C42.477,29.7725625 37.2645,34.0980938 30.7440938,39.6012188 C28.9135313,41.1462188 26.96625,42.7900313 24.921375,44.5629375 C24.6563438,44.79225 24.328125,44.90625 23.9999062,44.90625 C23.6716875,44.90625 23.3434687,44.79225 23.0784375,44.5629375 C21.0336562,42.7900313 19.0862812,41.146125 17.2557187,39.6012188 C10.7354062,34.0980938 5.52281246,29.7725625 2.62846871,25.21875 L12.75,25.21875 C13.282875,25.21875 13.7689687,24.918 14.0079375,24.4414688 L15.5625,21.3323437 L19.9295625,30.0664688 C20.4075,31.0195313 21.9675,31.0195313 22.4454375,30.0664688 L24,26.9573438 L25.5545625,30.0664688 C25.7935313,30.543 26.279625,30.84375 26.8125,30.84375 C27.345375,30.84375 27.8314688,30.543 28.0704375,30.0664688 L32.4375,21.3323437 L33.9920625,24.4414688 C34.2310313,24.918 34.717125,25.21875 35.25,25.21875 Z"
}));
Ico['si_cardiothoracic'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M47.778,30.669 C47.778,22.101 37.971,8.15999997 31.9455,8.15999997 C29.07,8.15999997 27.555,11.352 26.778,15.6045 C26.31,15.072 26.0355,14.661 25.788,14.3775 L25.788,3.45299996 C25.788,2.39399995 24.987,1.53599995 23.9295,1.53599995 C22.872,1.53599995 22.071,2.39399995 22.071,3.45299996 L22.071,14.622 C21.8235,15.12 21.5115,15.576 21.129,16.011 C20.3655,11.628 18.861,8.30849997 15.9285,8.30849997 C9.90149997,8.30849997 0.0884999502,22.2495 0.0884999502,30.8145 C0.0884999502,39.384 -1.05600005,46.3275 4.96949996,46.3275 C10.9935,46.3275 21.9015,39.384 21.9015,30.8145 C21.9015,27.792 21.9,24.102 21.642,20.592 C22.5675,19.9485 23.418,19.2135 24.1335,18.363 C24.693,18.9825 25.3875,19.6695 26.226,20.3715 C25.9635,23.907 25.9635,27.624 25.9635,30.669 C25.9635,39.237 36.8715,46.185 42.8985,46.185 C48.9150001,46.185 47.778,39.237 47.778,30.669 Z"
}));
Ico['si_chevron-down'] = React.createElement("svg", {
  width: "23px",
  height: "14px",
  viewBox: "0 0 23 14",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("g", {
  stroke: "none",
  "stroke-width": "1",
  fill: "none",
  "fill-rule": "evenodd"
}, React.createElement("g", {
  transform: "translate(-329.000000, -33.000000)",
  fill: "#FFC222"
}, React.createElement("g", {
  transform: "translate(0.000000, 0.942587)"
}, React.createElement("g", {
  transform: "translate(340.000000, 39.697029) rotate(-270.000000) translate(-340.000000, -39.697029) translate(333.000000, 27.697029)"
}, React.createElement("path", {
  d: "M12.5986329,10.4737167 L2.66903044,0.5441142 C2.07193061,-0.052985625 1.1013303,-0.052985625 0.504326813,0.5441142 C-0.092676675,1.14121402 -0.0927730125,2.11181434 0.504326813,2.70881782 L9.35610533,11.5605963 L0.504326813,20.4123748 C-0.0927730125,21.0094747 -0.0927730125,21.980075 0.504326813,22.5770785 C1.10142664,23.174082 2.07202695,23.1741783 2.66903044,22.5770785 L12.5986329,12.6505588 C12.9017107,12.347481 13.0487217,11.9524973 13.0456389,11.5635828 C13.0456389,11.1657089 12.8986279,10.7737116 12.5986329,10.4737167 Z"
}))))));
Ico['si_chevron-left'] = React.createElement("svg", {
  width: "14px",
  height: "24px",
  viewBox: "0 0 14 24",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("g", {
  stroke: "none",
  "stroke-width": "1"
}, React.createElement("g", {
  transform: "translate(-333.000000, -29.000000)"
}, React.createElement("g", {
  transform: "translate(0.000000, 0.942587)"
}, React.createElement("g", {
  transform: "translate(340.000000, 39.697029) rotate(-180.000000) translate(-340.000000, -39.697029) translate(333.000000, 27.697029)"
}, React.createElement("path", {
  d: "M12.5986329,10.4737167 L2.66903044,0.5441142 C2.07193061,-0.052985625 1.1013303,-0.052985625 0.504326813,0.5441142 C-0.092676675,1.14121402 -0.0927730125,2.11181434 0.504326813,2.70881782 L9.35610533,11.5605963 L0.504326813,20.4123748 C-0.0927730125,21.0094747 -0.0927730125,21.980075 0.504326813,22.5770785 C1.10142664,23.174082 2.07202695,23.1741783 2.66903044,22.5770785 L12.5986329,12.6505588 C12.9017107,12.347481 13.0487217,11.9524973 13.0456389,11.5635828 C13.0456389,11.1657089 12.8986279,10.7737116 12.5986329,10.4737167 Z"
}))))));
Ico['si_chevron-right'] = React.createElement("svg", {
  width: "12px",
  height: "18px",
  viewBox: "0 0 12 18",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("g", {
  stroke: "none",
  "stroke-width": "1",
  "fill-rule": "evenodd"
}, React.createElement("g", {
  transform: "translate(-261.000000, -20.000000)"
}, React.createElement("g", {
  transform: "translate(0.724974, 0.500000)"
}, React.createElement("g", {
  transform: "translate(0.511719, 0.000000)"
}, React.createElement("g", {
  transform: "translate(260.436180, 19.500000)"
}, React.createElement("path", {
  d: "M10.0999102,8.0925637 L2.13967405,0.420412253 C1.66099873,-0.0409395785 0.882900332,-0.0409395785 0.404302242,0.420412253 C-0.0742958467,0.881764085 -0.0743730773,1.63170273 0.404302242,2.09298012 L7.50048237,8.93234611 L0.404302242,15.7717121 C-0.0743730773,16.2330639 -0.0743730773,16.9830026 0.404302242,17.44428 C0.882977562,17.9055574 1.66107596,17.9056318 2.13967405,17.44428 L10.0999102,9.77451046 C10.3428777,9.54033607 10.4607316,9.23515012 10.4582603,8.93465361 C10.4582603,8.6272346 10.3404063,8.32435615 10.0999102,8.0925637 Z"
})))))));
Ico['si_chevron-up'] = React.createElement("svg", {
  width: "23px",
  height: "14px",
  viewBox: "0 0 23 14",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("g", {
  stroke: "none",
  "stroke-width": "1",
  fill: "none",
  "fill-rule": "evenodd"
}, React.createElement("g", {
  transform: "translate(-328.000000, -34.000000)",
  fill: "#FFC222"
}, React.createElement("g", {
  transform: "translate(0.000000, 0.942587)"
}, React.createElement("g", {
  transform: "translate(340.000000, 39.697029) rotate(-90.000000) translate(-340.000000, -39.697029) translate(333.000000, 27.697029)"
}, React.createElement("path", {
  d: "M12.5986329,10.4737167 L2.66903044,0.5441142 C2.07193061,-0.052985625 1.1013303,-0.052985625 0.504326813,0.5441142 C-0.092676675,1.14121402 -0.0927730125,2.11181434 0.504326813,2.70881782 L9.35610533,11.5605963 L0.504326813,20.4123748 C-0.0927730125,21.0094747 -0.0927730125,21.980075 0.504326813,22.5770785 C1.10142664,23.174082 2.07202695,23.1741783 2.66903044,22.5770785 L12.5986329,12.6505588 C12.9017107,12.347481 13.0487217,11.9524973 13.0456389,11.5635828 C13.0456389,11.1657089 12.8986279,10.7737116 12.5986329,10.4737167 Z"
}))))));
Ico['si_clock'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  xmlns: "http://www.w3.org/2000/svg"
}, React.createElement("path", {
  d: "M1024 544v448q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h224v-352q0-14 9-23t23-9h64q14 0 23 9t9 23zm416 352q0-148-73-273t-198-198-273-73-273 73-198 198-73 273 73 273 198 198 273 73 273-73 198-198 73-273zm224 0q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
}));
Ico['si_close'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 500 500",
  version: "1.1",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M250 179.9L70-.1l-70 70 180 180-180 180 70 70 180-180 180 180 70-70-180-180 180-180-70-70-180 180z"
}));
Ico['si_close-envelope'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,30.8571429 L29.9382857,25.6594286 L46.9062858,40.2137143 C46.2925715,40.7862857 45.4628572,41.1428572 44.5474286,41.1428572 L3.45257139,41.1428572 C2.53371424,41.1428572 1.70057138,40.7862857 1.08342852,40.2137143 L18.0617143,25.6594286 L24,30.8571429 Z M46.9165715,7.78628568 L24,27.4285714 L1.09028567,7.79314282 C1.70742852,7.21371425 2.53714281,6.85714282 3.45257139,6.85714282 L44.5474286,6.85714282 C45.4697143,6.85714282 46.2994286,7.21028568 46.9165715,7.78628568 Z M-5.00000112e-08,9.86742854 L16.5702857,24.2708571 L-5.00000112e-08,38.352 L-5.00000112e-08,9.86742854 Z M31.4297143,24.2708571 L48,9.85714283 L48,38.352 L31.4297143,24.2708571 Z"
}));
Ico['si_doc'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,5.445 C34.2319322,5.445 42.555,13.7688152 42.555,24 C42.555,34.2304374 34.2304374,42.555 24,42.555 C13.7688152,42.555 5.445,34.2304374 5.445,24 C5.445,13.7688152 13.7688152,5.445 24,5.445 Z M31.9483062,20.6571724 L31.4292563,20.6571724 L31.4292563,18.1766458 C31.4292563,18.161185 31.4267328,18.1456071 31.4246825,18.129951 C31.4238545,18.0314468 31.3921926,17.9347385 31.3240979,17.858098 L27.1558876,13.1435593 C27.1546653,13.142349 27.1533642,13.1419195 27.1525361,13.1406311 C27.127735,13.1131452 27.0987543,13.0902663 27.0681176,13.0705108 C27.0590094,13.0644982 27.0499012,13.0594617 27.0403592,13.054191 C27.0138626,13.0399014 26.9857099,13.0279935 26.9567293,13.0193651 C26.9488828,13.0172177 26.9418643,13.0141334 26.9340179,13.0120251 C26.9024743,13.004607 26.8697872,13 26.8367453,13 L16.5927653,13 C16.1249738,13 15.7449917,13.3767211 15.7449917,13.839492 L15.7449917,20.6569382 L15.2259813,20.6569382 C14.5567839,20.6569382 14.0141946,21.1938897 14.0141946,21.8567144 L14.0141946,28.0961753 C14.0141946,28.7583752 14.5567839,29.2959905 15.2259813,29.2959905 L15.7449917,29.2959905 L15.7449917,33.5672016 C15.7449917,34.0300115 16.1249738,34.4066545 16.5927653,34.4066545 L30.5814433,34.4066545 C31.0488011,34.4066545 31.4292563,34.0300115 31.4292563,33.5672016 L31.4292563,29.2960296 L31.9483062,29.2960296 C32.617267,29.2960296 33.1599352,28.7586485 33.1599352,28.0962143 L33.1599352,21.8569486 C33.1599746,21.1939288 32.617267,20.6571724 31.9483062,20.6571724 Z M16.5927653,13.839492 L26.4127994,13.839492 L26.4127994,18.1344019 C26.4127994,18.3664315 26.6027707,18.5541478 26.8367059,18.5541478 L30.5814433,18.5541478 L30.5814433,20.6571334 L16.5927653,20.6571334 L16.5927653,13.839492 Z M26.7648653,24.6354476 C26.7648653,26.5437281 25.5964117,27.7004795 23.8783109,27.7004795 C22.1343837,27.7004795 21.1140667,26.3967721 21.1140667,24.7391445 C21.1140667,22.9948424 22.2389113,21.6911351 23.974164,21.6911351 C25.7790097,21.6911351 26.7648653,23.0292389 26.7648653,24.6354476 Z M15.3147765,27.579721 L15.3147765,21.8640934 C15.8030714,21.7862036 16.4395029,21.7429835 17.1112632,21.7429835 C18.227315,21.7429835 18.9509251,21.9416708 19.5177636,22.3645793 C20.1281321,22.8136852 20.5120177,23.5304275 20.5120177,24.557753 C20.5120177,25.6716357 20.1022664,26.4399922 19.5355857,26.9148662 C18.9163849,27.4243709 17.9745325,27.6659659 16.8233884,27.6659659 C16.1341214,27.666005 15.6460237,27.6228239 15.3147765,27.579721 Z M30.5814433,33.3396619 L16.5927653,33.3396619 L16.5927653,29.2960296 L30.5814433,29.2960296 L30.5814433,33.3396619 Z M30.6455557,26.604244 C31.0467114,26.604244 31.4915155,26.5174525 31.7529331,26.4142241 L31.9537475,27.4416277 C31.7094423,27.5629718 31.16015,27.6918511 30.4452538,27.6918511 C28.4135308,27.6918511 27.3670326,26.4400312 27.3670326,24.7821693 C27.3670326,22.7967408 28.7970221,21.6911351 30.5756078,21.6911351 C31.264441,21.6911351 31.7881042,21.8292675 32.0236954,21.9502992 L31.7531696,22.9948424 C31.4830382,22.8827124 31.1080242,22.7788983 30.63696,22.7788983 C29.5819056,22.7788983 28.7620876,23.4093177 28.7620876,24.7043186 C28.7618904,25.8700497 29.4595953,26.604244 30.6455557,26.604244 Z M19.0991012,24.600973 C19.1078151,23.3919047 18.3926429,22.7530522 17.2506464,22.7530522 C16.9541366,22.7530522 16.7618784,22.7788593 16.6487552,22.8049397 L16.6487552,26.6128334 C16.761839,26.6387966 16.945265,26.6387966 17.1110266,26.6387966 C18.3142571,26.6472298 19.0991012,25.9909643 19.0991012,24.600973 Z M22.5180327,24.7129079 C22.5180327,25.8530272 23.0587688,26.6558582 23.9481011,26.6558582 C24.8463838,26.6558582 25.3607416,25.8094167 25.3607416,24.6785115 C25.3607416,23.6334217 24.8550977,22.7358345 23.9393871,22.7358345 C23.041617,22.7360687 22.5180327,23.5821979 22.5180327,24.7129079 Z"
}));
Ico['si_doctor-briefcase'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M45.3333334,34.6666667 L41.6,16.8 C41.0666667,14.9333333 39.2,13.3333333 37.0666667,13.3333333 L32,13.3333333 L32,10.1333333 C32,7.46666663 29.8666667,5.33333329 27.2,5.33333329 L20.8,5.33333329 C18.1333333,5.33333329 16,7.46666663 16,10.1333333 L16,13.3333333 L10.9333333,13.3333333 C8.79999997,13.3333333 6.9333333,14.9333333 6.39999996,16.8 L2.66666662,34.6666667 C2.13333329,37.3333334 4.26666663,40 7.19999996,40 L40.5333334,40 C43.7333334,40 45.8666667,37.3333334 45.3333334,34.6666667 Z M18.6666667,10.1333333 C18.6666667,9.06666664 19.7333333,7.99999997 20.8,7.99999997 L27.2,7.99999997 C28.2666667,7.99999997 29.3333333,9.06666664 29.3333333,10.1333333 L29.3333333,13.3333333 L18.6666667,13.3333333 L18.6666667,10.1333333 Z M32,29.3333333 L26.6666667,29.3333333 L26.6666667,34.6666667 L21.3333333,34.6666667 L21.3333333,29.3333333 L16,29.3333333 L16,24 L21.3333333,24 L21.3333333,18.6666667 L26.6666667,18.6666667 L26.6666667,24 L32,24 L32,29.3333333 Z"
}));
Ico['si_doctor-stethoscope'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("ellipse", {
  cx: "18.1650834",
  cy: "2.25639122",
  rx: "2.3724342",
  ry: "2.25639122"
}), React.createElement("ellipse", {
  cx: "30.734773",
  cy: "2.25639122",
  rx: "2.3724342",
  ry: "2.25639122"
}), React.createElement("path", {
  d: "M37.8033705,4.3086935 C36.5979772,2.32307817 34.4391868,1.13770633 32.0284003,1.13770633 L32.0284003,3.37552366 C33.5886116,3.37552366 34.9855313,4.14264744 35.7657546,5.42760215 C36.545978,6.71278066 36.545978,8.24702821 35.7659899,9.53220671 L28.2079883,21.9825272 C27.4280002,23.267482 26.0308451,24.0346057 24.4706338,24.0348295 C22.9104225,24.0348295 21.5132674,23.2677057 20.733044,21.9825272 L13.1752777,9.53198293 C12.3952896,8.24702821 12.3952896,6.71255688 13.1752777,5.42760215 C13.9552657,4.14264744 15.352656,3.37529988 16.9128673,3.37529988 L16.9128673,1.13748255 C14.5020808,1.13748255 12.3430551,2.32285439 11.1376619,4.3086935 C9.93226859,6.29453259 9.93226859,8.66527628 11.1376619,10.6508916 L18.6954283,23.1012121 C19.7005894,24.7569731 21.3697401,25.8535036 23.2941813,26.173064 L23.2941813,32.1775754 C23.2941813,38.0431184 19.6535313,42.8150401 15.1785411,42.8150401 C10.7035509,42.8150401 7.06313613,38.0431184 7.06313613,32.1775754 L7.06313613,25.0281967 C9.74309502,24.5085755 11.7661228,22.2492751 11.7661228,19.5486771 C11.7661228,16.4651885 9.12851621,13.9565953 5.8864483,13.9565953 C2.64438039,13.9565953 0.00677379315,16.4651885 0.00677379315,19.5486771 C0.00677379315,22.2490512 2.02980158,24.5083516 4.70999576,25.0281967 L4.70999576,32.1775754 C4.70999576,39.2770509 9.40615902,45.0528575 15.1785411,45.0528575 C20.9506877,45.0528575 25.646851,39.2770509 25.646851,32.1775754 L25.646851,26.173064 C27.5710568,25.8535036 29.2404429,24.7569731 30.2453687,23.1012121 L37.8033705,10.6508916 C39.008999,8.66527628 39.008999,6.29430881 37.8033705,4.3086935 Z"
}));
Ico['si_email'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,5.445 C34.2319322,5.445 42.555,13.7688152 42.555,24 C42.555,34.2304374 34.2304374,42.555 24,42.555 C13.7688152,42.555 5.445,34.2304374 5.445,24 C5.445,13.7688152 13.7688152,5.445 24,5.445 Z M23.9633669,26.4633669 L21.6218595,24.413872 L14.9272034,30.1527281 C15.1705471,30.378497 15.4990612,30.5190956 15.8613729,30.5190956 L32.0653608,30.5190956 C32.4263207,30.5190956 32.7534828,30.378497 32.9954746,30.1527281 L26.3048742,24.413872 L23.9633669,26.4633669 Z M32.9995304,17.3663675 C32.7561866,17.1392467 32.4290245,17 32.0653608,17 L15.8613729,17 C15.5004131,17 15.173251,17.1405986 14.9299072,17.3690713 L23.9633669,25.1114573 L32.9995304,17.3663675 Z M14.5,18.1869766 L14.5,29.4186412 L21.0337789,23.8663486 L14.5,18.1869766 Z M26.8929549,23.8663486 L33.4267338,29.4186412 L33.4267338,18.1829209 L26.8929549,23.8663486 Z"
}));
Ico['si_endo'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M4.52575842,0.60657073 C4.63607316,0.544999712 4.75023609,0.492407801 4.86728516,0.450077726 C4.77300454,0.541151523 4.64825909,0.5998364 4.52575842,0.60657073"
}), React.createElement("path", {
  d: "M29.1553521,33.6299616 C29.174593,33.6238687 29.1938339,33.6171343 29.2133956,33.6107207 C29.1954373,33.5693527 29.1771585,33.5263812 29.1575968,33.4818064 C29.161445,33.534719 29.1595209,33.5837834 29.1553521,33.6299616"
}), React.createElement("path", {
  d: "M17.6154682,27.221958 C17.6292575,27.1783452 17.6205991,27.1318462 17.5917377,27.0962505 C17.5660831,27.0645029 17.5279219,27.0459033 17.4871952,27.0459033 C17.4849505,27.0459033 17.47533,27.0465447 17.4734059,27.0471861 C17.4368481,27.0503929 17.4060626,27.0516756 17.3797666,27.0529583 C17.3214024,27.0552031 17.2716967,27.0568065 17.2200668,27.080537 C17.0799286,27.1430701 16.939149,27.1751383 16.8015763,27.1751383 C16.4847421,27.1751383 16.2339685,27.0061387 16.1140333,26.7114316 L16.0704205,26.6056064 C15.9213031,26.2480456 15.7676963,25.8779781 15.9168136,25.4678253 C15.9360545,25.4171575 15.9225859,25.3603967 15.8831419,25.3235182 L15.489344,24.9505646 C15.4640101,24.9265135 15.4309798,24.9133655 15.3966668,24.9133655 C15.3947427,24.9133655 15.3841602,24.9140068 15.3825567,24.9140068 C15.3726156,24.9152896 15.3629951,24.9172137 15.3533746,24.9207412 C15.4091734,24.7809236 15.4338659,24.6228272 15.4242455,24.4512622 C15.4078906,24.1418037 15.3697294,23.8297797 15.3334923,23.5286589 C15.3052723,23.2945608 15.2760902,23.0537283 15.2568492,22.8151406 C15.2392117,22.5913043 15.2170846,22.3123107 15.2873141,22.0903984 C15.3306062,21.9512223 15.4441278,21.8168564 15.5531598,21.6866593 C15.5942071,21.6382363 15.6349338,21.5894926 15.6724536,21.5410695 C15.8122711,21.3611667 15.9591437,21.1819052 16.0886994,21.0244502 L16.170794,20.9250387 C16.2320444,20.9776306 16.3013118,21.0321466 16.3818031,21.0744767 C16.5921707,21.1847914 16.8070279,21.2874098 17.0154714,21.3868213 L17.0292608,21.3932349 C17.1463099,21.449675 17.2633589,21.5054738 17.3794459,21.5631966 C17.5433146,21.6433672 17.6856976,21.6828111 17.8139706,21.6828111 C17.8386631,21.6828111 17.8627143,21.6815284 17.8861241,21.6789629 C17.8758623,21.6828111 17.8652798,21.6873007 17.8556593,21.694035 C17.7421377,21.7700367 17.6889044,21.8498867 17.6831322,21.9537877 L17.6619671,22.3546407 C17.6375953,22.789486 17.6132234,23.2352346 17.6007168,23.6761728 C17.5946238,23.9163639 17.4532029,24.0577849 17.238025,24.2453841 C17.1168071,24.3508886 16.9789136,24.447414 16.8455098,24.5410532 C16.7509085,24.6071138 16.6466867,24.6792673 16.5485579,24.7559104 C16.4841007,24.8062576 16.4526739,24.8780904 16.4273399,24.9358132 C16.4177195,24.957299 16.4100231,24.9742951 16.4016854,24.9903292 C16.3702585,25.0467693 16.3830858,25.1166781 16.4318295,25.1580461 L16.4982108,25.2151276 C16.5222619,25.235972 16.5530474,25.2481579 16.5854364,25.2481579 C16.6088462,25.2481579 16.6319353,25.2414236 16.6518176,25.2301997 C16.6915822,25.2080726 16.7932385,25.1519532 16.7932385,25.1519532 C17.1738885,24.9415855 17.5670451,24.7244835 17.8328908,24.3172169 C18.2552295,25.1211677 18.5618019,26.0626911 17.8415493,27.018004 C17.8027467,27.0693131 17.8059535,27.1414667 17.8492456,27.1892484 C17.8716934,27.2145823 17.8954239,27.2389541 17.9188337,27.2636467 C17.9653327,27.3120697 18.0095868,27.3585687 18.0448619,27.4073124 C18.1160534,27.5070446 18.1853208,27.6119077 18.2526641,27.7142054 L18.2703016,27.7401807 C18.2241233,27.73986 18.1789071,27.7392186 18.1340116,27.7392186 C17.9197958,27.7392186 17.6856976,27.7465943 17.441017,27.774173 L17.6154682,27.221958 Z M11.3342623,28.0951761 C11.3060423,28.0951761 11.2512056,28.0704835 11.1524354,27.9534345 C11.1056158,27.8976357 11.0597582,27.8421577 11.0132593,27.7870003 C10.850994,27.5907427 10.6852012,27.3906369 10.4988847,27.2123375 C10.3302058,27.0503929 10.2166842,26.7303519 10.3266783,26.4943296 C10.381515,26.3772806 10.436993,26.2608729 10.4921504,26.1441445 C10.6133683,25.8882399 10.7377931,25.6259217 10.8548422,25.3645656 C10.9385403,25.1782491 11.0244831,25.1093024 11.1723177,25.1093024 C11.1957275,25.1093024 11.2207408,25.1109058 11.2470367,25.1144333 C11.341638,25.1262986 11.4420116,25.1317502 11.5635502,25.1317502 C11.6440415,25.1317502 11.7248535,25.1301468 11.8063068,25.1269399 C11.8544092,25.1256572 11.9025115,25.1240538 11.9509345,25.1234124 C11.9717789,25.1795319 11.994868,25.2372547 12.0182778,25.2959396 C12.1026173,25.509514 12.1972186,25.7503465 12.2536587,25.9914996 C12.3062506,26.2211082 12.3251709,26.467713 12.3431291,26.7056593 C12.3511462,26.8156534 12.3591632,26.9259681 12.3710285,27.0350001 C12.375518,27.0831025 12.4063035,27.1241498 12.4489543,27.1443528 C12.4136792,27.1485217 12.3806489,27.1664799 12.3582012,27.1950206 C12.3559564,27.1979068 12.3533909,27.201755 12.3508255,27.2052825 C12.2793133,27.2707017 12.2071598,27.3367622 12.1343649,27.4028228 L12.117048,27.4188569 C11.9195077,27.5984391 11.7168364,27.7818694 11.5228236,27.971072 C11.4179604,28.073049 11.3624824,28.0951761 11.3342623,28.0951761 Z M15.7920681,28.3815455 C15.8549219,28.1804776 15.9020622,27.9784477 15.9488818,27.7815487 C15.9671607,27.7004161 15.9857603,27.6228109 16.0043599,27.5480919 L17.0879457,27.8280477 C16.6684931,27.9101424 16.2326857,28.0656733 15.8279846,28.3552495 C15.8157986,28.3639079 15.8042541,28.3725664 15.7920681,28.3815455 Z M13.7259115,29.3006212 C13.6694714,29.2986971 13.5607601,29.2406536 13.483155,29.148297 C13.4260735,29.079671 13.3789332,28.9975763 13.3295481,28.91003 C13.2743907,28.8122219 13.218592,28.713131 13.1432317,28.6246227 C12.8110047,28.2340316 12.5416315,27.8706984 12.612823,27.3717166 C12.6218021,27.3088629 12.6022405,27.2302957 12.5679275,27.1905311 C12.5544588,27.175459 12.538104,27.1635938 12.5201458,27.1555767 C12.5595897,27.1510871 12.5955061,27.1292807 12.6176332,27.0956091 C12.6769595,27.0067801 12.6913902,26.9105754 12.7032554,26.8336116 C12.7083863,26.7999399 12.7131966,26.7685131 12.720893,26.7399723 C12.7455855,26.6521054 12.7805399,26.5453181 12.830887,26.5029881 C12.9723079,26.3827322 13.1243114,26.2676072 13.2711839,26.1563304 C13.4135669,26.0485811 13.5601188,25.937625 13.6996156,25.8208966 C13.8884975,25.6628002 14.1052788,25.5152863 14.4086443,25.5114381 C14.7241958,25.5075899 14.9894001,25.4011234 15.1744339,25.2029417 C15.1798855,25.1974901 15.1850164,25.1913971 15.1901473,25.1856248 C15.2228569,25.379317 15.2571699,25.5720471 15.2921243,25.7650979 C15.3524126,26.1040592 15.4152663,26.453603 15.4659342,26.7983365 C15.503454,27.0548824 15.5428979,27.3204074 15.4983231,27.5567504 C15.4588791,27.7687214 15.3844808,27.9829373 15.3123273,28.1904188 C15.2623008,28.3350465 15.2122744,28.4796743 15.1715477,28.6265468 C15.0840014,28.9417776 14.7604329,29.2044165 14.4346196,29.2242988 C14.3297565,29.2313538 14.2261761,29.2470672 14.1264438,29.26246 C13.9962468,29.282663 13.8763116,29.3012625 13.7592625,29.3012625 C13.7477179,29.3012625 13.7368147,29.3006212 13.7259115,29.3006212 Z M21.7638155,30.2783818 C21.5681992,29.9846367 21.3087672,29.7354665 21.0570315,29.493672 C20.9746162,29.4151048 20.8902767,29.3339721 20.8078613,29.2512361 L20.8572464,29.2637427 C20.8681496,29.2666288 20.8793735,29.2675909 20.8909181,29.2675909 C20.9496029,29.2675909 21.0015535,29.2303917 21.0195117,29.1739516 L21.0480524,29.0860847 C21.0624831,29.0405478 21.0519006,28.9905213 21.0204737,28.9546049 L20.6853606,28.5774824 C20.6597061,28.5489417 20.6234689,28.5322662 20.5846664,28.5322662 C20.5580497,28.5322662 20.5323951,28.5402832 20.5096267,28.5553553 C20.4432454,28.5996095 20.3755815,28.6355259 20.3079175,28.6624632 C19.9522807,28.2324281 19.549183,27.9608102 19.0777799,27.8322165 C18.9562412,27.7049056 18.862602,27.6048527 18.7750557,27.508648 C18.6977712,27.4233465 18.6422932,27.2957149 18.6458207,27.2123375 C18.6631375,26.7890367 18.7045056,26.3577189 18.7445909,25.9408318 L18.7670386,25.705451 C18.7740936,25.6310526 18.7840348,25.5739712 18.7923725,25.5370927 C18.835344,25.5322825 18.8728638,25.5300377 18.9065355,25.5300377 C19.0081918,25.5300377 19.033205,25.5518441 19.033205,25.5524855 C19.1630814,25.6711379 19.29873,25.7295021 19.4491301,25.7295021 C19.5815719,25.7295021 19.7050346,25.6849273 19.8188768,25.6371456 C19.8820513,25.6102083 19.9554875,25.5948155 20.0330927,25.5787814 C20.1270526,25.5592198 20.2322364,25.5370927 20.3294032,25.4902731 C20.4281734,25.4434535 20.4817273,25.3478901 20.528547,25.264192 C20.5330365,25.257137 20.5362433,25.2507233 20.5397708,25.2446304 C20.6221862,25.2516854 20.6558579,25.271247 20.6693265,25.2876018 C20.6818331,25.3017118 20.700112,25.3395524 20.686002,25.4363984 C20.677985,25.4957247 20.7013948,25.5614646 20.753666,25.6265631 C20.7850929,25.6653657 20.8492293,25.7314262 20.9310034,25.7375192 C20.9861607,25.7413674 21.0413181,25.7464983 21.0967961,25.7522706 L21.1105855,25.7532326 C21.2452721,25.7663806 21.3844482,25.78017 21.522021,25.78017 C21.73303,25.78017 21.9071605,25.7481017 22.0598053,25.6794757 C22.0578813,25.6999994 22.0553158,25.7202024 22.0533917,25.740726 C22.0418471,25.8420617 22.0303026,25.9453214 22.0421678,26.0521086 C22.0594847,26.2108464 22.0854599,26.3705462 22.1111145,26.5247945 C22.154086,26.7893574 22.1983401,27.0619374 22.196416,27.323935 C22.1938506,27.6199248 22.2432357,27.9075769 22.2906967,28.1856085 C22.3497022,28.5322662 22.4106319,28.8904684 22.3657363,29.249312 C22.3586813,29.3041487 22.3535504,29.357382 22.3484195,29.4090118 C22.3189167,29.7104533 22.2996758,29.9060695 22.0341508,30.0830862 C21.9405115,30.1449779 21.8513618,30.2123212 21.7638155,30.2783818 Z M24.3876388,30.6320944 C24.2891893,30.6320944 24.18144,30.5920091 24.0473948,30.5051042 C23.9608105,30.4493055 23.875509,30.3838863 23.7930936,30.3207118 C23.6830996,30.2360517 23.5702194,30.1501088 23.446436,30.0773139 C23.1966244,29.9323655 23.086951,29.6841573 22.9702226,29.4211977 L22.9378337,29.3471201 C22.8967864,29.2560463 22.895183,29.1992855 22.8974277,29.1906271 C23.1081161,28.8048462 22.9987634,28.4280444 22.9019173,28.0961381 C22.8788282,28.0172503 22.8573424,27.9425313 22.8400256,27.8684536 C22.815333,27.7667973 22.7906405,27.6644996 22.765948,27.5625226 C22.623565,26.9833703 22.4786165,26.3920319 22.4859922,25.7920352 C22.4859922,25.7307849 22.4667513,25.6762689 22.4507172,25.6326561 C22.4449449,25.6166219 22.4401347,25.6037946 22.4362865,25.5900053 C22.4228178,25.5435064 22.3849773,25.5075899 22.338799,25.4957247 C22.3471368,25.488349 22.3554745,25.4803319 22.3638122,25.4729562 C22.4298728,25.4097818 22.4513585,25.3215941 22.4686754,25.251044 C22.4747683,25.2247481 22.4798993,25.203583 22.4869543,25.18338 C22.5103641,25.1202056 22.4818234,25.0486934 22.4212144,25.0179079 L22.3282165,24.9704469 C22.3092962,24.9608265 22.2884519,24.9556955 22.2672868,24.9556955 C22.2211086,24.9556955 22.1784578,24.9791054 22.1534446,25.0185493 C22.0363955,25.2016589 21.8968987,25.2394995 21.7237302,25.2394995 C21.6525387,25.2394995 21.5758956,25.2327651 21.5014973,25.2247481 C21.4251749,25.2183344 21.3485318,25.2112794 21.2712474,25.2103174 C21.2587407,25.1516325 21.243348,25.0717826 21.2302,25.0041186 C21.2135245,24.9152896 21.196849,24.8274226 21.181777,24.7607207 C21.1718358,24.7183906 21.1497087,24.6920946 21.1240541,24.6616298 C21.1105855,24.6455957 21.092948,24.6237893 21.0672934,24.590759 C21.0442042,24.5609355 21.0095705,24.542336 20.9726921,24.5388084 C20.9710887,24.5388084 20.9624302,24.5384878 20.9605061,24.5384878 C20.9271552,24.5384878 20.8954076,24.5506737 20.8700737,24.5731215 L20.4198356,24.9797467 C20.4185529,24.9800674 20.4169495,24.9807088 20.4153461,24.9813501 C20.3393444,24.9851983 20.2598151,24.9858397 20.1828514,24.9858397 C19.8846167,24.9871224 19.5770823,24.9880845 19.3131607,25.203583 C19.3012955,25.1978107 19.2685859,25.1820973 19.2685859,25.1820973 C19.1768707,25.1372018 19.0906071,25.0948717 18.991837,25.0756308 C18.7667179,25.0307352 18.6605721,24.9431889 18.598039,24.7504588 C18.5393541,24.5673492 18.4514872,24.3954634 18.366827,24.2293499 C18.3219315,24.1418037 18.2802428,24.0609917 18.2424022,23.9782556 C18.230537,23.9519597 18.2170683,23.9250224 18.2039204,23.898085 C18.1676832,23.8256108 18.1298427,23.7502505 18.12856,23.6925276 C18.1221463,23.3776175 18.1234291,23.0566145 18.1253532,22.7458732 C18.1266359,22.5281299 18.1275979,22.3103866 18.1259945,22.0926432 C18.1253532,22.0086244 18.1045088,21.9335848 18.0843058,21.8607899 C18.0756474,21.8306457 18.0682717,21.8037084 18.0628201,21.7770918 C18.052879,21.733479 18.0227348,21.6975625 17.9810461,21.680887 C17.9656533,21.6744734 17.9496192,21.6712666 17.9329437,21.6712666 C18.0346001,21.6501015 18.1247118,21.6003958 18.2055238,21.5218286 L21.0458076,22.3421341 C21.0576729,22.3456616 21.0705002,22.3475857 21.0830068,22.3475857 C21.1121889,22.3475857 21.1410503,22.3379652 21.1644601,22.320007 C21.1981318,22.2949938 21.2180141,22.2542671 21.2180141,22.2122578 L21.2180141,21.5737791 C21.2811885,21.6828111 21.3456457,21.7928052 21.4117062,21.9018372 C21.4546777,21.972708 21.5034214,22.0419754 21.5467135,22.1035464 C21.6105293,22.1942995 21.6708176,22.2805631 21.7169959,22.3719576 C21.9866898,22.9010835 22.073274,23.4988355 22.1572928,24.0760638 C22.1707614,24.1674582 22.1839094,24.2578907 22.1976988,24.3480024 C22.2714557,24.828064 22.4308349,24.9749365 22.9083309,25.0031565 C23.1411463,25.0166252 23.4101989,25.0374696 23.6548795,25.1060956 C23.8575508,25.1641391 24.0589393,25.2372547 24.2539142,25.3081255 C24.4642819,25.3844479 24.6820252,25.4633358 24.9045788,25.5249068 C25.2903597,25.6310526 25.398109,25.9241563 25.5225337,26.2634383 C25.5594122,26.3638119 25.5975734,26.4670716 25.6440724,26.5671245 C25.6164937,26.6363919 25.5876323,26.699887 25.5594122,26.7637028 C25.4914275,26.916989 25.420236,27.0754061 25.371813,27.2415196 C25.276891,27.5663708 25.2162821,27.8947496 25.1691417,28.1734226 C25.1534283,28.2670618 25.1534283,28.358777 25.153749,28.447606 C25.153749,28.5406039 25.153749,28.6284709 25.1357908,28.7067174 C25.0427929,29.1114186 24.9376091,29.5212507 24.8359527,29.9176141 L24.8324252,29.9314034 C24.7936227,30.0821241 24.7544994,30.2334862 24.7166589,30.3845276 C24.7089625,30.4143511 24.7118487,30.4441746 24.7230725,30.4707912 C24.711528,30.4762428 24.7009455,30.4839392 24.6910043,30.4925976 C24.5890273,30.5865575 24.4896158,30.6320944 24.3876388,30.6320944 Z M29.5050883,33.3578947 C29.4399897,33.1144968 29.4079215,32.8518579 29.4092042,32.576071 C29.4095249,32.4577392 29.4117697,32.3390868 29.4143351,32.2204343 C29.4210695,31.9132206 29.4281245,31.595745 29.3979803,31.282759 C29.3787394,31.0909909 29.303379,30.9123708 29.2305841,30.7398437 C29.1994779,30.6673695 29.1680511,30.5929712 29.1420758,30.520497 C29.1366242,30.5044628 29.1273244,30.4897115 29.1161005,30.4762428 C29.4149765,30.4175579 29.7154559,30.3200705 30.010163,30.1860252 C30.2641435,30.0705796 30.5133137,29.9394205 30.7547875,29.8117889 C30.9260319,29.7219978 31.0953522,29.6322068 31.2640311,29.5494707 L31.2649932,29.5494707 C31.2784618,29.5494707 31.2935339,29.5523568 31.3050785,29.555243 C31.4067348,29.7854929 31.4987706,30.0202324 31.5959374,30.2687613 L31.6507741,30.4076168 C31.642757,30.4137097 31.6363434,30.4201234 31.6296091,30.4268577 C31.5898444,30.4656603 31.560983,30.508311 31.5362905,30.5467929 C31.5244252,30.5644304 31.5170495,30.5753336 31.5093532,30.5859162 C31.4865847,30.6183051 31.4785677,30.6587111 31.4878674,30.6962309 C31.4971672,30.7347128 31.5221805,30.766781 31.5574555,30.7847392 C31.5712449,30.7917943 31.5850342,30.8014147 31.5991442,30.8103938 C31.6543016,30.8466309 31.7187588,30.888961 31.79925,30.8892817 C31.9599119,30.8902437 32.0596441,30.903071 32.117367,30.930329 C31.7312654,31.5444358 31.3916627,31.9821673 31.0203125,32.3471038 C30.5761674,32.7832319 30.0666031,33.1228345 29.5050883,33.3578947 Z M26.2812683,29.9442307 C26.2649134,29.9442307 26.248238,29.9467962 26.2322038,29.9516064 C26.1350371,29.9791851 26.0709006,30.0593557 26.0199121,30.1231715 C26.0025953,30.1456193 25.9865611,30.1648602 25.9702063,30.1818564 C25.9416656,30.2123212 25.9281969,30.2546513 25.9346106,30.2950572 C25.9407036,30.336746 25.9650754,30.3726624 26.0019539,30.3931861 C26.0167053,30.4018445 26.0314567,30.4121063 26.0462081,30.4223682 C26.1039309,30.4618121 26.1715949,30.508311 26.2568964,30.5089524 C26.338029,30.5089524 26.404731,30.4768842 26.4823361,30.4400057 C26.5188939,30.4223682 26.5602619,30.4028065 26.6099677,30.3822829 C26.656146,30.3630419 26.6878935,30.3194291 26.6923831,30.270044 C26.6965519,30.2196969 26.6731421,30.1715945 26.6311327,30.1443365 C26.5820683,30.1122683 26.5400589,30.0802 26.5041425,30.0532627 C26.4239719,29.9926538 26.3604768,29.9442307 26.2812683,29.9442307 Z M26.2132836,31.3520264 C26.1757637,31.3545918 26.1404887,31.3712673 26.1170789,31.3998081 L25.6963436,31.9055242 C25.6536928,31.9565127 25.6546549,32.0302696 25.697947,32.0799754 C25.7239223,32.1101195 25.7608007,32.126795 25.799924,32.126795 C25.8252579,32.126795 25.8493091,32.11974 25.8704741,32.1072334 L26.4505885,31.752238 C26.4858636,31.7307523 26.5099148,31.6925911 26.5140837,31.651223 C26.5185732,31.6095343 26.5028598,31.5678456 26.4727156,31.5393049 L26.3136572,31.3882635 C26.2883233,31.364533 26.255293,31.351385 26.2206593,31.351385 C26.2196972,31.351385 26.2136043,31.3520264 26.2132836,31.3520264 Z M27.4453453,33.7504099 C27.1759721,33.7504099 26.8969784,33.7330931 26.61574,33.697818 C26.5310798,33.6875562 26.4422508,33.6721634 26.3447634,33.6513191 C26.3264845,33.5926342 26.3126951,33.5352321 26.3021126,33.4771885 C26.2584998,33.2325079 26.099762,33.0224609 25.9464758,32.8197897 C25.9057492,32.7662357 25.8682293,32.7171713 25.834237,32.6684276 C25.7733074,32.5824847 25.6700476,32.5728642 25.5610156,32.5622817 C25.520289,32.5584335 25.4744314,32.5545853 25.4279324,32.5456062 C25.4195947,32.5436821 25.4109363,32.5430408 25.4022778,32.5430408 C25.3637959,32.5430408 25.3269175,32.5597162 25.3012629,32.588257 C25.269836,32.623532 25.2592535,32.6735585 25.2736842,32.7190954 C25.3548168,32.9724345 25.4821277,33.1619578 25.6062318,33.3453881 C25.6254728,33.3745702 25.644393,33.4027902 25.6633133,33.4306896 C25.2146786,33.2357147 24.8035638,32.9644174 24.4049556,32.7017785 C24.3491569,32.6655414 24.2949616,32.6293043 24.2404456,32.5933879 C24.2879066,32.4526083 24.337933,32.3115081 24.386356,32.1748974 C24.4254793,32.0655447 24.4633198,31.9587575 24.4992362,31.854215 L25.0411895,31.9375924 C25.0488858,31.9382338 25.0552995,31.9388751 25.0620338,31.9388751 C25.0979503,31.9388751 25.132584,31.9244444 25.1579179,31.8987898 L25.2448228,31.8106022 C25.2775324,31.7766099 25.291001,31.7301109 25.2794565,31.6839326 C25.268874,31.6390371 25.2358437,31.6024793 25.1915895,31.5877279 C24.998218,31.5226294 24.8782828,31.4373279 24.8240875,31.3257304 C24.7394273,31.1509585 24.8163911,30.9001849 24.9097097,30.6369047 C24.9209336,30.6045157 24.9196508,30.5692407 24.9061822,30.5387759 C24.9209336,30.5320415 24.9337609,30.5224211 24.9449848,30.5102351 C25.0440756,30.4060133 25.1181532,30.2847954 25.1659349,30.1494674 C25.2457848,29.9211416 25.3294829,29.6751782 25.3945815,29.4276114 C25.5058582,29.0046313 25.6043077,28.5835754 25.6854404,28.2272972 C25.7300152,28.0336051 25.7688178,27.8370268 25.806979,27.6459001 L25.8111479,27.624735 C25.8278234,27.5400749 25.8448195,27.4557354 25.8621364,27.3717166 C25.8858669,27.2549882 25.9198592,27.1347323 25.9522481,27.0183246 C26.0869347,26.5360183 26.2261109,26.0376779 25.8204477,25.5563337 C25.8954873,25.5021383 25.9669995,25.4473016 26.0051607,25.3639242 C26.0721833,25.2199378 26.1295855,25.2199378 26.1539573,25.2199378 C26.2184145,25.2199378 26.3110917,25.2657954 26.3931864,25.3100496 C26.4473817,25.3395524 26.5031805,25.3559072 26.5525655,25.3709792 L26.5932922,25.3828445 C26.9117298,25.4851422 27.2308088,25.5864778 27.5614323,25.6919823 L27.6650127,25.7253333 C27.4514383,26.1739679 27.3914707,26.6126614 27.4770929,27.0991366 C27.500182,27.229013 27.5194229,27.3601721 27.5389846,27.4906898 C27.5598289,27.6301866 27.580994,27.7693628 27.6053658,27.9082183 C27.6290963,28.0393774 27.6711057,28.1673296 27.705098,28.2644964 C27.8664013,28.7227515 28.0495109,29.2416156 27.8631945,29.7643279 C27.8352951,29.8416124 27.7804584,29.9205002 27.711191,30.0202324 C27.6701437,30.0789173 27.6246068,30.1449779 27.5761837,30.221621 C27.5636771,30.2405412 27.5572635,30.2617063 27.5553394,30.2828713 C27.5258366,30.2847954 27.4979372,30.2956986 27.4751688,30.3142982 L26.4897118,31.1435828 C26.4473817,31.1794993 26.4310269,31.2381841 26.4486645,31.290776 C26.467264,31.3430473 26.5163284,31.3802464 26.5714858,31.3815292 C26.5852752,31.3821705 26.5987438,31.3828119 26.6122125,31.3828119 C26.948929,31.3828119 27.2910971,31.2256775 27.506275,30.9733005 C27.6512234,30.8033388 27.7192081,30.6109294 27.6999671,30.4281404 C27.712153,30.4274991 27.7246597,30.4242922 27.7365249,30.4201234 C27.7887961,30.4012031 27.8340124,30.3880551 27.8715322,30.3771519 C27.9584371,30.3527801 28.0309113,30.3319357 28.085748,30.2722888 C28.1713702,30.1780082 28.2476926,30.1321506 28.3192048,30.1321506 C28.3910377,30.1321506 28.4782633,30.1796116 28.5786369,30.2729302 C28.6597695,30.3486112 28.7764979,30.4284611 28.8957917,30.4663016 L28.8573098,30.480091 C28.7944561,30.5031801 28.758219,30.5695614 28.7716876,30.6349806 C28.7841943,30.6936654 28.799587,30.752671 28.8149798,30.8110352 C28.846086,30.9290463 28.8752681,31.0396817 28.8771922,31.1461483 C28.888416,31.7974542 28.8964331,32.5670919 28.873344,33.336409 C28.8710992,33.4146555 28.8492928,33.5038052 28.8133764,33.5868619 C28.3814172,33.6955732 27.9218793,33.7504099 27.4453453,33.7504099 Z"
}), React.createElement("path", {
  d: "M29.1568913,29.8854496 C29.0202806,29.8854496 28.8496776,29.7918104 28.7589245,29.7036227 C28.2602634,29.2206751 28.2185747,28.6094544 28.1746412,27.9626381 C28.1650207,27.8298756 28.156683,27.7038474 28.1441764,27.5778192 C28.1230113,27.3626413 28.0832467,27.0862131 27.9610667,26.8633388 C27.8347179,26.6318062 27.9075128,26.4294556 27.9921729,26.1940747 C28.0255239,26.1017182 28.0598369,26.0061548 28.0816433,25.9064226 C28.123332,25.7165786 28.2076715,25.5353931 28.2965005,25.3429837 C28.3218344,25.2878263 28.3462063,25.2352344 28.3692954,25.1832838 C28.6963914,25.2525512 28.9888538,25.2862229 29.2617545,25.2862229 C29.5628752,25.2862229 29.8405862,25.2461376 30.1112421,25.1643636 C30.2372703,25.125561 30.3379645,25.1076028 30.4187765,25.1076028 C30.557632,25.1076028 30.6932806,25.1415951 30.8260431,25.5588029 C30.9074965,25.8140661 31.0303178,26.0834393 31.1916211,26.3585848 C31.3756927,26.6728535 31.5491819,26.9701261 31.4587495,27.3485313 C31.4164194,27.5252273 31.3962164,27.7060922 31.3763341,27.8802227 C31.3368902,28.2326526 31.2993703,28.5655209 31.0950957,28.8445146 C30.9661813,29.021852 30.7712064,29.1507663 30.6307476,29.2277301 C30.4784234,29.3117488 30.3087824,29.3608133 30.129521,29.4127638 C29.8303243,29.5003101 29.5208658,29.5897805 29.2665647,29.8485712 C29.2421928,29.8732637 29.2049937,29.8854496 29.1568913,29.8854496"
}), React.createElement("path", {
  d: "M19.5959385,16.0869997 C19.4952442,16.0869997 19.4060945,16.0065085 19.2864799,15.8679737 C19.2608254,15.8381502 19.2380569,15.7996683 19.2140057,15.7592623 C19.1758445,15.6954465 19.137042,15.629386 19.0767537,15.5735872 C18.7858947,15.3026106 18.6858418,15.0261824 18.7624849,14.7022932 C18.7868568,14.6006369 18.8195664,14.4960944 18.8516346,14.3950795 C18.8846649,14.2911784 18.9186573,14.1840705 18.9449532,14.0747178 C18.9558564,14.0301429 18.9574598,13.9868508 18.9555357,13.9496516 C19.6831641,13.5321232 20.4784564,13.4150741 21.1073145,13.3650477 C21.0922425,13.454518 21.0771704,13.5443091 21.0614569,13.6334588 C21.0598535,13.6341002 21.0515158,13.6450034 21.0457435,13.6533411 C21.0284267,13.677713 21.0075823,13.7065744 20.9934723,13.7428115 C20.9758347,13.7893105 20.9549904,13.8358094 20.9347874,13.8823083 C20.8754612,14.0163536 20.8158142,14.1529643 20.7991388,14.3027229 C20.7818219,14.4585746 20.7843874,14.6147469 20.7859908,14.7654676 C20.7885562,14.9100954 20.7904803,15.0585713 20.7747669,15.1980682 C20.7612982,15.3186447 20.7045375,15.4770618 20.6259703,15.5338226 C20.4630636,15.6524751 20.2767472,15.7512453 20.096203,15.8464879 C19.9797953,15.908059 19.8656323,15.9680266 19.7556383,16.0337665 C19.6959914,16.0690415 19.6437201,16.0869997 19.5959385,16.0869997"
}), React.createElement("path", {
  d: "M4.35913185,15.6942921 C4.29916425,15.5919944 4.25715485,15.4810383 4.23887596,15.3777786 C4.23534845,15.3582169 4.2654926,15.2944012 4.2818474,15.2600881 C4.29884356,15.2235303 4.31616041,15.1866519 4.32962907,15.1462459 C4.33475999,15.1308531 4.34149432,15.114819 4.3491907,15.0987849 C4.3783728,15.0308002 4.41364786,14.950309 4.39120009,14.8627627 C4.28922309,14.4561374 4.18083245,14.0450226 4.07661067,13.6470557 C4.00317441,13.3677414 3.9323036,13.0964441 3.86207416,12.8254675 L3.85277437,12.788589 C3.8139718,12.6394717 3.77356582,12.4842614 3.76747285,12.3377096 C3.75528692,12.034344 3.75721102,11.7107755 3.77420718,11.3480837 C3.77901742,11.2419379 3.79793768,11.135792 3.81814067,11.0229118 C3.83128865,10.9485135 3.84443663,10.8744359 3.8540571,10.8000375 C3.85630187,10.7807966 3.85918802,10.7618763 3.86207416,10.7423147 C3.87682555,10.6441859 3.89350103,10.5345125 3.85854665,10.4299701 L3.84828481,10.3979018 C3.83481615,10.3587786 3.81461316,10.2972076 3.80723747,10.2657807 C3.83417479,10.2487845 3.89125625,10.2205645 3.92107972,10.2058131 C3.98393346,10.1740655 4.01215351,10.0990258 3.98585756,10.0345687 C3.84379526,9.68149738 3.84251253,9.38646959 3.98200937,9.10555182 C4.02722559,9.01511939 4.02530149,8.91634921 4.02369808,8.83778203 C4.02081194,8.694437 4.02850831,8.66333081 4.12407167,8.63030053 C4.15646059,8.61875596 4.17762562,8.61683187 4.18917019,8.61683187 C4.21546614,8.61683187 4.22957617,8.62516961 4.28345081,8.72393978 C4.32994976,8.80956198 4.38799327,8.91570785 4.51498349,8.95386905 C4.83181769,9.04879104 4.98029363,9.30918514 5.137428,9.58433062 C5.24549796,9.77289186 5.35645407,9.96786675 5.52609505,10.1201909 L4.42679584,9.98005268 C4.42134424,9.979732 4.41589263,9.97909064 4.40947899,9.97909064 C4.36169731,9.97909064 4.31680178,10.0047452 4.29307128,10.0467546 C4.26581328,10.0932536 4.26934079,10.1519384 4.30205039,10.1955512 C4.47201205,10.420991 4.83855202,10.5011616 5.10087021,10.5011616 C5.31252058,10.5011616 5.497875,10.4546626 5.62197908,10.3706438 C5.65917824,10.3453099 5.68098464,10.3029798 5.68130532,10.259367 L5.68130532,10.2600084 C5.77141707,10.3446686 5.86152882,10.4293287 5.9692781,10.4941065 C6.20337624,10.6345654 6.26590931,10.7949066 6.17162869,11.0139327 C6.11198176,11.1531088 6.03437663,11.2817025 5.94683034,11.3868863 C5.5469394,11.870796 5.64186139,12.4105045 5.74800726,12.7741583 C5.79322348,12.9277652 5.85062562,13.0765618 5.90578299,13.2205482 C5.95580944,13.3485004 6.00551521,13.4780561 6.04495915,13.605367 C6.08889263,13.7471087 6.0494487,13.9513833 5.94041669,14.1518098 C5.81406783,14.3836632 5.61877226,14.5658108 5.44303831,14.6148752 C5.32085832,14.6491882 5.17045828,14.7999089 5.16757214,14.9358782 C5.16244123,15.1654868 5.01749279,15.2777257 4.8334211,15.4201086 C4.79044966,15.4537803 4.74747822,15.4868106 4.70643088,15.5224063 C4.66378012,15.5583228 4.61118821,15.5897496 4.55410674,15.6134801 L4.50536302,15.6346452 C4.47137069,15.6487552 4.40851694,15.6756925 4.35913185,15.6942921"
}), React.createElement("path", {
  d: "M35.1477834,15.7472367 C35.1214875,15.7376163 35.0628026,15.6943242 35.0214346,15.6231327 C34.9880836,15.5657305 34.9864802,15.5259659 34.9938559,15.5131386 C35.2087131,15.1334507 35.140087,14.7771725 35.0737058,14.4314769 C35.0595958,14.3573993 35.0451651,14.2836423 35.0342619,14.2105268 C34.9861595,13.8859962 34.8819377,13.5720481 34.7806021,13.2677206 C34.7331411,13.1234135 34.6840767,12.9749375 34.6417466,12.8274236 L34.6285986,12.7831695 C34.5894754,12.6465588 34.5487487,12.5070619 34.5439385,12.3765442 C34.5320732,12.0510516 34.5339973,11.6950941 34.5500315,11.2891102 C34.5532383,11.202526 34.5711965,11.114659 34.5901168,11.0223025 C34.6042268,10.9517524 34.6189782,10.8786368 34.6279573,10.8042385 C34.6298814,10.7843562 34.6334089,10.7641532 34.6366157,10.7423468 C34.6561773,10.6150359 34.6795871,10.4636738 34.5933236,10.3661863 C34.5609347,10.3293079 34.5455419,10.304936 34.5384869,10.290826 C34.5596519,10.2799228 34.5987752,10.2658128 34.655536,10.2475339 L34.6863215,10.2375927 C34.7212759,10.2260481 34.7498166,10.2003935 34.7658507,10.1680046 C34.7815641,10.1349743 34.7834882,10.0961718 34.7703403,10.0618588 C34.6260332,9.67607785 34.6212229,9.39099121 34.7549475,9.1071873 C34.7959948,9.02028238 34.798881,8.92600175 34.8020878,8.83524864 C34.8078601,8.65502514 34.8219701,8.65438378 34.8896341,8.6502149 C34.9146473,8.65085627 34.99578,8.72749936 35.0349032,8.76469852 C35.1182806,8.84358638 35.2035822,8.92375698 35.3132555,8.95903204 C35.6175831,9.05844358 35.758042,9.30985857 35.9061973,9.57602495 C36.0149086,9.77035847 36.1271474,9.97142633 36.308333,10.1247125 C36.3035227,10.1234298 36.2987125,10.1231091 36.2939023,10.1218264 L35.2802252,9.99291205 C35.2738116,9.99227068 35.2686807,9.99162932 35.2629084,9.99162932 C35.2327643,9.99162932 35.2029408,10.0025325 35.1788896,10.0211321 C35.1509902,10.0442212 35.1323907,10.0778929 35.1285425,10.1138093 L35.1112256,10.2946742 C35.1080188,10.3305906 35.1192427,10.3668277 35.1420111,10.3940857 C35.1651003,10.4223058 35.1987719,10.4389812 35.2343677,10.4428294 L36.2534963,10.5303757 C36.2550997,10.5303757 36.2634374,10.5310171 36.2653615,10.5310171 C36.2967884,10.5310171 36.3278946,10.5194725 36.3522665,10.4992695 C36.3795245,10.4761804 36.3965206,10.4428294 36.3997275,10.4075544 L36.4115927,10.2670955 C36.4128754,10.2475339 36.4106307,10.2279722 36.4035756,10.2093727 C36.4208925,10.2273309 36.4378887,10.2452891 36.4555262,10.2638887 C36.5469207,10.3604141 36.6408806,10.4598256 36.7733224,10.4986282 C37.0035724,10.5653301 37.0087033,10.6734001 36.9628457,10.9639383 L36.9602803,10.9825379 C36.942322,11.0970215 36.8881267,11.2163153 36.825273,11.2791691 C36.1867943,11.9112341 36.4099893,12.618018 36.6681386,13.2314834 C36.95547,13.9110094 36.8746581,14.079047 36.4035756,14.500103 C36.1630639,14.7159222 35.9940642,14.8781875 35.8478331,15.160388 C35.7477802,15.3531181 35.5152854,15.5051215 35.2901664,15.6523148 C35.2417434,15.6847037 35.1942824,15.7158099 35.1477834,15.7472367"
}), React.createElement("path", {
  d: "M28.7209878,1.72552777 C29.1824497,1.29869952 29.7167066,1.002389 30.3487715,0.823127544 C30.3728227,0.972565535 30.3991187,1.12232421 30.4244526,1.26791401 C30.4244526,1.26791401 30.453314,1.43242407 30.4648586,1.49848464 C30.4292628,1.50746375 30.3949498,1.51612218 30.3609575,1.52542197 C30.2140849,1.56390385 30.0880568,1.59693414 29.9617079,1.61328894 C29.8539586,1.62804033 29.7439646,1.63060579 29.6278775,1.63285056 C29.5294281,1.63509534 29.4290545,1.63734012 29.3280395,1.64663991 C29.0904139,1.66972904 28.8976838,1.6941009 28.7209878,1.72552777"
}), React.createElement("path", {
  d: "M9.84238374,31.4422023 C9.74393424,31.4422023 9.64420202,31.4290543 9.53773547,31.4152649 C9.45564078,31.4046824 9.36328425,31.3924965 9.27349319,31.3876863 C9.24976269,31.3860829 9.17825052,31.3306048 9.167668,31.3062329 C9.10417289,30.9685544 9.0493362,30.6199726 8.99642361,30.2816527 C8.9601865,30.0514028 8.92427007,29.8205115 8.88514682,29.5905822 C8.82678262,29.2513002 8.94126624,28.9636481 9.07434943,28.6304591 L9.10770039,28.546761 C9.21641172,28.2706535 9.22186332,27.9653639 9.22795629,27.6414747 C9.23020106,27.5292358 9.23212516,27.4128281 9.23853881,27.2938549 C9.24463177,27.2928929 9.269645,27.2871206 9.269645,27.2871206 C9.40593501,27.2553731 9.57557599,27.2168912 9.72757944,27.1283828 C9.78530227,27.0943905 9.81544642,27.0895803 9.82763235,27.0895803 C9.85456967,27.0895803 9.89208951,27.1344758 9.95077438,27.2088741 L9.95911212,27.2194566 C10.0626925,27.3509364 10.1746107,27.4737578 10.2826806,27.5930516 C10.4109536,27.7341519 10.5430747,27.8797417 10.6543515,28.0317451 C10.7463874,28.1568112 10.8085998,28.3319038 10.8118066,28.4778143 C10.8284821,29.1098793 10.8239925,29.7509234 10.8191823,30.3711231 L10.8169375,30.7113671 C10.8162961,30.8242473 10.7960931,30.8540708 10.7960931,30.8547121 C10.7111123,30.9345621 10.6120215,31.0121672 10.5170995,31.0875276 C10.4340427,31.1526261 10.3484205,31.219328 10.2666465,31.2924436 C10.1512009,31.396024 10.0203625,31.4422023 9.84238374,31.4422023"
}), React.createElement("path", {
  d: "M33.2543784,6.37603164 C33.1815835,6.33883248 33.1065438,6.30997107 33.0340696,6.28175102 C32.8220986,6.19997701 32.6556644,6.13616122 32.5812661,5.92515221 C32.5264294,5.76801784 32.4353556,5.6304451 32.3474886,5.49704123 C32.3240788,5.4611248 32.3054792,5.43290475 32.2868797,5.40436402 C32.2211398,5.30142497 32.1457794,5.2026548 32.0726638,5.10677076 C31.926112,4.91436133 31.7878979,4.73317579 31.7324198,4.5362768 C31.6506458,4.24477651 31.6365358,3.91960458 31.6227465,3.60533584 C31.6176155,3.47353538 31.6105605,3.32473875 31.599016,3.18139373 C31.5932437,3.11918135 31.5800957,2.95499197 31.5800957,2.95499197 L31.5688718,2.81517445 L32.1945231,2.04938491 C32.2410221,1.99294481 32.2339671,1.91085012 32.1788097,1.86274777 L32.0986391,1.79283901 C32.0742672,1.77167397 32.0428404,1.75948804 32.0104515,1.75948804 C31.9809487,1.75948804 31.95337,1.76910851 31.9299602,1.78610468 L31.5672684,2.05643993 C31.5521963,2.04457468 31.5374449,2.03238875 31.5233349,2.02116486 C31.4399575,1.95510429 31.3690867,1.89834351 31.31425,1.83452772 L31.2882747,1.80406289 C31.2007284,1.70080316 31.1006755,1.58439546 31.0772657,1.47824959 C31.0179395,1.21176253 30.9653476,0.944634099 30.920452,0.711818688 C30.9926056,0.706046405 31.0676452,0.703801629 31.1442883,0.703801629 C31.654494,0.703801629 32.1358383,0.825340252 32.4497863,0.928279298 C33.4269055,1.24671691 34.1692853,1.95831112 34.5961135,2.98449474 C34.6932803,3.2182722 34.7898057,3.45301171 34.885369,3.6880719 L34.769282,4.23740082 C34.7538893,4.30955436 34.7975021,4.37914243 34.8690142,4.39710065 C34.8872931,4.40094884 34.905572,4.40319361 34.9254543,4.40319361 C34.967143,4.40319361 35.0072283,4.39325246 35.041862,4.38491472 C35.0707234,4.37818039 35.1002262,4.37080469 35.1229947,4.37080469 C35.136784,4.37080469 35.1518561,4.37080469 35.1736625,4.39966611 L35.3340037,4.79699158 C35.4799142,5.25685012 35.4350186,5.58266342 35.183283,5.87833258 L35.1348599,5.87769122 C35.0979814,5.87640849 35.061103,5.87512576 35.0248659,5.87512576 C34.9709912,5.87512576 34.9260957,5.87769122 34.8834449,5.88218077 C34.7843541,5.89308397 34.6855839,5.91489037 34.5893792,5.93541404 C34.4566167,5.96427546 34.3344367,5.99057141 34.2244426,5.99057141 C34.1760196,5.99057141 34.1336895,5.9854405 34.0955283,5.9745373 C34.0198473,5.95369294 33.9515419,5.94311042 33.885802,5.94311042 C33.6189943,5.94311042 33.4833456,6.11788232 33.3640518,6.27213055 L33.3278147,6.31798813 C33.3127426,6.33787044 33.2793916,6.36160093 33.2543784,6.37603164 Z M33.0587622,10.9553761 C33.0472176,10.9553761 33.0363144,10.9569795 33.0254112,10.9592243 C32.9955877,10.9669207 32.9641609,10.9723723 32.932734,10.9781445 C32.8346052,10.9957821 32.7367971,11.0137403 32.6486094,11.0692183 C32.5639492,11.1227723 32.5264294,11.2164115 32.4966059,11.2920926 C32.4860234,11.3190299 32.4767236,11.3424397 32.4661411,11.3632841 C32.4424106,11.4085003 32.4462588,11.4630163 32.476403,11.504705 C32.5020575,11.5396594 32.5427842,11.5605037 32.5857557,11.5605037 C32.5931313,11.5605037 32.600507,11.5598624 32.6078827,11.558259 C32.6309719,11.5547315 32.654061,11.5528074 32.6774708,11.5505626 C32.74289,11.5435076 32.8179297,11.5361319 32.8897626,11.5027809 C32.9705745,11.4665438 33.0420867,11.4145933 33.1049404,11.3687357 C33.1302743,11.3504568 33.1552876,11.3324986 33.1809422,11.314861 C33.2344961,11.2792653 33.2553405,11.2099979 33.2303272,11.1506717 L33.1828662,11.0381121 C33.1617012,10.9880857 33.1129575,10.9553761 33.0587622,10.9553761 Z M33.090189,12.8862047 C33.0741549,12.8862047 33.0587622,12.8887702 33.0440108,12.8945425 L32.1390451,13.2238833 C32.0861325,13.2434449 32.0502161,13.2941127 32.0502161,13.3515149 C32.0505368,13.407955 32.0864532,13.4586228 32.1396865,13.4778637 C32.2378153,13.5134595 32.3426784,13.531097 32.4513897,13.531097 C32.8179297,13.531097 33.1485532,13.3268223 33.2210275,13.055525 C33.2335341,13.007102 33.2187827,12.9554721 33.1812628,12.9214798 C33.1565703,12.8983907 33.1241814,12.8862047 33.090189,12.8862047 Z M34.1115624,15.7620843 C34.0102268,15.7620843 33.9213978,15.7534259 33.8405858,15.7354677 C33.4256228,15.6424698 33.020601,15.5222139 32.5398981,15.3711725 C32.4619723,15.34648 32.3878946,15.2852296 32.3776328,15.2659887 C32.3455645,15.0386249 32.2644319,14.816392 32.1858647,14.6018555 C32.0640054,14.2693078 31.9492011,13.9560012 32.0075653,13.6106262 C32.0197512,13.5368693 31.9944173,13.4740155 31.9742143,13.4233477 C31.9661973,13.4037861 31.9607457,13.388714 31.9568975,13.374604 C31.9196983,13.2104146 31.8308693,12.8175787 31.8308693,12.8175787 C31.7930288,12.6485791 31.7548676,12.4799001 31.7163857,12.3112212 C31.7058032,12.2644016 31.6904104,12.218544 31.6772625,12.178138 L31.6602663,12.1255461 C31.6573801,12.1146429 31.6522492,12.1040604 31.6467976,12.0950813 C31.654494,12.096364 31.6625111,12.0973261 31.6708488,12.0973261 C31.6836761,12.0973261 31.6961827,12.0950813 31.70901,12.0915538 C31.763526,12.075199 31.8023286,12.0264552 31.8052147,11.9700151 C31.8138732,11.8253874 31.7843704,11.6996799 31.7583951,11.5887238 C31.7430023,11.5223425 31.7285716,11.4604508 31.7234407,11.4024073 C31.6650765,10.7398775 31.8404898,10.0933818 32.0098101,9.46676846 C32.0543849,9.30322044 32.0986391,9.13967243 32.1390451,8.97612441 C32.2516046,8.52107611 32.3599953,8.06570712 32.4687066,7.61001745 C32.5158469,7.41087369 32.5636286,7.21205062 32.6107689,7.01322754 C32.6264823,6.94812901 32.5928107,6.88238912 32.530919,6.85673453 L32.4376004,6.8192147 C32.4212456,6.81215968 32.4045701,6.80895286 32.3866119,6.80895286 C32.3429991,6.80895286 32.3016311,6.83043858 32.2766178,6.86603432 C32.2612251,6.88784073 32.2435875,6.9083644 32.2265914,6.92888807 C32.1739995,6.99110045 32.1162766,7.05908512 32.0919048,7.14791414 C32.0418783,7.33326856 31.9985862,7.52311253 31.9562561,7.70622217 C31.9168122,7.87906997 31.8776889,8.049673 31.8340761,8.21450375 L31.8260591,8.24528926 C31.7054825,8.70129961 31.5823405,9.16725111 31.4345059,9.61492372 C31.4261681,9.64089899 31.4117374,9.65821584 31.3976274,9.65821584 C31.3835174,9.65821584 31.3649178,9.64314377 31.3508078,9.61973396 C31.1567949,9.30642727 30.9675923,8.9854242 30.7848034,8.67436229 C30.6202933,8.39440657 30.4535385,8.11124402 30.2838975,7.83417444 C30.184486,7.67222984 30.0507614,7.52439526 29.9064543,7.41921144 C29.6742803,7.25021182 29.6508705,7.16939986 29.7496406,6.87693752 C29.7810675,6.784581 29.7749746,6.69222447 29.7692023,6.58543724 C29.7675989,6.56491356 29.7663161,6.54438989 29.7653541,6.52450758 C29.7833123,6.53220396 29.8031946,6.5370142 29.8230769,6.5370142 C29.8378283,6.5370142 29.8516176,6.53476942 29.8650863,6.53060055 C29.898758,6.52001803 29.9272987,6.49468412 29.9436535,6.46293657 C29.9786079,6.39270712 30.0129209,6.32119495 30.0465925,6.2493621 C30.1203495,6.09447251 30.1950685,5.93605541 30.2845389,5.7943138 C30.4278839,5.56791203 30.5856596,5.36427872 30.7527351,5.18726204 L30.7985927,5.138839 C31.0490457,4.87395535 31.1420436,4.77614723 31.150702,4.61388194 C31.1667361,4.65043973 31.1869391,4.68443206 31.2039353,4.71425553 C31.2145178,4.73221374 31.2228555,4.74632376 31.2302312,4.76011311 C31.3180982,4.92622658 31.4072479,5.09105733 31.497039,5.25685012 C31.6702074,5.57657046 31.8485068,5.90655263 32.0133376,6.23557276 C32.1788097,6.56619629 32.3981565,6.91990896 32.9131724,6.93786718 C32.9724986,6.94043264 33.0683826,6.99398659 33.117447,7.05267147 C33.4727631,7.4762929 33.8181381,7.89350068 34.1359343,8.33572169 C34.2154635,8.44667779 34.2648486,8.62754266 34.2590763,8.78628044 C34.2446456,9.18905751 34.1930158,9.5879864 34.1317654,10.0292454 C34.1195795,10.1203192 33.9707829,10.2370475 33.8306447,10.2370475 C33.8008212,10.2370475 33.7761287,10.2312753 33.756567,10.2197307 C33.6751137,10.170987 33.6068084,10.1475772 33.5417098,10.1475772 C33.3582795,10.1475772 33.2662437,10.320425 33.1774146,10.4875005 C33.1543255,10.5311133 33.1562496,10.5830638 33.1822249,10.6241112 C33.2072381,10.6632344 33.2492475,10.6863236 33.2960671,10.6863236 C33.3791239,10.6831167 33.4474292,10.681834 33.510283,10.6811926 C33.64048,10.6795892 33.7540016,10.6779858 33.8668818,10.6523312 C33.89895,10.6449555 33.9287735,10.641428 33.9566728,10.641428 C34.0772494,10.641428 34.1359343,10.7094127 34.136255,10.8495509 C34.136255,10.9255526 34.1343309,11.0005923 34.1324068,11.0759527 C34.1288793,11.2369352 34.1253518,11.401766 34.1391411,11.5659553 C34.1760196,11.9963111 34.0926422,12.2207888 33.8604681,12.3160314 C33.824231,12.3307828 33.7966523,12.3606063 33.783825,12.3978055 C33.7716391,12.4350046 33.775808,12.4754106 33.7956903,12.5090822 C33.8405858,12.5847633 33.8861227,12.6569168 33.9306976,12.7268256 C34.0243368,12.8733774 34.1106004,13.0087054 34.1667198,13.1478815 L34.1910917,13.2097732 C34.3155164,13.5198731 34.4434687,13.8392728 34.4816299,14.156107 C34.5326184,14.5842179 34.5229979,15.0306078 34.5136981,15.463529 L34.5095293,15.6620314 C34.5034363,15.6758208 34.4479583,15.7322609 34.4264725,15.7396366 C34.305896,15.7550293 34.204881,15.7620843 34.1115624,15.7620843 Z M21.7261674,16.1677476 C21.7438049,16.1376034 21.7505393,16.1007249 21.7409188,16.0641671 C21.7274501,16.0134993 21.7168676,15.9615488 21.7062851,15.9092776 C21.6803098,15.7794012 21.6533725,15.64728 21.5905187,15.5257414 C21.3330108,15.0251562 21.2098688,14.5976866 21.4484564,14.1397522 C21.6055908,13.8386314 21.6928164,13.5439243 21.7162262,13.2373519 C21.8146757,13.1732155 21.8954877,13.0904794 21.941666,13.007102 C22.0869351,12.7431804 22.2536899,12.4997824 22.4380823,12.2823598 C22.5365318,12.3955607 22.6359433,12.5074788 22.7350342,12.619397 C22.8867169,12.79 23.0537925,12.9785612 23.2086821,13.1623123 C23.3815299,13.3669076 23.5489261,13.5830475 23.711512,13.7921325 C23.7657074,13.8623619 23.8189406,13.9303466 23.8718532,13.9983312 C23.7798174,14.1035151 23.6871402,14.2077368 23.5931802,14.313562 C23.5659222,14.2914349 23.5412297,14.2734767 23.5094821,14.2596874 C23.4453457,14.2327501 23.3812092,14.2112643 23.3189968,14.19042 L23.2442778,14.1647654 C23.2298471,14.1596345 23.214775,14.1577104 23.1997029,14.1577104 C23.1599383,14.1577104 23.1224185,14.1743859 23.0967639,14.2042093 C23.0611682,14.2462187 23.0541131,14.3071484 23.0800884,14.3558921 C23.0929157,14.3789812 23.1060637,14.4017497 23.1195324,14.4241974 C23.1448663,14.4674896 23.1685968,14.5075749 23.1798206,14.5450947 C23.2000236,14.6085898 23.2061166,14.6416201 23.2083614,14.6582956 C23.0040867,14.8901489 22.7863434,15.1098164 22.5753343,15.3227495 C22.3739458,15.5267035 22.1706332,15.728092 21.9666792,15.9301219 L21.7261674,16.1677476 Z M31.4361093,17.5389854 C31.4428436,17.556623 31.449578,17.5742605 31.4569537,17.5922187 C31.4460505,17.5931808 31.4348266,17.5960669 31.4242441,17.5992737 L31.416227,17.6031219 L31.4361093,17.5389854 Z M27.0042788,18.911506 C26.4751528,18.8595555 25.9402546,18.7841951 25.4229939,18.712683 L25.3405785,18.700497 C25.3338442,18.6992143 25.3171687,18.6899145 25.3078689,18.6831802 C25.2616907,18.4984671 25.2203227,18.2919477 25.1773512,18.0363638 C25.1690135,17.9869787 25.166448,17.9340661 25.1638826,17.8785881 C25.159393,17.7913625 25.1552241,17.7015714 25.1289282,17.6114597 C24.9746799,17.0781648 24.9682663,16.4929195 25.11097,15.9192187 C25.2010817,15.5578097 25.1186663,15.2509166 25.0391371,14.9546061 C25.0029,14.8199195 24.9650595,14.6807433 24.9471013,14.5431706 C24.9416497,14.503406 24.9198433,14.469093 24.8874543,14.4482486 C25.0901256,14.1477692 25.36944,13.2860957 25.214871,13.0257016 C25.1908199,12.9846542 25.1465657,12.9589996 25.098784,12.9589996 C25.0901256,12.9589996 25.0814672,12.9599617 25.0728088,12.9618858 C25.0166893,12.972789 24.9733972,13.0183259 24.9647388,13.074766 C24.9589665,13.1164547 24.9557597,13.1555779 24.9531942,13.1927771 C24.9480633,13.2508206 24.9442151,13.3005264 24.9297844,13.3303498 L24.9073366,13.3771695 C24.8364658,13.5278902 24.8034356,13.5695789 24.7893255,13.5779166 C24.6761246,13.6042126 24.587937,13.6167192 24.5084078,13.6167192 C24.3499907,13.6167192 24.2342243,13.5660514 24.1328887,13.4509264 C24.0472665,13.3540803 23.962927,13.2553101 23.8789082,13.1562193 C23.6108178,12.8406678 23.3334275,12.5151752 23.0050487,12.2538191 C22.8995442,12.1698003 22.8052636,12.0819333 22.7186794,11.9860493 C23.1711622,11.5540901 23.7281875,11.2337284 24.3750039,11.034264 C24.4795463,11.001875 24.5844095,10.973655 24.6703524,10.9518486 C24.7248684,11.0406776 24.7607848,11.1272618 24.7742535,11.2039049 C24.8027942,11.3664909 24.8188283,11.5383767 24.8342211,11.7038488 C24.8547447,11.9222335 24.8755891,12.1463905 24.9252949,12.3657372 C24.9705111,12.5639189 25.138228,12.7848691 25.3338442,12.9028802 C25.3755329,12.9272521 25.424918,12.9400794 25.4813581,12.9400794 C25.5647355,12.9400794 25.6529232,12.9128214 25.7385454,12.8865254 C25.7876098,12.8714533 25.8331467,12.8567019 25.873232,12.8496469 C25.9405753,12.8368196 25.9877156,12.7752486 25.9825847,12.7066226 L25.9739263,12.5947044 C25.969116,12.5353782 25.9264653,12.4869552 25.8681011,12.4738072 C25.8414844,12.4673935 25.8129437,12.4632247 25.7840823,12.4593765 C25.7433556,12.4536042 25.7019876,12.4481526 25.683388,12.4362873 L25.6356063,12.4074259 C25.5855799,12.3779231 25.4704549,12.3086557 25.459231,12.2727393 C25.3848327,12.0238898 25.3344856,11.7522718 25.309793,11.4639783 C25.2700284,10.9977062 25.4791133,10.6019841 25.7003842,10.1828522 L25.7058358,10.1725904 C25.7363006,10.1148676 25.7664448,10.0571447 25.7959475,9.9994219 C25.8094162,9.97376731 25.8254503,9.94875408 25.8418051,9.92374086 C25.8774009,9.86794212 25.9158827,9.80765383 25.9383305,9.73646234 C25.9931672,9.56040772 26.0447971,9.3840324 26.0957856,9.20701573 C26.1535084,9.00755128 26.2112312,8.80776616 26.2731229,8.614074 C26.328601,8.43801937 26.3927374,8.26100269 26.4543085,8.08911694 C26.4972799,7.9714265 26.53961,7.85373607 26.580016,7.73540427 C26.6108015,7.64625456 26.6380595,7.55325667 26.6585831,7.48398928 C26.7118164,7.49617521 26.7628049,7.50771977 26.8118693,7.51894366 C27.0010719,7.5619151 27.1639786,7.59943494 27.3239991,7.64625456 L27.3846081,7.66357141 C27.5536077,7.71103241 27.6203096,7.73796973 27.6459642,7.75207975 C27.6918218,7.99483632 27.8659523,8.07115872 27.9942253,8.12824019 C28.0493826,8.15261205 28.1003711,8.17505982 28.130836,8.20552464 C28.2219098,8.29499503 28.3203593,8.34021124 28.4239397,8.34021124 C28.5656813,8.34021124 28.6788822,8.25490973 28.7705973,8.18660438 L28.784066,8.17634254 C28.9893027,8.02273568 29.0867902,7.79152368 29.015278,7.62573089 C28.9976405,7.58500423 28.960762,7.55582213 28.9171492,7.54684302 C28.8305649,7.53080891 28.7536012,7.51830229 28.6827304,7.50579568 C28.5486851,7.48398928 28.4431806,7.46667243 28.3463345,7.43524556 L28.2639192,7.40862892 C28.0202005,7.32909969 27.7694269,7.24764636 27.5520043,7.12835251 C27.4667028,7.08089152 27.3753083,7.04882328 27.2874413,7.01675504 C27.0773943,6.94139468 26.9119222,6.88206844 26.8609337,6.68196263 C26.8282241,6.55497241 26.8009661,6.41483421 26.777877,6.25449302 C26.8442582,5.99121278 26.8936433,5.72087753 26.9420664,5.45984207 C26.9664382,5.32964502 26.9885653,5.20842708 27.0126165,5.08720914 C27.1245346,4.87972764 27.2505628,4.64402608 27.3406746,4.40319361 C27.5289151,3.89843954 27.69567,3.38182022 27.8566525,2.88187638 L27.8983412,2.7523207 C27.9890944,2.60224134 28.0859404,2.45729291 28.1869554,2.32164426 C28.4864727,2.2716178 28.7959312,2.24147366 29.0951279,2.21197088 C29.6290641,2.16002034 30.1774309,2.10582501 30.7046328,1.94003222 L31.2834645,2.79016122 C31.2722406,2.8087608 31.2629408,2.82351219 31.2555651,2.83505675 C31.2267037,2.88187638 31.2058594,2.91522735 31.2032939,2.96557448 L31.1914286,3.1419498 C31.1657741,3.54152005 31.1394781,3.95359691 31.1218406,4.36214627 C31.1077305,4.32270233 31.0756623,4.29191683 31.034615,4.27876885 C31.021467,4.27459998 31.008319,4.27267588 30.9945297,4.27267588 C30.9592546,4.27267588 30.9243002,4.28742727 30.899287,4.3124405 L30.8778013,4.3342469 C30.2957627,4.91756816 29.7461131,5.4701039 29.5860926,6.29169217 C29.5697378,6.29650241 29.5553071,6.30451947 29.5428005,6.31510199 C29.5104116,6.34075658 29.4831536,6.35999752 29.4613472,6.37603164 C29.4084346,6.41355148 29.3619356,6.44626108 29.3346776,6.5023805 C29.118217,6.94396014 29.335319,7.70622217 29.6653012,8.02049091 C29.8253217,8.17249436 29.9619324,8.36362106 30.0943742,8.54801343 C30.1277252,8.59419169 30.1594727,8.63844586 30.1908996,8.6814173 C30.4339769,9.01300289 30.6770541,9.35324689 30.9121143,9.68226702 C30.9121143,9.68226702 31.1298576,9.9865946 31.2363242,10.1350705 C31.2497928,10.1530288 31.2677511,10.1725904 31.2857093,10.1918313 C31.2895575,10.1960002 31.2943677,10.2004898 31.2982159,10.2049793 C31.2918022,10.2896395 31.2857093,10.374941 31.2796163,10.4592804 C31.2546031,10.8069001 31.2289485,11.1663851 31.1654534,11.5111187 C31.1580777,11.5528074 31.0974687,11.5553728 31.0791898,11.5553728 C31.021467,11.5553728 30.9631028,11.531001 30.9307139,11.4928398 C30.67513,11.1923604 30.442956,10.9223458 30.1876928,10.6645172 C30.1017499,10.5785743 29.994642,10.5282272 29.8920236,10.4798041 C29.8496935,10.4596011 29.810891,10.4416429 29.7740125,10.4207986 C29.7538095,10.4095747 29.7310411,10.4038024 29.7079519,10.4038024 C29.6643391,10.4038024 29.6223297,10.4256088 29.5973165,10.4618459 L29.5229182,10.5683124 C29.4844363,10.6234698 29.4927741,10.6994715 29.5428005,10.7453291 L31.0301254,12.1040604 C31.0554593,12.1274702 31.0875276,12.1396561 31.1211992,12.1396561 C31.158719,12.1396561 31.1946355,12.123622 31.2199694,12.096364 L31.4329025,11.8670761 L31.5544411,12.0325482 C31.5480275,12.0312655 31.5409724,12.0306241 31.5339174,12.0299828 C31.4742705,12.0299828 31.4226406,12.0665405 31.4037204,12.1207359 C31.3290014,12.3362344 31.3043088,12.5542985 31.3277187,12.7871139 C31.3552973,13.0612973 31.2533203,13.2165076 30.9509169,13.3592112 C30.4076809,13.6167192 29.8577106,13.9066161 29.2695791,14.2462187 C29.1605471,14.3087518 29.0916004,14.3366511 29.0451014,14.3366511 C29.0216916,14.3366511 28.9719859,14.3366511 28.8629539,14.1856097 C28.7988174,14.0971014 28.7378877,14.0060276 28.6705444,13.9053333 C28.6343073,13.8517794 28.5993529,13.7988668 28.5618331,13.7437094 C28.5364992,13.7071516 28.4948105,13.6847039 28.4502356,13.6847039 C28.4040574,13.6853452 28.362048,13.7081137 28.3373554,13.7456335 L28.2187029,13.9271397 C28.22672,13.905654 28.2331336,13.8848097 28.2385853,13.8636446 C28.2520539,13.8456864 28.2607123,13.8258041 28.2635985,13.8039977 C28.2642398,13.8014322 28.2645605,13.7985461 28.2648812,13.7963013 C28.2735396,13.7831534 28.2818774,13.769364 28.2905358,13.756216 C28.3450518,13.6738007 28.4063021,13.5811234 28.397323,13.4701673 C28.3877026,13.3560044 28.3588411,13.2469724 28.3312625,13.1414679 C28.300477,13.0231361 28.2709742,12.9118593 28.2712949,12.8060341 C28.2725776,12.4917654 28.3319038,12.1755726 28.3838544,11.9344194 C28.4361256,11.6948697 28.4980173,11.4514717 28.5579849,11.2170529 C28.6173111,10.9861616 28.6785615,10.7482153 28.7308327,10.5096276 C28.7536012,10.4038024 28.7237777,10.3008633 28.6974817,10.2101102 C28.6868992,10.1741938 28.6775994,10.1434083 28.6718272,10.1126228 C28.6670169,10.0885716 28.6561137,10.0664445 28.6397589,10.0484863 C28.6513035,10.0574654 28.662848,10.0670859 28.6737512,10.0754236 C28.6974817,10.0943439 28.716402,10.1087746 28.7308327,10.1241673 C28.756808,10.1498219 28.7908003,10.1642526 28.8270374,10.1642526 C28.8546161,10.1642526 28.8809121,10.1555942 28.9040012,10.1392394 L28.9649309,10.09723 C29.0056575,10.0693307 29.0274639,10.0209076 29.022333,9.9721639 L28.8539747,8.38767224 C28.8491645,8.33796647 28.8170963,8.29563639 28.770918,8.27767818 C28.7552046,8.27030248 28.737567,8.26709566 28.7196088,8.26709566 C28.689144,8.26709566 28.6583585,8.27831954 28.634628,8.2972398 C28.6131423,8.31519802 28.5961461,8.32706327 28.5829981,8.33668374 C28.5486851,8.36137628 28.4935277,8.4011409 28.4935277,8.47810467 L28.4941691,8.70995803 C28.4954518,9.08419437 28.4967346,9.46805119 28.5137307,9.8464564 C28.5169376,9.92245813 28.5618331,9.97889823 28.6128216,10.0253972 C28.6035218,10.0189835 28.5935806,10.014494 28.5829981,10.0103251 C28.5682467,10.0055149 28.553816,10.0032701 28.5393853,10.0032701 C28.506355,10.0032701 28.4752488,10.0151353 28.4505563,10.0366211 C28.4274672,10.056824 28.4046987,10.076065 28.3816096,10.0956266 C28.3232454,10.1453324 28.2632778,10.1966416 28.2058756,10.253723 C28.1638663,10.2954117 28.1346842,10.3540966 28.1170466,10.4329845 C28.0792061,10.6003807 28.0423276,10.7674562 28.0054492,10.9348524 C27.9599123,11.1413719 27.9143754,11.3478913 27.8669144,11.5537694 C27.7206832,12.1906446 27.635061,12.2602327 26.9468766,12.2996766 C26.8458617,12.3057696 26.7560706,12.3497031 26.6771827,12.3885057 C26.6447938,12.4048605 26.6159324,12.4189705 26.5864296,12.4311564 C26.5213311,12.456811 26.4866974,12.5273611 26.5072211,12.5947044 L26.5517959,12.7428597 C26.5684714,12.7989791 26.6210633,12.8390644 26.6807102,12.8390644 C26.6877652,12.8390644 26.6944996,12.838423 26.7015546,12.837461 C26.7672945,12.8271992 26.8346378,12.8191821 26.9013397,12.8105237 C27.0725841,12.79 27.2399803,12.7694763 27.4041697,12.7226567 C27.471513,12.7030951 27.5362908,12.6934746 27.5956171,12.6934746 C27.6943872,12.6934746 27.8175293,12.7191292 27.8412598,12.8413092 C27.8851933,13.0645041 27.919827,13.2934713 27.9531779,13.5150629 C27.9631191,13.5820855 27.9730602,13.6494288 27.9833221,13.7164514 C27.9384265,13.7446715 27.8928896,13.7738536 27.8483148,13.802715 C27.6850875,13.9078988 27.5164085,14.0162894 27.3448434,14.1047978 C27.2813483,14.1365453 27.1947641,14.1480899 27.0937491,14.1621999 C27.0344229,14.1708584 26.974776,14.1788754 26.9125636,14.1910613 C26.860613,14.2006818 26.819245,14.2410878 26.8070591,14.2927177 C26.7945525,14.3437062 26.8144348,14.3982222 26.8561235,14.4302904 C26.9693244,14.5181574 27.1126694,14.564015 27.2701245,14.564015 C27.5629075,14.564015 27.8621041,14.4132942 28.0538722,14.1958716 C28.0497033,14.2154332 28.050024,14.2362776 28.0557963,14.2564805 C28.0654168,14.293359 28.09043,14.3251066 28.1244223,14.3421027 C28.5688881,14.5713907 28.7170434,14.9404961 28.6182732,15.5764092 C28.5663226,15.9102396 28.4826245,16.1347173 28.3626893,16.2604248 C28.1151225,16.5211395 28.0256521,16.8293153 27.9393886,17.1272293 C27.8848726,17.3151491 27.8335634,17.4928072 27.7450551,17.6531484 C27.6264026,17.8683262 27.5318013,18.0972935 27.4407275,18.318885 C27.3672912,18.4984671 27.2909688,18.6825388 27.2040639,18.8550659 C27.1915573,18.8694966 27.1008042,18.9121474 27.0183888,18.9121474 C27.0132579,18.9121474 27.0084476,18.9121474 27.0042788,18.911506 Z M24.425351,19.2042891 C24.4154099,19.2042891 24.4048273,19.2030063 24.3948862,19.1997995 C24.0883138,19.1189875 23.7936067,18.9278608 23.5085201,18.7425064 L23.4312356,18.6915179 C23.3606855,18.6466224 23.2978318,18.5747895 23.2311298,18.4994292 C23.1381319,18.3939247 23.0428893,18.284572 22.9085233,18.2233216 C22.7186794,18.1373788 22.5108772,18.1059519 22.3104507,18.0748457 C22.2248285,18.0616977 22.1366408,18.0482291 22.0529427,18.0312329 C21.9384591,18.0075024 21.7832489,17.9690205 21.7505393,17.911939 C21.7165469,17.8535749 21.7652906,17.6897062 21.8044139,17.5720157 C21.8230135,17.5165377 21.8146757,17.4658699 21.8079414,17.4248225 C21.8050553,17.4094298 21.8031312,17.3959611 21.8018484,17.3824924 C21.7989623,17.3420864 21.7781179,17.30617 21.7454083,17.2827602 C21.7223192,17.2667261 21.6953819,17.2583883 21.6674825,17.2583883 C21.655938,17.2583883 21.6440727,17.2593504 21.6322075,17.2625572 C21.39843,17.3257316 21.3285212,17.4633044 21.3128078,17.5947842 C21.2967737,17.5890119 21.2794568,17.5851637 21.26214,17.5851637 C21.2275063,17.5851637 21.194476,17.5983117 21.1688214,17.6220422 L20.792661,17.9818478 C20.7400691,17.9337454 20.6884392,17.8853224 20.6377714,17.836258 C20.4460033,17.6544311 20.2651384,17.481904 20.0493192,17.3488208 C19.943494,17.2834016 19.7433882,16.8908863 19.7488398,16.6648053 C19.7498019,16.6301716 19.7562155,16.6134961 19.758781,16.6093272 C19.8844885,16.5413425 19.9999341,16.4416103 20.1124936,16.3444436 C20.303941,16.1786508 20.4844852,16.0231198 20.7131317,16.0231198 C20.7974712,16.0231198 20.8856589,16.0433228 20.9815429,16.0843701 C20.9988597,16.0920665 21.016818,16.095594 21.0350969,16.095594 C21.059148,16.095594 21.0825578,16.0891804 21.1034022,16.0766738 C21.1406014,16.055188 21.1652939,16.0167062 21.1691421,15.9737347 L21.181328,15.8547616 L21.3397451,16.2075122 C21.3615515,16.2559352 21.4096539,16.2867207 21.4628872,16.2867207 C21.4786006,16.2867207 21.494314,16.2838346 21.5090654,16.2787037 L21.6565793,16.2251497 C21.6642757,16.2222636 21.6722928,16.2184154 21.6790271,16.2142465 L21.6758203,16.217774 C21.6232283,16.2700452 21.6229077,16.3543847 21.6742168,16.4069766 L21.7553495,16.4916368 C21.7806834,16.5172914 21.8159585,16.5326841 21.8518749,16.5326841 C21.8852259,16.5326841 21.9169734,16.5211395 21.9410246,16.4996538 C22.0596771,16.3963941 22.1796123,16.2944171 22.2995475,16.1924401 C22.5727689,15.9589833 22.8536867,15.7207163 23.1144014,15.4670565 C23.4796587,15.1117405 23.8224681,14.7076807 24.0979343,14.3841121 C24.1601467,14.3109966 24.1678431,14.2141505 24.1694465,14.1310937 C24.4003378,14.143921 24.5395139,14.2465394 24.6190432,14.4597932 C24.629305,14.4867305 24.6482253,14.5098196 24.6713144,14.5252124 C24.5779958,14.6595783 24.5324589,14.796189 24.5353451,14.9321583 C24.5401553,15.1457328 24.5516999,15.3589866 24.5629238,15.5648647 C24.5760717,15.815959 24.5905024,16.0757117 24.5921059,16.3284094 C24.5937093,16.4781681 24.5795992,16.632737 24.5658099,16.7824957 C24.5497758,16.9563055 24.533421,17.136529 24.5395139,17.3170732 C24.5468896,17.5537368 24.5674133,17.7920038 24.5876163,18.0222538 C24.6119882,18.2999647 24.63636,18.5824859 24.6382841,18.8592348 C24.6392462,18.9631359 24.5908231,19.0875607 24.5238005,19.154904 C24.4917323,19.1872929 24.4583813,19.2042891 24.425351,19.2042891 Z M33.2383443,21.7675034 C33.2293652,21.7675034 33.2033899,21.7630138 33.1572117,21.7238905 C32.9426751,21.5398189 32.7313455,21.3438819 32.5270708,21.155962 C32.3644848,21.0049206 32.1964472,20.8497104 32.0252028,20.6983483 L31.9710075,20.6505666 C31.7885392,20.4889427 31.6006194,20.3218672 31.3806313,20.2054595 C31.2234969,20.1227234 31.1843736,20.0566628 31.1997664,19.8976044 C31.2148385,19.739508 31.2209314,19.5733945 31.1654534,19.4245979 C30.9499548,18.8496143 31.0384631,18.4266343 31.443485,18.0921625 C31.5101869,18.0373259 31.5339174,17.9619655 31.559572,17.8821156 C31.5695132,17.850368 31.5807371,17.8154136 31.5961298,17.7782145 C31.6095985,17.7458256 31.6099192,17.7095885 31.5977332,17.6781616 C31.653532,17.6723893 31.7003516,17.6316626 31.7141409,17.5761846 L32.1031287,16.0019548 C32.1210869,15.9301219 32.0768327,15.8566856 32.0049999,15.8384068 L31.9081538,15.8140349 C31.8966092,15.8117901 31.885706,15.8101867 31.8751235,15.8101867 C31.824135,15.8101867 31.7779567,15.8384068 31.7548676,15.883623 L31.695862,15.9981066 C31.4861358,16.400563 31.2706372,16.8145639 31.3722935,17.3173939 C31.3694074,17.3164319 31.3100811,17.2987943 31.3100811,17.2987943 C31.2969331,17.2946255 31.2841059,17.2927014 31.2706372,17.2927014 C31.2305519,17.2927014 31.1933527,17.3103389 31.1676981,17.3408037 L30.688278,17.910977 L29.3167194,15.9878447 C29.2913855,15.9519283 29.2503382,15.931084 29.2067254,15.931084 C29.1993497,15.931084 29.1916533,15.9317253 29.1842776,15.9333287 C29.1490025,15.939101 29.1185377,15.958342 29.098014,15.9859206 C29.1291202,15.9153705 29.15253,15.8416136 29.1634332,15.7633671 C29.1913326,15.5546028 29.1589437,15.3506488 29.1278375,15.1531085 C29.1211032,15.1088543 29.1143688,15.0655622 29.1076345,15.0225908 L31.5509136,13.7020207 C31.565665,13.7231857 31.5791336,13.7456335 31.5833025,13.7635917 C31.6705281,14.1865718 31.7513401,14.6182103 31.8289452,15.0828791 C31.9087951,15.558451 32.1351969,15.7970387 32.6117309,15.9067121 L32.6951083,15.9253117 C32.8557702,15.9615488 33.020601,15.9981066 33.1613805,16.0622431 C33.5224689,16.2257911 33.8508477,16.3049996 34.1657578,16.3049996 C34.3594499,16.3049996 34.5502559,16.2735727 34.7333656,16.2120017 L34.5893792,19.4598729 C34.5884171,19.4797552 34.5919446,19.4986755 34.598679,19.5159923 C34.5303736,19.5714704 34.4716888,19.6269484 34.4190968,19.6769749 C34.3289851,19.7622764 34.2571522,19.8299404 34.1952605,19.8440504 C33.8790677,19.9146005 33.8681645,20.1329852 33.8620715,20.2638237 C33.8611095,20.2801785 33.8601474,20.2968539 33.8591854,20.3132087 C33.8540545,20.3760625 33.8925364,20.4334646 33.9528247,20.4527056 L34.042295,20.4812463 C34.0362021,20.48766 34.0301091,20.4937529 34.0240161,20.5001666 C33.9101739,20.6213845 33.8120451,20.7256063 33.7360434,20.8545206 C33.6610037,20.9831142 33.6032809,21.1190836 33.5478028,21.250884 C33.5000211,21.365047 33.4509567,21.482096 33.3913098,21.5888833 C33.3088944,21.7360765 33.2623955,21.7675034 33.2383443,21.7675034 Z M35.184245,23.6486262 C34.9677844,23.6197648 34.7439481,23.5905827 34.5294116,23.5421597 C34.4752163,23.5302944 34.4187762,23.5200326 34.3616947,23.5104121 C34.0698737,23.4591029 33.8591854,23.4219038 33.8024246,23.1159728 C33.7822216,23.0050167 33.7523982,22.8607096 33.6994856,22.7247403 C33.5429926,22.3222839 33.7427777,21.6475681 34.102904,21.3628022 C34.2824861,21.2213813 34.4053075,21.0113343 34.5159429,20.808663 C34.5765519,20.6964242 34.6012444,20.5745649 34.6246542,20.4565538 C34.6342747,20.4113375 34.6426125,20.3702902 34.6525536,20.3298842 C34.6878287,20.1900667 34.721821,20.0502492 34.7599822,19.8943975 L34.8180257,19.6580546 C34.8533008,19.6477928 34.8834449,19.6231002 34.9004411,19.5894286 L35.0027388,19.3896435 C35.0335243,19.4342183 35.0633478,19.4778311 35.0931712,19.5214439 C35.4132122,19.9880368 35.6896404,20.3904932 35.8121411,20.8820993 C35.8855774,21.1748823 36.0013437,21.3733847 36.1748329,21.4994129 C36.1369924,21.6065208 36.0988312,21.7136287 36.0587459,21.8194539 C35.8137445,22.4755701 35.5392404,23.1599063 35.3343244,23.6691499 C35.2955218,23.6633776 35.184245,23.6486262 35.184245,23.6486262 Z M27.7838576,25.0358982 C27.7601271,25.0358982 27.737038,25.0314087 27.7165143,25.024033 C27.4631752,24.9310351 27.2377355,24.8723502 27.0270472,24.8444508 C26.6483213,24.793783 26.28114,24.5507058 26.2237378,24.3140422 C26.1576773,24.0379346 26.1108576,23.7640719 26.084241,23.4988675 C26.0319698,22.9758346 25.9784158,22.4364468 25.6715228,21.9297686 C25.5073334,21.6584713 25.377457,21.3554265 25.2511082,21.0620021 C25.1786339,20.8936439 25.1055184,20.7227201 25.0263098,20.557248 C24.9862245,20.474512 24.9054125,20.4389162 24.8406347,20.4094135 C24.8175456,20.3991516 24.8011908,20.3917759 24.7867601,20.3831175 C24.7659157,20.3706109 24.7425059,20.3635559 24.7178134,20.3635559 C24.7133238,20.3635559 24.7091549,20.3641972 24.7046654,20.3648386 C24.8229972,20.1349093 24.8954714,19.8578398 24.8425588,19.6150832 C24.8399933,19.6061041 24.8371072,19.597125 24.833259,19.5881459 C24.8390313,19.5804495 24.8444829,19.5714704 24.8505759,19.5624913 C24.8662893,19.5381194 24.8836061,19.5140682 24.9006023,19.4896964 C24.9567217,19.4104878 25.0112377,19.3341654 25.0426646,19.2405262 C25.058378,19.1940272 25.0696019,19.1741449 25.0740915,19.1670899 C25.091729,19.1683726 25.1196284,19.1728622 25.1702962,19.1914618 C25.3671952,19.2607292 25.5740353,19.2905526 25.7741411,19.3203761 C25.8597633,19.3335241 25.9380098,19.3450686 26.0149736,19.3585373 C26.0826376,19.3713646 26.1509429,19.3825885 26.2186069,19.3947744 C26.3263562,19.413374 26.4341055,19.4316529 26.5418548,19.4528179 C26.6656382,19.4771898 26.8064177,19.5054098 26.941425,19.5054098 C27.0446847,19.5054098 27.1331931,19.4903377 27.2095155,19.4573075 C27.2204187,19.4980341 27.2303598,19.5381194 27.2406217,19.577884 C27.2742933,19.7074397 27.3086063,19.8418056 27.3486916,19.9752095 C27.4083386,20.1714671 27.4689475,20.3670834 27.5301979,20.5630203 L27.5420631,20.6005402 C27.6164614,20.8394485 27.6905391,21.0780362 27.7620512,21.317586 C27.8063054,21.4650999 27.8431839,21.5975417 27.8476734,21.7242112 C27.853125,21.8637081 27.8447873,22.0115426 27.8361289,22.1542463 C27.8191327,22.4511982 27.8018158,22.7577706 27.8973792,23.0358022 C28.0804888,23.5671729 28.07632,24.0905265 28.0724718,24.644345 L28.0715097,24.7722973 C28.0705477,24.9207732 27.9162995,25.0358982 27.7838576,25.0358982 Z M25.4473658,25.1978428 C25.3944532,25.1978428 25.3399372,25.1850155 25.28959,25.1619264 C25.0882015,25.0679664 24.8823234,24.9791374 24.6831797,24.8935152 L24.6575251,24.8819707 C24.5600376,24.8396406 24.4628709,24.7979519 24.3657041,24.7553011 C24.3115088,24.7312499 24.2582755,24.7030299 24.2018354,24.6738478 C24.071959,24.6058631 23.9379138,24.535313 23.7868724,24.5109411 C23.6326242,24.4859279 23.4658693,24.474704 23.2462019,24.474704 C23.1589763,24.474704 23.0717507,24.4763075 22.9851664,24.4782315 L22.8960167,24.479835 C22.7597267,24.4795143 22.7372789,24.4564251 22.7350342,24.3159663 C22.7334308,24.2210443 22.7093796,24.1341393 22.6856491,24.0497999 C22.6638427,23.9712327 22.6429983,23.8981171 22.6468465,23.8359047 C22.6571084,23.6572846 22.6131749,23.4886057 22.5711655,23.3253784 C22.506067,23.0752461 22.4505889,22.8594269 22.5875203,22.6413628 C22.6369054,22.562475 22.6853284,22.4839078 22.7379203,22.3976442 L22.84118,22.2280033 C22.8681174,22.1847111 22.867476,22.128271 22.8398973,22.0846582 C22.8148841,22.045535 22.772554,22.0224458 22.7263757,22.0224458 C22.7206035,22.0224458 22.7148312,22.0230872 22.7087382,22.0237286 C22.689818,22.0259734 22.6718597,22.0272561 22.6561463,22.0285388 C22.6115715,22.0307836 22.5679587,22.0339904 22.5227424,22.0554761 C22.4451373,22.0926753 22.3761906,22.1115955 22.3168643,22.1115955 C22.2039841,22.1115955 22.1116276,22.0339904 22.0343432,21.8733285 C21.9718101,21.7444142 21.9070323,21.6161413 21.8422544,21.4878683 C21.7143021,21.2354913 21.582181,20.9750972 21.4760351,20.7124583 C21.3839993,20.4860565 21.3349349,20.2426586 21.3381417,20.0271601 C21.3416692,19.794024 21.3352556,19.5570397 21.3288419,19.3274311 C21.3189008,18.9323504 21.3086389,18.5279699 21.344876,18.1235894 C21.4205571,18.2361489 21.5744846,18.3262607 21.5844258,18.3317123 C21.705323,18.4029038 21.8339167,18.4696057 21.9464762,18.5286113 C22.0750698,18.5953132 22.2062289,18.6629772 22.3287296,18.7370548 C22.3976763,18.7781022 22.4624541,18.8306941 22.5314009,18.8858514 C22.6215126,18.9586463 22.7145105,19.0333653 22.8241839,19.0888434 C23.0396824,19.1981961 23.2628774,19.2998524 23.4777346,19.3989433 C23.7092673,19.5047684 23.9446481,19.6125177 24.1691258,19.7286048 C24.2711028,19.7805553 24.3621766,19.8074926 24.4461954,19.8094167 L23.8564605,20.7438852 C23.8298438,20.7862153 23.8285611,20.8388072 23.8535743,20.8820993 C23.8769841,20.9244294 23.9222004,20.9507253 23.9709441,20.9507253 C24.1713706,20.9475185 24.3759659,20.8253385 24.5494551,20.6063124 C24.5529826,20.6015022 24.5565101,20.5979747 24.5600376,20.5931645 C24.5539447,20.6252327 24.5491344,20.659225 24.5468896,20.6941794 C24.5427208,20.7656916 24.5863336,20.8131526 24.609102,20.8388072 L24.6174398,20.8477863 C25.0121998,21.5683596 25.2578425,22.1981798 25.1702962,22.9206772 C25.1629205,22.9800034 25.1882544,23.0281058 25.2026851,23.0566465 C25.2062126,23.0633809 25.2084574,23.0669084 25.2094194,23.0707566 C25.2257743,23.1121246 25.2616907,23.1432308 25.3056242,23.1534926 C25.3152446,23.1557374 25.3251858,23.1570201 25.3357683,23.1570201 C25.3611022,23.1570201 25.3864361,23.1496444 25.4072805,23.1358551 C25.4114494,23.1390619 25.4152975,23.1429101 25.4191457,23.1461169 C25.4832822,23.1967847 25.5435705,23.2452078 25.5669803,23.2942722 C25.79242,23.7650339 25.7372627,24.2832567 25.683388,24.7838419 C25.6737675,24.8710675 25.6647884,24.9560483 25.6570921,25.0410291 C25.6433027,25.1901464 25.4800754,25.1978428 25.4473658,25.1978428 Z M34.170568,26.6582304 C33.7912007,26.4494662 33.4730838,25.7766745 33.5160552,25.5230148 C33.5625542,25.2523588 33.5997533,24.9602172 33.6372732,24.5741156 C33.6488178,24.4554631 33.6459316,24.3364899 33.6430455,24.2216856 C33.6417627,24.1723006 33.64048,24.1225948 33.64048,24.0732097 C33.64048,24.0074698 33.5939811,23.9519918 33.5292032,23.9401265 L33.3791239,23.9135099 C33.3714275,23.9125478 33.3634104,23.9119065 33.3557141,23.9119065 C33.2951051,23.9119065 33.2415511,23.9532745 33.225517,24.011318 C33.204352,24.0908472 33.1722837,24.1774315 33.1411775,24.2608089 C33.0610069,24.4782315 32.9789123,24.7011058 33.0218837,24.9172457 L33.0388799,25.0006231 C33.0840961,25.2164424 33.116485,25.372294 33.0270146,25.5499521 C32.9805157,25.6419879 33.0023221,25.7503786 33.0225251,25.8343973 C33.020601,25.8360008 33.0180355,25.8376042 33.0157907,25.8395283 C32.8977796,25.9248298 32.7922751,26.0187897 32.6896567,26.1095428 C32.5989036,26.1906755 32.5158469,26.2644324 32.4270179,26.3324171 C32.2750144,26.4478627 32.1364796,26.5087924 32.0261649,26.5087924 C31.8315107,26.5087924 31.7513401,26.2968213 31.7186305,26.1191633 C31.6839968,25.9312434 31.6628317,25.7413995 31.6410253,25.5396902 C31.6301221,25.4396373 31.6195396,25.344074 31.6073537,25.2469072 C31.5993366,25.1795639 31.5419345,25.1282547 31.4736291,25.1282547 L31.4492573,25.1292168 C31.1811668,25.1288961 31.104203,24.793783 31.0872069,24.690844 C31.0301254,24.3509206 31.0079983,23.9968873 30.9858712,23.6543985 L30.9849092,23.6425333 C30.974006,23.4693648 30.9624614,23.2897826 30.9464273,23.1134073 C30.906342,22.6666968 30.8617672,22.2539785 30.8107787,21.8521635 C30.8005168,21.7735963 30.7581867,21.7101012 30.7132912,21.6430786 C30.6921262,21.6119724 30.669037,21.5776594 30.6456272,21.536612 C30.6212554,21.4949233 30.5763598,21.4692687 30.5282575,21.4692687 C30.5170336,21.4692687 30.5051683,21.4705515 30.4936238,21.4737583 C30.4346182,21.4897924 30.3932502,21.5433464 30.3932502,21.6039553 C30.3932502,21.7152321 30.3919675,21.8191332 30.3906847,21.9175827 C30.3871572,22.1285917 30.3842711,22.3097773 30.3967777,22.4964144 C30.423715,22.9059258 30.458028,23.3192854 30.4910583,23.718535 C30.5102993,23.9551986 30.5298609,24.1925035 30.5484605,24.4291671 C30.5606464,24.5923945 30.4981133,24.6866751 30.3570131,24.7164986 C30.1007879,24.7710146 29.8192287,24.8152687 29.4963016,24.8499024 L29.4488406,24.8556747 C29.3641804,24.8646538 29.2779169,24.874595 29.1980669,24.874595 C29.1236686,24.874595 29.0640217,24.8665779 29.015278,24.8492611 C28.8270374,24.7832005 28.6766374,24.6658307 28.6663756,24.6279902 C28.6448898,24.4089642 28.6708651,24.1841658 28.6981231,23.9462195 C28.7119124,23.8291704 28.7260225,23.7076318 28.7340395,23.5870552 C28.7353223,23.5565904 28.7487909,23.2849724 28.5926186,23.2224393 C28.4361256,23.1605476 28.390268,23.0697945 28.3812889,22.8001006 C28.3767994,22.6641313 28.3674996,22.5288033 28.3578791,22.3976442 C28.3472966,22.2382651 28.3360727,22.0731137 28.3335072,21.9108484 C28.3306211,21.706253 28.3434484,21.6360236 28.3501827,21.6132551 C28.3867405,21.6004278 28.4383704,21.5930521 28.4964139,21.5930521 C28.5855636,21.5930521 28.6727892,21.6097276 28.7298707,21.6238376 C28.7933658,21.6395511 28.8562195,21.6584713 28.919394,21.6777123 C29.077811,21.7248526 29.2410384,21.774879 29.4138862,21.774879 C29.6223297,21.774879 29.8060807,21.7020841 29.9763631,21.5536082 C30.0167691,21.5189745 30.0324825,21.4628551 30.0161277,21.4109045 C30.0000936,21.3602367 29.9548774,21.3230376 29.9016441,21.317586 C29.8641243,21.3137378 29.8246803,21.3060414 29.7865191,21.2977037 C29.7326445,21.2861591 29.6765251,21.2746145 29.6223297,21.2746145 C29.5674931,21.2746145 29.5216355,21.2861591 29.4821915,21.3108516 C29.4449924,21.3339408 29.4119621,21.3445233 29.3811766,21.3445233 C29.3285847,21.3445233 29.2695791,21.3130964 29.2012738,21.2765386 C29.1756192,21.26307 29.1496439,21.2496013 29.1227066,21.2361326 C28.9841718,21.168148 28.8231892,21.1501898 28.683051,21.1392866 C28.6208387,21.1341556 28.5547781,21.1315902 28.4742868,21.1315902 C28.4252224,21.1315902 28.3774407,21.1328729 28.3306211,21.1335143 L28.2905358,21.1344763 L27.6074823,19.2655394 C27.5895241,19.216475 27.5446286,19.1824827 27.4933194,19.1779931 C27.5308392,19.1247598 27.5728486,19.0744127 27.6161407,19.0221415 C27.7264555,18.8884169 27.839977,18.7505235 27.9095651,18.5523418 C28.0945989,18.0273847 28.3431277,17.5104447 28.5829981,17.0108215 C28.6747133,16.8203362 28.7657871,16.6308129 28.8539747,16.4390449 C28.8847603,16.3729843 28.9251662,16.3043583 28.9639688,16.2376563 C29.00213,16.1719164 29.0409326,16.1058559 29.0742835,16.0372298 C29.0274639,16.203664 29.043498,16.3543847 29.1211032,16.4717545 C29.4142069,16.9178237 29.7146863,17.3523483 30.0049038,17.7724422 C30.0700023,17.8673642 30.1504936,17.9574759 30.2284194,18.0450222 C30.3685576,18.2024773 30.5138268,18.3660253 30.518637,18.501674 C30.5244093,18.653036 30.5353125,18.8111325 30.5455743,18.9506293 C30.5869423,19.5361953 30.6299138,20.1416437 30.3429031,20.693538 C30.2774838,20.8198869 30.2774838,20.9616285 30.2778045,21.0975979 C30.2778045,21.1533966 30.2778045,21.2053471 30.2736357,21.2534495 C30.267222,21.3217548 30.3134003,21.3836465 30.3801022,21.3977566 L30.5314643,21.4295041 C30.5404434,21.4320696 30.5494225,21.4323903 30.5596843,21.4323903 C30.6154831,21.4323903 30.6661509,21.3971152 30.6857125,21.3445233 L30.9647062,20.5944472 L31.2353621,20.8275833 C31.6083157,21.148907 31.9790246,21.4683067 32.3522989,21.7841788 C32.4257351,21.8463912 32.504623,21.9002659 32.580304,21.9512544 C32.6290478,21.9842846 32.6726606,22.0137874 32.7140286,22.0445729 C32.7451348,22.0676621 32.7765617,22.0897891 32.8073472,22.1122369 C33.0523485,22.2860468 33.2425132,22.4213747 33.232572,22.7385296 C33.2213481,23.0431779 33.3197976,23.3548812 33.3945166,23.5642868 C33.4560876,23.7342484 33.6270114,23.9045308 33.7928041,23.9590468 C33.9409594,24.0081112 34.0955283,24.0369726 34.245287,24.064872 C34.4662372,24.1055986 34.6753221,24.1440805 34.8417562,24.24253 C34.911665,24.2832567 34.9834978,24.3194938 35.0594996,24.3522034 C34.9684258,24.5811706 34.877352,24.8098171 34.7875609,25.0387844 C34.6487054,25.3947418 34.511774,25.7571129 34.3796529,26.1066567 C34.3100648,26.2907284 34.2404768,26.4751208 34.170568,26.6582304 Z M32.4007219,30.4634476 C32.1140319,30.1559132 31.9479184,29.7893732 31.7725051,29.4016682 L31.7093307,29.26153 C31.6730936,29.1832835 31.688807,29.0508417 31.7025964,28.934434 L31.7048411,28.9200032 C31.7375507,28.6458198 31.7834083,28.3684295 31.8276625,28.1000184 L31.8632582,27.8829164 C31.9027022,27.6408012 31.9431082,27.3919517 31.9976242,27.1527226 C32.0024344,27.1312369 32.041237,27.0805691 32.0928668,27.0491422 C32.1958059,26.9856471 32.3048379,26.9253588 32.4103424,26.8669946 C32.5469531,26.7919549 32.6829224,26.7178773 32.8121574,26.6338585 C32.9676884,26.5338056 33.0844168,26.3987983 33.1552876,26.2384572 C33.2425132,26.439525 33.3544313,26.6033937 33.4948902,26.7377596 L33.5882088,26.8265886 C33.7110301,26.9445998 33.8376997,27.0661384 33.967576,27.1844702 C33.952504,27.2229521 33.9287735,27.283561 33.9175496,27.310819 C33.8498856,27.4827048 33.7851078,27.6574767 33.7206506,27.8316072 C33.5378616,28.3244961 33.3518659,28.8266847 33.0911511,29.2682643 C32.9747434,29.4658047 32.8599391,29.6668725 32.7441727,29.8692231 L32.7364764,29.8823711 C32.6271237,30.0731771 32.5148848,30.2700761 32.4007219,30.4634476 Z"
}), React.createElement("path", {
  d: "M36.383533,20.8881602 C36.3559543,20.8342855 36.3296583,20.7714318 36.3046451,20.7092194 C36.260391,20.6008288 36.2193436,20.490514 36.1786169,20.3808407 C35.9890937,19.8712763 35.7925154,19.3456779 35.3111711,18.9618211 C35.2460726,18.9105119 35.1921979,18.7408709 35.1877084,18.5760402 C35.1777672,18.2210448 35.1796913,17.8605978 35.180974,17.5123367 L35.180974,17.4972647 C35.1825775,17.1682445 35.1835395,16.8280005 35.1755224,16.4935288 C35.1700708,16.2603927 35.2479967,16.1263475 35.4452163,16.0304634 C35.8916062,15.8123994 36.2183816,15.5237853 36.4460661,15.1489076 C36.5185403,15.0289723 36.6548303,14.9276367 36.7863101,14.8301493 L36.8289608,14.7987224 C36.8940593,14.7493373 36.9537063,14.7249654 37.0069395,14.7249654 C37.0733208,14.7249654 37.1406641,14.7634473 37.2131383,14.8420145 C37.3006846,14.9378985 37.3946445,15.0360274 37.5152211,15.1578867 C37.3612936,17.1323281 36.9806436,19.0602706 36.383533,20.8881602"
}), React.createElement("path", {
  d: "M23.8681654,32.4198987 C23.7863914,32.3692309 23.711031,32.323694 23.6379154,32.2813639 L23.8893304,32.3631379 C23.8822754,32.3814168 23.8752204,32.4003371 23.8681654,32.4198987"
}), React.createElement("path", {
  d: "M23.9608426,31.6889674 C23.9114575,31.6889674 23.8607897,31.675178 23.8152528,31.6495234 C23.7238583,31.5975729 23.615147,31.5430569 23.4977772,31.5334364 C23.051708,31.4978407 22.5969804,31.4070875 22.295539,30.988597 C22.2737326,30.9578115 22.2426264,30.9385706 22.2038238,30.9311949 C22.1544387,30.8648136 22.1050536,30.7965083 22.0566306,30.7269202 L22.7214052,30.2362762 C23.1219375,30.5989679 23.5769858,30.9437015 24.179548,31.0520921 C24.1917339,31.0716538 24.2266883,31.137073 24.2488154,31.219809 C24.2587565,31.2557255 24.2488154,31.3124862 24.2388742,31.3724538 C24.2343847,31.4000325 24.2298951,31.4263285 24.2266883,31.4519831 C24.2100128,31.5892351 24.0984153,31.6889674 23.9608426,31.6889674"
}), React.createElement("path", {
  d: "M7.52776242,14.9887267 C7.42867157,14.9887267 7.31001908,14.9313246 7.16442928,14.81171 C6.77480018,14.4942345 6.54968115,14.2117133 6.55032252,13.7053558 C6.55128456,13.1970742 6.50863381,12.6124702 6.18731006,12.1186194 C6.18731006,12.1029059 6.19244098,12.0666688 6.20623032,12.0368454 C6.31333823,11.8053127 6.42621843,11.5773075 6.55673616,11.3127445 L6.6452445,11.1331624 L8.74443139,12.4745768 L8.5786386,12.9232115 C8.41861809,13.3580568 8.26885941,13.7662855 8.11461119,14.1722694 C8.05271949,14.3367794 7.97511435,14.5044963 7.88404055,14.6709305 C7.76602943,14.8880324 7.65282855,14.9887267 7.52776242,14.9887267"
}), React.createElement("path", {
  d: "M12.6354952,32.153091 C12.5899583,32.0931234 12.5441008,32.0261008 12.5123532,31.9565127 C12.4421238,31.8019438 12.3956248,31.6358303 12.3468811,31.4597757 C12.324754,31.3821705 12.3032683,31.3045654 12.2795378,31.2272809 C12.2619003,31.1708408 12.2099497,31.1326796 12.1503028,31.1326796 C12.140041,31.1326796 12.1300998,31.1339624 12.1201586,31.1358865 C12.0842422,31.1442242 12.0473637,31.1480724 12.0111266,31.1480724 C11.6279112,31.1480724 11.2658608,30.6853277 11.23732,30.1571638 C11.2135895,29.731939 11.2523921,29.2576497 11.3546898,28.706076 C11.3659137,28.6589357 11.5644161,28.5553553 11.6298353,28.522325 C11.6744101,28.4985945 11.7151368,28.4777502 11.7513739,28.4572265 C11.8395616,28.4065587 11.9408972,28.3683975 12.0486465,28.3283122 C12.0685288,28.3209365 12.0877697,28.3142022 12.1073313,28.3068265 L12.2586934,28.542528 C12.461044,28.8574381 12.6675635,29.1777998 12.8699141,29.5004063 C12.9308437,29.5969317 12.992094,29.7008328 13.0171073,29.8021684 C13.0921469,30.1119476 13.3207935,30.1449779 13.4153948,30.1449779 C13.4740797,30.1449779 13.5385368,30.1340747 13.6062008,30.1129096 C13.9538205,30.0025949 14.2985541,29.882339 14.6609252,29.7547074 C14.6112194,29.820768 14.4925669,29.9769403 14.4925669,29.9769403 C14.106786,30.4865046 13.7078571,31.0133858 13.2781427,31.4950507 C13.0482135,31.7538414 12.8375251,31.9699813 12.6354952,32.153091"
}), React.createElement("path", {
  d: "M3.9752109,8.14385742 C3.92807059,8.14097128 3.86521684,8.11531669 3.85206887,8.10184803 C3.55126879,7.80072727 3.26682352,7.49126877 3.00642942,7.18277231 C2.91567631,7.0756644 2.87719442,6.9627842 2.88136329,6.93841234 C2.88168397,6.93841234 2.9047731,6.88036883 3.14624694,6.79570868 C3.16067765,6.79057776 3.181522,6.78769162 3.20878,6.78769162 C3.23058641,6.78769162 3.25207213,6.78929503 3.27387853,6.79057776 C3.31203973,6.79282253 3.34250456,6.79506731 3.37296939,6.79506731 C3.41016854,6.79506731 3.44416087,6.79153981 3.47494638,6.7860882 C3.73277502,6.73606175 4.00824119,6.67320801 4.3411095,6.58854786 C4.3885705,6.57636193 4.42801443,6.57026896 4.45847926,6.57026896 C4.48349248,6.57026896 4.49247159,6.57443783 4.49343364,6.5750792 C4.49279227,6.57572056 4.50946775,6.60650607 4.49086818,6.71810354 C4.45879994,6.90826819 4.43603149,7.10131899 4.41454577,7.28795614 L4.41262167,7.30399026 C4.40396325,7.38031266 4.39498414,7.45695575 4.38504299,7.53295748 C4.37734661,7.55059501 4.36997092,7.56823254 4.36227454,7.58587007 C4.33469586,7.65193064 4.30807922,7.71382234 4.27344552,7.76449016 L4.25709072,7.78886202 C4.17018579,7.91585224 4.08071541,8.04733202 3.9752109,8.14385742"
}), React.createElement("path", {
  d: "M4.52386639,7.55447527 C4.52450776,7.5538339 4.52546981,7.5538339 4.52643185,7.5538339 C4.52643185,7.55126844 4.52707322,7.54806162 4.52771458,7.54549616 C4.52643185,7.54806162 4.52482844,7.55158912 4.52386639,7.55447527"
}), React.createElement("path", {
  d: "M37.5616559,14.4347479 C37.4035595,14.2208527 37.3307646,13.9889994 37.3272371,13.6984611 C37.3208235,13.1603561 37.2871518,12.5953137 36.9597351,12.1126867 C36.9594144,12.1005008 36.9616592,12.076129 36.9687142,12.0607362 C37.0831978,11.8183003 37.1992848,11.5835608 37.3227476,11.335032 L37.4029182,11.173408 C37.4426828,11.1888008 37.4827681,11.2054763 37.5228534,11.2227931 C37.5507527,11.4209748 37.5719178,11.5970295 37.5876312,11.7612188 C37.6222649,12.1178177 37.6129651,12.4891679 37.6043067,12.8483321 C37.5998171,13.0208593 37.5953276,13.1908209 37.5953276,13.3588585 C37.5918001,13.7061575 37.5802555,14.0672459 37.5616559,14.4347479"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M6.65621184,2.17996678 C6.66166344,2.16297061 6.66390822,2.14629513 6.66294617,2.12833692 C6.66070139,2.08825162 6.64113977,2.05201451 6.60939221,2.02764265 C6.58918922,2.01321194 6.57058964,1.99589509 6.55199006,1.97921961 C6.489457,1.92085541 6.4221137,1.85864303 6.32815376,1.84453301 C5.95744492,1.78745154 5.58192585,1.7464042 5.21859271,1.7063189 L5.16471807,1.69990525 C4.789199,1.65885791 4.42362108,1.62422421 4.0846598,1.5934387 C3.8316414,1.57002888 3.75596036,1.35645442 3.67546908,1.1310147 L3.65815223,1.0819503 C3.65013517,1.06078526 3.66552792,0.945980965 3.83100003,0.714127601 C3.95125593,0.544165938 4.07568069,0.377090416 4.1738095,0.246252003 C4.2193464,0.243045179 4.26552467,0.241762449 4.31074088,0.241762449 C4.78791627,0.241762449 5.22725114,0.417817078 5.54729215,0.737216733 C5.99368203,1.18328593 6.40896572,1.64122037 6.78320206,2.10043755 C6.74023062,2.1267335 6.69757987,2.15367082 6.65621184,2.17996678 M4.93414744,9.7961734 C4.75777212,9.7961734 4.43997588,9.57490256 4.40277673,9.42610593 C4.28155878,8.94091349 3.98428621,8.62921021 3.51993812,8.49933384 C3.32720801,8.44577988 3.22010009,8.28415596 3.26627836,8.11483566 C3.30540161,7.9686045 3.32752869,7.81948719 3.34901441,7.67582148 C3.35318328,7.64407392 3.35799352,7.61328841 3.36248307,7.58282359 C3.62031171,7.4879016 3.63826992,7.23841071 3.6440422,7.15439192 C3.66392451,6.88341531 3.69727548,6.60730778 3.7296644,6.34082071 C3.74088828,6.25070896 3.75115012,6.16476609 3.76141196,6.07818184 C3.80021453,5.74819967 3.837093,5.71196256 4.15905811,5.68406319 C4.21774299,5.67893227 4.27546582,5.66802907 4.3485814,5.65488109 C4.38930807,5.6475054 4.43644838,5.63852629 4.49513325,5.6292265 C4.5506113,5.6202474 4.59518616,5.57663459 4.60512731,5.52083586 C4.61570983,5.46503712 4.58973456,5.40859702 4.54099083,5.38005629 C4.48615415,5.34766737 4.43773111,5.32137141 4.39540103,5.29860297 C4.32517159,5.26076244 4.27546582,5.23382512 4.24211485,5.20271893 C4.21453617,5.17706434 4.18535407,5.15108907 4.15649265,5.1251138 C4.04553655,5.02602294 3.93618386,4.92821481 3.88776082,4.82206894 C3.83067935,4.69507872 3.79829043,4.55494052 3.76365673,4.40646457 C3.73479532,4.28236049 3.70497186,4.15344617 3.65879359,4.02998345 C3.44810527,3.4610929 3.43014705,3.01630644 3.60139145,2.58691273 C3.72998508,2.26366488 3.64564562,1.99813987 3.37017945,1.85832235 C3.35125919,1.84934324 3.33009415,1.84389164 3.3092498,1.84389164 C3.28968817,1.84389164 3.2691645,1.84870188 3.25184765,1.85703962 C3.21368644,1.87499783 3.18610776,1.90995221 3.17712865,1.95067887 L2.70925305,4.15857709 C2.69450166,4.23073063 2.74003856,4.30192212 2.81187142,4.31827692 C2.82822622,4.32212511 2.84586375,4.3240492 2.86446333,4.3240492 C2.90647272,4.3240492 2.9468787,4.31378736 2.98215376,4.30544962 C3.00973245,4.29871529 3.04083864,4.2913396 3.06328641,4.2913396 C3.07899984,4.2913396 3.11106808,4.2913396 3.15211543,4.39010977 C3.38845834,4.95996237 3.46606348,5.39609041 3.12261265,5.80015021 C3.10625785,5.79950885 3.09022373,5.79886749 3.07418961,5.79886749 C3.03699045,5.79758476 3.00011198,5.79694339 2.96355419,5.79694339 C2.90967954,5.79694339 2.86510469,5.79886749 2.82277462,5.8039984 C2.72208035,5.8149016 2.62202745,5.83638732 2.52518137,5.85755236 C2.39626705,5.88545173 2.27440774,5.91174768 2.16377232,5.91174768 C2.11534928,5.91174768 2.07333989,5.90661677 2.034858,5.89635493 C1.95917696,5.87518989 1.89087161,5.86492806 1.82577309,5.86492806 C1.55896534,5.86492806 1.42427874,6.03841723 1.30530558,6.19202409 L1.26778574,6.2391644 C1.25271367,6.25904671 1.21904202,6.28341857 1.19434947,6.29720791 C1.12155457,6.26000875 1.04619421,6.23114734 0.973078627,6.20292729 C0.761748935,6.12115328 0.594994096,6.05669612 0.521237147,5.84504575 C0.468324554,5.69240093 0.380778263,5.5583557 0.294835384,5.42847933 C0.385909181,5.17578161 0.480831167,4.92725276 0.577035882,4.6899478 C0.933314011,3.80871261 1.415941,2.86526503 2.09546697,1.71914619 C2.30358984,1.36831967 2.53929139,1.07553665 2.79679935,0.846569426 C3.04051796,1.10824625 3.15564293,1.30322114 3.11748173,1.59696621 C3.11299218,1.63127922 3.12261265,1.66783701 3.14473973,1.69605706 C3.16686682,1.72459779 3.19893506,1.74287669 3.2345308,1.74736624 C3.27654019,1.75249716 3.31951163,1.75442126 3.35959693,1.75570399 C3.37531037,1.75570399 3.40160632,1.75698671 3.41956454,1.75794876 C3.64211811,2.06099361 3.94099409,2.10364437 4.23153233,2.10364437 C4.2703349,2.10364437 4.30881679,2.10332369 4.34761936,2.10236164 C4.38481851,2.10172028 4.42233835,2.10107891 4.45953751,2.10107891 C4.52944627,2.10107891 4.585245,2.10332369 4.63398872,2.10813393 C4.8401875,2.12929896 5.01271462,2.17996678 5.13393256,2.25340305 C5.36161705,2.39193784 5.65055188,2.47146707 5.9269801,2.47146707 C6.15915414,2.47146707 6.36503223,2.41598901 6.52088387,2.31337065 C6.51799773,2.32619795 6.51703568,2.34030797 6.51831841,2.35377663 C6.52473206,2.4272129 6.53755936,2.49648029 6.55006597,2.56318223 C6.56930691,2.66772469 6.58886854,2.77515328 6.56513804,2.83063134 C6.3983832,3.21160201 6.31628851,3.61694454 6.31404374,4.07038943 C6.31340237,4.14799457 6.28133413,4.23554086 6.2473418,4.32757671 C6.2290629,4.37696179 6.21110469,4.4260262 6.19667398,4.4750906 C6.1854501,4.51421385 6.19314648,4.55622325 6.21495288,4.58829148 C6.15306118,4.598874 6.06294943,4.61522881 5.9324317,4.63799725 C5.86989863,4.64857977 5.82404105,4.700851 5.82115491,4.7646668 C5.80447943,5.1231897 5.60309089,5.29315137 5.10346773,5.36979446 C5.04382081,5.37973561 4.9966805,5.42751728 4.98962549,5.48716421 C4.98257048,5.5474525 5.01656281,5.60549601 5.07204086,5.62794377 C5.18363833,5.67412204 5.28657738,5.6965698 5.37797186,5.71549007 C5.42575353,5.72607258 5.46680088,5.73537237 5.50688617,5.74627557 C5.63836595,5.78315405 5.66177577,5.80528113 5.66402054,5.80720523 C6.04050166,6.54477471 6.06006329,7.29805763 5.72078132,8.10521519 C5.60437362,8.38132272 5.50367935,8.66640936 5.40651259,8.94283758 C5.32634199,9.16859798 5.2442473,9.40109271 5.1550976,9.62428765 C5.12976369,9.68778276 5.04317945,9.76699131 4.97262932,9.7907218 C4.96268817,9.79456999 4.94954019,9.7961734 4.93414744,9.7961734 M11.8009193,12.2333595 C11.6979803,12.2333595 11.6242233,12.1733919 11.5767623,12.0492878 C11.4888954,11.821924 11.3920493,11.5798088 11.2714727,11.3447486 C11.1861712,11.1795972 11.0880424,11.0202181 10.9927997,10.8662905 C10.951111,10.7976645 10.909743,10.7309626 10.8699784,10.6639399 C10.8472099,10.6267408 10.8084073,10.6017276 10.7651152,10.5985207 C10.7638325,10.5985207 10.7551741,10.5978794 10.7535707,10.5978794 C10.726954,10.5978794 10.7009788,10.6058964 10.6791723,10.6206478 C10.6766069,10.5273292 10.6596107,10.4452345 10.6448593,10.3711569 C10.6301079,10.2977207 10.6172806,10.2351876 10.6220909,10.1819543 C10.6288252,10.1117249 10.665383,10.0347611 10.7041856,9.95234573 C10.7407434,9.87506127 10.7782632,9.79489067 10.7997489,9.70542029 C10.8260449,9.59350214 10.8196312,9.48254603 10.8145003,9.3757588 C10.8119349,9.33439077 10.8096901,9.29270206 10.8096901,9.25133403 C10.8096901,9.23658264 10.8071246,9.22247262 10.8029557,9.20868328 C10.8356654,9.19874212 10.8635647,9.17597367 10.8808816,9.14550885 C10.9818965,8.96175784 11.0675187,8.76614159 11.1355034,8.56090486 C11.2541559,8.79820982 11.3679981,9.04224912 11.4786335,9.27955408 C11.6046617,9.54988933 11.7338967,9.82888301 11.8724315,10.0992183 C11.9455471,10.2435253 12.1068503,10.4176559 12.2877152,10.4625514 C12.5179651,10.5196329 12.7299362,10.597238 12.9354936,10.6995357 C12.9447934,10.7190973 12.9540932,10.7386589 12.963393,10.7582206 C13.003799,10.8457668 13.046129,10.9358786 13.1035312,11.0202181 C13.1981325,11.1587529 13.2366144,11.276764 13.2170527,11.3704032 C13.1994152,11.4560254 13.133996,11.5342719 13.0166262,11.6096323 C12.6176974,11.8648955 12.2857911,12.0496085 11.9721637,12.1913501 C11.9118754,12.2189288 11.8525492,12.2333595 11.8009193,12.2333595 M9.96757814,13.9262418 C9.89382119,13.7992516 9.83064676,13.691823 9.7790169,13.5815083 C9.50707823,12.9956216 9.2418739,12.4786815 8.7630951,12.0932213 L8.7630951,11.3915683 C8.7630951,11.319094 8.706655,11.2594471 8.6338601,11.2568817 C8.6338601,11.2568817 8.54984132,11.2536748 8.54919995,11.2536748 C8.48794962,11.2536748 8.43471634,11.2950429 8.41868222,11.3537277 L8.37314532,11.5265755 C8.31093294,11.766446 8.12429579,11.9206942 7.78629656,12.0124094 C7.75070082,11.9995821 7.64487563,11.902736 7.60446965,11.8648955 C7.54867091,11.813907 7.49319286,11.7632391 7.43803549,11.7234745 C7.42168069,11.71193 7.40532589,11.6994234 7.3886504,11.6869167 C7.32643802,11.638173 7.25781199,11.5849397 7.17411389,11.5547956 C6.98972152,11.4880937 6.9300746,11.3883614 6.96118079,11.1965934 C6.97176331,11.1324569 6.95284304,11.0769788 6.93745029,11.032404 C6.93264005,11.0189353 6.92911255,11.0080321 6.92654709,10.9977703 C6.91307843,10.9419716 6.86529675,10.9009242 6.80853597,10.896114 C6.80693256,10.8954726 6.79699141,10.8948313 6.79538799,10.8948313 C6.74888905,10.8948313 6.70527624,10.9195238 6.68122507,10.9580057 C6.60137515,10.9378027 6.52120456,10.9169583 6.44135464,10.8973967 C6.15434391,10.8252432 5.85867475,10.7511655 5.59154632,10.6366819 C5.52740985,10.6094239 5.42671558,10.386229 5.44531516,10.2832899 C5.47962817,10.0908805 5.56140218,9.90488473 5.64830711,9.70830643 C5.69127855,9.61146035 5.7358534,9.51108676 5.77369392,9.40975113 C5.8596368,9.18238732 5.94397626,8.95374078 6.02831573,8.72541492 L6.0344087,8.70809807 C6.1726228,8.33514446 6.31564715,7.94840151 6.46251968,7.5715997 C6.50901862,7.45262654 6.57764466,7.33750156 6.64338454,7.22558341 C6.67641483,7.17010536 6.70687966,7.11751345 6.73477902,7.06684563 C6.75498201,7.02964648 6.75658543,6.98507162 6.73990994,6.94755179 C6.7023901,6.86321232 6.66647368,6.77502466 6.6295952,6.68491291 C6.53563526,6.45530433 6.43975123,6.22152687 6.30763009,6.00089739 C6.1690953,5.77000607 6.16813325,5.58272756 6.30249917,5.33099189 C6.36823906,5.20913258 6.4038348,5.07701144 6.44135464,4.93719392 C6.45931286,4.8701713 6.4766297,4.80571414 6.49811542,4.73869152 C6.50741521,4.70758533 6.50549112,4.67391368 6.49266382,4.64473158 C6.50260498,4.6354318 6.51062204,4.62516996 6.51703568,4.61330471 C6.53146639,4.58829148 6.55295211,4.55910939 6.57572056,4.52832388 C6.64306386,4.4369294 6.71842422,4.3349524 6.6988626,4.21597924 C6.65557047,3.95141627 6.75017178,3.71635608 6.849904,3.46718587 C6.89928909,3.34340247 6.95059827,3.21512952 6.98555265,3.0807636 C7.02243112,2.94030471 7.08945374,2.75110211 7.20233394,2.63758054 C7.25139834,2.70332043 7.29982138,2.76906032 7.34696169,2.83576226 C7.83792642,3.51977778 7.94375161,4.367662 8.04604929,5.18796754 C8.06464887,5.33740553 8.08324845,5.48716421 8.10441349,5.63531947 C8.1095444,5.67315999 8.11627873,5.71132119 8.12333375,5.74884103 C8.05791454,6.12468079 8.00981218,6.5085376 7.97998872,6.88886691 C7.95722027,7.18164993 7.78693793,7.18164993 7.73178056,7.18164993 C7.67534046,7.18164993 7.61152466,7.16882263 7.54193658,7.14252667 C7.42136001,7.09763114 7.29725593,7.06844904 7.17732071,7.04054968 C7.11895652,7.02676033 7.06957143,7.01489509 7.01986566,7.00206779 C7.00928314,6.99950233 6.9974179,6.99757824 6.98555265,6.99757824 C6.93039528,6.99757824 6.88133087,7.03092921 6.8608072,7.08159702 L6.8098187,7.20666315 C6.79602936,7.24097617 6.79635004,7.27817532 6.81078075,7.31152629 C6.82489077,7.34423589 6.85279014,7.37085253 6.88646179,7.38400051 C6.94258121,7.40548623 6.99837994,7.42825468 7.05449936,7.45070245 L7.06444051,7.455192 C7.19976848,7.51002869 7.33734122,7.56582742 7.47940352,7.60976091 C7.72600827,7.68576263 7.88250128,7.86855159 7.88827356,8.08725698 C7.89949744,8.54166392 7.9293209,9.00120177 7.95882368,9.44598824 C7.96908552,9.60440534 7.97870599,9.76218107 7.98832646,9.91963612 C7.9912126,9.96837984 8.01109491,10.0087858 8.02360153,10.0354025 C8.02648767,10.0414954 8.02937381,10.0472677 8.03193927,10.05304 C8.06496955,10.1325692 8.09703779,10.2133812 8.12910603,10.2935518 C8.20863526,10.4939783 8.29105063,10.700177 8.39495173,10.8948313 C8.44561954,10.9897532 8.6502149,11.2648987 8.82434544,11.2648987 C8.84262433,11.2648987 8.86122391,11.2616919 8.87854076,11.2562403 C9.15785512,11.1658079 9.42658696,11.0413831 9.68633969,10.9211272 C9.77869621,10.8781558 9.86720455,10.8371084 9.95635425,10.7970231 C10.0240182,10.766879 10.0548037,10.6873497 10.0246596,10.6193651 L9.96854019,10.4920542 C9.94705447,10.4433105 9.89831074,10.4112422 9.84507747,10.4112422 C9.82743994,10.4112422 9.81044377,10.4147697 9.79408897,10.4215041 L9.63342709,10.4869233 C9.52856395,10.5292533 9.4240215,10.5722248 9.3201204,10.6167996 C9.21140908,10.6629779 9.12322142,10.685105 9.05202993,10.685105 C8.9834039,10.685105 8.85545163,10.685105 8.75700214,10.3487092 C8.63770829,9.93887706 8.54599313,9.5287243 8.46518117,9.14711226 C8.36288349,8.66705073 8.38212443,8.21552993 8.41772018,7.7992842 C8.42285109,7.73707182 8.47416028,7.66010804 8.51969717,7.59212338 C8.54663449,7.5517174 8.56908226,7.51804575 8.58607843,7.48533614 C8.60948824,7.44108197 8.60628142,7.3878487 8.57774069,7.34583931 C8.55721701,7.31633653 8.53092106,7.28715443 8.50302169,7.25636892 C8.45139183,7.19864609 8.43086815,7.17106741 8.42381314,7.15888148 C8.4392059,7.07999361 8.45620206,6.9982196 8.4773671,6.90746649 C8.55368951,6.98795777 8.64893217,7.05049083 8.76469852,7.09602773 C8.71852025,7.13418893 8.67619018,7.1803672 8.63770829,7.23424184 C8.60980892,7.27176168 8.60403664,7.32242949 8.62199485,7.36540093 C8.64027375,7.40901374 8.68067973,7.44011993 8.72717868,7.44685426 C8.95293907,7.47956386 9.09884956,7.49367389 9.21333317,7.49367389 C9.4439038,7.49367389 9.5859661,7.43017877 9.67800195,7.28330624 C10.092965,7.40388282 10.4463569,7.62579503 10.7285574,7.94391195 L10.719899,7.9884868 C10.7054683,8.06096102 10.6910376,8.13375592 10.6772483,8.20719219 C10.5999638,8.61830701 10.5999638,8.61830701 10.201997,8.62439997 L10.1910938,8.62439997 C10.0259423,8.62696543 9.74951412,8.63081362 9.68954651,8.96368193 C9.68281218,9.00088109 9.69211197,9.03904229 9.71488042,9.06918644 C9.73732819,9.0990099 9.77196188,9.11857153 9.80916104,9.12145767 L10.4078751,9.18078391 L10.0240182,10.3307509 C10.00606,10.3836635 10.0236976,10.4433105 10.0669897,10.4785855 L10.4579015,10.7957404 C10.4819527,10.8156227 10.5120968,10.8258845 10.5428823,10.8258845 L10.5454478,10.8258845 C10.5329412,10.8720628 10.5322998,10.9246547 10.5560303,10.9759639 C10.6471041,11.1767111 10.741064,11.3768169 10.835024,11.576602 C10.9203255,11.7574669 11.005627,11.9386524 11.0883631,12.1208 C11.1124142,12.1733919 11.1428791,12.2275872 11.1720612,12.2804998 C11.2070156,12.3427122 11.2971273,12.5052982 11.2852621,12.5457042 C11.1627614,12.8606143 10.9745208,13.1675073 10.7554948,13.4086605 C10.6031706,13.575736 10.4056303,13.7155535 10.1965454,13.8637088 C10.1346537,13.9073216 10.0721206,13.9512551 10.0092668,13.9971126 C9.99515682,13.9730615 9.98136748,13.9490103 9.96757814,13.9262418",
  mask: "url(#mask-2)"
}), React.createElement("path", {
  d: "M2.4428622,21.7694274 C2.43260036,21.7694274 2.41143532,21.7604483 2.38257391,21.733511 C2.2661662,21.6267238 2.14398622,21.522502 2.02565442,21.4227698 C1.78578399,21.2188158 1.5398206,21.0106929 1.3432423,20.7746707 C1.32849091,20.7573538 1.31277748,20.7393956 1.29642267,20.7220788 C1.08124479,19.7100052 0.931486121,18.6786906 0.813475004,17.8006623 C0.815719781,17.7942486 0.81828524,17.7875143 0.821171381,17.78078 C0.834960724,17.7493531 0.835922771,17.714078 0.824698887,17.6823305 C0.875046022,17.6698238 0.911924496,17.6332661 0.924431109,17.5858051 L1.33490456,16.0025961 C1.35382482,15.9317253 1.31117406,15.8576477 1.23998257,15.8384068 L1.14922946,15.8133935 C1.13704353,15.8101867 1.12517828,15.8082626 1.11331303,15.8082626 C1.06456931,15.8082626 1.01999446,15.8345586 0.995622598,15.8768886 L0.989529633,15.8877918 C0.863501456,16.108742 0.73490782,16.3348231 0.653133812,16.578221 C0.632930822,16.4275003 0.613369196,16.2764589 0.593486888,16.1257382 C0.485416925,15.3096015 0.411339294,14.5877455 0.368047172,13.9220088 L0.770503564,13.7055482 C0.789103143,13.7340889 0.803854532,13.762309 0.809306133,13.788605 C0.896211059,14.1987577 0.986002127,14.6223791 1.04340427,15.040549 C1.09054458,15.3875273 1.22875869,15.856365 1.87525438,15.9201808 C2.00064119,15.9326874 2.12827278,15.9833552 2.26295938,16.0378712 C2.33062336,16.0654499 2.39989076,16.0927079 2.47044088,16.1161177 C2.77027891,16.2161706 3.09384744,16.3078858 3.42511234,16.3078858 C3.61399427,16.3078858 3.78908685,16.2780623 3.955521,16.2174533 L3.81345871,19.4592316 C3.81281734,19.4723795 3.81442076,19.4861689 3.81794826,19.4993168 C3.80672438,19.4964307 3.79453845,19.4945066 3.78235252,19.4945066 C3.75413247,19.4945066 3.7262331,19.503165 3.70314397,19.5201612 C3.66786891,19.5451744 3.64702455,19.5865425 3.64734523,19.6304759 C3.6479866,19.7196256 3.60501516,19.7516939 3.44563601,19.822244 C3.28240868,19.8947182 3.03612461,20.0053537 3.08134082,20.3516906 C3.08935788,20.4113375 3.13425342,20.4578365 3.19390034,20.4668156 L3.25515068,20.4773981 C3.19037284,20.5886749 3.13104659,20.6893692 3.06979626,20.7891014 C3.0290696,20.8564447 2.98673952,20.9225053 2.94473013,20.9892072 C2.87546273,21.0982392 2.8033092,21.2111194 2.73692794,21.3278478 C2.70646312,21.3823638 2.68754286,21.4381625 2.66830191,21.4926785 C2.64874029,21.5513634 2.62789593,21.611331 2.60063793,21.6369856 C2.58684859,21.6501336 2.57273856,21.6645643 2.55766649,21.6793157 C2.52463621,21.7136287 2.47044088,21.7694274 2.4428622,21.7694274 M12.7460665,25.8876306 C12.7159224,25.8786515 12.6614064,25.7657713 12.5854046,25.5505934 C12.578991,25.5326352 12.5716153,25.5153184 12.5623155,25.4992843 C12.3327069,25.0974692 12.3628511,24.6914853 12.4786174,24.2066136 C12.5956665,23.7159695 12.6787232,23.2115361 12.7592145,22.7237782 L12.7624213,22.7032545 C12.7957723,22.5002626 12.8294439,22.2982327 12.8650397,22.0962028 C12.871774,22.0570795 12.8801118,22.018277 12.8874875,21.9794744 C12.9096145,21.8694803 12.9317416,21.7591656 12.938476,21.6443613 C12.9426448,21.5600218 12.9189143,21.4827374 12.89807,21.414432 C12.8900529,21.3868534 12.8826772,21.3628022 12.8772256,21.3393924 C12.8727361,21.3214342 12.8650397,21.3041173 12.8547778,21.2900073 C12.8736981,21.2816695 12.8922977,21.2739732 12.9099352,21.2659561 C12.9448896,21.2505633 12.980806,21.2348499 13.008064,21.2287569 C13.2976402,21.4173182 13.6196053,21.6010692 13.9915969,21.7909132 C14.3995049,22.0003188 14.7375041,22.2145346 14.7368628,22.7292298 C14.7362214,23.1037868 14.7445591,23.480268 14.7535382,23.8445632 C14.7605933,24.1578698 14.7682896,24.4820797 14.7695724,24.8018001 C14.7605933,24.821041 14.7233941,24.8630504 14.7022291,24.8704261 C14.6153241,24.9015323 14.5184781,24.9243007 14.4248388,24.9464278 C14.2728354,24.9826649 14.1150596,25.0192227 13.9707525,25.0942624 C13.6564838,25.2587725 13.3678697,25.4723469 13.0895174,25.6795078 C12.9987642,25.7471717 12.8092409,25.8876306 12.7460665,25.8876306 M8.99504467,20.5659065 C8.80263524,20.5659065 8.61150854,20.639022 8.4720117,20.7656916 C8.43128504,20.8025701 8.41653365,20.8628583 8.43641596,20.9141675 C8.45693963,20.9661181 8.50760745,21.0010725 8.56244414,21.0010725 L9.36735692,21.0010725 C9.4186661,21.0010725 9.46452368,20.972211 9.4879335,20.9260328 C9.51070195,20.8808166 9.50621239,20.8269419 9.47606825,20.7858946 C9.37216716,20.6457564 9.19707457,20.5659065 8.99504467,20.5659065 M8.17217367,17.9090529 C8.13016428,17.9090529 8.09136171,17.9279732 8.06570712,17.9616448 C8.05544529,17.9741514 8.04390072,17.986658 8.03171479,17.999806 C7.98938471,18.0443809 7.93999963,18.0972935 7.91883459,18.1710504 C7.88003202,18.3105473 7.84058809,18.4497234 7.80082347,18.5888996 C7.63567205,19.1719001 7.46474833,19.7725382 7.33358924,20.3744591 C7.30087964,20.5271039 7.40670482,20.6701282 7.51862297,20.8214903 C7.56480124,20.8843441 7.61194155,20.9475185 7.64849934,21.0113343 C7.67255052,21.0523816 7.71712537,21.0780362 7.76522773,21.0780362 C7.77805502,21.0780362 7.79088232,21.0764328 7.80370961,21.0719433 C7.86271517,21.0549471 7.90247979,20.9991484 7.89991433,20.9372567 C7.85373607,19.8806082 8.00381542,18.986225 8.37324153,18.121986 C8.38799292,18.0873523 8.38735155,18.047267 8.37163812,18.0126333 C8.35592468,17.978641 8.32610122,17.952345 8.28986411,17.9404798 L8.2135417,17.9157872 C8.20071441,17.9112977 8.18660438,17.9090529 8.17217367,17.9090529 M9.27916926,26.6450824 C9.14223789,26.6450824 9.02326472,26.5998662 8.94405617,26.5168095 C8.8052007,26.3699369 8.70707189,26.1685484 8.62946675,25.990249 C8.59900193,25.9203402 8.57014051,25.8504315 8.54159978,25.7808434 C8.37837245,25.3848006 8.20969351,24.9756099 7.78671345,24.7017472 C7.6109795,24.5879049 7.44839353,24.4349394 7.27650777,24.2729948 C7.18960285,24.1905794 7.0994911,24.1059193 7.00264502,24.0206178 C6.97859384,23.9991321 6.94780833,23.9872668 6.91574009,23.9866255 C6.90740235,23.9494263 6.88303049,23.9173581 6.84903816,23.8987585 C6.78073281,23.8615593 6.71467224,23.8423184 6.65245986,23.8423184 C6.6207123,23.8423184 6.58992679,23.8471286 6.56170674,23.8570698 C6.51456643,23.8737453 6.46902953,23.8814416 6.42573741,23.8814416 C6.26828236,23.8814416 6.12974757,23.766958 6.05502857,23.5748693 C5.94984475,23.3058167 5.95144816,23.0335574 5.95337226,22.7455846 C5.9543343,22.6205185 5.95497567,22.4925662 5.94695861,22.3630105 C5.94182769,22.2902156 5.92996244,22.2212689 5.91777651,22.1539256 C5.91168355,22.1218574 5.90719399,22.0952407 5.90302512,22.0676621 C5.89276329,22.0022429 5.83664387,21.9531785 5.76962125,21.9531785 C5.76833852,21.9531785 5.69458157,21.956706 5.69458157,21.956706 C5.63782079,21.9599128 5.58907707,21.9977533 5.5720809,22.0516279 C5.57015681,22.0590036 5.5666293,22.0660587 5.56406384,22.0724723 C5.54963314,22.107106 5.53167492,22.1520015 5.53552311,22.2071589 C5.54418154,22.3200391 5.5521986,22.4329193 5.55989497,22.5454788 C5.58362547,22.8738576 5.60735597,23.2128189 5.65064809,23.5463285 C5.66668221,23.6681878 5.64808263,23.7695235 5.59998027,23.8243602 C5.56791203,23.8605973 5.5230165,23.8775934 5.46240753,23.8775934 C5.42232223,23.8775934 5.37646465,23.8695764 5.32804161,23.8541836 C5.2918045,23.8423184 5.25556739,23.8298118 5.21965096,23.8176258 L5.20938913,23.813457 C5.0987537,23.7756164 4.98427009,23.7355311 4.86176942,23.7134041 C4.70816256,23.6871081 4.55295229,23.6669051 4.40255225,23.6467021 C4.18769505,23.6188028 3.96706557,23.5899413 3.75573588,23.542801 C3.70057851,23.5309358 3.64349704,23.5206739 3.58577422,23.5110535 C3.29459461,23.4607063 3.08422697,23.4241485 3.02746618,23.1188589 C3.00501842,22.9998858 2.97583632,22.8607096 2.92388577,22.7282678 C2.76162049,22.3097773 2.96846063,21.6398718 3.34911062,21.3502956 C3.49149359,21.2415842 3.61816314,21.0751501 3.73553289,20.8394485 C3.80031073,20.7102135 3.8282101,20.5710374 3.85482674,20.4363508 C3.86476789,20.3892105 3.87342631,20.3449563 3.88368815,20.3003814 C3.91671844,20.1618467 3.94686258,20.0236325 3.97700672,19.8844564 L4.01901612,19.6946124 C4.02222294,19.6808231 4.02318499,19.6663924 4.02222294,19.6532444 C4.06006346,19.644586 4.09277306,19.6195727 4.11105196,19.5846184 L4.21815988,19.3780989 C4.24637993,19.4188256 4.27363793,19.4592316 4.3015373,19.4993168 C4.6273506,19.971682 4.90858905,20.3792693 5.03397586,20.875365 C5.17218997,21.4218077 5.46561435,21.6652057 5.9854405,21.6652057 C6.01333986,21.6652057 6.04123923,21.6645643 6.07074201,21.6632816 C6.42637877,21.6469268 6.76117118,21.5952969 7.06517808,21.5096747 C7.37271249,21.4234112 7.5381846,21.1854648 7.48687542,20.9042264 C7.48078245,20.8683099 7.46025878,20.8368831 7.430756,20.8163594 C7.40798755,20.8009666 7.38137091,20.7932703 7.35411291,20.7932703 C7.34577517,20.7932703 7.33711675,20.7939116 7.32813764,20.7951944 C7.27490436,20.8054562 7.2232745,20.815718 7.17260668,20.8263006 C7.06165058,20.8484276 6.96127699,20.8689513 6.85994136,20.8856268 C6.77688462,20.8990955 6.69254515,20.9099987 6.60820569,20.9205812 C6.44241289,20.9414255 6.2711685,20.9629112 6.10505503,21.0084481 C5.96459614,21.0466094 5.87769122,21.0626435 5.81291337,21.0626435 C5.71991548,21.0626435 5.66475811,21.04693 5.52782673,20.7150238 C5.47940369,20.5973333 5.4338668,20.474512 5.38961263,20.3555388 C5.21323732,19.8786841 5.03044836,19.3848332 4.58951008,19.0118796 C4.48432626,18.9230506 4.4198691,18.6899145 4.41345545,18.515784 C4.39838338,18.1460372 4.40030747,17.767632 4.40223157,17.4023747 C4.40383498,17.1038194 4.40575907,16.7994919 4.39870406,16.4990125 C4.39293178,16.2617075 4.46925418,16.1267002 4.66262566,16.033061 C5.10516735,15.8185244 5.43290475,15.5308723 5.66443743,15.1543912 C5.73947711,15.0322112 5.87640849,14.9302342 6.00852963,14.8308227 L6.04765288,14.8013199 C6.1146755,14.7506521 6.1765672,14.7249975 6.23076252,14.7249975 C6.29618173,14.7249975 6.36192162,14.7621967 6.43215106,14.8388398 C6.66240101,15.0883307 6.90868508,15.3288424 7.14695209,15.5610165 L7.2178229,15.6306046 C7.26175639,15.673576 7.3143483,15.7066063 7.36052656,15.7354677 C7.39035002,15.7537466 7.4525624,15.7935112 7.46122083,15.8117901 C7.53626051,16.0237612 7.60103835,16.2459941 7.66357141,16.4608513 C7.72802857,16.6808394 7.79376846,16.9056377 7.87105292,17.1249845 L7.87586315,17.1397359 C7.95988194,17.3796063 8.06506576,17.6781616 8.27831954,17.7592942 C8.43705732,17.8199032 8.48868719,17.9183527 8.55923731,18.0562461 C8.56949915,18.0774112 8.58040235,18.0979348 8.59194691,18.1190999 C8.60252943,18.1389822 8.61214991,18.1601472 8.62241174,18.1816329 C8.65031111,18.2422419 8.68237935,18.3108679 8.73625399,18.3685908 C8.88986085,18.5331008 9.04603317,18.6963282 9.20156413,18.8595555 L9.21856029,18.877193 C9.46580641,19.1366251 9.72203164,19.4050362 9.96831571,19.6779369 L9.98178437,19.6926883 C10.1068505,19.8309024 10.1443703,19.889908 10.0696513,20.0085605 C9.95997797,20.1833324 9.87499713,20.3658007 9.78520607,20.5598135 C9.74608282,20.6428702 9.70728025,20.7272097 9.66495017,20.8125112 C9.64635059,20.8503517 9.64602991,20.8933232 9.66462949,20.9305223 C9.68226702,20.9683629 9.71625935,20.9953002 9.75698602,21.0042793 L9.95869524,21.0494955 C9.96863639,21.0514196 9.97857754,21.0523816 9.98819802,21.0523816 C10.0375831,21.0523816 10.0827993,21.0254443 10.1065298,20.9824729 L10.2418578,20.7365095 C10.3422314,20.5550033 10.4355499,20.386645 10.5266237,20.2163627 C10.57184,20.1470953 11.1205275,19.8937562 11.3158231,19.8850978 C11.3812423,19.9684752 11.4466615,20.0518526 11.51176,20.1349093 C11.6621601,20.3266774 11.8090326,20.5139559 11.9591119,20.6989896 C12.0184382,20.7721052 12.0816126,20.842014 12.1431836,20.9093573 C12.2191854,20.9940174 12.2929423,21.0751501 12.3570788,21.1585275 C12.4115948,21.2290776 12.4706004,21.2778214 12.5353782,21.3054 C12.5228716,21.3217548 12.5138925,21.3413165 12.5100443,21.3621608 L12.4975377,21.4288628 C12.4850311,21.4913958 12.4744485,21.5484773 12.4670728,21.6055587 C12.4513594,21.7251733 12.4382114,21.8460705 12.4247428,21.9663264 C12.3968434,22.2212689 12.368944,22.4762114 12.320521,22.7202507 C12.2179026,23.2317391 12.0937986,23.7400207 11.9504535,24.2306647 C11.9228748,24.325266 11.8183324,24.440391 11.7827366,24.4577079 L11.7612509,24.4570665 C11.6730633,24.4570665 11.586479,24.4679697 11.5018189,24.4788729 C11.4213276,24.4891347 11.3453259,24.4987552 11.2722103,24.4987552 C11.1256584,24.4987552 11.0310571,24.4583492 10.9483211,24.3595791 C10.9476797,24.3560516 10.9467177,24.3534861 10.9454349,24.3506 C10.9098392,24.2601675 10.8761675,24.1697351 10.8421752,24.0796233 C10.7664942,23.8788762 10.6885683,23.6726774 10.5997393,23.4728923 C10.3640378,22.9450491 10.2918842,22.5390652 10.3579448,22.1167265 C10.3874476,21.9262411 10.3496071,21.7360765 10.3124079,21.5520048 C10.2973358,21.4753617 10.2813017,21.3971152 10.2716812,21.3223962 C10.2630228,21.2553736 10.2053,21.2047058 10.1379567,21.2047058 C10.1369946,21.2047058 10.0305281,21.208554 10.0305281,21.208554 C9.95773319,21.2111194 9.90033104,21.2698043 9.90033104,21.3438819 C9.90033104,21.419563 9.89968968,21.4955647 9.89904831,21.5712457 C9.89776558,21.7367178 9.89648285,21.9079622 9.90097241,22.0772825 C9.90578264,22.2642404 9.86569734,22.4066233 9.78520607,22.4893594 C9.72780392,22.548365 9.64699196,22.5781884 9.54501496,22.5781884 C9.47093733,22.5781884 9.38627718,22.562475 9.29456202,22.5310481 C9.05405023,22.4483121 8.80135251,22.3739137 8.57815757,22.3072118 L8.55987868,22.3014395 C8.43256777,22.2642404 8.30525686,22.2257585 8.17858732,22.1863145 C7.97110582,22.1218574 7.87939066,22.0173149 7.87169428,21.835488 C7.86816677,21.7569208 7.85726357,21.6809191 7.84700174,21.6071622 C7.84187082,21.5747732 7.83738126,21.5423843 7.83353308,21.5103161 C7.82551602,21.4487451 7.77709298,21.400322 7.71520128,21.3926256 C7.70974968,21.3919843 7.70461876,21.3913429 7.69916716,21.3913429 C7.6436891,21.3913429 7.59302129,21.4272593 7.5728183,21.4792099 C7.45897605,21.7822547 7.4490349,22.0076945 7.54235347,22.18888 C7.6292584,22.358521 7.80499234,22.4755701 8.0788551,22.5490063 C8.11028197,22.5570234 8.14459499,22.5740195 8.18115278,22.5922984 C8.2100142,22.6064085 8.23502742,22.6185944 8.26068201,22.630139 C8.30237072,22.6474558 8.34438011,22.6666968 8.38638951,22.6859377 C8.49125265,22.7333987 8.59964329,22.7827838 8.71637168,22.8161347 C8.87863697,22.862313 9.04346771,22.9040017 9.20284686,22.9450491 C9.41032836,22.997641 9.62358214,23.0518363 9.82753614,23.11469 C9.82561205,23.11469 9.86024574,23.1390619 9.91219629,23.2583558 C9.94811272,23.3407711 9.98531187,23.4238279 10.0221903,23.5065639 L10.0343763,23.5338219 C10.1867004,23.8756693 10.3447968,24.2300234 10.46377,24.5866222 C10.5275858,24.7774282 10.5298306,25.0083195 10.4701836,25.1606437 C10.31337,25.5586105 10.0991541,25.9331675 9.87499713,26.3141382 C9.75826875,26.5119992 9.51871901,26.6450824 9.27916926,26.6450824 M3.86027834,26.8490364 C3.77337341,26.8490364 3.6316318,26.7775242 3.41645392,26.6694543 C3.31640101,26.6187865 3.21025514,26.5280333 3.10891951,26.4068154 C2.98962566,26.0838882 2.8706525,25.7551888 2.75456548,25.4280928 C2.79465077,25.175395 2.82832242,24.9034564 2.86039066,24.5753983 C2.87161455,24.459632 2.86904909,24.3457897 2.86616295,24.2139893 C2.8652009,24.1504941 2.86359749,24.0834715 2.86359749,24.0074698 C2.86359749,23.9574434 2.8360188,23.9119065 2.79176463,23.8884966 C2.77220301,23.8782348 2.75071729,23.8731039 2.72891088,23.8731039 C2.7013322,23.8731039 2.67503624,23.8808003 2.65194711,23.896193 C2.61506864,23.9218476 2.58171767,23.9420506 2.55445967,23.9580847 C2.48166477,24.0010562 2.4082285,24.0449896 2.41015259,24.140553 C2.41143532,24.2001999 2.39508052,24.2633743 2.37038798,24.3291142 C2.21357429,23.8724625 2.04906423,23.3859873 1.85697548,22.8122866 C1.74569869,22.4790976 1.64340101,22.1372501 1.54687562,21.7719929 C1.63153577,21.8662735 1.72100615,21.9579887 1.8403,22.012184 C2.25975256,22.2023487 2.44959653,22.4694771 2.47493044,22.9052845 C2.49128524,23.19454 2.54259442,24.0754545 3.52612729,24.1225948 L3.58256739,24.1248396 C3.76247021,24.1328566 4.00875428,24.1427978 4.09020761,24.2287407 C4.31757142,24.4660456 4.58854803,24.4961898 4.82777709,24.5218443 C4.94642957,24.534351 5.05642363,24.5462162 5.15583517,24.5808499 C5.26069831,24.6164457 5.38448171,24.6530034 5.50858579,24.6530034 C5.56213975,24.6530034 5.61184552,24.6462691 5.65706173,24.6328005 C5.65289286,24.6401761 5.64936536,24.6488346 5.6467999,24.658455 C5.63268987,24.7065574 5.61793848,24.7472841 5.60575255,24.7825591 C5.57721182,24.8620884 5.55348132,24.929111 5.55668815,25.004792 C5.56791203,25.2863512 5.45631456,25.5166011 5.2061823,25.7282515 C5.12184284,25.799443 5.036862,25.869031 4.95123981,25.9395812 L4.93552637,25.9517671 C4.72547941,26.1239735 4.50805675,26.3022729 4.30955436,26.4972478 L4.27941021,26.527392 C4.06230824,26.7416078 3.95359691,26.8490364 3.86027834,26.8490364 M3.50945181,27.4650673 C3.51009317,27.4657086 3.51073454,27.46635 3.5113759,27.46635 C3.54761301,27.4993803 3.59539469,27.5170178 3.64093159,27.5256762 L3.61367358,27.5426724 C3.59090513,27.5574238 3.57294692,27.5769854 3.5623644,27.6003952 C3.54536823,27.5554997 3.52741002,27.5099628 3.50945181,27.4650673 M8.24112039,28.9440544 C8.19013189,28.9440544 8.13272974,28.9270583 8.06987599,28.8927452 C7.98008493,28.8440015 7.8694495,28.8205917 7.73283881,28.8205917 C7.58083536,28.8205917 7.42370099,28.8497738 7.28965575,28.8789559 C7.22648132,28.8921039 7.17677555,28.8988382 7.13861435,28.8988382 C7.0722331,28.8988382 7.02028255,28.8988382 6.95999426,28.6785294 C6.90676099,28.4848373 6.84326587,28.2937106 6.78137417,28.1093182 C6.68516946,27.8213454 6.58671997,27.5250349 6.5315626,27.2303278 C6.49115662,27.0132258 6.38020051,26.8378125 6.27277191,26.6684922 C6.14706442,26.4696692 6.02809125,26.2823906 6.04957697,26.05182 C6.05951813,25.9530498 5.97549934,25.9139266 5.93894155,25.8966097 C5.92579357,25.8905168 5.90847672,25.8824997 5.88731169,25.8715965 C5.86839143,25.8613347 5.84658502,25.8562038 5.82477862,25.8562038 C5.8106686,25.8562038 5.79591721,25.8584485 5.78244855,25.8629381 C5.96523751,25.6554566 5.99025073,25.3908936 6.01109509,25.1664159 C6.02007419,25.072456 6.02841194,24.984589 6.04572878,24.9008909 C6.06336632,24.8133446 6.00917099,24.7546598 5.9562584,24.6975783 C5.93413131,24.6738478 5.90911809,24.6462691 5.88186009,24.6119561 C5.86005368,24.5850188 5.82958886,24.5673812 5.79559652,24.5628917 C5.87480507,24.501962 5.93316927,24.4115296 5.96748228,24.2938392 C5.98095094,24.2928771 5.99762643,24.2915944 6.01590532,24.2915944 C6.04957697,24.2915944 6.07523156,24.2948012 6.08485204,24.2986494 C6.16085376,24.3236626 6.23781753,24.3358486 6.31221585,24.3358486 C6.48730843,24.3358486 6.63482232,24.2694673 6.7627746,24.1918622 C6.7444957,24.2774844 6.72717885,24.3762545 6.76758483,24.4679697 C6.81536651,24.5770017 6.89425437,24.6610205 6.97057678,24.7418325 C6.99655205,24.7690905 7.02220664,24.7960278 7.04593714,24.8236065 C7.12931456,24.9214146 7.2178229,25.0160159 7.30248305,25.1074104 C7.4836686,25.3023853 7.67030574,25.5040945 7.80531303,25.7237619 C7.89221795,25.8664656 7.97238855,26.018469 8.049673,26.1656623 C8.23919629,26.5248265 8.43513323,26.8964974 8.76062585,27.1912045 C8.76126721,27.1928079 8.76190858,27.1944113 8.76222926,27.1956941 C8.73753672,27.3287773 8.71444759,27.4625018 8.69135845,27.5959057 C8.62369447,27.9871382 8.55378571,28.3918394 8.44154688,28.7740928 C8.41717502,28.8561875 8.35207649,28.9440544 8.24112039,28.9440544 M7.58789037,33.1940581 C7.14085913,32.9493774 6.71338951,32.5998336 6.31510199,32.1547265 C5.46946254,31.2077514 4.77326108,30.2046569 4.24702129,29.173663 L4.24285242,29.1245986 C4.2104635,28.7054667 4.1777539,28.2773558 4.1302929,27.8566205 C4.11714493,27.7427782 4.03472955,27.6597215 3.96193465,27.5869266 C3.9356387,27.5599893 3.91222888,27.5362588 3.8936293,27.513811 C3.95327623,27.4980976 4.01131974,27.4730843 4.05493254,27.4362059 C4.38780086,27.154326 4.70912461,26.8512812 5.0205072,26.5584982 L5.22542325,26.3651267 C5.27320492,26.3202312 5.31489363,26.2702047 5.35497893,26.222423 C5.41462585,26.1496281 5.47042459,26.0826055 5.53039219,26.0524614 C5.59484935,26.0197518 5.65064809,25.984156 5.69810908,25.9447121 C5.69490226,25.9536912 5.6923368,25.9626703 5.69105407,25.9729321 C5.61248688,26.5597809 5.69522294,27.0266945 5.94311042,27.4015722 C6.21055953,27.8059526 6.37282482,28.2561907 6.43856471,28.7760169 C6.50815278,29.3253458 6.69030038,29.4924213 7.21846426,29.4924213 C7.21846426,29.4924213 7.54267415,29.4917799 7.69948784,29.4917799 C7.84155014,29.4917799 7.98361243,29.4924213 8.12567473,29.4924213 C8.17570118,29.4924213 8.32930804,29.492742 8.37067607,29.5344307 C8.41364751,29.5780435 8.41236478,29.752174 8.41172341,29.8352308 C8.40979932,30.1299379 8.46046714,30.4544685 8.56276482,30.8001641 C8.68077594,31.1994136 8.63652177,31.5476747 8.42775753,31.8651503 L8.38382405,31.9331349 C8.29467434,32.0707077 8.2026385,32.21277 8.08847557,32.307692 C8.05095573,32.3391188 7.93358598,32.3779214 7.85726357,32.3869005 C7.80050279,32.3060885 7.73893177,32.2307282 7.67864348,32.158254 C7.50739909,31.9504518 7.34609585,31.7545148 7.32845832,31.4588457 C7.31210352,31.1772866 7.15080028,30.7972779 6.75443685,30.6244301 C6.88816141,30.2861102 6.89874393,29.9827447 6.78746714,29.6748896 C6.76790551,29.6216563 6.7172377,29.5860606 6.66047691,29.5860606 C6.60050931,29.5870226 6.54952081,29.6245424 6.53220396,29.6796998 L6.20863544,30.6888873 C6.19484609,30.7334621 6.20414588,30.7815645 6.23429003,30.8174809 C6.2602653,30.8479457 6.29778514,30.8646212 6.33787044,30.8646212 C6.34460477,30.8646212 6.3513391,30.8646212 6.35839411,30.8633385 L6.48698775,30.8444182 C6.50077709,30.8909172 6.51584916,30.9367748 6.53765556,30.981991 C6.58351314,31.0814025 6.63674642,31.1776072 6.68869696,31.2706051 C6.79420147,31.4623732 6.89457506,31.6425967 6.92952944,31.8292338 C6.99302455,32.1691572 7.1668344,32.4151206 7.33519265,32.6530669 C7.3634127,32.6928315 7.38874661,32.7287479 7.41375984,32.7653057 C7.49874067,32.8884478 7.56159441,33.043658 7.58789037,33.1940581"
}), React.createElement("path", {
  d: "M25.8006936,8.45328385 C25.829555,8.30576996 25.8580958,8.15921811 25.8853538,8.01170421 L25.8875986,8.00112169 C25.9087636,7.8898449 25.9321734,7.76317536 25.9934237,7.69743547 C26.0588429,7.6259233 26.1197726,7.55152499 26.1771747,7.47456122 C26.0630118,7.70769731 25.9809171,7.95847093 25.9007465,8.20154818 C25.862906,8.31442838 25.8247448,8.43115677 25.7833768,8.54467833 C25.7894697,8.5142135 25.7949213,8.483428 25.8006936,8.45328385"
}), React.createElement("path", {
  d: "M9.19005163,33.6171343 C8.82992531,33.6171343 8.47204377,33.5555633 8.12474475,33.4340247 C8.13564795,33.242898 8.18150553,33.0463197 8.25333839,32.8872612 C8.35916357,32.6525217 8.55125232,32.4395886 8.73628606,32.2333898 C8.78695387,32.1769497 8.8356976,32.1233958 8.88251722,32.0685591 C8.94152278,32.0005744 9.03548272,31.9499066 9.06723028,31.9499066 C9.30389388,31.9915953 9.54280225,32.0570145 9.79549997,32.1269233 C9.89619424,32.154502 10.0000953,32.1830427 10.1081653,32.2119041 C10.1197099,32.2147903 10.1312544,32.2163937 10.1424783,32.2163937 C10.1796775,32.2163937 10.2155939,32.2006802 10.2409278,32.1737429 L11.1260112,31.2322194 C11.1381971,31.2450467 11.1497417,31.2588361 11.1612862,31.2723047 C11.2703183,31.399295 11.373578,31.5192302 11.5220539,31.5394332 C11.84915,31.583046 11.9277171,31.7863586 12.0364285,32.0679177 C12.0604797,32.1307715 12.0854929,32.1945873 12.1130716,32.256479 C12.148988,32.3360082 12.1855458,32.4152168 12.2217829,32.4941046 C12.0723449,32.6040987 11.9312446,32.6948518 11.7904651,32.7695708 C11.7304975,32.801639 11.6730953,32.8321039 11.6169759,32.8609653 C11.6156932,32.8564757 11.6137691,32.8516655 11.611845,32.8474966 C11.5951695,32.8125422 11.5637426,32.7862463 11.5271848,32.7759844 L11.406929,32.7413507 C11.394743,32.7378232 11.3822364,32.7358991 11.3697298,32.7358991 C11.319062,32.7358991 11.2735251,32.7641192 11.2497946,32.8083734 L11.0859259,33.1223214 C10.8550346,33.228788 10.6424221,33.3153722 10.4387888,33.3849603 C10.4259615,33.2259018 10.3858762,33.0139308 10.2441346,32.8038838 C10.2194421,32.766364 10.1774327,32.7439162 10.1322165,32.7439162 C10.1261235,32.7439162 10.1203512,32.7445576 10.1148996,32.7451989 L9.99624714,32.7615537 C9.92377292,32.7718156 9.87310511,32.8362727 9.8804808,32.909709 L9.94493796,33.5292674 C9.77176947,33.5687113 9.60469395,33.5950073 9.44755958,33.6068725 C9.36225807,33.6136068 9.27567383,33.6171343 9.19005163,33.6171343"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M0.285471458,3.46519764 C0.272964845,3.45942536 0.249234349,3.44467397 0.243141384,3.43633622 L0.231596818,3.4167746 C0.396748246,2.31202379 0.646559823,1.22234504 0.975259267,0.173713648 C1.06088146,0.331168698 1.160293,0.478361912 1.29562097,0.585790511 C1.26675955,0.594769618 1.24078428,0.612727831 1.22282607,0.638703105 C1.19075783,0.684560686 1.15997232,0.723042572 1.13271432,0.758317634 C1.07210535,0.833357312 1.01534456,0.904869483 0.992576116,0.993698504 C0.961469924,1.11908532 0.941266934,1.24543418 0.921384626,1.36857621 C0.899898907,1.50037667 0.878092504,1.63666668 0.842817442,1.76269486 C0.686003756,2.33126473 0.513155951,2.88444184 0.349928618,3.39721297 C0.34351497,3.41773665 0.30984332,3.45204966 0.285471458,3.46519764 M0.0141741614,7.09692564 C-0.00153927544,6.67875581 -0.00410473452,6.28175102 0.00583641939,5.8889151 C0.0193050795,5.8924426 0.0327737397,5.89404602 0.0465630822,5.89404602 C0.140523021,5.89404602 0.215562699,5.82060975 0.310805367,5.72729118 L0.31657765,5.72216026 L0.44164378,5.85877095 C0.43907832,5.85877095 0.436192179,5.85877095 0.433306038,5.85812959 C0.374621161,5.85812959 0.322991297,5.89532875 0.304712401,5.95016543 C0.231276135,6.16694673 0.206583592,6.38565211 0.229993406,6.61814684 C0.251479126,6.83621086 0.189908108,6.97666975 0.0141741614,7.09692564 M1.96392306,4.78737111 C1.95494395,4.78737111 1.94660621,4.78865384 1.93826847,4.78961589 C1.91678275,4.7947468 1.89433498,4.79699158 1.87156653,4.8001984 C1.80005436,4.80853615 1.72341127,4.8184773 1.65157842,4.85503509 C1.54190504,4.91051314 1.4533967,4.99773875 1.38188453,5.06764751 C1.30844826,5.14108378 1.34500606,5.23119553 1.36681246,5.28507017 C1.37258474,5.29853883 1.37547088,5.30655589 1.37771566,5.31329022 C1.3879775,5.3482446 1.41267004,5.37806806 1.44505896,5.39474354 C1.4642999,5.40436402 1.48546494,5.40917425 1.50695066,5.40917425 C1.52138137,5.40917425 1.53581207,5.40692948 1.55024278,5.40243992 C1.57493533,5.39410218 1.59994855,5.3864058 1.62496178,5.37870943 C1.70256691,5.35497893 1.77439977,5.33221048 1.84494989,5.29789746 C1.91133115,5.26614991 1.96905398,5.22381983 2.01972179,5.18597931 C2.04088683,5.17058656 2.06108982,5.15583517 2.08257554,5.14172514 C2.13452609,5.10548803 2.15472908,5.04006883 2.13228131,4.98138395 L2.09027192,4.87363467 C2.06942756,4.82232549 2.01908043,4.78737111 1.96392306,4.78737111 M2.00080153,6.71371019 C1.98540878,6.71371019 1.97001602,6.71659633 1.95526463,6.72140657 L1.04292325,7.04914396 C0.990972704,7.06806423 0.955056277,7.11809068 0.953773547,7.17324805 C0.952170135,7.22840542 0.986162468,7.28003528 1.03715097,7.30087964 C1.13014886,7.33936152 1.23276722,7.35860247 1.34276128,7.35860247 C1.69903941,7.35860247 2.04441434,7.15272437 2.12907449,6.8900855 C2.1451086,6.84005905 2.13196063,6.78746714 2.09476147,6.75155071 C2.06910688,6.72717885 2.03575591,6.71371019 2.00080153,6.71371019 M3.0154406,9.59023118 C2.9115395,9.59023118 2.8223898,9.58093139 2.74061579,9.56297317 C2.30705321,9.46452368 1.87477335,9.33144049 1.47231696,9.20252617 C1.37579156,9.17174067 1.29722438,9.11209374 1.28086958,9.09124939 C1.2459152,8.86099944 1.1657446,8.64357678 1.08878083,8.43320913 C0.96628016,8.09937877 0.850193137,7.78350662 0.909519378,7.43588692 C0.922346673,7.36212997 0.8963714,7.29959691 0.875847728,7.24828773 C0.867189303,7.22904678 0.86141702,7.21493676 0.857889514,7.20050605 C0.820048993,7.03343053 0.782529154,6.86603432 0.74565068,6.69960017 L0.740840444,6.67971786 C0.700434464,6.49885299 0.660028483,6.31798813 0.618981138,6.13680258 C0.607757255,6.08902091 0.593005865,6.0454081 0.577933793,6.00307803 C0.57216151,5.9854405 0.566389227,5.96844433 0.560937626,5.95176885 C0.556127391,5.93701746 0.548431013,5.92258675 0.539131224,5.9107215 C0.542658731,5.91136287 0.545865554,5.91136287 0.549072378,5.91136287 C0.560937626,5.91136287 0.572802875,5.90943877 0.584026758,5.90655263 L0.678307379,5.88089804 C0.714865171,5.87127757 0.746292044,5.84562298 0.763288211,5.81130996 C0.780925742,5.77763831 0.782529154,5.73691165 0.768419129,5.70195727 C0.750781598,5.65674105 0.729937243,5.61248688 0.708130841,5.56823271 C0.669648955,5.48774144 0.633411845,5.41173971 0.62731888,5.34407573 C0.561899674,4.56577958 0.746933409,3.8336617 0.936136016,3.22083766 C0.972052443,3.10571269 1.01758934,2.98770157 1.06120215,2.87482137 C1.13431773,2.68626013 1.20903672,2.49417138 1.24944271,2.2918208 C1.31742737,1.95382156 1.35911608,1.60876732 1.40337025,1.24351008 L1.40529434,1.23068279 C1.4242146,1.07162432 1.44409691,0.906472895 1.46782741,0.733304408 C1.46911014,0.718873701 1.46878946,0.704442993 1.466224,0.690012286 C1.55729779,0.730738949 1.66151957,0.75639354 1.78369956,0.762165823 C1.85809787,0.765372646 1.96905398,0.822774793 2.02068384,0.883063081 C2.35611761,1.28006787 2.71175438,1.70946159 3.03885041,2.16547194 C3.11805896,2.27578668 3.16744405,2.45665154 3.16167176,2.61603069 C3.14659969,3.02554209 3.09240437,3.43761895 3.03371949,3.85899561 C3.02153356,3.94878667 2.87305762,4.06455301 2.73291941,4.06455301 C2.70213391,4.06455301 2.67647931,4.05910141 2.65723837,4.04691548 C2.57546436,3.99849244 2.50715902,3.97572399 2.44270186,3.97572399 C2.25606471,3.97572399 2.16819774,4.15177862 2.08353759,4.32174029 C2.06173118,4.36471173 2.06525869,4.41602091 2.09123396,4.45578552 C2.11656787,4.49394673 2.15857726,4.51671518 2.20379348,4.51671518 C2.28588817,4.51254631 2.35291079,4.51126358 2.41448181,4.50998085 C2.54596158,4.50773607 2.65787974,4.50549129 2.77043925,4.4798367 C2.80218681,4.47310237 2.83265164,4.4689335 2.85958896,4.4689335 C2.93655273,4.4689335 3.03820904,4.49138127 3.03852973,4.68026319 C3.03852973,4.75369946 3.03692631,4.82713572 3.03500222,4.90025131 C3.03115403,5.06572342 3.02666448,5.23119553 3.04173655,5.39666764 C3.08053912,5.82958886 3.00004784,6.04604947 2.76402561,6.14417828 C2.72810918,6.15957103 2.70020981,6.18939449 2.6877032,6.22627297 C2.67551727,6.26379281 2.67968614,6.30419879 2.69956845,6.33722907 C2.74478466,6.41483421 2.79128361,6.48794979 2.83617914,6.55849992 C2.92725294,6.70280699 3.01319582,6.83813496 3.07027728,6.97891452 L3.0972146,7.04593714 C3.21779118,7.34320971 3.34253663,7.65138548 3.37781169,7.95443034 C3.42912087,8.39633066 3.42174518,8.85650988 3.41436948,9.30193771 L3.41148334,9.49306441 C3.40539037,9.50557103 3.34895027,9.56104908 3.32746455,9.56842477 C3.20817071,9.5825348 3.10843849,9.59023118 3.0154406,9.59023118",
  mask: "url(#mask-4)"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M0.343421824,0.667051427 C0.275328973,0.566036476 0.225119093,0.417560532 0.242314257,0.327769465 C0.246785,0.305001016 0.251599646,0.282553249 0.257446002,0.259464117 C0.288397298,0.393830036 0.316941271,0.529799367 0.343421824,0.667051427",
  mask: "url(#mask-6)"
}), React.createElement("path", {
  d: "M14.9895605,11.1496455 C14.8936764,11.0608165 14.7913788,10.9777597 14.6836295,10.9004753 C14.7730999,10.9902663 14.8628909,11.0803781 14.9558888,11.1727346 C14.9677541,11.1650382 14.9786573,11.1573419 14.9895605,11.1496455"
}), React.createElement("path", {
  d: "M18.549648,14.0288923 C18.5573444,14.016065 18.5650408,14.0045204 18.5724165,13.9926552 C18.5550996,13.9961827 18.5365001,13.9987481 18.5179005,14.0009929 C18.5288037,14.0102927 18.5390655,14.0195925 18.549648,14.0288923"
}), React.createElement("path", {
  d: "M8.61849942,17.2344654 C8.58899664,17.2344654 8.55628703,17.21779 8.53191517,17.1918147 C8.49792284,17.1546155 8.48156804,17.1004202 8.48637827,17.0391699 C8.49279192,16.9545097 8.44340683,16.891656 8.40781109,16.8454777 C8.39690789,16.8307263 8.38472196,16.8166163 8.37862899,16.8050717 C8.01337176,16.0966843 7.98483103,15.517532 8.28723451,14.9271557 C8.32603708,14.8517953 8.36548102,14.776435 8.40524563,14.7013953 C8.62619579,14.2832255 8.85452165,13.8509456 8.91897881,13.3349676 C8.94912295,13.0960593 9.10240913,12.8093692 9.31886974,12.5868156 C9.40000239,12.5034382 9.55489198,12.4649563 9.71843999,12.4251917 C9.74666004,12.4181367 9.77455941,12.4114024 9.80245878,12.4040267 C9.81079652,12.48548 9.82458586,12.5736677 9.86819867,12.6528762 C9.99518889,12.8824848 10.1305169,13.1120934 10.2607139,13.3343263 C10.4095105,13.5867033 10.561514,13.8451733 10.7026142,14.1058881 C10.7798987,14.2482711 10.8478834,14.3954643 10.9052855,14.525982 C10.9007959,14.5301509 10.8966271,14.5349611 10.8930996,14.540092 C10.8578245,14.5869117 10.8286424,14.6257142 10.8036292,14.6590652 C10.7561682,14.721919 10.7228172,14.7655318 10.691711,14.810748 C10.6455328,14.8774499 10.6009579,14.9454346 10.555421,15.0140606 C10.4749297,15.136882 10.390911,15.2635515 10.3007992,15.3796385 L10.2171011,15.4873878 C9.83292361,15.98188 9.43559813,16.4927271 9.02544536,16.9788816 C8.93405088,17.0869515 8.77114423,17.2123384 8.62844057,17.2331827 C8.62523375,17.2338241 8.62170624,17.2344654 8.61849942,17.2344654 M10.7808607,19.4792421 C10.6423259,19.4792421 10.4941707,19.457115 10.3517877,19.2977359 C10.0901109,19.0036702 9.80951379,18.7227524 9.53789581,18.4514551 C9.33169704,18.2452563 9.12068803,18.034568 8.92154427,17.8216349 C8.91352721,17.8017526 8.91641335,17.6936826 8.9337302,17.6689901 C9.04147948,17.5381517 9.16558356,17.4146889 9.28583946,17.2941124 C9.39583352,17.184439 9.5090344,17.0702761 9.61357685,16.9490581 C9.98524774,16.5161369 10.4200931,16.0030451 10.8299251,15.4719951 C10.8510902,15.4440957 10.8745,15.4161963 10.8985512,15.3879763 C10.9790424,15.2930543 11.0746058,15.1814568 11.1249529,15.0307361 C11.1262357,15.0329809 11.1271977,15.034905 11.1284804,15.0365084 C11.1502868,15.0855728 11.1980685,15.1163583 11.2509811,15.1163583 C11.2606016,15.1163583 11.2708634,15.1157169 11.2804839,15.1134722 C11.3420549,15.0996828 11.3866298,15.0435634 11.3859884,14.980389 C11.3840643,14.7174294 11.534785,14.5981356 11.725591,14.4483769 C11.7980653,14.3912954 11.8715015,14.3332519 11.9366,14.2655879 C12.214311,13.9788979 12.5022838,13.6643085 12.7261201,13.3112372 L12.7415128,13.2859032 C12.9313568,12.9863859 13.0814362,12.7497223 13.4207181,12.6996958 C13.6092794,12.6724378 13.7895029,12.6185632 13.9408649,12.5451269 C13.983195,12.5242826 14.0252044,12.504721 14.0678552,12.4841973 L14.0790791,12.479387 C14.2862399,12.3822203 14.4972489,12.2831294 14.6684933,12.1362569 C14.6652865,12.1478015 14.6643244,12.159346 14.6643244,12.1708906 C14.6643244,12.1914143 14.6630417,12.2125793 14.6614383,12.2337443 C14.6579108,12.2959567 14.6540626,12.3620173 14.6700967,12.430002 C14.6967133,12.5425615 14.7307057,12.6580071 14.7598878,12.7599841 C14.8176106,12.9565624 14.8718059,13.1419169 14.8916882,13.329516 C14.9356217,13.756665 14.9619177,14.1940758 14.9869309,14.6173765 C15.002003,14.8655847 15.0167543,15.1118687 15.0350332,15.3575114 C15.0520294,15.5851959 14.9612763,15.7448958 14.7127474,15.9283261 C14.3731448,16.178779 14.0431626,16.4266665 13.738835,16.7101497 C13.4688205,16.9606027 13.3283616,17.0449422 13.1814891,17.0449422 C13.0625159,17.0449422 12.9166054,16.9881814 12.6770557,16.8506086 C12.6427427,16.830085 12.6023367,16.8198231 12.5574411,16.8198231 C12.5077354,16.8198231 12.4599537,16.832009 12.4140961,16.8435536 C12.3887622,16.8499673 12.3663144,16.8554189 12.3457908,16.8576636 C12.3403392,16.858305 12.3355289,16.8595877 12.330398,16.8608705 C12.3387358,16.8397054 12.3464321,16.817899 12.3541285,16.7954513 C12.3679179,16.7585728 12.3643903,16.7168841 12.344508,16.6825711 L11.6184831,15.4261375 C11.5947526,15.3844488 11.5498571,15.3587942 11.5017547,15.3587942 C11.4834758,15.3587942 11.4648763,15.362963 11.4478801,15.3706594 L11.3349999,15.4194031 C11.2737496,15.4463405 11.2407193,15.5149665 11.2586775,15.5794237 C11.2901044,15.6907004 11.3609752,15.9417948 11.3609752,15.9417948 C11.4498042,16.2544601 11.5411987,16.57867 11.6229727,16.9019178 C11.6505514,17.0103085 11.6531168,17.1260748 11.6306691,17.2209968 C11.589301,17.3941653 11.5386332,17.5686165 11.4902102,17.7376161 C11.4308839,17.9454183 11.3689922,18.1602755 11.3221726,18.3770568 C11.2852941,18.5434909 11.2650911,18.7118492 11.2448881,18.8750765 C11.2259679,19.0312488 11.2060856,19.1919107 11.173376,19.3445555 C11.1656796,19.380472 11.084547,19.4555116 11.0563269,19.4590391 L11.0127141,19.4638494 C10.9315815,19.4718664 10.8549384,19.4792421 10.7808607,19.4792421 M17.8127841,21.0149901 C17.7508924,21.0149901 17.6659115,20.9931837 17.560407,20.9495709 C17.5090978,20.9280851 17.4484889,20.9043546 17.382749,20.8924894 C16.8876154,20.8010949 16.5486541,20.4919571 16.3463035,19.9490418 C16.3190455,19.8759262 16.3273832,19.776194 16.3360417,19.6703688 C16.342776,19.5908396 16.3491897,19.5081035 16.3430967,19.4253675 C16.3261005,19.2066621 16.3039734,18.9799397 16.2844118,18.7798339 C16.253947,18.4678099 16.2221994,18.1442414 16.2048826,17.8264451 C16.1833969,17.4121235 16.1833969,17.4121235 16.4902899,17.1831563 C16.6592895,17.0568074 16.8545851,16.9506615 17.0428256,16.8486845 C17.1634022,16.7832653 17.2846202,16.7175254 17.4010279,16.6460133 C17.6832284,16.4741275 17.988518,16.2429155 18.1203185,15.8334041 C18.1360319,15.7846604 18.1228839,15.7327098 18.0872882,15.6967934 C18.0616336,15.6711388 18.0279619,15.6570288 17.9917248,15.6570288 C17.9779355,15.6570288 17.9641461,15.6592736 17.9506775,15.6640838 C17.8214425,15.7048105 17.73101,15.7859431 17.6582151,15.8513623 L17.5927959,15.9110092 C17.5450143,15.9552634 17.4994774,15.9969521 17.4532991,16.0232481 C17.3904454,16.0588438 17.3240641,16.08995 17.2538347,16.1229803 C17.1627609,16.1662724 17.070725,16.2092439 16.9838201,16.2634392 C16.8879361,16.3237275 16.7965416,16.3904294 16.7083539,16.4552072 C16.5518609,16.5693702 16.4046677,16.6774401 16.2433645,16.7425387 C16.2180306,16.7524798 16.1763418,16.7592141 16.1282395,16.7592141 C15.9932322,16.7592141 15.8922173,16.7168841 15.8765038,16.70085 C15.6744739,16.3583612 15.5753831,16.07584 15.5760244,15.8401384 C15.5785899,14.7860554 15.4878368,13.8669797 15.2986342,13.0306401 C15.2502111,12.8151415 15.1873574,12.601567 15.1264277,12.3953683 C15.0985284,12.2994842 15.070629,12.2052036 15.0446537,12.1102816 C15.0279782,12.0528795 14.9744243,12.0124735 14.9144567,12.0124735 C14.9054776,12.0124735 14.8961778,12.0131149 14.8871987,12.0153596 C14.8871987,12.0153596 14.7698289,12.0390901 14.7691875,12.0397315 C14.8926503,11.9037622 14.9853275,11.7309144 15.0247714,11.4958542 C15.0260541,11.4916853 15.0315057,11.4833476 15.0388814,11.4750098 C15.0680635,11.5070781 15.0956422,11.5381843 15.1219382,11.5708939 C15.1552891,11.6112998 15.186716,11.6606849 15.2197463,11.7119941 C15.2979928,11.8335327 15.3788048,11.9598816 15.5109259,12.0259422 L15.5295255,12.0342799 C15.6667775,12.2587576 15.7931264,12.5076071 15.9156271,12.7926937 C16.0249798,13.0457121 16.3334762,13.2214461 16.5374302,13.3381745 C16.9831787,13.5924756 17.4670884,13.8567179 17.9811423,14.0667649 C18.0385445,14.089854 18.1065291,14.1097363 18.1780413,14.1228843 C18.1857377,14.1462941 18.1905479,14.1674591 18.1927927,14.1873414 C18.2283884,14.5099479 18.2274264,14.8457024 18.226785,15.1705536 C18.2264643,15.3161434 18.2261436,15.4617332 18.2287091,15.607323 C18.2299918,15.6724215 18.2700771,15.7118655 18.2918835,15.7327098 C18.2960524,15.7375201 18.2992592,15.7397648 18.301504,15.7432924 C18.3274793,15.7737572 18.3653198,15.791074 18.4050844,15.791074 C18.4467731,15.7904327 18.485255,15.7721538 18.5105889,15.7410476 L18.5545224,15.6855695 C18.6253932,15.784019 18.6924158,15.8770169 18.7520628,15.9732216 C18.7790001,16.0171551 18.8014478,16.0684643 18.8248577,16.1236217 C18.8716773,16.2294468 18.9191383,16.3384789 19.0108534,16.422177 C19.2205797,16.6117003 19.2872817,16.687702 19.178891,16.8804321 C19.1192441,16.9872193 19.1349575,17.1148509 19.1465021,17.2078488 C19.1503503,17.2386343 19.1532364,17.26012 19.1532364,17.2787196 C19.1532364,17.3088638 19.1631776,17.3374045 19.1804944,17.3604936 C19.1567639,17.3739623 19.1372023,17.3948066 19.1250164,17.4204612 C19.0560697,17.565089 18.9858402,17.7029824 18.9178555,17.8363863 C18.7655314,18.136545 18.6234691,18.4155387 18.5263024,18.7131319 C18.4823689,18.8484599 18.4265701,18.9844292 18.3726955,19.1165504 C18.2264643,19.4741112 18.0760643,19.8425753 18.1023602,20.2697242 C18.1058878,20.3219954 18.0802332,20.3886974 18.0536165,20.4602095 C18.0244344,20.5368526 17.9952523,20.6154198 17.9872353,20.7026454 C17.9596566,21.0149901 17.8679414,21.0149901 17.8127841,21.0149901 M14.8288345,21.5838806 C14.3654484,21.5790704 13.9604266,21.3683821 13.5169228,20.8998651 C13.4402797,20.8190531 13.3822362,20.6622394 13.390574,20.5583384 C13.4001944,20.4335929 13.4354695,20.3078854 13.472348,20.1754436 C13.5092265,20.0420397 13.5473877,19.9051083 13.5614977,19.7624047 C13.5986968,19.3775858 13.6185792,18.9857119 13.636858,18.6073067 C13.6451958,18.4466449 13.6525715,18.2895105 13.6618713,18.1317348 C13.6657195,18.0653535 13.6195412,18.0047445 13.5547634,17.9915966 L13.3957049,17.9595283 C13.3870465,17.9576042 13.3780674,17.9563215 13.3687676,17.9563215 C13.3120068,17.9563215 13.2606976,17.9928793 13.2417773,18.0461126 C13.2321569,18.0740119 13.2193296,18.1015906 13.2074643,18.12949 C13.1705859,18.212226 13.1340281,18.294 13.1301799,18.3898841 C13.1234455,18.5547148 13.1240869,18.7214697 13.1247283,18.8830936 C13.1253696,19.1223226 13.1263317,19.3702101 13.1013185,19.6087978 C13.0554609,20.0574325 12.921095,20.4079383 12.6683972,20.7375998 C12.6077883,20.6612774 12.5471793,20.5862377 12.4875324,20.5121601 C12.2508688,20.2171323 12.0270325,19.9384593 11.8227578,19.6434315 C11.7416252,19.5263824 11.697371,19.3378212 11.7214222,19.2124344 C11.827568,18.6563711 11.9680269,18.0958183 12.1039963,17.5525824 L12.1530607,17.3569661 C12.1764705,17.2639682 12.2107835,17.171291 12.2505481,17.0677106 C12.2601686,17.082462 12.2691477,17.0984961 12.2778061,17.1154923 C12.310195,17.1744978 12.3480355,17.2431239 12.418265,17.2854539 C12.6411392,17.4185371 12.8652962,17.5436033 13.0827189,17.6641798 C13.1580792,17.7058685 13.2311948,17.7462745 13.3020656,17.7863598 C13.3216273,17.7979044 13.3450371,17.8036767 13.3681262,17.8036767 C13.4088529,17.8036767 13.4466934,17.7857185 13.4726687,17.7536502 C13.5371258,17.6747624 13.602545,17.5888195 13.6705297,17.498387 C13.82574,17.2928296 14.0011532,17.0603349 14.2041452,16.8730564 C14.4106646,16.6832124 14.6511764,16.524154 14.9061189,16.3564371 C14.9776311,16.3089761 15.0501053,16.2618358 15.1225795,16.2124507 L15.1344448,16.2429155 C15.1905642,16.382733 15.248287,16.5283228 15.2854862,16.674554 C15.3682222,17.0029328 15.4727647,17.436816 15.5429941,17.8819232 C15.5667246,18.0332853 15.5753831,18.1955505 15.5837208,18.3523642 C15.5971895,18.6095515 15.6112995,18.8747558 15.6908287,19.1242467 C15.9627674,19.9734137 15.6946769,20.9691325 15.0529915,21.4918448 C14.9878929,21.545078 14.8936123,21.5838806 14.8288345,21.5838806 M20.5469221,21.6066491 C20.5170986,21.6066491 20.4827856,21.6034422 20.4423796,21.5970286 C20.3458542,21.5809945 20.2493288,21.5710533 20.1556896,21.5623949 C20.0489023,21.5521331 19.9440392,21.5418712 19.8449483,21.523913 C19.6961517,21.4969757 19.5435069,21.4475906 19.4123478,21.4026951 C19.14554,21.3116213 18.926514,21.2304886 18.7222393,21.1471112 C18.6754197,21.1278703 18.6257139,21.0893884 18.5859493,21.0419274 C18.4647313,20.896979 18.511551,20.7658199 18.5814597,20.5663554 C18.5946077,20.5285149 18.6077557,20.4906744 18.6199416,20.4528338 C18.7180704,20.143696 18.8024099,19.8287859 18.8841839,19.5234963 C18.9377379,19.3253146 18.9903298,19.1264915 19.0474112,18.9292718 C19.0996825,18.748407 19.1570846,18.5643353 19.2128833,18.3869979 C19.2728509,18.197154 19.3328186,18.0041032 19.3882966,17.8113731 C19.409141,17.735692 19.4011239,17.6628971 19.3921448,17.585292 C19.3879759,17.5496962 19.3831657,17.5124971 19.3815623,17.471129 C19.3815623,17.4659981 19.3809209,17.4615086 19.3799589,17.456057 C19.416196,17.4692049 19.4456988,17.4813909 19.4610915,17.4948595 C19.5014975,17.5314173 19.5431862,17.5679751 19.5851956,17.6045329 C19.7295027,17.729599 19.8747718,17.8553065 19.9623181,17.9992929 C20.0174754,18.0906874 20.0761603,18.1817612 20.1351659,18.2734764 C20.3557954,18.619172 20.5841212,18.9757708 20.647937,19.3387832 C20.7268249,19.790304 20.709508,20.2742138 20.6921912,20.7420894 C20.6841741,20.9691325 20.6758364,21.2000238 20.6774398,21.4277083 C20.6784018,21.5312887 20.6565954,21.5691292 20.6431268,21.5822772 C20.6274133,21.5979906 20.5940624,21.6066491 20.5469221,21.6066491"
}), React.createElement("path", {
  d: "M35.3006206,7.55447527 C35.3015827,7.5538339 35.3025447,7.5538339 35.3035068,7.5538339 C35.3038275,7.55126844 35.3041482,7.54806162 35.3044688,7.54549616 C35.3035068,7.54806162 35.3022241,7.55158912 35.3006206,7.55447527"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M0.373994826,1.50069735 C0.381216795,1.37723464 0.389126571,1.26435444 0.398068056,1.15884993 C0.426268126,0.820209334 0.463753585,0.476758501 0.508804915,0.136193809 C0.516026884,0.141966091 0.522561047,0.14709701 0.529783016,0.15254861 C0.546634277,0.165055223 0.558670892,0.178203201 0.565548958,0.186861625 C0.528407403,0.611765784 0.491265848,1.0466111 0.426612029,1.46927048 C0.418702254,1.47600481 0.39738025,1.48883211 0.373994826,1.50069735",
  mask: "url(#mask-8)"
}), React.createElement("path", {
  d: "M36.9938878,9.87506127 C36.8175125,9.87506127 36.4997162,9.65379043 36.4625171,9.5049938 C36.3409784,9.01980135 36.0440265,8.70809807 35.5799991,8.57822171 C35.387269,8.52466775 35.2801611,8.36304383 35.3260187,8.19372353 C35.3654626,8.04749236 35.387269,7.89901642 35.4084341,7.75503003 C35.4132443,7.72360315 35.4180545,7.69217628 35.4228648,7.66171145 C35.680052,7.56678947 35.6980103,7.31665721 35.7041032,7.23327979 C35.7233442,6.96230317 35.7573365,6.68619564 35.7894047,6.41970858 C35.8006286,6.3283141 35.8112111,6.24301259 35.8211523,6.15706971 C35.8262832,6.11506032 35.8317348,6.07721979 35.8375071,6.04451019 C36.0318406,6.52264763 36.2781247,7.12039959 36.5401222,7.72713066 C36.8168711,8.36817475 37.045197,9.02942182 37.2186861,9.69355504 L37.2148379,9.70445824 C37.189504,9.76667062 37.1029198,9.84587917 37.0323697,9.86960967 C37.0224285,9.87345786 37.0089598,9.87506127 36.9938878,9.87506127"
}), React.createElement("path", {
  d: "M34.7519331,8.14385742 C34.7051135,8.14097128 34.6425804,8.11531669 34.6291117,8.10184803 C34.3254255,7.79816181 34.0409802,7.48838263 33.7831516,7.18277231 C33.6923985,7.0756644 33.654558,6.9627842 33.6580855,6.93841234 C33.6580855,6.93841234 33.6814953,6.88036883 33.9229691,6.79570868 C33.9380412,6.79057776 33.9585649,6.78769162 33.9858229,6.78769162 C34.0076293,6.78769162 34.029115,6.78929503 34.0512421,6.79057776 C34.0894033,6.79282253 34.1198681,6.79506731 34.1496916,6.79506731 C34.1875321,6.79506731 34.2212037,6.79153981 34.2516686,6.7860882 C34.5085352,6.73606175 34.7836806,6.67320801 35.1181524,6.58854786 C35.1656134,6.57636193 35.2047366,6.57026896 35.2352014,6.57026896 C35.2605353,6.57026896 35.2695145,6.57443783 35.2707972,6.5750792 C35.2704765,6.57572056 35.2868313,6.60714743 35.2675904,6.71810354 C35.2352014,6.91019229 35.212433,7.10580854 35.1906266,7.29501115 C35.1813268,7.3742197 35.1723477,7.45406961 35.1617652,7.53359884 C35.1543895,7.55123637 35.1466931,7.56823254 35.1396381,7.58587007 C35.111418,7.65193064 35.0851221,7.71350166 35.0508091,7.76449016 L35.0341336,7.78886202 C34.9475493,7.91585224 34.8583996,8.04669066 34.7519331,8.14385742"
}));
Ico['si_endoscopy'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M5.75249427,21.8854962 C5.32431632,21.8854962 4.90425424,21.6730435 4.65685089,21.2847904 C1.06387365,15.6569534 -0.402612945,8.92234635 0.297185086,1.26724182 C0.362766607,0.553306453 0.99423419,0.0334976274 1.70882406,0.0920104818 C2.42328303,0.157984707 2.94976782,0.789844994 2.8840554,1.50378036 C2.22771658,8.67023056 3.52442426,14.6842262 6.84565053,19.8879432 C7.23180919,20.4919216 7.05456891,21.2953934 6.44967428,21.6808975 C6.23368723,21.8195219 5.99178174,21.8854962 5.75249427,21.8854962"
}), React.createElement("path", {
  d: "M15.6189265,15.3681067 C15.5267721,15.3681067 15.4333086,15.3581582 15.3403687,15.3377376 C14.6397853,15.1844522 14.1960301,14.4922465 14.3493154,13.791663 C14.584414,12.7182729 13.8725731,11.8748762 13.127745,11.4452583 C12.4575307,11.0576597 11.4289087,10.8281899 10.7376193,11.4579557 C10.2045894,11.9412431 9.38396957,11.8996165 8.90290752,11.3705137 C8.42066735,10.8395783 8.45993772,10.0179112 8.99021864,9.53619463 C10.4125915,8.24341398 12.547198,8.1089784 14.4282489,9.19781492 C16.3617911,10.3154497 17.326795,12.3372194 16.8870978,14.3473388 C16.7534476,14.9535425 16.2162289,15.3681067 15.6189265,15.3681067"
}), React.createElement("path", {
  d: "M7.85777892,25.3603874 C7.39360312,25.3603874 6.94356466,25.1773875 6.61277723,24.8467309 C6.28932026,24.5231431 6.09938256,24.0669523 6.09938256,23.6018601 C6.09938256,23.1446221 6.28984387,22.687515 6.61277723,22.3637962 C7.26702163,21.7088973 8.44814352,21.7088973 9.10304242,22.3637962 C9.42636848,22.687515 9.61565168,23.1439676 9.61565168,23.6018601 C9.61565168,24.0660359 9.42584488,24.5160744 9.10304242,24.8467309 C8.77225499,25.1773875 8.32221652,25.3603874 7.85777892,25.3603874"
}), React.createElement("path", {
  d: "M11.5181572,29.8674742 C11.1187775,29.8674742 10.7248957,29.6832961 10.4701619,29.3371933 L8.94385342,27.2593979 C8.5190789,26.6821234 8.64356598,25.8687031 9.22254216,25.4439286 C9.80047114,25.019285 10.6127133,25.1442956 11.0378806,25.7226173 L12.564189,27.8002818 C12.9889636,28.3776872 12.8646074,29.1911075 12.2855003,29.6157511 C12.0543287,29.7851373 11.7846721,29.8674742 11.5181572,29.8674742"
}), React.createElement("path", {
  d: "M13.5988979,26.3169613 C13.4153743,26.3169613 13.2296255,26.2772982 13.0523852,26.1949614 L11.2126992,25.3400454 C10.5625127,25.0374017 10.2809441,24.2660007 10.5828024,23.6151597 C10.8843989,22.9644496 11.6575016,22.6839283 12.3075571,22.9848702 L14.1468505,23.8401789 C14.7972987,24.1428226 15.0788673,24.9142236 14.777009,25.5650646 C14.5576186,26.039058 14.0883376,26.3169613 13.5988979,26.3169613"
}), React.createElement("path", {
  d: "M7.50418849,30.7932339 C6.86277241,30.7932339 6.30474043,30.3175388 6.21821471,29.6651271 L5.95248519,27.6542222 C5.85797449,26.9429049 6.35801723,26.2910167 7.06920367,26.1966369 C7.78745878,26.1057914 8.43227829,26.6030852 8.52678898,27.3136172 L8.7927803,29.3243911 C8.88689829,30.0355776 8.38685556,30.6875966 7.67580002,30.7821073 C7.61807257,30.7887833 7.56021422,30.7932339 7.50418849,30.7932339"
}), React.createElement("path", {
  d: "M12.8579838,12.9857434 C12.6362371,12.9857434 12.4134432,12.9294558 12.2136879,12.8149173 L6.3066385,9.44002148 C5.6839413,9.08488642 5.46821605,8.2913631 5.82322022,7.6681423 C6.17874798,7.04649231 6.97292581,6.82971985 7.5950994,7.18485492 L11.3666259,9.33935843 C11.1618964,6.93653526 10.9452548,3.70536905 11.3808942,1.16601589 C11.5009306,0.45914919 12.1712759,-0.0191639416 12.8797134,0.105323138 C13.5864492,0.226406785 14.0620134,0.897537444 13.9404061,1.60440414 C13.5127518,4.10618865 13.8191916,7.59784833 14.0232666,9.90838612 C14.0858374,10.6232378 14.1378052,11.2172676 14.1554769,11.6309155 C14.175243,12.1037308 13.9376572,12.5504968 13.5338269,12.7959366 C13.3264793,12.9231726 13.0920352,12.9857434 12.8579838,12.9857434"
}), React.createElement("path", {
  d: "M2.69325375,38.4437962 C2.69325375,37.3683116 2.72427734,36.5051488 3.00754763,35.811765 C5.58892009,38.0500453 10.4916951,38.6921159 14.7421893,38.262498 C29.4666153,36.7749363 37.1526126,26.0327878 36.9083508,16.6812032 C36.7220784,9.5672444 32.5743417,5.85423072 29.0783622,4.83686628 C26.1870157,3.9950404 23.2507699,4.66316033 21.1139381,6.537797 C20.9501806,5.00939411 20.905936,2.89573179 21.2019037,1.69576012 C21.3743007,1.00002003 20.9486098,0.296033155 20.2523461,0.12455253 C19.5554279,-0.0494152182 18.8520956,0.377715529 18.6811385,1.07411013 C18.3096408,2.57711817 18.0340937,9.4089848 19.9486552,10.2594502 C20.5001422,10.5050209 21.2829316,10.422684 21.7851996,9.67995037 C23.2643837,7.48238035 25.7839707,6.58479054 28.3526458,7.33132031 C31.1359988,8.1421226 34.1632209,11.0415851 34.3123174,16.7495337 C34.4959719,23.759426 28.4644354,34.2666067 14.4820885,35.6789002 C9.67775123,36.1667691 5.2106155,35.0677223 4.09455153,33.1256715 C3.90500653,32.7978948 3.58298948,32.5684249 3.21096815,32.4974765 C2.84248116,32.4284915 2.4555371,32.521955 2.15943849,32.7577081 C0.0964349437,34.401435 0.0964349437,36.7373676 0.0964349437,38.4434035 C0.0964349437,39.0053625 0.453664428,39.4822357 0.95305266,39.6630104 L1.83676693,39.6630104 C2.33615517,39.4822357 2.69325375,39.0053625 2.69325375,38.4437962"
}), React.createElement("path", {
  d: "M2.59751258,38.4434166 C2.59751258,35.2575422 3.65702722,32.2375197 4.64637879,31.415329 C5.03005033,31.0956682 5.19655671,30.5856769 5.07560396,30.101866 C4.17526523,26.4995947 7.12813541,24.9566618 8.43780232,24.4601534 C14.2420942,22.2662486 16.4149239,18.0436364 17.19287,15.721972 C17.420769,15.0418092 17.0551619,14.3058824 16.3748681,14.0779833 C15.6947053,13.8495607 14.958124,14.2160841 14.7308794,14.8959852 C14.0987574,16.7820102 12.320464,20.2164661 7.51913741,22.0312809 C3.75206152,23.4575808 1.84483045,26.4724982 2.40705128,30.0061771 C0.982060375,31.7317173 3.92703721e-05,35.0888105 3.92703721e-05,38.4438093 C3.92703721e-05,39.0053756 0.357268755,39.4822488 0.856656987,39.6630234 L1.73997856,39.6630234 C2.23910499,39.4822488 2.59659627,39.0053756 2.59751258,38.4434166"
}));
Ico['si_envelope'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M1792 710v794q0 66-47 113t-113 47h-1472q-66 0-113-47t-47-113v-794q44 49 101 87 362 246 497 345 57 42 92.5 65.5t94.5 48 110 24.5h2q51 0 110-24.5t94.5-48 92.5-65.5q170-123 498-345 57-39 100-87zm0-294q0 79-49 151t-122 123q-376 261-468 325-10 7-42.5 30.5t-54 38-52 32.5-57.5 27-50 9h-2q-23 0-50-9t-57.5-27-52-32.5-54-38-42.5-30.5q-91-64-262-182.5t-205-142.5q-62-42-117-115.5t-55-136.5q0-78 41.5-130t118.5-52h1472q65 0 112.5 47t47.5 113z"
}));
Ico['si_error'] = React.createElement("svg", {
  width: "42px",
  height: "43px",
  viewBox: "0 0 42 43",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("defs", null, React.createElement("rect", {
  x: "8.73626273",
  y: "20.72217",
  width: "38",
  height: "4",
  rx: "2"
})), React.createElement("path", {
  d: "M42,21 C42,32.6077423 32.6061401,42 21,42 C9.39225771,42 0,32.6061401 0,21 C0,9.39225771 9.39385986,0 21,0 C32.6077423,0 42,9.39385986 42,21 Z M38.71875,21 C38.71875,11.2059174 30.7928009,3.28125 21,3.28125 C11.2059174,3.28125 3.28125,11.2071991 3.28125,21 C3.28125,30.7940826 11.2071991,38.71875 21,38.71875 C30.7940826,38.71875 38.71875,30.7928009 38.71875,21 Z",
  "fill-rule": "nonzero"
}), React.createElement("mask", {
  fill: "white"
}, React.createElement("use", {
  "xlink:href": "#path-1"
})), React.createElement("use", {
  "fill-rule": "evenodd",
  transform: "translate(27.736263, 22.722170) rotate(40.000000) translate(-27.736263, -22.722170) ",
  "xlink:href": "#path-1"
}));
Ico['si_excretory-system-silhouette'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M39.6944211,1.88778943 C35.0744211,-1.96042111 31.9269474,0.975473636 30.4727369,2.77768417 C28.5748421,5.12778943 29.4776842,8.46726313 30.577579,9.84694734 C31.2792632,10.7248421 31.7567369,11.4947368 32.0741053,12.1831579 C31.4238948,12.3101052 30.6716842,12.5867368 29.8796842,13.1491579 C27.019579,15.1822105 25.0515789,19.7883158 23.9930526,26.9068421 C22.9332632,19.7883158 20.9674737,15.1822105 18.1076842,13.1491579 C17.3153684,12.5842105 16.5653684,12.3085263 15.9123158,12.1815789 C16.23,11.4928421 16.7046316,10.7248421 17.4088421,9.84694734 C18.5074737,8.46726313 19.4122105,5.12778943 17.5149474,2.77768417 C16.0591579,0.975473636 12.9126316,-1.96042111 8.29231576,1.88778943 C4.44915785,5.09084207 -1.22021058,14.6722105 4.1418947,21.48 C5.90747365,23.7205263 10.3241052,26.7511579 15.5358947,21.9309474 C15.5358947,21.9309474 18.2728421,18.9268421 16.1861052,16.3001052 C15.7976842,15.8103158 15.4983158,15.2346316 15.4225263,14.5351579 C15.8115789,14.6049473 16.2770526,14.7562105 16.816421,15.1607368 C18.4016842,16.3487368 20.6488421,19.6522105 21.7935789,28.5931579 C19.2015789,29.2310526 17.3311579,30.9467369 17.3311579,32.9807369 C17.3311579,35.1852632 19.5221053,37.0263158 22.4554737,37.5148421 C22.5426316,40.2691579 22.5603158,43.3089474 22.4668421,46.7611579 L22.4349474,47.9848422 L25.5448421,47.9848422 L25.5129474,46.7611579 C25.4197895,43.3121053 25.4374737,40.2688421 25.524,37.5148421 C28.4538947,37.0294737 30.6467369,35.1890527 30.6467369,32.9807369 C30.6467369,30.9470526 28.7772632,29.2310526 26.1858947,28.5931579 C27.3309474,19.6522105 29.5825263,16.3503158 31.1633684,15.1607368 C31.7062105,14.7562105 32.1726316,14.6014737 32.5578948,14.5326316 C32.4827369,15.2349474 32.1865263,15.8122105 31.7943158,16.3023158 C29.707579,18.9271579 32.4442105,21.9328421 32.4442105,21.9328421 C37.6566316,26.7530526 42.0726316,23.7224211 43.8391579,21.4818947 C49.2072632,14.6722105 43.5378948,5.09084207 39.6944211,1.88778943 Z"
}));
Ico['si_facebook'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,5.445 C13.7688152,5.445 5.445,13.7688152 5.445,24 C5.445,34.2304374 13.7688152,42.555 24,42.555 C34.2304374,42.555 42.555,34.2304374 42.555,24 C42.555,13.7688152 34.2319322,5.445 24,5.445 Z M28.6144594,24.6532293 L25.5957031,24.6532293 C25.5957031,29.4762138 25.5957031,35.4128273 25.5957031,35.4128273 L21.1225026,35.4128273 C21.1225026,35.4128273 21.1225026,29.5337638 21.1225026,24.6532293 L18.9961442,24.6532293 L18.9961442,20.8504483 L21.1225026,20.8504483 L21.1225026,18.3907486 C21.1225026,16.6291223 21.9595928,13.876441 25.6368102,13.876441 L28.9515377,13.8891469 L28.9515377,17.5805649 C28.9515377,17.5805649 26.9372895,17.5805649 26.5456509,17.5805649 C26.1540123,17.5805649 25.5971979,17.7763842 25.5971979,18.616464 L25.5971979,20.8511957 L29.0053506,20.8511957 L28.6144594,24.6532293 Z"
}));
Ico['si_gastroenterology'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M30.4335,-5.00000006e-08 C23.943,-5.00000006e-08 17.2155,2.19299995 17.8995,11.58 C16.05,10.884 13.8735,9.41549997 13.05,6.31949996 C12.666,4.88099996 11.1915,4.02749996 9.75149997,4.40849996 C8.31449997,4.79249996 7.46099997,6.26699996 7.84649997,7.70399997 C9.61049997,14.3235 15.1905,16.8195 19.0455,17.43 C20.214,21.4845 20.034,24.7845 19.3095,27.474 L19.308,27.468 C19.2915,27.5415 19.275,27.612 19.254,27.6825 C19.2495,27.693 19.248,27.7005 19.2465,27.7125 C18.27,31.0905 14.451,31.9935 12.465,32.2395 C8.38949997,31.3605 6.43349996,33.228 5.61599996,34.4625 C3.37499996,37.8405 4.98749996,43.251 7.64549997,46.629 C8.17499997,47.3055 8.96849997,47.658 9.76349997,47.658 C10.35,47.658 10.9335,47.4705 11.424,47.0805 C12.5925,46.164 12.7965,44.4705 11.8785,43.3005 C10.032,40.947 9.67949997,37.965 10.0815,37.4535 C10.1805,37.401 10.68,37.311 11.7,37.5915 C13.434,38.0625 15.1005,38.3295 16.497,38.4825 C17.7285,38.8485 19.7355,39.0825 22.8165,39.2445 C32.7555,39.759 41.1015,30.5505 42.8265,18.576 C44.523,6.80399996 38.0775,-5.00000006e-08 30.4335,-5.00000006e-08 Z"
}));
Ico['si_gift'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  xmlns: "http://www.w3.org/2000/svg"
}, React.createElement("path", {
  d: "M1056 1356v-716h-320v716q0 25 18 38.5t46 13.5h192q28 0 46-13.5t18-38.5zm-456-844h195l-126-161q-26-31-69-31-40 0-68 28t-28 68 28 68 68 28zm688-96q0-40-28-68t-68-28q-43 0-69 31l-125 161h194q40 0 68-28t28-68zm376 256v320q0 14-9 23t-23 9h-96v416q0 40-28 68t-68 28h-1088q-40 0-68-28t-28-68v-416h-96q-14 0-23-9t-9-23v-320q0-14 9-23t23-9h440q-93 0-158.5-65.5t-65.5-158.5 65.5-158.5 158.5-65.5q107 0 168 77l128 165 128-165q61-77 168-77 93 0 158.5 65.5t65.5 158.5-65.5 158.5-158.5 65.5h440q14 0 23 9t9 23z"
}));
Ico['si_heart'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  xmlns: "http://www.w3.org/2000/svg"
}, React.createElement("path", {
  d: "M896 1664q-26 0-44-18l-624-602q-10-8-27.5-26t-55.5-65.5-68-97.5-53.5-121-23.5-138q0-220 127-344t351-124q62 0 126.5 21.5t120 58 95.5 68.5 76 68q36-36 76-68t95.5-68.5 120-58 126.5-21.5q224 0 351 124t127 344q0 221-229 450l-623 600q-18 18-44 18z"
}));
Ico['si_hernia'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("defs", null, React.createElement("polygon", {
  points: "0 0.4258 26.7226 0.4258 26.7226 11.8988 0 11.8988"
}), React.createElement("polygon", {
  points: "0.8864 0.638 32.7224 0.638 32.7224 12.1117 0.8864 12.1117"
}), React.createElement("polygon", {
  points: "0.0531 0.1895 26.775 0.1895 26.775 11.6625 0.0531 11.6625"
}), React.createElement("polygon", {
  points: "0.0531 0.7403 26.775 0.7403 26.775 12.2133 0.0531 12.2133"
}), React.createElement("polygon", {
  points: "0 0.9774 32.7226 0.9774 32.7226 24 0 24"
})), React.createElement("path", {
  d: "M25.2226,16.71 L6.2096,16.71 C2.8146,16.71 0.0526,14.137 0.0526,10.974 C0.0526,7.811 2.8146,5.237 6.2096,5.237 L25.2226,5.237 C26.0506,5.237 26.7226,5.908 26.7226,6.737 C26.7226,7.565 26.0506,8.237 25.2226,8.237 L6.2096,8.237 C4.4686,8.237 3.0526,9.465 3.0526,10.974 C3.0526,12.482 4.4686,13.71 6.2096,13.71 L25.2226,13.71 C26.0506,13.71 26.7226,14.381 26.7226,15.21 C26.7226,16.038 26.0506,16.71 25.2226,16.71"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M25.2226,11.8988 L6.1576,11.8988 C2.7616,11.8988 -0.0004,9.3258 -0.0004,6.1628 C-0.0004,2.9998 2.7616,0.4258 6.1576,0.4258 L25.2226,0.4258 C26.0506,0.4258 26.7226,1.0968 26.7226,1.9258 C26.7226,2.7538 26.0506,3.4258 25.2226,3.4258 L6.1576,3.4258 C4.4156,3.4258 2.9996,4.6538 2.9996,6.1628 C2.9996,7.6708 4.4156,8.8988 6.1576,8.8988 L25.2226,8.8988 C26.0506,8.8988 26.7226,9.5698 26.7226,10.3988 C26.7226,11.2268 26.0506,11.8988 25.2226,11.8988",
  mask: "url(#mask-2)"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M7.5524,12.1117 C6.7244,12.1117 6.0524,11.4397 6.0524,10.6117 C6.0524,9.7827 6.7244,9.1117 7.5524,9.1117 L26.5654,9.1117 C28.3064,9.1117 29.7224,7.8837 29.7224,6.3757 C29.7224,4.8657 28.3064,3.6377 26.5654,3.6377 L2.3864,3.6377 C1.5584,3.6377 0.8864,2.9667 0.8864,2.1377 C0.8864,1.3097 1.5584,0.6377 2.3864,0.6377 L26.5654,0.6377 C29.9614,0.6377 32.7224,3.2127 32.7224,6.3757 C32.7224,9.5387 29.9614,12.1117 26.5654,12.1117 L7.5524,12.1117 Z",
  mask: "url(#mask-4)"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M20.6181,11.6625 L1.5531,11.6625 C0.7241,11.6625 0.0531,10.9905 0.0531,10.1625 C0.0531,9.3335 0.7241,8.6625 1.5531,8.6625 L20.6181,8.6625 C22.3591,8.6625 23.7751,7.4345 23.7751,5.9265 C23.7751,4.4165 22.3591,3.1895 20.6181,3.1895 L1.5531,3.1895 C0.7241,3.1895 0.0531,2.5175 0.0531,1.6895 C0.0531,0.8605 0.7241,0.1895 1.5531,0.1895 L20.6181,0.1895 C24.0141,0.1895 26.7751,2.7635 26.7751,5.9265 C26.7751,9.0895 24.0141,11.6625 20.6181,11.6625",
  mask: "url(#mask-6)"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M20.6181,12.2133 L1.5531,12.2133 C0.7241,12.2133 0.0531,11.5413 0.0531,10.7133 C0.0531,9.8853 0.7241,9.2133 1.5531,9.2133 L20.6181,9.2133 C22.3591,9.2133 23.7751,7.9853 23.7751,6.4773 C23.7751,4.9683 22.3591,3.7403 20.6181,3.7403 L1.5531,3.7403 C0.7241,3.7403 0.0531,3.0683 0.0531,2.2403 C0.0531,1.4113 0.7241,0.7403 1.5531,0.7403 L20.6181,0.7403 C24.0141,0.7403 26.7751,3.3143 26.7751,6.4773 C26.7751,9.6403 24.0141,12.2133 20.6181,12.2133",
  mask: "url(#mask-8)"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M31.2226,24.0004 C30.3946,24.0004 29.7226,23.3284 29.7226,22.5004 L29.7226,15.2644 C29.7226,13.7554 28.3066,12.5274 26.5656,12.5274 L22.1456,12.4494 L6.1576,12.4494 C2.7616,12.4494 -0.0004,9.8764 -0.0004,6.7134 C-0.0004,3.5504 2.7616,0.9774 6.1576,0.9774 L25.2226,0.9774 C26.0506,0.9774 26.7226,1.6474 26.7226,2.4774 C26.7226,3.3054 26.0506,3.9774 25.2226,3.9774 L6.1576,3.9774 C4.4156,3.9774 2.9996,5.2044 2.9996,6.7134 C2.9996,8.2224 4.4156,9.4494 6.1576,9.4494 L22.1716,9.4494 L26.5916,9.5274 C29.9606,9.5274 32.7226,12.1014 32.7226,15.2644 L32.7226,22.5004 C32.7226,23.3284 32.0506,24.0004 31.2226,24.0004",
  mask: "url(#mask-10)"
}));
Ico['si_home'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M1472 992v480q0 26-19 45t-45 19h-384v-384h-256v384h-384q-26 0-45-19t-19-45v-480q0-1 .5-3t.5-3l575-474 575 474q1 2 1 6zm223-69l-62 74q-8 9-21 11h-3q-13 0-21-7l-692-577-692 577q-12 8-24 7-13-2-21-11l-62-74q-8-10-7-23.5t11-21.5l719-599q32-26 76-26t76 26l244 204v-195q0-14 9-23t23-9h192q14 0 23 9t9 23v408l219 182q10 8 11 21.5t-7 23.5z"
}));
Ico['si_home-care'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M30.1032715,30.9400635 C29.430542,29.465332 28.0682373,28.3623047 26.3668213,28.1037598 L16.6014404,26.6184083 L16.6365966,13.5981445 L14.7410888,15.1138916 L12.9810791,12.9235839 L29.1463623,-5.00002919e-08 L45.3116456,12.9235839 L43.552002,15.1138916 L41.8114014,13.72229 L41.8114014,25.6772461 C41.8117677,25.6772461 41.8121338,25.6768799 41.8125,25.6768799 L41.8125,25.7259521 C41.5671387,25.7933349 41.3250733,25.8793945 41.088501,25.9859619 L30.1032715,30.9400635 Z M22.9914551,12.9796143 C21.1831055,14.7832031 21.1831055,17.7176513 22.9914551,19.5212402 L29.3441162,25.8581543 L35.6971436,19.5212402 C37.505127,17.7176513 37.505127,14.7832031 35.6971436,12.9796143 C33.9558105,11.2434082 31.1634521,11.1789551 29.3441162,12.7869873 C27.5251464,11.1789551 24.7327881,11.2430419 22.9914551,12.9796143 Z M24.9810791,17.536377 C24.2702636,16.8273926 24.2702636,15.6734619 24.9810791,14.9644775 C25.3366699,14.6099854 25.8032227,14.4327393 26.2705078,14.4327393 C26.7374268,14.4327393 27.2043458,14.6099854 27.5595703,14.9644775 L29.3444824,16.7446289 L31.1286621,14.9644775 C31.8394776,14.2554932 32.996338,14.2554932 33.7071534,14.9644775 C34.418335,15.6734619 34.418335,16.8273926 33.7071534,17.536377 L29.3441162,21.8884277 L24.9810791,17.536377 Z M45.0021974,29.6755371 C45.4844971,30.8027344 44.9956055,32.1174317 43.9119873,32.6063232 L27.262207,40.3011475 L22.6307373,42.4053956 L10.901001,40.6801758 L1.79846189,48.0000001 L-4.99999864e-08,48.0000001 L-4.99999864e-08,37.2366943 L6.30834953,31.3011475 L6.33325196,31.2773438 C8.21484372,29.4180909 10.7709961,28.5769043 13.3465576,28.9680176 L25.9442138,30.8840333 C27.0838623,31.0576172 27.869751,32.1313477 27.7331543,33.3288574 C27.663208,33.9433594 27.3618164,34.4835206 26.8839112,34.848999 C26.6202393,35.0507813 26.3210449,35.1811524 26.0083008,35.2390136 C25.921875,35.236084 25.835083,35.2287598 25.7479248,35.2159424 L13.6307373,33.3815918 L13.6175537,33.4680176 L13.4714355,33.4456787 L13.0484619,36.2263183 L24.9162598,38.0313721 C25.1627198,38.0687256 25.4088135,38.0874024 25.6530761,38.0874024 C25.8522949,38.0874024 26.0504151,38.0749512 26.2463379,38.0504151 C27.2698974,38.0170899 28.2539063,37.6673584 29.0859375,37.0301514 C30.1724854,36.1977539 30.8565674,34.9870605 31.012207,33.6207276 C31.012207,33.6188965 31.0125732,33.6170654 31.0125732,33.6152344 L42.2449951,28.5498047 C42.7452393,28.3242188 43.3022461,28.3095703 43.8127442,28.5084229 C44.3466797,28.7164307 44.7692871,29.1309815 45.0021974,29.6755371 Z"
}));
Ico['si_image'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,5.445 C34.2319322,5.445 42.555,13.7688152 42.555,24 C42.555,34.2304374 34.2304374,42.555 24,42.555 C13.7688152,42.555 5.445,34.2304374 5.445,24 C5.445,13.7688152 13.7688152,5.445 24,5.445 Z M29.1291826,30.3968045 L18.7772691,30.3968045 C18.6784504,30.3968045 18.6435345,30.3394443 18.6985435,30.2693057 L21.5576968,26.6510661 C21.6133646,26.5809276 21.7039484,26.5809276 21.7596163,26.6510661 L22.8700086,28.0561085 C22.9253471,28.126247 23.0162602,28.126247 23.0715987,28.0561085 L25.1639191,25.407882 C25.219587,25.3377434 25.3101707,25.3377434 25.3658386,25.407882 L29.2075787,30.2693057 C29.2629172,30.3394443 29.2276719,30.3968045 29.1291826,30.3968045 Z M22.1334802,17.9422457 C23.4948719,17.9422457 24.5980176,18.8938013 24.5980176,20.0668469 C24.5980176,21.2410284 23.4948719,22.192584 22.1334802,22.192584 C20.7720884,22.192584 19.6679546,21.2410284 19.6679546,20.0668469 C19.6679546,18.8938013 20.7720884,17.9422457 22.1334802,17.9422457 Z M15.9480908,33.623177 L32.0519092,33.623177 L32.0519092,14.376823 L15.9480908,14.376823 L15.9480908,33.623177 Z"
}));
Ico['si_info'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M1152 1376v-160q0-14-9-23t-23-9h-96v-512q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v160q0 14 9 23t23 9h96v320h-96q-14 0-23 9t-9 23v160q0 14 9 23t23 9h448q14 0 23-9t9-23zm-128-896v-160q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v160q0 14 9 23t23 9h192q14 0 23-9t9-23zm640 416q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
}));
Ico['si_linkedin'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,5.445 C13.7539231,5.445 5.445,13.7539231 5.445,24 C5.445,34.2460769 13.7539231,42.555 24,42.555 C34.2460769,42.555 42.555,34.2460769 42.555,24 C42.555,13.7539231 34.2460769,5.445 24,5.445 Z M18.6081326,33.4949414 L14.0891453,33.4949414 L14.0891453,19.8994741 L18.6081326,19.8994741 L18.6081326,33.4949414 Z M16.3487805,18.0430115 L16.3193353,18.0430115 C14.802908,18.0430115 13.8221567,16.9991228 13.8221567,15.6944744 C13.8221567,14.3603808 14.8329195,13.3453711 16.3787919,13.3453711 C17.9246645,13.3453711 18.8759706,14.3603808 18.9054158,15.6944744 C18.9054158,16.9991228 17.9246645,18.0430115 16.3487805,18.0430115 Z M34.902648,33.4949414 L30.3842269,33.4949414 L30.3842269,26.2216963 C30.3842269,24.3938294 29.7299208,23.147222 28.0948634,23.147222 C26.8465572,23.147222 26.1030661,23.9881087 25.7763377,24.7998333 C25.6568582,25.0903214 25.6276961,25.4963253 25.6276961,25.9026123 L25.6276961,33.4949414 L21.1089919,33.4949414 C21.1089919,33.4949414 21.1681655,21.1749605 21.1089919,19.8994741 L25.6276961,19.8994741 L25.6276961,21.8244534 C26.2282082,20.8980624 27.3026745,19.5803902 29.7001925,19.5803902 C32.6733073,19.5803902 34.902648,21.5234896 34.902648,25.6993272 L34.902648,33.4949414 Z"
}));
Ico['si_location'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M23.7607265,1.34913984 L23.7420547,1.34913984 C13.6574193,1.34913984 5.45303347,9.01532798 5.45303347,18.4384236 C5.45303347,22.0996652 6.74437468,25.7314215 9.08899172,28.6646893 L22.9560655,46.0133219 L24.5466222,46.0133219 L38.4137894,28.6647766 C40.7584065,25.7314215 42.0497476,22.0996652 42.0497476,18.4384236 C42.0497476,9.01532798 33.8453619,1.34913984 23.7607265,1.34913984 Z M23.7513906,23.2450573 C20.6627026,23.2450573 18.1498527,20.8970473 18.1498527,18.0109734 C18.1498527,15.1248996 20.6627026,12.7768896 23.7513906,12.7768896 C26.8400785,12.7768896 29.3529285,15.1248996 29.3529285,18.0109734 C29.3529285,20.8970473 26.8400785,23.2450573 23.7513906,23.2450573 Z"
}));
Ico['si_marker'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M1152 640q0-106-75-181t-181-75-181 75-75 181 75 181 181 75 181-75 75-181zm256 0q0 109-33 179l-364 774q-16 33-47.5 52t-67.5 19-67.5-19-46.5-52l-365-774q-33-70-33-179 0-212 150-362t362-150 362 150 150 362z"
}));
Ico['si_menu'] = React.createElement("svg", {
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  viewBox: "0 0 25 25",
  width: "40",
  height: "40"
}, React.createElement("path", {
  d: "M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"
}));
Ico['si_monthly-calendar'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M42.9460774,5.80375687 C44.7767072,5.80375687 46.2609945,7.28791157 46.2609945,9.118674 L46.2609945,44.6545857 C46.2609945,46.4856133 44.7768398,47.9695028 42.9460774,47.9695028 L5.02342537,47.9695028 C3.19266294,47.9695028 1.70850824,46.4856133 1.70850824,44.6545857 L1.70850824,9.118674 C1.70850824,7.28791157 3.19266294,5.80375687 5.02342537,5.80375687 L8.66983422,5.80375687 L8.66983422,3.31491708 C8.66983422,1.48415465 10.1539889,-5.00000361e-08 11.9847514,-5.00000361e-08 L12.117348,-5.00000361e-08 C13.9481105,-5.00000361e-08 15.4322652,1.48415465 15.4322652,3.31491708 L15.4322652,5.80375687 L32.5372376,5.80375687 L32.5372376,3.31491708 C32.5372376,1.48415465 34.0213923,-5.00000361e-08 35.8521547,-5.00000361e-08 L35.9847514,-5.00000361e-08 C37.8155138,-5.00000361e-08 39.2996685,1.48415465 39.2996685,3.31491708 L39.2996685,5.80375687 L42.9460774,5.80375687 Z M40.6919337,42.7319337 L40.6919337,15.8148066 L7.27756903,15.8148066 L7.27756903,42.7319337 L40.6919337,42.7319337 Z M11.8191381,27.9956685 C11.526232,27.9956685 11.2887514,27.7581879 11.2887514,27.4652818 L11.2887514,21.6975912 C11.2887514,21.4046851 11.526232,21.1672044 11.8191381,21.1672044 L17.5868287,21.1672044 C17.8797348,21.1672044 18.1172155,21.4046851 18.1172155,21.6975912 L18.1172155,27.4652818 C18.1172155,27.7581879 17.8797348,27.9956685 17.5868287,27.9956685 L11.8191381,27.9956685 Z M21.1009061,27.9956685 C20.808,27.9956685 20.5705193,27.7581879 20.5705193,27.4652818 L20.5705193,21.6975912 C20.5705193,21.4046851 20.808,21.1672044 21.1009061,21.1672044 L26.8685967,21.1672044 C27.1615028,21.1672044 27.3989834,21.4046851 27.3989834,21.6975912 L27.3989834,27.4652818 C27.3989834,27.7581879 27.1615028,27.9956685 26.8685967,27.9956685 L21.1009061,27.9956685 Z M30.382674,27.9956685 C30.089768,27.9956685 29.8522873,27.7581879 29.8522873,27.4652818 L29.8522873,21.6975912 C29.8522873,21.4046851 30.089768,21.1672044 30.382674,21.1672044 L36.1503647,21.1672044 C36.4432707,21.1672044 36.6807514,21.4046851 36.6807514,21.6975912 L36.6807514,27.4652818 C36.6807514,27.7581879 36.4432707,27.9956685 36.1503647,27.9956685 L30.382674,27.9956685 Z M11.8191381,37.2774365 C11.526232,37.2774365 11.2887514,37.0399558 11.2887514,36.7470498 L11.2887514,30.9793591 C11.2887514,30.6864531 11.526232,30.4489724 11.8191381,30.4489724 L17.5868287,30.4489724 C17.8797348,30.4489724 18.1172155,30.6864531 18.1172155,30.9793591 L18.1172155,36.7470498 C18.1172155,37.0399558 17.8797348,37.2774365 17.5868287,37.2774365 L11.8191381,37.2774365 Z M21.1009061,37.2774365 C20.808,37.2774365 20.5705193,37.0399558 20.5705193,36.7470498 L20.5705193,30.9793591 C20.5705193,30.6864531 20.808,30.4489724 21.1009061,30.4489724 L26.8685967,30.4489724 C27.1615028,30.4489724 27.3989834,30.6864531 27.3989834,30.9793591 L27.3989834,36.7470498 C27.3989834,37.0399558 27.1615028,37.2774365 26.8685967,37.2774365 L21.1009061,37.2774365 Z M30.382674,37.2774365 C30.089768,37.2774365 29.8522873,37.0399558 29.8522873,36.7470498 L29.8522873,30.9793591 C29.8522873,30.6864531 30.089768,30.4489724 30.382674,30.4489724 L36.1503647,30.4489724 C36.4432707,30.4489724 36.6807514,30.6864531 36.6807514,30.9793591 L36.6807514,36.7470498 C36.6807514,37.0399558 36.4432707,37.2774365 36.1503647,37.2774365 L30.382674,37.2774365 Z"
}));
Ico['si_mother-with-son'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M16.1419081,7.05616958 C14.1934007,7.05616958 12.6138233,5.4765922 12.6138233,3.52808476 C12.6138233,1.57957732 14.1934007,-5.00001716e-08 16.1419081,-5.00001716e-08 C18.0904155,-5.00001716e-08 19.6699929,1.57957732 19.6699929,3.52808476 C19.6699929,5.4765922 18.0904155,7.05616958 16.1419081,7.05616958 Z M30.6232368,47.9955054 C29.3495406,47.9955054 28.337894,46.8974417 28.3194912,45.7355195 L28.3194912,31.748947 C28.3194912,31.6418375 28.2760707,31.4801131 28.2224735,31.3876749 L24.0132297,24.1036325 C23.8871237,23.9113781 23.7910389,23.6957173 23.7387138,23.4641979 C23.4102615,22.3974276 20.8359011,14.0202403 20.8359011,14.0202403 C20.8197032,13.9825017 20.7377809,13.8251873 20.5456113,13.8251873 C20.5281413,13.8251873 20.1583887,13.8251873 20.1583887,13.8251873 L20.1575406,13.8251873 C20.0480565,13.823576 19.9844523,13.9164381 20.0132014,14.0214275 L25.5131025,32.0209187 C25.5431237,32.1259081 25.5131025,32.3091732 25.3216961,32.3091732 L21.4631237,32.3091732 C21.3536396,32.3091732 21.2737526,32.3976255 21.2737526,32.5071096 C21.2737526,32.5071096 21.2746007,45.6201838 21.2746007,45.6246785 C21.2746007,46.9339082 20.2130035,47.9955054 18.9037738,47.9955054 C17.5945442,47.9955054 16.532947,46.9339082 16.532947,45.6246785 L16.5321837,32.5066855 C16.5321837,32.3976255 16.4441555,32.3091732 16.3346714,32.3091732 L16.3314487,32.3091732 L15.9522827,32.3091732 L15.9490601,32.3091732 C15.8399152,32.3091732 15.7515477,32.3972014 15.7515477,32.5066855 L15.7506996,45.6246785 C15.7506996,46.9339082 14.6891025,47.9955054 13.3798728,47.9955054 C12.0705583,47.9955054 11.0090459,46.9339082 11.0090459,45.6246785 C11.0090459,45.6201838 11.0098092,32.5070248 11.0098092,32.5070248 C11.0098092,32.3979647 10.930007,32.3091732 10.8205229,32.3091732 L6.96195049,32.3091732 C6.77054413,32.3091732 6.74094696,32.1259081 6.77054413,32.0209187 L12.2710388,14.0208339 C12.2998728,13.9158445 12.2361837,13.8229823 12.1266996,13.8245936 L12.1258516,13.8245936 C12.1258516,13.8245936 11.7560989,13.8245936 11.7386289,13.8245936 C11.5464593,13.8245936 11.4645371,13.9819929 11.4483392,14.0196466 C11.4483392,14.0196466 8.70080562,22.9774134 8.69995757,22.9774134 C8.40152647,23.9473357 7.37359714,24.4927208 6.40333565,24.195053 C5.43256533,23.89747 4.88675614,22.8687774 5.18442399,21.8980919 C5.18561127,21.894106 7.93034626,12.9321837 7.93925085,12.9013993 C8.35929325,11.4413003 9.38272788,8.11717311 12.2717173,8.11717311 L20.0227844,8.11717311 C23.1234488,8.11717311 23.9255406,11.4413003 24.3456678,12.9013993 C24.3456678,12.9013993 26.6508551,20.4153498 27.1811449,22.1434346 C27.1864028,22.1531873 27.1929329,22.1620919 27.1981908,22.1718445 C27.2509399,22.2650459 29.714629,26.5817385 29.714629,26.5817385 C29.7677173,26.6741767 29.89747,26.7495689 30.0044947,26.7495689 L36.5286785,26.7495689 C36.7577385,26.7495689 36.8802827,26.676212 36.9880707,26.4893004 L39.332947,22.2625866 C39.4866149,21.944735 39.7303463,21.6463039 40.0554912,21.4516749 C40.943152,20.9201131 42.0938799,21.2084523 42.6254417,22.0960283 C42.9846785,22.695689 42.9705159,23.4150106 42.6493569,23.9826996 C42.5966926,24.0759859 38.38694,31.6130035 38.38694,31.6130035 C38.3346997,31.706629 38.2925513,31.9758869 38.2925513,31.9758869 C38.2925513,31.9758869 38.2851732,45.7901343 38.2733852,45.896311 C38.1517739,46.9870813 37.1636184,47.9955054 35.9609894,47.9955054 C34.6877173,47.9955054 33.7624028,46.9339082 33.7437456,45.7722403 L33.7417951,39.8891873 C33.7417951,39.7821626 33.6550389,39.6954064 33.5479293,39.6954064 L33.2576396,39.6954064 C33.1505301,39.6954064 33.0638587,39.7821626 33.0638587,39.8891873 L33.0630106,45.7418799 C33.0443534,46.9039718 31.896424,47.9955054 30.6232368,47.9955054 Z M32.0820636,20.7308268 L32.8901767,19.3696113 L32.8901767,20.462417 C32.989993,20.4469823 33.0917597,20.4372297 33.1951378,20.433583 L33.8333004,19.3696113 L33.8333004,20.4876042 C33.9128481,20.5045654 33.9911237,20.5244947 34.0672792,20.5484099 L34.7671802,19.3696113 L34.7671802,20.8901767 C35.4455407,21.3584735 35.8899223,22.1410601 35.8899223,23.0274488 C35.8899223,24.4611731 34.7274064,25.623689 33.293682,25.623689 C31.8598728,25.623689 30.6974417,24.4611731 30.6974417,23.0270247 C30.6974417,22.0308127 31.2586007,21.1663039 32.0820636,20.7308268 Z"
}));
Ico['si_oncology'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M31.2162554,25.1493729 L42.5403695,38.9965245 C43.0384311,39.6204698 43.0164835,40.5235485 42.474691,41.1201277 L36.7661391,47.4471517 C36.0600411,48.2244014 34.8122053,48.1532498 34.2046249,47.2884835 L25.1847845,34.2896237 L31.2162554,25.1493729 Z M33.865341,17.2460661 C33.892707,17.6072976 33.7941346,17.9630559 33.5970992,18.2640821 L13.7786271,47.2830103 C13.1711015,48.1477766 11.9232109,48.2244014 11.2171676,47.4417332 L5.5140889,41.1201825 C4.97224169,40.5235485 4.94487567,39.6259978 5.44841045,38.9965793 L24.1777149,14.8761687 L27.6805656,10.3662485 C28.1676807,9.74230328 27.8502349,8.82827819 27.0839863,8.63124284 C25.5514892,8.23169894 23.991626,8.29737739 23.991626,8.29737739 C23.991626,8.29737739 22.3715576,8.23169894 20.8171676,8.65313566 C20.0782851,8.85017101 19.7717856,9.72588366 20.209642,10.3443557 L22.4754937,13.5352337 L16.4823352,21.400228 L14.3915712,18.2695553 C14.1891174,17.9685291 14.096073,17.6072976 14.117911,17.2460661 C14.2657423,15.1169897 14.9115256,7.39977192 16.8874071,2.90079813 C17.0023443,2.64355754 17.1774869,2.41368297 17.4073614,2.24401364 C18.2830741,1.59270235 20.7569624,-4.99999402e-08 23.991626,-4.99999402e-08 C27.2262896,-4.99999402e-08 29.7001779,1.59270235 30.5758905,2.24401364 C30.8003467,2.41368297 30.9809077,2.63808433 31.0958449,2.90079813 C33.0771996,7.39429871 33.7229829,15.1115165 33.865341,17.2460661 Z"
}));
Ico['si_orthopaedic'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M32.0275862,33.1862069 C31.5310345,33.8482759 31.0344828,34.5103448 30.7034483,35.2551724 C31.0344828,34.6758621 31.6965517,34.0137931 32.2758621,33.4344828 C32.6896552,33.0206897 33.0206897,32.7724138 33.1862069,32.6068966 C33.0206897,32.8551724 32.8551724,33.2689655 32.6068966,33.8482759 C31.6965517,36.4137931 30.7034483,41.5448276 30.1241379,45.0206897 C29.8758621,46.5931035 26.8137931,47.0896552 24.9931035,46.3448276 C24.8275862,46.262069 24.7448276,46.262069 24.5793103,46.1793104 C24.2482759,45.9310345 23.9172414,45.6827587 23.7517241,45.3517242 C23.6689655,45.2689656 23.6689655,45.1034483 23.5862069,45.0206897 C23.5034483,44.6068966 23.5034483,44.1931035 23.6689655,43.6965518 C24.7448276,40.7172414 25.8206897,33.7655173 24,31.0344828 C22.8413793,29.2137931 20.5241379,26.8965517 21.1862069,23.6689655 C21.1862069,23.6689655 21.9310345,23.6689655 22.5103448,24 C22.7586207,24.1655172 23.0068965,24.3310345 23.0896552,24.5793103 C23.0896552,24.5793103 23.0896552,24.662069 23.1724138,24.662069 C23.0896552,29.0482759 25.1586207,29.1310345 26.2344828,32.1931035 C27.1448276,34.6758621 26.9793104,38.0689655 26.6482759,40.6344828 C27.3103448,37.0758621 27.7241379,33.0206897 25.8206897,29.9586207 C25.4068966,29.2965517 24.9103448,28.7172414 24.5793103,28.137931 C24.0827586,27.3103448 23.9172414,26.4 23.9172414,25.4896552 C23.9172414,25.3241379 23.9172414,25.0758621 23.9172414,24.9103448 C25.6551724,22.6758621 30.8689655,27.6413793 33.7655173,21.8482759 C33.7655173,21.8482759 35.0896552,21.1862069 35.7517242,21.2689655 C35.9172414,21.2689655 36.0827586,21.4344828 36.0827586,21.6 C36.0827586,21.6 36.0827586,21.6827586 36.0827586,21.6827586 C36.2482759,23.0068965 35.6689655,24.7448276 35.5862069,25.8206897 C35.1724138,29.1310345 34.1793104,30.2896552 32.8551724,31.862069 C32.7724138,32.2758621 32.3586207,32.6896552 32.0275862,33.1862069 Z M35.5862069,18.6206896 C35.5034483,18.9517241 35.3379311,19.2 35.0896552,19.4482759 C35.0068966,19.5310345 35.0068966,19.5310345 34.924138,19.6137931 C34.4275862,19.9448276 33.7655173,20.0275862 33.3517242,19.7793103 C32.9379311,21.2689655 31.4482759,22.0965517 29.7103448,22.3448276 C29.2965517,22.4275862 28.8,22.4275862 28.3034483,22.5103448 C26.8965517,22.5931034 25.4896552,22.3448276 24.4965517,21.9310345 C23.7517241,21.6 23.0068965,21.2689655 22.4275862,20.8551724 C21.9310345,20.5241379 21.5172414,20.1103448 21.1862069,19.6137931 C20.8551724,19.2 20.6896552,18.7034483 20.5241379,18.1241379 C20.4413793,17.7103448 20.3586207,17.3793103 20.2758621,16.8827586 C20.4413793,16.2206896 20.5241379,15.4758621 20.6068965,14.7310345 C20.6068965,14.4 20.6896552,14.0689655 20.6896552,13.737931 C20.6896552,13.5724138 20.6896552,13.4896552 20.6896552,13.3241379 C20.6896552,12.3310345 20.5241379,11.337931 20.1931034,10.3448276 C20.3586207,11.1724138 20.3586207,12 20.2758621,12.8275862 C20.2758621,13.075862 20.1931034,13.4068965 20.1103448,13.6551724 C20.1103448,13.8206896 20.0275862,13.9862069 20.0275862,14.1517241 C20.0275862,14.2344827 20.0275862,14.3172414 19.9448276,14.4 C19.9448276,14.3172414 19.9448276,14.1517241 19.862069,14.0689655 C19.6965517,13.3241379 19.5310345,12.5793103 19.2,11.8344827 C18.3724138,10.0965517 16.8827586,8.27586204 13.8206896,6.45517238 C13.8206896,6.45517238 13.737931,6.45517238 13.737931,6.37241376 C13.3241379,6.20689651 13.075862,5.95862065 12.9931034,5.71034479 C12.1655172,3.97241375 15.2275862,1.15862064 17.1310345,1.98620685 C17.2137931,1.98620685 17.2965517,2.06896547 17.3793103,2.06896547 C17.5448276,2.15172409 17.7103448,2.31724133 17.7931034,2.39999996 C18.1241379,2.73103444 18.3724138,3.06206892 18.6206896,3.31034478 C21.0206896,5.95862065 22.262069,7.11724134 25.9034483,10.675862 C26.7310345,11.5034482 27.4758621,12.2482758 28.137931,12.8275862 C29.2137931,13.737931 29.9586207,14.4 30.6206897,14.9793103 C30.9517242,15.3103448 31.2,15.5586207 31.5310345,15.8896552 C31.862069,16.2206896 32.1103448,16.6344827 32.4413793,17.0482758 C32.6896552,17.462069 32.9379311,17.9586207 33.2689655,18.6206896 C33.2689655,18.2896552 33.1862069,17.9586207 33.1034483,17.6275862 C33.0206897,17.462069 33.0206897,17.2965517 32.9379311,17.1310345 C32.1931035,15.0620689 30.3724138,13.3241379 28.3862069,11.2551724 C30.0413793,11.5862069 32.1931035,11.9172414 33.7655173,12.9931034 C34.3448276,13.4068965 34.8413793,13.8206896 35.1724138,14.4 C35.3379311,14.6482758 35.5034483,14.9793103 35.5862069,15.3103448 C35.8344828,16.5517241 35.8344828,17.6275862 35.5862069,18.6206896 Z"
}));
Ico['si_pdf'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,5.445 C34.2319322,5.445 42.555,13.7688152 42.555,24 C42.555,34.2304374 34.2304374,42.555 24,42.555 C13.7688152,42.555 5.445,34.2304374 5.445,24 C5.445,13.7688152 13.7688152,5.445 24,5.445 Z M19.2916564,24.2750511 C19.2916564,23.6684254 18.8704294,23.3063804 18.1270757,23.3063804 C17.8238446,23.3063804 17.6184049,23.3356237 17.5106748,23.3649489 L17.5106748,25.3128834 C17.6380368,25.3417996 17.7946012,25.3516973 18.0093252,25.3516973 C18.8024131,25.3516973 19.2916564,24.9505112 19.2916564,24.2750511 Z M23.892638,23.3259305 C23.5595092,23.3259305 23.3447035,23.3552556 23.2170143,23.3846217 L23.2170143,27.7004908 C23.3444581,27.7303067 23.5500204,27.7303067 23.7360327,27.7303067 C25.0864213,27.7397546 25.9672802,26.996319 25.9672802,25.4205317 C25.9771779,24.0498569 25.1744376,23.3259305 23.892638,23.3259305 Z M32.7086299,20.7901431 L32.1676892,20.7901431 L32.1676892,18.1800818 C32.1676892,18.1638037 32.1651125,18.1474029 32.1629448,18.1309202 C32.1620859,18.0272802 32.1291207,17.9254806 32.0581595,17.8448262 L27.7147239,12.8831902 C27.7134151,12.8819223 27.7121472,12.8814724 27.7112474,12.8800818 C27.6853579,12.8511656 27.6551738,12.8271166 27.623272,12.8062986 C27.6138241,12.7999591 27.6042945,12.7946421 27.5943967,12.7891616 C27.5667485,12.7740695 27.5374233,12.7615542 27.5072393,12.7525153 C27.4990593,12.7502249 27.4916973,12.7468712 27.4835174,12.7447444 C27.4507157,12.7369734 27.4166462,12.7321063 27.3821268,12.7321063 L16.7075665,12.7321063 C16.2201227,12.7321063 15.8241309,13.1285481 15.8241309,13.6155828 L15.8241309,20.7899387 L15.2833129,20.7899387 C14.5860123,20.7899387 14.0206135,21.355092 14.0206135,22.052638 L14.0206135,28.6188957 C14.0206135,29.3159509 14.5860123,29.8814724 15.2833129,29.8814724 L15.8241718,29.8814724 L15.8241718,34.3762781 C15.8241718,34.863272 16.2201636,35.2597546 16.7076074,35.2597546 L31.2842945,35.2597546 C31.7712883,35.2597546 32.1677301,34.8633129 32.1677301,34.3762781 L32.1677301,29.8814724 L32.7086708,29.8814724 C33.4057669,29.8814724 33.9712883,29.3159509 33.9712883,28.6188957 L33.9712883,22.0528425 C33.9712474,21.3553374 33.405726,20.7901431 32.7086299,20.7901431 Z M16.7075665,13.6157464 L26.940409,13.6157464 L26.940409,18.1357055 C26.940409,18.3797546 27.1384049,18.5774233 27.3821268,18.5774233 L31.2842536,18.5774233 L31.2842536,20.7904294 L16.7075665,20.7904294 L16.7075665,13.6157464 Z M27.5525153,25.3710838 C27.5525153,26.6339059 27.0926789,27.5046217 26.4555828,28.0431902 C25.7614724,28.6205726 24.7042536,28.8944785 23.4128016,28.8944785 C22.6397955,28.8944785 22.0918609,28.8455215 21.7195092,28.7967689 L21.7195092,22.3175869 C22.2675256,22.2296933 22.9824131,22.1807362 23.7360327,22.1807362 C24.9880573,22.1807362 25.8005726,22.4060123 26.4370143,22.8852761 C27.1217996,23.394274 27.5525153,24.2064213 27.5525153,25.3710838 Z M16.0327198,28.826135 L16.0327198,22.3175869 C16.4924744,22.2397137 17.1387321,22.1807362 18.0489162,22.1807362 C18.9687935,22.1807362 19.6246626,22.3569325 20.064908,22.7094888 C20.4858487,23.042045 20.768998,23.5902249 20.768998,24.2361963 C20.768998,24.8823722 20.554274,25.4303885 20.1624949,25.802045 C19.6536196,26.2817178 18.9001227,26.4971779 18.0190593,26.4971779 C17.8236401,26.4971779 17.6468712,26.4872393 17.5104703,26.4676074 L17.5104703,28.8262986 L16.0327198,28.8262986 L16.0327198,28.826135 Z M31.2842945,34.137137 L16.7075665,34.137137 L16.7075665,29.8814724 L31.2842945,29.8814724 L31.2842945,34.137137 Z M32.5643354,23.453047 L30.028998,23.453047 L30.028998,24.9602454 L32.3976278,24.9602454 L32.3976278,26.1739059 L30.028998,26.1739059 L30.028998,28.8261759 L28.5323517,28.8261759 L28.5323517,22.2296933 L32.5643354,22.2296933 L32.5643354,23.453047 Z"
}));
Ico['si_pencil'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M28.5031588,11.6637524 L36.0283573,19.1888809 L16.9800019,38.2372363 L9.45906994,30.7121078 L28.5031588,11.6637524 Z M41.7385274,9.84886389 L38.3825784,6.49291493 C37.08562,5.19595652 34.9796276,5.19595652 33.6782628,6.49291493 L30.4635992,9.70757845 L37.9887977,17.2327769 L41.7385274,13.4830473 C42.7444518,12.4770529 42.7444518,10.8547883 41.7385274,9.84886389 Z M5.52098299,41.2892817 C5.38403403,41.9056219 5.94050284,42.4578941 6.55691304,42.3080057 L14.9424839,40.2748242 L7.42155198,32.7496957 L5.52098299,41.2892817 Z"
}));
Ico['si_person'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  viewBox: "0 0 500 500"
}, React.createElement("path", {
  d: "M460,463.6c0,19.6-15.9,35.4-35.4,35.4l0,0H69.8c-19.6,0-35.5-15.8-35.6-35.4c0,0,0,0,0-0.1V428 c0-93.4,141.9-141.9,141.9-141.9s8.2-14.5,0-35.5c-29.8-22-33.5-56.4-35.5-141.9C146.8,23.1,206.9,2.3,247.1,2.3 S347.4,23,353.6,108.7c-2,85.5-5.7,119.9-35.5,141.9c-8.2,20.9,0,35.5,0,35.5S460,334.6,460,428V463.6z"
}));
Ico['si_phone'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M1600 1240q0 27-10 70.5t-21 68.5q-21 50-122 106-94 51-186 51-27 0-53-3.5t-57.5-12.5-47-14.5-55.5-20.5-49-18q-98-35-175-83-127-79-264-216t-216-264q-48-77-83-175-3-9-18-49t-20.5-55.5-14.5-47-12.5-57.5-3.5-53q0-92 51-186 56-101 106-122 25-11 68.5-21t70.5-10q14 0 21 3 18 6 53 76 11 19 30 54t35 63.5 31 53.5q3 4 17.5 25t21.5 35.5 7 28.5q0 20-28.5 50t-62 55-62 53-28.5 46q0 9 5 22.5t8.5 20.5 14 24 11.5 19q76 137 174 235t235 174q2 1 19 11.5t24 14 20.5 8.5 22.5 5q18 0 46-28.5t53-62 55-62 50-28.5q14 0 28.5 7t35.5 21.5 25 17.5q25 15 53.5 31t63.5 35 54 30q70 35 76 53 3 7 3 21z"
}));
Ico['si_play'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M896 128q209 0 385.5 103t279.5 279.5 103 385.5-103 385.5-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103zm384 823q32-18 32-55t-32-55l-544-320q-31-19-64-1-32 19-32 56v640q0 37 32 56 16 8 32 8 17 0 32-9z"
}));
Ico['si_play-button'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,-5.00000006e-08 C10.7451562,-5.00000006e-08 -5.00000006e-08,10.7451562 -5.00000006e-08,24 C-5.00000006e-08,37.2548438 10.7451562,48 24,48 C37.2548438,48 48,37.2548438 48,24 C48,10.7451562 37.2548438,-5.00000006e-08 24,-5.00000006e-08 Z M17.4424687,34.4385938 L17.4424687,13.5614062 L35.522625,24 L17.4424687,34.4385938 Z"
}));
Ico['si_print'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M12,37.5 L12,31.5 L36,31.5 L36,37.5 L36,46.5 L12,46.5 L12,37.5 Z M15,34.5 L15,37.5 L33,37.5 L33,34.5 L15,34.5 Z M15,40.5 L15,43.5 L33,43.5 L33,40.5 L15,40.5 Z M36,10.5 L36,16.5 L12,16.5 L12,10.5 L12,1.49999995 L36,1.49999995 L36,10.5 Z M42,10.5 C45,10.5 48,13.5 48,16.5 L48,31.5 C48,34.5 45,37.5 42,37.5 L39,37.5 L39,31.5 L39,28.5 L8.99999997,28.5 L8.99999997,31.5 L8.99999997,37.5 L5.99999996,37.5 C2.99999996,37.5 -5.00000183e-08,34.5 -5.00000183e-08,31.5 L-5.00000183e-08,16.5 C-5.00000183e-08,13.5 2.99999996,10.5 5.99999996,10.5 L8.99999997,10.5 L8.99999997,16.5 L8.99999997,19.5 L39,19.5 L39,16.5 L39,10.5 L42,10.5 Z"
}));
Ico['si_printer'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,5.445 C34.2319322,5.445 42.555,13.7688152 42.555,24 C42.555,34.2304374 34.2304374,42.555 24,42.555 C13.7688152,42.555 5.445,34.2304374 5.445,24 C5.445,13.7688152 13.7688152,5.445 24,5.445 Z M18.9808888,29.2923034 L18.9808888,32.8453732 L29.0191112,32.8453732 L29.0191112,29.2923034 L29.0191112,26.9235902 L18.9808888,26.9235902 L18.9808888,29.2923034 Z M20.2356666,28.1079468 L27.7643334,28.1079468 L27.7643334,29.2923034 L20.2356666,29.2923034 L20.2356666,28.1079468 Z M20.2356666,30.47666 L27.7643334,30.47666 L27.7643334,31.6610166 L20.2356666,31.6610166 L20.2356666,30.47666 Z M29.0191112,18.6330939 L29.0191112,15.0800241 L18.9808888,15.0800241 L18.9808888,18.6330939 L18.9808888,21.0018071 L29.0191112,21.0018071 L29.0191112,18.6330939 Z M31.5286669,18.6330939 L30.273889,18.6330939 L30.273889,21.0018071 L30.273889,22.1861637 L17.726111,22.1861637 L17.726111,21.0018071 L17.726111,18.6330939 L16.4713331,18.6330939 C15.2165553,18.6330939 13.9617775,19.8174505 13.9617775,21.0018071 L13.9617775,26.9235902 C13.9617775,28.1079468 15.2165553,29.2923034 16.4713331,29.2923034 L17.726111,29.2923034 L17.726111,26.9235902 L17.726111,25.7392335 L30.273889,25.7392335 L30.273889,26.9235902 L30.273889,29.2923034 L31.5286669,29.2923034 C32.7834447,29.2923034 34.0382225,28.1079468 34.0382225,26.9235902 L34.0382225,21.0018071 C34.0382225,19.8174505 32.7834447,18.6330939 31.5286669,18.6330939 Z"
}));
Ico['si_quote'] = React.createElement("svg", {
  width: "49px",
  height: "42px",
  viewBox: "0 0 49 42",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M16.0232598,19.1635122 C14.8178822,18.8115687 13.6125046,18.6329938 12.4399823,18.6329938 C10.6293492,18.6329938 9.1185203,19.0526188 7.94702472,19.5664772 C9.07642449,15.3733509 11.7895507,8.13820362 17.194242,7.32342306 C17.6947714,7.24793221 18.1049489,6.88089048 18.2415036,6.38681588 L19.4227531,2.10205932 C19.5223456,1.73970323 19.4633088,1.35183645 19.2595035,1.03737801 C19.0556982,0.722919569 18.7281722,0.513107066 18.3611173,0.462085663 C17.9622338,0.406899248 17.5556499,0.378785414 17.1526596,0.378785414 C10.6652846,0.378785414 4.24054003,7.2458497 1.52946722,17.0784029 C-0.0619597245,22.8469451 -0.528607174,31.5195423 3.39143675,36.9783117 C5.58503911,40.0328278 8.78534736,41.6639508 12.9035496,41.8269069 C12.9204906,41.8274275 12.9369182,41.8279481 12.9538592,41.8279481 C18.0351315,41.8279481 22.5409232,38.3574515 23.9116038,33.3891123 C24.7304186,30.4189378 24.3602835,27.3040291 22.8684491,24.6160341 C21.392529,21.9582356 18.9617526,20.0209842 16.0232598,19.1635122 Z"
}), React.createElement("path", {
  d: "M47.8307508,24.6165548 C46.3548306,21.9582356 43.9240543,20.0209842 40.9855615,19.1635122 C39.7801839,18.8115687 38.5748063,18.6329938 37.4027974,18.6329938 C35.5921642,18.6329938 34.080822,19.0526188 32.9093264,19.5664772 C34.0387262,15.3733509 36.7518524,8.13820362 42.157057,7.32342306 C42.6575865,7.24793221 43.0672506,6.88089048 43.2043186,6.38681588 L44.3855681,2.10205932 C44.4851607,1.73970323 44.4261238,1.35183645 44.2223185,1.03737801 C44.0190266,0.722919569 43.6915006,0.513107066 43.3239323,0.462085663 C42.9255622,0.406899248 42.5189783,0.378785414 42.1154746,0.378785414 C35.6280997,0.378785414 29.2033551,7.2458497 26.4917689,17.0784029 C24.9008553,22.8469451 24.4342079,31.5195423 28.3547652,36.979353 C30.5478542,40.0333484 33.7486758,41.664992 37.8663647,41.8274275 C37.8833057,41.8279481 37.8997333,41.8284687 37.9171876,41.8284687 C42.9979465,41.8284687 47.5042516,38.3579721 48.8749322,33.3896329 C49.6927203,30.4194584 49.3220718,27.3040291 47.8307508,24.6165548 Z"
}));
Ico['si_robotic-surgery'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("defs", null, React.createElement("polygon", {
  points: "0.627974171 1.09265104 3.86763782 1.09265104 3.86763782 2.10805606 0.627974171 2.10805606"
}), React.createElement("polygon", {
  points: "0.000133412826 0.113667728 40.937859 0.113667728 40.937859 38.6897195 0.000133412826 38.6897195"
})), React.createElement("path", {
  d: "M42.48358,2.03107686 L39.3924048,2.03107686 C39.5911899,2.25521041 40.2035548,2.41930818 40.9373253,2.41930818 C41.67243,2.41930818 42.2847949,2.25521041 42.48358,2.03107686"
}), React.createElement("path", {
  d: "M40.9377256,2.41930818 C40.203955,2.41930818 39.590256,2.25521041 39.3914709,2.03107686 L39.3514471,2.03107686 L39.3514471,11.5807669 C39.3514471,12.4532868 40.0652057,13.1683796 40.9377256,13.1683796 C41.8102455,13.1683796 42.5240041,12.4532868 42.5240041,11.5807669 L42.5240041,2.03107686 L42.4839802,2.03107686 C42.2851951,2.25521041 41.6714961,2.41930818 40.9377256,2.41930818"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M3.79386053,1.78919941 C3.83788676,1.73983666 3.86857171,1.68913979 3.86857171,1.63577466 C3.86857171,1.3355958 3.14280594,1.09278446 2.24760588,1.09278446 C1.35373994,1.09278446 0.627974171,1.3355958 0.627974171,1.63577466 C0.627974171,1.68913979 0.658659121,1.73983666 0.702685353,1.78919941 L3.79386053,1.78919941 Z",
  fill: "#F2F2F2",
  mask: "url(#mask-2)"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M27.259042,4.34152018 C26.6159922,4.34152018 26.094348,3.8185419 26.094348,3.17549208 C26.094348,2.53377639 26.6159922,2.01213224 27.259042,2.01213224 C27.9020918,2.01213224 28.4237359,2.53377639 28.4237359,3.17549208 C28.4237359,3.8185419 27.9020918,4.34152018 27.259042,4.34152018 M12.2687769,11.3243475 C13.3961152,11.3243475 14.3099931,12.2408936 14.3099931,13.3668978 C14.3099931,14.4929021 13.3961152,15.4081141 12.2687769,15.4081141 C11.1414385,15.4081141 10.2275606,14.4929021 10.2275606,13.3668978 C10.2275606,12.2408936 11.1414385,11.3243475 12.2687769,11.3243475 M40.771093,1.85203685 C40.8644819,1.84670033 40.937859,1.7693209 40.937859,1.67593192 L40.937859,1.26502041 C40.937859,1.17163144 40.8644819,1.094252 40.771093,1.08891548 C39.669103,1.03421623 33.4907551,0.726032598 33.4907551,0.726032598 L31.9551734,1.91340675 L31.9551734,1.72662879 C31.9551734,1.58654532 31.8404384,1.47181029 31.7003549,1.47181029 L31.1893838,1.47181029 C31.1720402,1.47181029 31.1546965,1.47447855 31.1386869,1.47714681 L31.1386869,1.24234023 C31.1386869,1.03154797 30.9665844,0.859445424 30.7557921,0.859445424 L29.9900025,0.859445424 C29.7818785,0.859445424 29.6137783,1.02887971 29.609776,1.23566959 C29.048108,0.555264181 28.2089413,0.113667728 27.259042,0.113667728 C25.5687015,0.113667728 24.1972176,1.48515158 24.1972176,3.17549208 L24.1972176,3.67845843 L10.0741359,8.68677591 C8.31308659,9.49125525 7.16440216,11.3056697 7.16440216,13.3668978 C7.16440216,14.6610022 7.64735659,15.8430399 8.44249703,16.7435765 L4.70960616,33.7830626 L1.5623976,33.7830626 L1.5623976,36.2365244 L0.000133412826,36.2365244 L0.000133412826,38.6899863 L24.5374203,38.6899863 L24.5374203,36.2365244 L22.8617552,36.2365244 L22.8617552,33.7830626 L19.8292817,33.7830626 L16.0950567,16.7435765 C16.8901972,15.8430399 17.3731516,14.6610022 17.3731516,13.3668978 C17.3731516,12.5103875 17.1623593,11.7032399 16.7874693,10.9921495 L25.2178257,5.79038346 C27.4084643,6.79498204 28.8333133,6.13325443 29.6071077,5.1313241 L29.6071077,5.27407583 C29.6071077,5.48486809 29.7792102,5.65697064 29.9900025,5.65697064 L30.7557921,5.65697064 C30.9665844,5.65697064 31.1386869,5.48486809 31.1386869,5.27407583 L31.1386869,5.03926925 C31.1546965,5.04193751 31.1720402,5.04460577 31.1893838,5.04460577 L31.7003549,5.04460577 C31.8404384,5.04460577 31.9551734,4.92987074 31.9551734,4.78978727 L31.9551734,4.60300931 L33.4907551,5.79038346 C33.4907551,5.79038346 39.669103,5.48086571 40.771093,5.42483232 C40.8644819,5.42216406 40.937859,5.34478463 40.937859,5.25139565 L40.937859,4.84048414 C40.937859,4.74709517 40.8644819,4.66971573 40.771093,4.66437921 C39.669103,4.60967996 33.4907551,4.3001622 33.4907551,4.3001622 L33.4907551,2.21491973 C33.4907551,2.21491973 39.669103,1.90673611 40.771093,1.85203685",
  mask: "url(#mask-4)"
}));
Ico['si_search'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M40.6997073,38.8966562 L32.1685603,29.8206593 C34.3620681,27.1534066 35.5639039,23.7974568 35.5639039,20.3037677 C35.5639039,12.1410989 29.0714733,5.5 21.0915348,5.5 C13.1115963,5.5 6.6191657,12.1410989 6.6191657,20.3037677 C6.6191657,28.4664364 13.1115963,35.1075353 21.0915348,35.1075353 C24.0873152,35.1075353 26.9421473,34.1832653 29.3829439,32.428697 L37.9789019,41.5735636 C38.3381942,41.9552433 38.8214455,42.1657143 39.3393046,42.1657143 C39.8294774,42.1657143 40.2944809,41.9745526 40.6474809,41.6269859 C41.3975272,40.8887284 41.421438,39.6645212 40.6997073,38.8966562 Z M21.0915348,9.36185243 C26.9899691,9.36185243 31.7885033,14.2702669 31.7885033,20.3037677 C31.7885033,26.3372684 26.9899691,31.2456829 21.0915348,31.2456829 C15.1931006,31.2456829 10.3945663,26.3372684 10.3945663,20.3037677 C10.3945663,14.2702669 15.1931006,9.36185243 21.0915348,9.36185243 Z"
}));
Ico['si_share'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,5.445 C34.2319322,5.445 42.555,13.7688152 42.555,24 C42.555,34.2304374 34.2304374,42.555 24,42.555 C13.7688152,42.555 5.445,34.2304374 5.445,24 C5.445,13.7688152 13.7688152,5.445 24,5.445 Z M32.8520039,23.6526584 L25.4330547,15.5174336 L25.4330547,20.3710561 L23.8557227,20.3710561 C18.9647815,20.3710561 15,24.3358375 15,29.2267789 L15,31.7989155 L15.7006127,31.0311562 C18.0826142,28.4212922 21.4530189,26.9342608 24.9865912,26.9342608 L25.4330547,26.9342608 L25.4330547,31.7878833 L32.8520039,23.6526584 Z"
}));
Ico['si_star'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M47.844,18.4954286 C47.7428572,18.1851428 47.4745715,17.9588571 47.1514286,17.9117143 L31.6457143,15.6582857 L24.7114286,1.60799995 C24.5674286,1.3148571 24.2691429,1.12971424 23.9434286,1.12971424 C23.6177143,1.12971424 23.3185714,1.3148571 23.1754286,1.60799995 L16.2402857,15.6591428 L0.73457138,17.9125714 C0.411428522,17.9597143 0.14399995,18.1851428 0.0419999501,18.4962857 C-0.0582857644,18.8057143 0.0248570929,19.1468571 0.258857093,19.374 L11.4797143,30.3111429 L8.83028568,45.7551429 C8.77542854,46.0765715 8.90742854,46.4014286 9.1705714,46.5934286 C9.43542854,46.7871429 9.78599997,46.812 10.0731428,46.6585715 L23.9434286,39.3677143 L37.812,46.6585715 C37.9371429,46.7245715 38.0751429,46.7571429 38.2114286,46.7571429 C38.3888572,46.7571429 38.5654286,46.7022858 38.7154286,46.5934286 C38.9794286,46.4014286 39.1114286,46.0765715 39.0557143,45.7551429 L36.4071429,30.312 L47.628,19.374 C47.8611429,19.1451428 47.9451429,18.8048571 47.844,18.4954286 Z"
}));
Ico['si_success'] = React.createElement("svg", {
  width: "42px",
  height: "42px",
  viewBox: "0 0 42 42",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M30.2829895,14.3365631 C30.9238586,14.9774322 30.9238586,16.0162811 30.2829895,16.6568299 L19.2767029,27.6634369 C18.6358338,28.3039856 17.5973053,28.3039856 16.9564361,27.6634369 L11.7170105,22.4236908 C11.0761414,21.7831421 11.0761414,20.7442932 11.7170105,20.1037445 C12.3575592,19.4628754 13.3964081,19.4628754 14.0369568,20.1037445 L18.1164093,24.1831971 L27.9627228,14.3365631 C28.6035919,13.6960144 29.6424408,13.6960144 30.2829895,14.3365631 Z M42,21 C42,32.6077423 32.6061401,42 21,42 C9.39225771,42 0,32.6061401 0,21 C0,9.39225771 9.39385986,0 21,0 C32.6077423,0 42,9.39385986 42,21 Z M38.71875,21 C38.71875,11.2059174 30.7928009,3.28125 21,3.28125 C11.2059174,3.28125 3.28125,11.2071991 3.28125,21 C3.28125,30.7940826 11.2071991,38.71875 21,38.71875 C30.7940826,38.71875 38.71875,30.7928009 38.71875,21 Z",
  "fill-rule": "nonzero"
}));
Ico['si_surgery'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M47.9532164,27.1869006 L0.0467835758,27.1869006 L0.0467835758,20.6857544 L4.98339177,20.6857544 L4.98339177,7.10091225 C4.98339177,3.18540347 8.16879529,-5.00000787e-08 12.0843041,-5.00000787e-08 C15.782269,-5.00000787e-08 18.8275088,2.84182452 19.1545263,6.45614031 L19.9674386,6.45614031 C22.3406784,6.45614031 24.2715322,8.38699412 24.2715322,10.7602339 L24.2715322,15.251462 L11.6581988,15.251462 L11.6581988,10.7602339 C11.6581988,8.38699412 13.5890526,6.45614031 15.9622924,6.45614031 L16.3295438,6.45614031 C16.0175906,4.39326312 14.2327953,2.8070175 12.0842105,2.8070175 C9.71658477,2.8070175 7.79040932,4.73328651 7.79040932,7.10091225 L7.79040932,20.6857544 L47.9532164,20.6857544 L47.9532164,27.1869006 Z M26.3426433,35.421848 L26.3426433,35.4219415 L7.79040932,35.4219415 L7.79040932,39.3422223 C9.52888886,39.9294503 10.7845614,41.5747369 10.7845614,43.5088655 C10.7845614,45.9337544 8.81178944,47.9065264 6.38690055,47.9065264 C3.96201165,47.9065264 1.98923972,45.9337544 1.98923972,43.5088655 C1.98923972,41.5747369 3.24491224,39.9294503 4.98339177,39.3422223 L4.98339177,35.4219415 L2.7647251,35.4219415 L2.7647251,29.9939181 L26.3426433,29.9939181 L26.3426433,35.421848 Z M43.0166082,39.3421287 C44.7551813,39.9293568 46.0107603,41.5746433 46.0107603,43.508772 C46.0107603,45.9336609 44.0379883,47.9064328 41.6130995,47.9064328 C39.1882106,47.9064328 37.2154386,45.9336609 37.2154386,43.508772 C37.2154386,41.5746433 38.4711111,39.9293568 40.2095907,39.3421287 L40.2095907,35.421848 L37.8672281,35.421848 C35.3203275,35.421848 33.2481872,33.3498012 33.2481872,30.8029006 L33.2481872,29.9939181 L43.0166082,29.9939181 L43.0166082,39.3421287 Z"
}));
Ico['si_tag'] = React.createElement("svg", {
  width: "1792",
  height: "1792",
  viewBox: "0 0 1792 1792",
  xmlns: "http://www.w3.org/2000/svg"
}, React.createElement("path", {
  d: "M576 448q0-53-37.5-90.5t-90.5-37.5-90.5 37.5-37.5 90.5 37.5 90.5 90.5 37.5 90.5-37.5 37.5-90.5zm1067 576q0 53-37 90l-491 492q-39 37-91 37-53 0-90-37l-715-716q-38-37-64.5-101t-26.5-117v-416q0-52 38-90t90-38h416q53 0 117 26.5t102 64.5l715 714q37 39 37 91z"
}));
Ico['si_times'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  viewBox: "0 0 512 512"
}, React.createElement("path", {
  d: "M278.6 256l68.2-68.2c6.2-6.2 6.2-16.4 0-22.6-6.2-6.2-16.4-6.2-22.6 0L256 233.4l-68.2-68.2c-6.2-6.2-16.4-6.2-22.6 0-3.1 3.1-4.7 7.2-4.7 11.3 0 4.1 1.6 8.2 4.7 11.3l68.2 68.2-68.2 68.2c-3.1 3.1-4.7 7.2-4.7 11.3 0 4.1 1.6 8.2 4.7 11.3 6.2 6.2 16.4 6.2 22.6 0l68.2-68.2 68.2 68.2c6.2 6.2 16.4 6.2 22.6 0 6.2-6.2 6.2-16.4 0-22.6L278.6 256z"
}));
Ico['si_twitter'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M24,4.82519531 C13.7683427,4.82519531 5.44414317,13.1493948 5.44414317,23.3810521 C5.44414317,33.611962 13.7683427,41.936909 24,41.936909 C34.2309099,41.936909 42.5558568,33.611962 42.5558568,23.3810521 C42.5558568,13.1493948 34.2324047,4.82519531 24,4.82519531 Z M32.2778585,19.1341183 C32.2860803,19.3179877 32.2905649,19.5033519 32.2905649,19.6887162 C32.2905649,25.3326087 27.9957952,31.8382954 20.137996,31.8382954 C17.7260186,31.8382954 15.4807196,31.1334628 13.5912003,29.9211209 C13.9253043,29.960735 14.2653879,29.9809158 14.6099561,29.9809158 C16.6115909,29.9809158 18.4525268,29.2977589 19.9145125,28.1526863 C18.0459214,28.1183042 16.4680831,26.8835393 15.9246968,25.1861111 C16.1848047,25.2354419 16.4531344,25.2630971 16.7274435,25.2630971 C17.1168579,25.2630971 17.4950607,25.2122714 17.8530828,25.1143572 C15.899284,24.7227005 14.4275816,22.9968698 14.4275816,20.9264709 C14.4275816,20.9085324 14.4275816,20.8898465 14.4283291,20.8726555 C15.0038551,21.1918108 15.6623466,21.3846494 16.3619471,21.4063251 C15.2168745,20.6416976 14.4627111,19.3336839 14.4627111,17.8522649 C14.4627111,17.0689515 14.6727408,16.3349689 15.0404795,15.7041326 C17.1460079,18.2887677 20.2942102,19.9884382 23.8430383,20.1678229 C23.7697896,19.8546471 23.7331652,19.5295122 23.7331652,19.1939133 C23.7331652,16.8357513 25.6451076,14.9230615 28.0032695,14.9230615 C29.232055,14.9230615 30.3405032,15.4417824 31.1208269,16.2714368 C32.0947365,16.0800931 33.006609,15.7258082 33.8340211,15.2347425 C33.5126235,16.2325701 32.8376884,17.0689515 31.9534711,17.5981365 C32.818255,17.4949903 33.6434248,17.2662747 34.4065574,16.9261911 C33.8370109,17.7812584 33.112745,18.5339269 32.2778585,19.1341183 Z"
}));
Ico['si_urology'] = React.createElement("svg", {
  width: "48px",
  height: "48px",
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("defs", null, React.createElement("polygon", {
  points: "0.0684543028 0.153679874 10.7600182 0.153679874 10.7600182 11.1767181 0.0684543028 11.1767181"
}), React.createElement("polygon", {
  points: "8.54611736e-05 0.15272799 41.5187135 0.15272799 41.5187135 11.1423147 8.54611736e-05 11.1423147"
})), React.createElement("path", {
  d: "M32.5270438,9.57097296 C30.202985,7.20604927 28.1401819,4.68011099 25.0648381,3.67839763 C21.9940348,2.67843063 18.5753562,3.05948687 15.5181745,3.93266797 C14.1853509,4.3947554 12.9216832,5.00842708 11.7690841,5.91898033 C10.5228801,6.90323007 9.46248894,8.15502249 8.27112065,9.21890634 C8.03780666,9.4057671 7.80519122,9.59018295 7.56593959,9.76656553 C7.08254654,10.0819585 6.59146949,10.356836 6.05568556,10.5346156 C5.93204312,10.5845616 5.79897032,10.6166946 5.67078734,10.6495263 C5.71619275,11.5164205 5.61071248,12.3878552 5.6243341,13.2561465 C5.64005136,14.2770698 5.84262938,15.237569 6.07140282,16.216929 C6.46747777,17.9063597 7.09372326,19.5832167 7.92569021,21.0522566 C8.73949499,22.4888142 10.4512792,23.3766647 11.7233294,24.1562408 C13.0833963,24.9882077 14.5723447,25.7195842 16.0665322,26.1617631 C16.0714221,26.1331228 16.0902828,26.1184534 16.121368,26.1170563 C16.9697508,26.2270771 17.813593,26.4031104 18.6605787,26.5281499 C18.872587,26.5498048 19.0845954,26.5742539 19.2962545,26.5973059 C19.6703253,26.623152 20.0440468,26.6472518 20.4191654,26.6647154 C22.3488956,26.6713516 24.2209959,26.2812143 26.136406,26.0863203 L26.137803,26.0863203 C26.1629507,26.0835261 26.1856534,26.1037839 26.191591,26.1317257 C27.5121901,25.8771061 28.8167227,25.1586527 29.9878332,24.428324 C31.2019042,23.6704028 32.2259709,22.5810221 33.1588776,21.4179449 C34.1071523,20.2360069 34.9006993,18.6894286 35.1734811,17.1030331 C35.4756017,15.3423508 35.4242587,13.5376601 35.479793,11.754275 C34.3753935,11.2904412 33.3970814,10.4700002 32.5270438,9.57097296 C31.8487567,8.88046135 33.2000918,10.2667237 32.5270438,9.57097296"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M10.3400709,0.214104006 C8.52560055,1.10754291 6.65210318,1.60595468 4.67591972,1.56753471 C4.27600277,1.54168855 3.88237273,1.48894841 3.48629779,1.4257301 C3.05913759,1.33037872 2.6421063,1.21861154 2.22297937,1.08588802 C1.58311226,0.841048035 0.96455077,0.563725718 0.373581802,0.1875593 C0.372184712,0.186860755 0.371486167,0.185812938 0.370787622,0.185114393 C-0.666202252,3.19549355 1.06583978,6.9676359 4.01684262,6.9676359 C4.14607343,8.05876301 4.21837282,9.17259282 4.03640188,10.2630214 C3.79470535,11.7090093 5.11320881,10.9454997 5.83340858,11.1735746 C6.39748357,10.9486432 6.61403249,10.6025142 6.51309275,9.89942877 C6.3730345,8.92495866 6.32693054,7.92394385 6.48829441,6.94807665 C9.59926403,7.28722019 11.5509984,3.28979711 10.4500917,0.153679874 C10.4490439,0.155076963 10.4483453,0.15752187 10.446599,0.15891896 C10.446599,0.15891896 10.4092268,0.178128944 10.3400709,0.214104006 C10.2712642,0.248332705 10.4092268,0.178128944 10.3400709,0.214104006",
  mask: "url(#mask-2)"
}), React.createElement("mask", {
  fill: "white"
}), React.createElement("path", {
  d: "M41.4688025,2.56418362 C41.0975258,2.16810867 40.2026899,0.82096487 39.6508394,1.4098382 C39.0099245,2.09336437 38.628519,3.06434175 37.940103,3.71119431 C37.4154958,4.20401772 36.6184561,4.85471228 35.9220068,4.88090771 C35.1050586,4.91129441 34.1173161,4.20401772 33.3709209,3.86487418 C31.6497063,3.08005901 29.9487496,2.21002136 28.2118177,1.47515215 C26.4940959,0.747617658 24.7397004,0.532815107 22.9304692,0.322553098 C19.3731294,-0.0916840155 15.7134527,0.224756815 12.3160797,1.57224989 C11.4938924,1.89881962 10.6958049,2.29664093 9.88444498,2.65394664 C9.02278987,3.0332565 8.14611604,3.53201755 7.25791623,3.81108623 C6.54155846,4.0370655 5.63938774,3.61479512 4.96005285,3.3437597 C4.27163687,3.07027938 3.60941632,2.69166806 3.03975297,2.16147249 C2.62691295,1.77587572 2.33177774,1.31378828 1.99612692,0.846811031 C1.565474,0.247110251 1.34193964,0.395201766 0.797074635,0.737838029 C0.425798032,0.971501292 -0.269952669,1.29981739 0.110405018,1.89113563 C0.504035058,2.50341021 0.929099618,3.07936047 1.39712469,3.61793857 C2.30872576,4.66750225 3.38169069,5.47956067 4.32018574,6.48616385 C5.2356288,7.46901649 5.54298855,8.77669251 5.65161228,10.1713374 C5.75220274,10.1325681 5.86012792,10.095196 5.96735456,10.0393124 C6.71619468,9.70505865 7.35850669,9.17556163 7.97741746,8.59472157 C8.11817425,8.44872569 8.26556722,8.3041269 8.41051528,8.14241376 C9.8638379,6.60002666 11.1523039,5.00175598 12.9042545,3.89072034 C15.3166792,2.48350168 17.8988504,2.0245577 20.5714831,1.86074892 L20.627716,1.8572562 L20.6961734,1.8572562 L20.8068927,1.85655765 L21.0297285,1.85620838 L21.4757494,1.85481129 C24.3659789,1.91977597 27.1004328,2.87887809 29.3815311,4.97136927 C31.4817063,6.89690824 33.0422556,9.77526241 35.4990379,11.1423147 C35.6198862,9.20909179 36.940136,8.22728696 38.1545563,7.13336568 C38.6204857,6.71388948 41.9651186,3.09647482 41.4688025,2.56418362 C41.0950809,2.16531449 41.5166528,2.61587594 41.4688025,2.56418362",
  mask: "url(#mask-4)"
}));
Ico['si_vascular'] = React.createElement("svg", {
  id: "Layer_1",
  "data-name": "Layer 1",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 384 384"
}, React.createElement("path", {
  class: "cls-1",
  d: "M.36,132.16A16,16,0,0,0,16,144.82a16.82,16.82,0,0,0,3.36-.35l112.1-24a16,16,0,0,0,11.27-9.12l39.7-88.84a16,16,0,0,0-29.22-13L116.83,90.9,83.78,98,26.85,45.5A16,16,0,0,0,5.16,69l40.29,37.12-32.79,7A16,16,0,0,0,.36,132.16Z",
  transform: "translate(0 -0.01)"
}), React.createElement("path", {
  class: "cls-1",
  d: "M159.86,384a16,16,0,0,0,16-16V343.38a15.57,15.57,0,0,0-.29-3L142.5,165.11a16,16,0,0,0-19-12.68L12.68,176.05a16,16,0,1,0,6.67,31.3l94.74-20.21,10.8,57.18L83.41,256.26a16,16,0,0,0-10.74,10.26L56.56,314.27a16,16,0,0,0,10.06,20.27,15.68,15.68,0,0,0,5.11.84A16,16,0,0,0,86.9,324.5l13.42-39.81,30.53-8.79,13,69V368A16,16,0,0,0,159.86,384Z",
  transform: "translate(0 -0.01)"
}), React.createElement("path", {
  class: "cls-1",
  d: "M210.92,382.89a15.82,15.82,0,0,0,5,.8,16,16,0,0,0,15.2-11l3.55-10.83,114.21,21.52a16,16,0,1,0,5.91-31.45l-128-24.13a16,16,0,0,0-18.17,10.74l-7.92,24.17A16,16,0,0,0,210.92,382.89Z",
  transform: "translate(0 -0.01)"
}), React.createElement("path", {
  class: "cls-1",
  d: "M332.76,265.61A16,16,0,0,0,307.47,246L282.4,278.34l-51.07-10.82-23-150.31,14.82-37.39,46.59,24.85a16,16,0,1,0,15.06-28.24L235,49.88l11.09-28a16,16,0,1,0-29.75-11.78L177,109.45a15.86,15.86,0,0,0-.93,8.32l25.35,165.54a16,16,0,0,0,12.51,13.23l150.8,31.94a15.84,15.84,0,0,0,3.33.35,16,16,0,0,0,3.3-31.65l-54.13-11.47Z",
  transform: "translate(0 -0.01)"
}));
Ico['si_warning'] = React.createElement("svg", {
  width: "42px",
  height: "37px",
  viewBox: "0 0 42 37",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
}, React.createElement("path", {
  d: "M41.4588398,30.4659141 L24.2311289,1.89508594 C23.5524023,0.769535156 22.3143047,0.0703007812 20.999918,0.0703007812 C19.6855313,0.0703007812 18.4474336,0.769535156 17.768625,1.89516797 L0.540996094,30.4659141 C-0.160453125,31.6292813 -0.181207031,33.0868125 0.486773438,34.2697031 C1.15491797,35.4525938 2.41376953,36.1874297 3.77220703,36.1874297 L38.2276289,36.1874297 C39.5860664,36.1874297 40.845,35.4525938 41.5131445,34.2696211 C42.181125,33.0866484 42.1603711,31.6291172 41.4588398,30.4659141 Z M39.1321055,32.9250469 C38.9481914,33.2506289 38.6016094,33.453 38.2276289,33.453 L3.77220703,33.453 C3.39822656,33.453 3.05164453,33.2507109 2.8678125,32.9251289 C2.68389844,32.5994648 2.68964062,32.198168 2.88266016,31.878 L20.1104531,3.30717188 C20.2973203,2.99733984 20.6381602,2.8048125 21,2.8048125 C21.3617578,2.8048125 21.7025977,2.99733984 21.8894648,3.30717188 L39.1170938,31.878 C39.3102773,32.19825 39.3160195,32.5994648 39.1321055,32.9250469 Z",
  "fill-rule": "nonzero"
}), React.createElement("path", {
  d: "M21.0126328,11.3207227 C19.9724766,11.3207227 19.1606953,11.8788633 19.1606953,12.8683242 C19.1606953,15.8872383 19.5158086,20.2253789 19.5158086,23.244375 C19.5158906,24.0308086 20.2009336,24.3605742 21.0127148,24.3605742 C21.6215508,24.3605742 22.4841094,24.0308086 22.4841094,23.244375 C22.4841094,20.2254609 22.8392227,15.8873203 22.8392227,12.8683242 C22.8392227,11.8789453 22.0020938,11.3207227 21.0126328,11.3207227 Z"
}), React.createElement("path", {
  d: "M21.0381445,26.1110391 C19.9219453,26.1110391 19.0846523,26.9989453 19.0846523,28.0645313 C19.0846523,29.1046875 19.9218633,30.0180234 21.0381445,30.0180234 C22.0783008,30.0180234 22.9662891,29.1046875 22.9662891,28.0645313 C22.9662891,26.9989453 22.0782188,26.1110391 21.0381445,26.1110391 Z"
})); // Ico['si_'] = ;

var _default = Ico;
exports.default = _default;

},{"./icons":54}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const IcoNames = {
  'Beebe Icons': ['si_beebe', 'si_blood-vessel', 'si_butterfly', 'si_calendar', 'si_cardiology', 'si_cardiothoracic', 'si_chevron-down', 'si_chevron-left', 'si_chevron-right', 'si_chevron-up', 'si_clock', 'si_close', 'si_close-envelope', 'si_doc', 'si_doctor-briefcase', 'si_doctor-stethoscope', 'si_email', 'si_endo', 'si_endoscopy', 'si_envelope', 'si_error', 'si_excretory-system-silhouette', 'si_facebook', 'si_gastroenterology', 'si_gift', 'si_heart', 'si_hernia', 'si_home', 'si_home-care', 'si_image', 'si_info', 'si_linkedin', 'si_location', 'si_marker', 'si_menu', 'si_monthly-calendar', 'si_mother-with-son', 'si_oncology', 'si_orthopaedic', 'si_pdf', 'si_pencil', 'si_person', 'si_phone', 'si_play', 'si_play-button', 'si_print', 'si_printer', 'si_quote', 'si_robotic-surgery', 'si_search', 'si_share', 'si_star', 'si_success', 'si_surgery', 'si_tag', 'si_times', 'si_twitter', 'si_urology', 'si_vascular', 'si_warning']
};
var _default = IcoNames;
exports.default = _default;

},{}],58:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
},{}],59:[function(require,module,exports){
/*!
 * 
 * React FontIconPicker
 * 
 * React Component to show a picker element to pick font-icons & svg
 * 
 * @author Swashata Ghosh <swashata@wpquark.com>
 * @version 1.2.0
 * @link https://github.com/fontIconPicker/react-fonticonpicker
 * @license MIT
 * 
 * Copyright (c) 2018 Swashata Ghosh <swashata@wpquark.com>
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 * 
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("prop-types"),require("react"),require("classnames"),require("react-dom"),require("react-transition-group")):"function"==typeof define&&define.amd?define(["prop-types","react","classnames","react-dom","react-transition-group"],t):"object"==typeof exports?exports.FontIconPicker=t(require("prop-types"),require("react"),require("classnames"),require("react-dom"),require("react-transition-group")):e.FontIconPicker=t(e.PropTypes,e.React,e.classNames,e.ReactDOM,e.ReactTransitionGroup)}(window,function(e,t,r,n,a){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=15)}([function(t,r){t.exports=e},function(e,r){e.exports=t},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Object.defineProperty(t,"__esModule",{value:!0}),t.flattenPossiblyCategorizedSource=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(Array.isArray(e))return o(e);if(null!==t)return void 0!==e[t]?o(e[t]):[];var r=[],n=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){a(e,t,r[t])})}return e}({},e);return Object.keys(n).forEach(function(e){r=o(r).concat(o(n[e]))}),r},t.getPossibleCategories=function(e){return Array.isArray(e)?null:Object.keys(e)},t.convertToHex=function(e){return String.fromCodePoint(parseInt(e,10))},t.isArrayEqual=function(e,t){if(!Array.isArray(e)||!Array.isArray(t))return!1;var r=o(e);r.sort();var n=o(t);return n.sort(),JSON.stringify(r)===JSON.stringify(n)},t.getOffset=function(e){var t=e.getBoundingClientRect(),r=window.pageXOffset||document.documentElement.scrollLeft,n=window.pageYOffset||document.documentElement.scrollTop;return{top:t.top+n,left:t.left+r}},t.getSourceType=function(e){return null===e?"null":"object"!==n(e)||Array.isArray(e)?Array.isArray(e)?"array":n(e):"object"},t.InvalidSourceException=function(e,t){this.givenType=e,this.requiredType=t,this.message="Expected of type: ".concat(this.requiredType,", found: ").concat(this.givenType),this.toString=function(){return"Invalid Source Exception: ".concat(this.message)}},t.fuzzySearch=function(e,t){e=e.toLowerCase();var r=(t=t.toLowerCase()).length,n=e.length;if(n>r)return!1;if(n===r)return e===t;e:for(var a=0,o=0;a<n;a++){for(var l=e.codePointAt(a);o<r;)if(t.codePointAt(o++)===l)continue e;return!1}return!0},t.debounce=void 0,t.debounce=function(e,t){var r;return function(){var n=this,a=arguments;clearTimeout(r),r=setTimeout(function(){return e.apply(n,a)},t)}}},function(e,t){e.exports=r},,,function(e,t){e.exports=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=u(r(1)),a=r(6),o=u(r(0)),l=u(r(3)),i=r(2);function u(e){return e&&e.__esModule?e:{default:e}}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var p=function(e){function t(e){var r,n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this,n=(t.__proto__||Object.getPrototypeOf(t)).call(this,e),r=!n||"object"!==c(n)&&"function"!=typeof n?d(this):n,Object.defineProperty(d(r),"syncPortalPosition",{configurable:!0,enumerable:!0,writable:!0,value:function(){r.resetPortalPosition(),r.fixWindowOverflow()}}),Object.defineProperty(d(r),"fixWindowOverflow",{configurable:!0,enumerable:!0,writable:!0,value:function(){var e=r.props.domRef.current.offsetWidth,t=r.props.domRef.current.offsetHeight,n=window,a=n.innerWidth,o=n.pageYOffset,l=document.documentElement.clientHeight,u=(0,i.getOffset)(r.props.domRef.current),c=u.left,s=u.top,f="self"===r.state.appendRoot?r.props.domRef.current:r.state.appendRoot,d=(0,i.getOffset)(f),p=r.props.btnRef.current,h=r.props.domRef.current,y=(0,i.getOffset)(p),b=getComputedStyle(p),g=(parseInt(b.borderTop,10)||0)+(parseInt(b.borderBottom,10)||0);if(c+e>a-20){var m=y.left+r.props.btnRef.current.offsetWidth-(e+d.left);m+d.left<0&&(m=10-d.left),h.style.left="".concat(m,"px")}t+s-o>l&&y.top-t>0&&("self"===r.state.appendRoot?h.style.top="-".concat(t-g,"px"):h.style.top="".concat(y.top+g-t,"px"))}}),r.state={},r.debouncedSyncPortalPosition=(0,i.debounce)(r.syncPortalPosition,250),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,n.default.PureComponent),f(t,null,[{key:"getDerivedStateFromProps",value:function(e){var r=t.calculateAppendAndClass(e.appendRoot);return{appendRoot:r.appendRoot,portalClasses:r.portalClasses}}},{key:"calculateAppendAndClass",value:function(e){var t="self",r=(0,l.default)({"rfipdropdown--portal":!1!==e});return!1!==e&&(t=document.querySelector(e)),{portalClasses:r,appendRoot:t}}}]),f(t,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.debouncedSyncPortalPosition),window.addEventListener("scroll",this.debouncedSyncPortalPosition),this.syncPortalPosition()}},{key:"componentDidUpdate",value:function(){this.syncPortalPosition()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.debouncedSyncPortalPosition),window.removeEventListener("scroll",this.debouncedSyncPortalPosition)}},{key:"positionPortal",value:function(){var e=this.props.domRef.current.style.display;this.props.domRef.current.style.display="none";var t=this.props.btnRef.current,r=(0,i.getOffset)(t),n=(0,i.getOffset)(this.state.appendRoot),a=t.offsetHeight;this.props.domRef.current.style.left="".concat(r.left-n.left,"px"),this.props.domRef.current.style.top="".concat(r.top+a,"px"),this.props.domRef.current.style.display=e}},{key:"resetPortalPosition",value:function(){var e=this.props.domRef.current;"self"===this.state.appendRoot?e.style.top="":this.positionPortal()}},{key:"render",value:function(){var e=(0,l.default)(this.props.className,this.state.portalClasses),t=n.default.createElement("div",{className:e,ref:this.props.domRef},this.props.children);return"self"===this.state.appendRoot?t:(0,a.createPortal)(t,this.state.appendRoot)}}]),t}();Object.defineProperty(p,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:{appendRoot:o.default.oneOfType([o.default.bool,o.default.string]),children:o.default.node.isRequired,domRef:o.default.object.isRequired,btnRef:o.default.object.isRequired,className:o.default.string.isRequired}}),Object.defineProperty(p,"defaultProps",{configurable:!0,enumerable:!0,writable:!0,value:{appendRoot:!1}});var h=p;t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=i(r(1)),a=i(r(0)),o=i(r(3)),l=r(2);function i(e){return e&&e.__esModule?e:{default:e}}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var p=function(e){function t(e){var r,n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this,n=(t.__proto__||Object.getPrototypeOf(t)).call(this,e),r=!n||"object"!==u(n)&&"function"!=typeof n?d(this):n,Object.defineProperty(d(r),"handleChangePage",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=r.props.currentPage,o=r.state.totalPage;null!==n?"next"===n?a+=1:a-=1:a=parseInt(e.target.value,10)-1,a<0&&(a=0),a>o-1&&(a=o-1),t=a+1,null===n&&Number.isNaN(a)&&(a=0,t=""),r.setState({viewPage:t}),r.props.handleChangePage(a)}}),Object.defineProperty(d(r),"handlePageKeyBoard",{configurable:!0,enumerable:!0,writable:!0,value:function(e,t){13!==e.keyCode&&32!==e.keyCode||r.handleChangePage({},t)}}),Object.defineProperty(d(r),"handleChangeValue",{configurable:!0,enumerable:!0,writable:!0,value:function(e){r.props.handleChangeValue(e)}}),Object.defineProperty(d(r),"handleValueKeyboard",{configurable:!0,enumerable:!0,writable:!0,value:function(e,t){13!==e.keyCode&&32!==e.keyCode||r.handleChangeValue(t)}}),r.state={viewPage:r.props.currentPage+1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,n.default.PureComponent),f(t,null,[{key:"getDerivedStateFromProps",value:function(e,r){var n=t.getCategoryFilteredState(e.currentCategory,e.categories,e.icons),a=t.getCategoryFilteredState(e.currentCategory,e.categories,null===e.search?e.icons:e.search),o=t.getActiveIcons(n,a,e.currentSearch),l=o.activeIcons,i=o.activeTitles,u=e.currentPage,c=e.iconsPerPage,s={iconView:t.getCurrentViewIcons(l,c,u),titleView:t.getCurrentViewIcons(i,c,u),totalPage:Math.ceil(l.length/c)};return""!==r.viewPage&&(s.viewPage=e.currentPage+1),s}},{key:"getActiveIcons",value:function(e,t,r){var n=c(e),a=c(t);if(""===r||null===r)return{activeIcons:n,activeTitles:a};var o=[],i=[];return n.forEach(function(e,n){(0,l.fuzzySearch)(r,t[n])&&(o.push(e),i.push(t[n]))}),{activeIcons:o,activeTitles:i}}},{key:"getCategoryFilteredState",value:function(e,t,r){var n=null,a=(0,l.getSourceType)(r);if(Array.isArray(t)){if("object"!==a)throw new l.InvalidSourceException(a,"object")}else if("array"!==a)throw new l.InvalidSourceException(a,"array");return 0!==e&&Array.isArray(t)&&(n=t[e]||null),(0,l.flattenPossiblyCategorizedSource)(r,n)}},{key:"getCurrentViewIcons",value:function(e,t,r){var n=r*t,a=(r+1)*t;return e.slice(n,a)}}]),f(t,[{key:"renderPager",value:function(){var e=this;if(this.state.totalPage<1)return null;var t=this.props.currentPage>0?n.default.createElement("span",{className:"rfipicons__left",role:"button",tabIndex:0,onKeyDown:function(t){return e.handlePageKeyBoard(t,"prev")},onClick:function(t){return e.handleChangePage(t,"prev")}},n.default.createElement("span",{role:"presentation",className:"rfipicons__label","aria-label":"Left"},n.default.createElement("i",{className:"fipicon-angle-left"}))):null,r=this.props.currentPage<this.state.totalPage-1?n.default.createElement("span",{className:"rfipicons__right",role:"button",tabIndex:0,onKeyDown:function(t){return e.handlePageKeyBoard(t,"next")},onClick:function(t){return e.handleChangePage(t,"next")}},n.default.createElement("span",{role:"presentation",className:"rfipicons__label","aria-label":"Right"},n.default.createElement("i",{className:"fipicon-angle-right"}))):null;return n.default.createElement("div",{className:"rfipicons__pager"},n.default.createElement("div",{className:"rfipicons__num"},n.default.createElement("input",{value:this.state.viewPage,onChange:this.handleChangePage,className:"rfipicons__cp",type:"tel",min:1}),n.default.createElement("span",{className:"rfipicons__sp"},"/"),n.default.createElement("span",{className:"rfipicons__tp"},this.state.totalPage)),n.default.createElement("div",{className:"rfipicons__arrow"},t,r))}},{key:"renderIconView",value:function(){var e=this;return this.state.totalPage>0?this.state.iconView.map(function(t,r){var a=(0,o.default)("rfipicons__icon",{"rfipicons__icon--selected":e.props.value===t||Array.isArray(e.props.value)&&e.props.value.includes(t)});return n.default.createElement("span",{className:a,key:t,title:e.state.titleView[r]},n.default.createElement("span",{className:"rfipicons__ibox",tabIndex:0,role:"button",onClick:function(){return e.handleChangeValue(t)},onKeyDown:function(r){return e.handleValueKeyboard(r,t)}},e.props.renderIcon(t)))}):n.default.createElement("span",{className:"rfipicons__icon--error"},n.default.createElement("span",{className:"rfipicons__ibox--error"},this.props.noIconPlaceholder))}},{key:"render",value:function(){return n.default.createElement("div",{className:"rfipicons"},this.renderPager(),n.default.createElement("div",{className:"rfipicons__selector"},this.renderIconView()))}}]),t}();Object.defineProperty(p,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:{categories:a.default.arrayOf(a.default.string),currentCategory:a.default.number,isMulti:a.default.bool.isRequired,icons:a.default.oneOfType([a.default.arrayOf(a.default.string),a.default.arrayOf(a.default.number),a.default.objectOf(a.default.oneOfType([a.default.arrayOf(a.default.number),a.default.arrayOf(a.default.string)]))]).isRequired,search:a.default.oneOfType([a.default.objectOf(a.default.arrayOf(a.default.string)),a.default.arrayOf(a.default.string)]),value:a.default.oneOfType([a.default.number,a.default.string,a.default.arrayOf(a.default.oneOfType([a.default.number,a.default.string]))]).isRequired,currentSearch:a.default.string.isRequired,handleChangeValue:a.default.func.isRequired,currentPage:a.default.number.isRequired,iconsPerPage:a.default.number.isRequired,handleChangePage:a.default.func.isRequired,renderIcon:a.default.func.isRequired,noIconPlaceholder:a.default.string.isRequired}}),Object.defineProperty(p,"defaultProps",{configurable:!0,enumerable:!0,writable:!0,value:{categories:null,currentCategory:null,search:null}});var h=p;t.default=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(1)),a=o(r(0));function o(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return n.default.createElement("div",{className:"rfipsearch"},n.default.createElement("input",{type:"text",className:"rfipsearch__input",value:e.value,onChange:e.handleSearch,placeholder:e.placeholder}))};l.propTypes={handleSearch:a.default.func.isRequired,value:a.default.string.isRequired,placeholder:a.default.string.isRequired};var i=l;t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(1)),a=o(r(0));function o(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}var r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,n.default.PureComponent),r=t,(a=[{key:"render",value:function(){return n.default.createElement("div",{className:"rfipcategory"},n.default.createElement("select",{className:"rfipcategory__select",onChange:this.props.handleCategory,value:this.props.value},this.props.categories.map(function(e,t){return n.default.createElement("option",{className:"rfipcategory__select__option",key:e,value:t},e)})),n.default.createElement("i",{className:"fipicon-angle-down",role:"presentation","aria-label":"Open"}))}}])&&i(r.prototype,a),t}();Object.defineProperty(u,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:{handleCategory:a.default.func.isRequired,value:a.default.number.isRequired,categories:a.default.arrayOf(a.default.string).isRequired}});var c=u;t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=c(r(1)),a=c(r(0)),o=c(r(10)),l=c(r(9)),i=c(r(8)),u=r(2);function c(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t,r){return t&&f(e.prototype,t),r&&f(e,r),e}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var h=function(e){function t(e){var r,n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this,n=(t.__proto__||Object.getPrototypeOf(t)).call(this,e),r=!n||"object"!==s(n)&&"function"!=typeof n?p(this):n,Object.defineProperty(p(r),"handleCategory",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=parseInt(e.target.value,10);Number.isNaN(t)&&(t=0),r.props.handleChangeCategory(t),r.props.handleChangePage(0)}}),Object.defineProperty(p(r),"handleSearch",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=e.target.value;r.props.handleChangeSearch(t)}}),r.state={},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,n.default.PureComponent),d(t,null,[{key:"getDerivedStateFromProps",value:function(e){var t=(0,u.getPossibleCategories)(e.icons);return null!==t&&(t=[e.allCatPlaceholder].concat(function(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}(t))),{categories:t,searchString:e.currentSearch}}}]),d(t,[{key:"render",value:function(){return n.default.createElement("div",{className:"rfipdropdown__selector"},this.props.showSearch?n.default.createElement(l.default,{handleSearch:this.handleSearch,value:this.state.searchString,placeholder:this.props.searchPlaceholder}):null,this.props.showCategory&&this.state.categories&&this.state.categories.length?n.default.createElement(o.default,{handleCategory:this.handleCategory,value:this.props.currentCategory,categories:this.state.categories}):null,n.default.createElement(i.default,{categories:this.state.categories,currentCategory:this.props.currentCategory,isMulti:this.props.isMulti,icons:this.props.icons,search:this.props.search,value:this.props.value,currentSearch:this.props.currentSearch,handleChangeValue:this.props.handleChangeValue,currentPage:this.props.currentPage,iconsPerPage:this.props.iconsPerPage,handleChangePage:this.props.handleChangePage,renderIcon:this.props.renderIcon,noIconPlaceholder:this.props.noIconPlaceholder}))}}]),t}();Object.defineProperty(h,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:{isMulti:a.default.bool.isRequired,value:a.default.oneOfType([a.default.number,a.default.string,a.default.arrayOf(a.default.any)]).isRequired,currentCategory:a.default.number.isRequired,currentPage:a.default.number.isRequired,currentSearch:a.default.string.isRequired,icons:a.default.oneOfType([a.default.arrayOf(a.default.number),a.default.arrayOf(a.default.string),a.default.objectOf(a.default.oneOfType([a.default.arrayOf(a.default.number),a.default.arrayOf(a.default.string)]))]).isRequired,search:a.default.oneOfType([a.default.object,a.default.arrayOf(a.default.string)]),showCategory:a.default.bool.isRequired,showSearch:a.default.bool.isRequired,iconsPerPage:a.default.number.isRequired,allCatPlaceholder:a.default.string.isRequired,searchPlaceholder:a.default.string.isRequired,noIconPlaceholder:a.default.string.isRequired,renderIcon:a.default.func.isRequired,handleChangeValue:a.default.func.isRequired,handleChangeCategory:a.default.func.isRequired,handleChangePage:a.default.func.isRequired,handleChangeSearch:a.default.func.isRequired}}),Object.defineProperty(h,"defaultProps",{configurable:!0,enumerable:!0,writable:!0,value:{search:null}});var y=h;t.default=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=l(r(1)),a=l(r(0)),o=l(r(3));function l(e){return e&&e.__esModule?e:{default:e}}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?f(e):t}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var d=function(e){function t(){var e,r,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,l=new Array(o),i=0;i<o;i++)l[i]=arguments[i];return s(a,(r=a=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),Object.defineProperty(f(a),"handleClick",{configurable:!0,enumerable:!0,writable:!0,value:function(){a.props.onClick()}}),Object.defineProperty(f(a),"handleKeyDown",{configurable:!0,enumerable:!0,writable:!0,value:function(e){32!==e.keyCode&&13!==e.keyCode||a.props.onClick()}}),Object.defineProperty(f(a),"handleDelete",{configurable:!0,enumerable:!0,writable:!0,value:function(e,t){e.stopPropagation(),a.props.handleDeleteValue(t)}}),Object.defineProperty(f(a),"handleDeleteKeyboard",{configurable:!0,enumerable:!0,writable:!0,value:function(e,t){32!==e.keyCode&&13!==e.keyCode||a.props.handleDeleteValue(t)}}),Object.defineProperty(f(a),"renderEmptyIcon",{configurable:!0,enumerable:!0,writable:!0,value:function(){return n.default.createElement("span",{className:"rfipbtn__icon--empty"},a.props.noSelectedPlaceholder)}}),r))}var r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,n.default.PureComponent),r=t,(a=[{key:"renderIcon",value:function(e){var t=this;return""===e||null===e||void 0===e?this.renderEmptyIcon():n.default.createElement("span",{className:"rfipbtn__icon",key:e},n.default.createElement("span",{className:"rfipbtn__elm"},this.props.renderIcon(e)),n.default.createElement("span",{className:"rfipbtn__del",onClick:function(r){return t.handleDelete(r,e)},onKeyDown:function(r){return t.handleDeleteKeyboard(r,e)},tabIndex:0,role:"button"},"×"))}},{key:"renderCurrentIcons",value:function(){var e=this;return this.props.isMulti?this.props.value.length?this.props.value.map(function(t){return e.renderIcon(t)}):this.renderEmptyIcon():this.renderIcon(this.props.value)}},{key:"render",value:function(){var e={onClick:this.handleClick,onKeyDown:this.handleKeyDown,onFocus:this.handleFocus,onBlur:this.handleBlur,tabIndex:0},t=(0,o.default)("rfipbtn__button","rfipbtn__button--".concat(this.props.isOpen?"open":"close")),r=(0,o.default)(this.props.className);return n.default.createElement("div",u({className:r,ref:this.props.domRef},e),n.default.createElement("div",{className:"rfipbtn__current"},this.renderCurrentIcons()),n.default.createElement("div",{className:t},n.default.createElement("i",{className:"fipicon-angle-down",role:"presentation","aria-label":"Open"})))}}])&&c(r.prototype,a),t}();Object.defineProperty(d,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:{className:a.default.string.isRequired,isOpen:a.default.bool.isRequired,onClick:a.default.func.isRequired,domRef:a.default.object.isRequired,isMulti:a.default.bool.isRequired,value:a.default.oneOfType([a.default.number,a.default.string,a.default.arrayOf(a.default.oneOfType([a.default.number,a.default.string]))]).isRequired,renderIcon:a.default.func.isRequired,handleDeleteValue:a.default.func.isRequired,noSelectedPlaceholder:a.default.string.isRequired}});var p=d;t.default=p},function(e,t){e.exports=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=f(r(1)),a=f(r(0)),o=f(r(3)),l=r(13),i=f(r(12)),u=f(r(11)),c=f(r(7)),s=r(2);function f(e){return e&&e.__esModule?e:{default:e}}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function y(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function b(e,t,r){return t&&y(e.prototype,t),r&&y(e,r),e}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var m=[],v="",P=function(e){function t(e){var r,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this,a=(t.__proto__||Object.getPrototypeOf(t)).call(this,e),r=!a||"object"!==d(a)&&"function"!=typeof a?g(this):a,Object.defineProperty(g(r),"handleOuterClick",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=e.target;r.isClickWithin(t)||r.closeDropdown()}}),Object.defineProperty(g(r),"handleEscapeKeyboard",{configurable:!0,enumerable:!0,writable:!0,value:function(e){27===e.keyCode&&r.closeDropdown()}}),Object.defineProperty(g(r),"isClickWithin",{configurable:!0,enumerable:!0,writable:!0,value:function(e){return r.fipButtonRef.current.contains(e)||r.fipDropDownRef.current&&r.fipDropDownRef.current.contains(e)}}),Object.defineProperty(g(r),"handleToggle",{configurable:!0,enumerable:!0,writable:!0,value:function(){r.setState(function(e){return r.handleDropDown(!e.isOpen,!1)})}}),Object.defineProperty(g(r),"closeDropdown",{configurable:!0,enumerable:!0,writable:!0,value:function(){r.handleDropDown(!1)}}),Object.defineProperty(g(r),"handleDropDown",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],a={isOpen:e};return a.elemClass=t.getDerivedClassName("rfip",r.props.theme,r.props.isMulti,e),a.btnClass=t.getDerivedClassName("rfipbtn",r.props.theme,r.props.isMulti,e),a.ddClass=t.getDerivedClassName("rfipdropdown",r.props.theme,r.props.isMulti,e),n&&r.setState(a),a}}),Object.defineProperty(g(r),"handleChangeValue",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t;r.props.isMulti?(t=p(r.state.value)).includes(e)?(t=t.filter(function(t){return t!==e})).length||(t=m):t.push(e):t=e===r.state.value?v:e,r.setState({value:t,isOpen:!r.props.closeOnSelect}),r.props.onChange(t)}}),Object.defineProperty(g(r),"handleDeleteValue",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var n;n=r.props.isMulti?r.state.value.filter(function(t){return t!==e}):t.getDerivedValue(n,r.props.isMulti),r.setState({value:n}),r.props.onChange(n)}}),Object.defineProperty(g(r),"handleChangePage",{configurable:!0,enumerable:!0,writable:!0,value:function(e){r.setState({currentPage:e})}}),Object.defineProperty(g(r),"handleChangeCategory",{configurable:!0,enumerable:!0,writable:!0,value:function(e){r.setState({currentCategory:e,currentPage:0})}}),Object.defineProperty(g(r),"handleChangeSearch",{configurable:!0,enumerable:!0,writable:!0,value:function(e){r.setState({currentSearch:e,currentPage:0})}}),Object.defineProperty(g(r),"resetPortalStyle",{configurable:!0,enumerable:!0,writable:!0,value:function(e){["maxHeight","paddingTop","paddingBottom"].forEach(function(t){e.style[t]=null})}}),Object.defineProperty(g(r),"handlePortalEnter",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=e.childNodes[0];r.resetPortalStyle(t);var n=getComputedStyle(t);r.fipPortalComputedStyle={height:n.height,paddingTop:n.paddingTop,paddingBottom:n.paddingBottom},["maxHeight","paddingTop","paddingBottom"].forEach(function(e){t.style[e]="0px"})}}),Object.defineProperty(g(r),"handlePortalEntering",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=e.childNodes[0];t.style.maxHeight=r.fipPortalComputedStyle.height,t.style.paddingTop=r.fipPortalComputedStyle.paddingTop,t.style.paddingBottom=r.fipPortalComputedStyle.paddingBottom}}),Object.defineProperty(g(r),"handlePortalEntered",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=e.childNodes[0];r.resetPortalStyle(t),r.props.showSearch&&void 0===window.orientation&&-1===navigator.userAgent.indexOf("IEMobile")&&t.querySelector(".rfipsearch__input").focus()}}),Object.defineProperty(g(r),"handlePortalExit",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=e.childNodes[0];r.resetPortalStyle(t);var n=getComputedStyle(t).height;t.style.maxHeight=n}}),Object.defineProperty(g(r),"handlePortalExiting",{configurable:!0,enumerable:!0,writable:!0,value:function(e){var t=e.childNodes[0];t.style.maxHeight="0px",t.style.paddingTop="0px",t.style.paddingBottom="0px"}}),Object.defineProperty(g(r),"renderIcon",{configurable:!0,enumerable:!0,writable:!0,value:function(e){if("function"==typeof r.props.renderFunc)return r.props.renderFunc(e);if("class"===r.props.renderUsing)return n.default.createElement("i",{className:e});var t=h({},r.props.renderUsing,r.props.convertHex?(0,s.convertToHex)(e):e);return n.default.createElement("i",t)}}),r.fipButtonRef=n.default.createRef(),r.fipDropDownRef=n.default.createRef(),r.state={currentCategory:0,currentPage:0,isOpen:!1,currentSearch:""},r.fipPortalComputedStyle=null,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,n.default.PureComponent),b(t,null,[{key:"getDerivedStateFromProps",value:function(e,r){var n={};return n.elemClass=t.getDerivedClassName("rfip",e.theme,e.isMulti,r.isOpen),n.btnClass=t.getDerivedClassName("rfipbtn",e.theme,e.isMulti,r.isOpen),n.ddClass=t.getDerivedClassName("rfipdropdown",e.theme,e.isMulti,r.isOpen),n.value=t.getDerivedValue(e.value,e.isMulti),e.showCategory||(n.currentCategory=0,n.currentPage=0),e.showSearch||(n.currentSearch="",n.currentPage=0),n}},{key:"getDerivedClassName",value:function(e,t,r,n){return(0,o.default)(e,"".concat(e,"--").concat(t),h({},"".concat(e,"--multi"),r),"".concat(e,"--").concat(n?"open":"close"))}},{key:"getDerivedValue",value:function(e,t){var r=e;return t?r=Array.isArray(e)?p(e):m:"number"!=typeof e&&"string"!=typeof e&&(r=v),r}}]),b(t,[{key:"componentDidMount",value:function(){var e=this;["click"].forEach(function(t){document.addEventListener(t,e.handleOuterClick,!1)}),document.addEventListener("keydown",this.handleEscapeKeyboard,!1),this.props.onChange(this.state.value)}},{key:"componentWillUnmount",value:function(){var e=this;["click"].forEach(function(t){document.removeEventListener(t,e.handleOuterClick,!1)}),document.removeEventListener("keydown",this.handleEscapeKeyboard,!1)}},{key:"render",value:function(){var e={currentCategory:this.state.currentCategory,currentPage:this.state.currentPage,currentSearch:this.state.currentSearch,value:this.state.value,isMulti:this.props.isMulti,icons:this.props.icons,search:this.props.search,showCategory:this.props.showCategory,showSearch:this.props.showSearch,iconsPerPage:this.props.iconsPerPage,allCatPlaceholder:this.props.allCatPlaceholder,searchPlaceholder:this.props.searchPlaceholder,noIconPlaceholder:this.props.noIconPlaceholder,renderIcon:this.renderIcon,handleChangeValue:this.handleChangeValue,handleChangeCategory:this.handleChangeCategory,handleChangePage:this.handleChangePage,handleChangeSearch:this.handleChangeSearch};return n.default.createElement("div",{className:this.state.elemClass,ref:this.fipRef},n.default.createElement(i.default,{className:this.state.btnClass,isOpen:this.state.isOpen,onClick:this.handleToggle,domRef:this.fipButtonRef,isMulti:this.props.isMulti,value:this.state.value,renderIcon:this.renderIcon,handleDeleteValue:this.handleDeleteValue,noSelectedPlaceholder:this.props.noSelectedPlaceholder}),n.default.createElement(l.CSSTransition,{classNames:"fipappear",timeout:300,in:this.state.isOpen,unmountOnExit:!0,onEnter:this.handlePortalEnter,onEntering:this.handlePortalEntering,onEntered:this.handlePortalEntered,onExit:this.handlePortalExit,onExiting:this.handlePortalExiting},n.default.createElement(c.default,{appendRoot:this.props.appendTo,domRef:this.fipDropDownRef,btnRef:this.fipButtonRef,className:this.state.ddClass},n.default.createElement(u.default,e))))}}]),t}();Object.defineProperty(P,"propTypes",{configurable:!0,enumerable:!0,writable:!0,value:{icons:a.default.oneOfType([a.default.arrayOf(a.default.string),a.default.arrayOf(a.default.number),a.default.objectOf(a.default.oneOfType([a.default.arrayOf(a.default.number),a.default.arrayOf(a.default.string)]))]).isRequired,search:a.default.oneOfType([a.default.objectOf(a.default.arrayOf(a.default.string)),a.default.arrayOf(a.default.string)]),iconsPerPage:a.default.number,theme:a.default.string,onChange:a.default.func.isRequired,showCategory:a.default.bool,showSearch:a.default.bool,value:a.default.oneOfType([a.default.arrayOf(a.default.string),a.default.arrayOf(a.default.number),a.default.number,a.default.string]),isMulti:a.default.bool,renderUsing:a.default.string,convertHex:a.default.bool,renderFunc:a.default.func,appendTo:a.default.oneOfType([a.default.bool,a.default.string]),allCatPlaceholder:a.default.string,searchPlaceholder:a.default.string,noIconPlaceholder:a.default.string,noSelectedPlaceholder:a.default.string,closeOnSelect:a.default.bool}}),Object.defineProperty(P,"defaultProps",{configurable:!0,enumerable:!0,writable:!0,value:{search:null,iconsPerPage:20,theme:"default",showCategory:!0,showSearch:!0,value:null,isMulti:!1,renderUsing:"class",convertHex:!0,renderFunc:null,appendTo:!1,allCatPlaceholder:"Show from all",searchPlaceholder:"Search Icons",noIconPlaceholder:"No icons found",noSelectedPlaceholder:"Select icon",closeOnSelect:!1}}),Object.defineProperty(P,"displayName",{configurable:!0,enumerable:!0,writable:!0,value:"FontIconPicker"});var O=P;t.default=O},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=((n=r(14))&&n.__esModule?n:{default:n}).default;t.default=a}]).default});

},{"classnames":60,"prop-types":198,"react":216,"react-dom":202,"react-transition-group":211}],60:[function(require,module,exports){
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],61:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = addClass;

var _hasClass = _interopRequireDefault(require("./hasClass"));

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
}

module.exports = exports["default"];
},{"./hasClass":62,"@babel/runtime/helpers/interopRequireDefault":58}],62:[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.default = hasClass;

function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

module.exports = exports["default"];
},{}],63:[function(require,module,exports){
'use strict';

function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}

module.exports = function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
};
},{}],64:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":119,"./_root":154}],65:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":125,"./_hashDelete":126,"./_hashGet":127,"./_hashHas":128,"./_hashSet":129}],66:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":136,"./_listCacheDelete":137,"./_listCacheGet":138,"./_listCacheHas":139,"./_listCacheSet":140}],67:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":119,"./_root":154}],68:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":141,"./_mapCacheDelete":142,"./_mapCacheGet":143,"./_mapCacheHas":144,"./_mapCacheSet":145}],69:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":119,"./_root":154}],70:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":119,"./_root":154}],71:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":68,"./_setCacheAdd":155,"./_setCacheHas":156}],72:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":66,"./_stackClear":158,"./_stackDelete":159,"./_stackGet":160,"./_stackHas":161,"./_stackSet":162}],73:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":154}],74:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":154}],75:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":119,"./_root":154}],76:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],77:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":103,"./_isIndex":130,"./isArguments":171,"./isArray":172,"./isBuffer":174,"./isTypedArray":180}],78:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],79:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],80:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],81:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":166}],82:[function(require,module,exports){
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./_baseForOwn":85,"./_createBaseEach":110}],83:[function(require,module,exports){
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

},{"./_baseEach":82}],84:[function(require,module,exports){
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./_createBaseFor":111}],85:[function(require,module,exports){
var baseFor = require('./_baseFor'),
    keys = require('./keys');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"./_baseFor":84,"./keys":181}],86:[function(require,module,exports){
var castPath = require('./_castPath'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_castPath":108,"./_toKey":164}],87:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":79,"./isArray":172}],88:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":73,"./_getRawTag":120,"./_objectToString":152}],89:[function(require,module,exports){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

},{}],90:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":88,"./isObjectLike":178}],91:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":92,"./isObjectLike":178}],92:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":72,"./_equalArrays":112,"./_equalByTag":113,"./_equalObjects":114,"./_getTag":122,"./isArray":172,"./isBuffer":174,"./isTypedArray":180}],93:[function(require,module,exports){
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./_Stack":72,"./_baseIsEqual":91}],94:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":133,"./_toSource":165,"./isFunction":175,"./isObject":177}],95:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":88,"./isLength":176,"./isObjectLike":178}],96:[function(require,module,exports){
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

},{"./_baseMatches":99,"./_baseMatchesProperty":100,"./identity":170,"./isArray":172,"./property":184}],97:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":134,"./_nativeKeys":150}],98:[function(require,module,exports){
var baseEach = require('./_baseEach'),
    isArrayLike = require('./isArrayLike');

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

},{"./_baseEach":82,"./isArrayLike":173}],99:[function(require,module,exports){
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData'),
    matchesStrictComparable = require('./_matchesStrictComparable');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

},{"./_baseIsMatch":93,"./_getMatchData":118,"./_matchesStrictComparable":147}],100:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

},{"./_baseIsEqual":91,"./_isKey":131,"./_isStrictComparable":135,"./_matchesStrictComparable":147,"./_toKey":164,"./get":168,"./hasIn":169}],101:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],102:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

},{"./_baseGet":86}],103:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],104:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":73,"./_arrayMap":78,"./isArray":172,"./isSymbol":179}],105:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],106:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],107:[function(require,module,exports){
var identity = require('./identity');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

},{"./identity":170}],108:[function(require,module,exports){
var isArray = require('./isArray'),
    isKey = require('./_isKey'),
    stringToPath = require('./_stringToPath'),
    toString = require('./toString');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

},{"./_isKey":131,"./_stringToPath":163,"./isArray":172,"./toString":191}],109:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":154}],110:[function(require,module,exports){
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./isArrayLike":173}],111:[function(require,module,exports){
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{}],112:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":71,"./_arraySome":80,"./_cacheHas":106}],113:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":73,"./_Uint8Array":74,"./_equalArrays":112,"./_mapToArray":146,"./_setToArray":157,"./eq":166}],114:[function(require,module,exports){
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./_getAllKeys":116}],115:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],116:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":87,"./_getSymbols":121,"./keys":181}],117:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":132}],118:[function(require,module,exports){
var isStrictComparable = require('./_isStrictComparable'),
    keys = require('./keys');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;

},{"./_isStrictComparable":135,"./keys":181}],119:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":94,"./_getValue":123}],120:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":73}],121:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":76,"./stubArray":185}],122:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":64,"./_Map":67,"./_Promise":69,"./_Set":70,"./_WeakMap":75,"./_baseGetTag":88,"./_toSource":165}],123:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],124:[function(require,module,exports){
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isLength = require('./isLength'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;

},{"./_castPath":108,"./_isIndex":130,"./_toKey":164,"./isArguments":171,"./isArray":172,"./isLength":176}],125:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":149}],126:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],127:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":149}],128:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":149}],129:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":149}],130:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],131:[function(require,module,exports){
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

},{"./isArray":172,"./isSymbol":179}],132:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],133:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":109}],134:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],135:[function(require,module,exports){
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"./isObject":177}],136:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],137:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":81}],138:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":81}],139:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":81}],140:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":81}],141:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":65,"./_ListCache":66,"./_Map":67}],142:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":117}],143:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":117}],144:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":117}],145:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":117}],146:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],147:[function(require,module,exports){
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

},{}],148:[function(require,module,exports){
var memoize = require('./memoize');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

},{"./memoize":183}],149:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":119}],150:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":153}],151:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":115}],152:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],153:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],154:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":115}],155:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],156:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],157:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],158:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":66}],159:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],160:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],161:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],162:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":66,"./_Map":67,"./_MapCache":68}],163:[function(require,module,exports){
var memoizeCapped = require('./_memoizeCapped');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

},{"./_memoizeCapped":148}],164:[function(require,module,exports){
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

},{"./isSymbol":179}],165:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],166:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],167:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    baseFilter = require('./_baseFilter'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;

},{"./_arrayFilter":76,"./_baseFilter":83,"./_baseIteratee":96,"./isArray":172}],168:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{"./_baseGet":86}],169:[function(require,module,exports){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":89,"./_hasPath":124}],170:[function(require,module,exports){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],171:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":90,"./isObjectLike":178}],172:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],173:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":175,"./isLength":176}],174:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":154,"./stubFalse":186}],175:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":88,"./isObject":177}],176:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],177:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],178:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],179:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":88,"./isObjectLike":178}],180:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":95,"./_baseUnary":105,"./_nodeUtil":151}],181:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":77,"./_baseKeys":97,"./isArrayLike":173}],182:[function(require,module,exports){
var arrayMap = require('./_arrayMap'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    isArray = require('./isArray');

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

},{"./_arrayMap":78,"./_baseIteratee":96,"./_baseMap":98,"./isArray":172}],183:[function(require,module,exports){
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":68}],184:[function(require,module,exports){
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

},{"./_baseProperty":101,"./_basePropertyDeep":102,"./_isKey":131,"./_toKey":164}],185:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],186:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],187:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    castFunction = require('./_castFunction'),
    toInteger = require('./toInteger');

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */
function times(n, iteratee) {
  n = toInteger(n);
  if (n < 1 || n > MAX_SAFE_INTEGER) {
    return [];
  }
  var index = MAX_ARRAY_LENGTH,
      length = nativeMin(n, MAX_ARRAY_LENGTH);

  iteratee = castFunction(iteratee);
  n -= MAX_ARRAY_LENGTH;

  var result = baseTimes(length, iteratee);
  while (++index < n) {
    iteratee(index);
  }
  return result;
}

module.exports = times;

},{"./_baseTimes":103,"./_castFunction":107,"./toInteger":189}],188:[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":190}],189:[function(require,module,exports){
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

},{"./toFinite":188}],190:[function(require,module,exports){
var isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isObject":177,"./isSymbol":179}],191:[function(require,module,exports){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":104}],192:[function(require,module,exports){
(function (process){
module.exports = function memize( fn, options ) {
	var size = 0,
		maxSize, head, tail;

	if ( options && options.maxSize ) {
		maxSize = options.maxSize;
	}

	function memoized( /* ...args */ ) {
		var node = head,
			len = arguments.length,
			args, i;

		searchCache: while ( node ) {
			// Perform a shallow equality test to confirm that whether the node
			// under test is a candidate for the arguments passed. Two arrays
			// are shallowly equal if their length matches and each entry is
			// strictly equal between the two sets. Avoid abstracting to a
			// function which could incur an arguments leaking deoptimization.

			// Check whether node arguments match arguments length
			if ( node.args.length !== arguments.length ) {
				node = node.next;
				continue;
			}

			// Check whether node arguments match arguments values
			for ( i = 0; i < len; i++ ) {
				if ( node.args[ i ] !== arguments[ i ] ) {
					node = node.next;
					continue searchCache;
				}
			}

			// At this point we can assume we've found a match

			// Surface matched node to head if not already
			if ( node !== head ) {
				// As tail, shift to previous. Must only shift if not also
				// head, since if both head and tail, there is no previous.
				if ( node === tail ) {
					tail = node.prev;
				}

				// Adjust siblings to point to each other. If node was tail,
				// this also handles new tail's empty `next` assignment.
				node.prev.next = node.next;
				if ( node.next ) {
					node.next.prev = node.prev;
				}

				node.next = head;
				node.prev = null;
				head.prev = node;
				head = node;
			}

			// Return immediately
			return node.val;
		}

		// No cached value found. Continue to insertion phase:

		// Create a copy of arguments (avoid leaking deoptimization)
		args = new Array( len );
		for ( i = 0; i < len; i++ ) {
			args[ i ] = arguments[ i ];
		}

		node = {
			args: args,

			// Generate the result from original function
			val: fn.apply( null, args )
		};

		// Don't need to check whether node is already head, since it would
		// have been returned above already if it was

		// Shift existing head down list
		if ( head ) {
			head.prev = node;
			node.next = head;
		} else {
			// If no head, follows that there's no tail (at initial or reset)
			tail = node;
		}

		// Trim tail if we're reached max size and are pending cache insertion
		if ( size === maxSize ) {
			tail = tail.prev;
			tail.next = null;
		} else {
			size++;
		}

		head = node;

		return node.val;
	}

	memoized.clear = function() {
		head = null;
		tail = null;
		size = 0;
	};

	if ( process.env.NODE_ENV === 'test' ) {
		// Cache is not exposed in the public API, but used in tests to ensure
		// expected list progression
		memoized.getCache = function() {
			return [ head, tail, size ];
		};
	}

	return memoized;
};

}).call(this,require('_process'))
},{"_process":194}],193:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],194:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],195:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;

}).call(this,require('_process'))
},{"./lib/ReactPropTypesSecret":199,"_process":194}],196:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./lib/ReactPropTypesSecret":199}],197:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactIs = require('react-is');
var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

}).call(this,require('_process'))
},{"./checkPropTypes":195,"./lib/ReactPropTypesSecret":199,"_process":194,"object-assign":193,"react-is":205}],198:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = require('react-is');

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}

}).call(this,require('_process'))
},{"./factoryWithThrowingShims":196,"./factoryWithTypeCheckers":197,"_process":194,"react-is":205}],199:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],200:[function(require,module,exports){
(function (process){
/** @license React v16.12.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var React = require('react');
var _assign = require('object-assign');
var Scheduler = require('scheduler');
var checkPropTypes = require('prop-types/checkPropTypes');
var tracing = require('scheduler/tracing');

// Do not require this module directly! Use normal `invariant` calls with
// template literal strings. The messages will be replaced with error codes
// during build.

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

if (!React) {
  {
    throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
  }
}

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;
/**
 * Injectable mapping from names to event plugin modules.
 */

var namesToPlugins = {};
/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */

function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }

  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);

    if (!(pluginIndex > -1)) {
      {
        throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
      }
    }

    if (plugins[pluginIndex]) {
      continue;
    }

    if (!pluginModule.extractEvents) {
      {
        throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
      }
    }

    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;

    for (var eventName in publishedEvents) {
      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
        {
          throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }
}
/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */


function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
    {
      throw Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
    }
  }

  eventNameDispatchConfigs[eventName] = dispatchConfig;
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }

    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }

  return false;
}
/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */


function publishRegistrationName(registrationName, pluginModule, eventName) {
  if (!!registrationNameModules[registrationName]) {
    {
      throw Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
    }
  }

  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}
/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */


var plugins = [];
/**
 * Mapping from event name to dispatch config
 */

var eventNameDispatchConfigs = {};
/**
 * Mapping from registration name to plugin module
 */

var registrationNameModules = {};
/**
 * Mapping from registration name to event name
 */

var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */

function injectEventPluginOrder(injectedEventPluginOrder) {
  if (!!eventPluginOrder) {
    {
      throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
    }
  } // Clone the ordering so it cannot be dynamically mutated.


  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}
/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */

function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;

  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }

    var pluginModule = injectedNamesToPlugins[pluginName];

    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      if (!!namesToPlugins[pluginName]) {
        {
          throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
        }
      }

      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }

  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        }
      }

      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.

      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }

    if (condition) {
      return;
    }

    if (typeof console !== 'undefined') {
      var argsWithFormat = args.map(function (item) {
        return '' + item;
      });
      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
      // breaks IE9: https://github.com/facebook/react/issues/13610

      Function.prototype.apply.call(console.error, console, argsWithFormat);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;
function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;

  {
    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
  }
}
var validateEventDispatches;

{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}
/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */


function executeDispatch(event, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}
/**
 * Standard/simple iteration through an event's collected dispatches.
 */

function executeDispatchesInOrder(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;

  {
    validateEventDispatches(event);
  }

  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      } // Listeners and Instances are two parallel arrays that are always in sync.


      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, dispatchListeners, dispatchInstances);
  }

  event._dispatchListeners = null;
  event._dispatchInstances = null;
}
/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */



/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  if (!(next != null)) {
    {
      throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
    }
  }

  if (current == null) {
    return next;
  } // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).


  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }

    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */

var eventQueue = null;
/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */

var executeDispatchesAndRelease = function (event) {
  if (event) {
    executeDispatchesInOrder(event);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e);
};

function runEventsInBatch(events) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  } // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.


  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

  if (!!eventQueue) {
    {
      throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
    }
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */


var injection = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */

function getListener(inst, registrationName) {
  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon

  var stateNode = inst.stateNode;

  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (!props) {
    // Work in progress.
    return null;
  }

  listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (!(!listener || typeof listener === 'function')) {
    {
      throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
    }
  }

  return listener;
}
/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */

function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = null;

  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];

    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }

  return events;
}

function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  runEventsInBatch(events);
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
  ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  };
}

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?


var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}
function initializeLazyComponentType(lazyComponent) {
  if (lazyComponent._status === Uninitialized) {
    lazyComponent._status = Pending;
    var ctor = lazyComponent._ctor;
    var thenable = ctor();
    lazyComponent._result = thenable;
    thenable.then(function (moduleObject) {
      if (lazyComponent._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
          }
        }

        lazyComponent._status = Resolved;
        lazyComponent._result = defaultExport;
      }
    }, function (error) {
      if (lazyComponent._status === Pending) {
        lazyComponent._status = Rejected;
        lazyComponent._result = error;
      }
    });
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';

    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;

      if (owner) {
        ownerName = getComponentName(owner.type);
      }

      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;

  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);

  return info;
}
var current = null;
var phase = null;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}
function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }

  return '';
}
function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    phase = null;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    phase = null;
  }
}
function setCurrentPhase(lifeCyclePhase) {
  {
    phase = lifeCyclePhase;
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

function endsWith(subject, search) {
  var length = subject.length;
  return subject.substring(length - search.length, length) === search;
}

var PLUGIN_EVENT_SYSTEM = 1;
var RESPONDER_EVENT_SYSTEM = 1 << 1;
var IS_PASSIVE = 1 << 2;
var IS_ACTIVE = 1 << 3;
var PASSIVE_NOT_SUPPORTED = 1 << 4;
var IS_REPLAYED = 1 << 5;

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (!(typeof restoreImpl === 'function')) {
    {
      throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var enableUserTimingAPI = true; // Helps identify side effects in render-phase lifecycle hooks and setState
// reducers by double invoking them in Strict Mode.

var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

var warnAboutDeprecatedLifecycles = true; // Gather advanced timing metrics for Profiler subtrees.

var enableProfilerTimer = true; // Trace which interactions trigger each commit.

var enableSchedulerTracing = true; // SSR experiments

var enableSuspenseServerRenderer = false;
var enableSelectiveHydration = false; // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

var disableJavaScriptURLs = false; // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

var disableInputAttributeSyncing = false; // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

var exposeConcurrentModeAPIs = false;
var warnAboutShorthandPropertyCollision = false; // Experimental React Flare event system and event components support.

var enableFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.

var enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

 // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version

var warnAboutUnmockedScheduler = false; // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

var flushSuspenseFallbacksInTests = true; // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

var enableSuspenseCallback = false; // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

var warnAboutDefaultPropsOnFunctionComponents = false;
var warnAboutStringRefs = false;
var disableLegacyContext = false;
var disableSchedulerTimeoutBasedOnReactExpirationTime = false;
var enableTrustedTypesIntegration = false; // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var discreteUpdatesImpl = function (fn, a, b, c) {
  return fn(a, b, c);
};

var flushDiscreteUpdatesImpl = function () {};

var batchedEventUpdatesImpl = batchedUpdatesImpl;
var isInsideEventHandler = false;
var isBatchingEventUpdates = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    flushDiscreteUpdatesImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, bookkeeping) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
}
function batchedEventUpdates(fn, a, b) {
  if (isBatchingEventUpdates) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isBatchingEventUpdates = true;

  try {
    return batchedEventUpdatesImpl(fn, a, b);
  } finally {
    isBatchingEventUpdates = false;
    finishEventHandler();
  }
} // This is for the React Flare event system

function executeUserEventHandler(fn, value) {
  var previouslyInEventHandler = isInsideEventHandler;

  try {
    isInsideEventHandler = true;
    var type = typeof value === 'object' && value !== null ? value.type : '';
    invokeGuardedCallbackAndCatchFirstError(type, fn, undefined, value);
  } finally {
    isInsideEventHandler = previouslyInEventHandler;
  }
}
function discreteUpdates(fn, a, b, c) {
  var prevIsInsideEventHandler = isInsideEventHandler;
  isInsideEventHandler = true;

  try {
    return discreteUpdatesImpl(fn, a, b, c);
  } finally {
    isInsideEventHandler = prevIsInsideEventHandler;

    if (!isInsideEventHandler) {
      finishEventHandler();
    }
  }
}
var lastFlushedEventTimeStamp = 0;
function flushDiscreteUpdatesIfNeeded(timeStamp) {
  // event.timeStamp isn't overly reliable due to inconsistencies in
  // how different browsers have historically provided the time stamp.
  // Some browsers provide high-resolution time stamps for all events,
  // some provide low-resolution time stamps for all events. FF < 52
  // even mixes both time stamps together. Some browsers even report
  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
  // Given we are only comparing two time stamps with equality (!==),
  // we are safe from the resolution differences. If the time stamp is 0
  // we bail-out of preventing the flush, which can affect semantics,
  // such as if an earlier flush removes or adds event listeners that
  // are fired in the subsequent flush. However, this is the same
  // behaviour as we had before this change, so the risks are low.
  if (!isInsideEventHandler && (!enableFlareAPI || timeStamp === 0 || lastFlushedEventTimeStamp !== timeStamp)) {
    lastFlushedEventTimeStamp = timeStamp;
    flushDiscreteUpdatesImpl();
  }
}
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  discreteUpdatesImpl = _discreteUpdatesImpl;
  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
}

var DiscreteEvent = 0;
var UserBlockingEvent = 1;
var ContinuousEvent = 2;

// CommonJS interop named imports.

var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
var runWithPriority = Scheduler.unstable_runWithPriority;
var listenToResponderEventTypesImpl;
function setListenToResponderEventTypes(_listenToResponderEventTypesImpl) {
  listenToResponderEventTypesImpl = _listenToResponderEventTypesImpl;
}
var rootEventTypesToEventResponderInstances = new Map();
var DoNotPropagateToNextResponder = 0;
var PropagateToNextResponder = 1;
var currentTimeStamp = 0;
var currentInstance = null;
var currentDocument = null;
var currentPropagationBehavior = DoNotPropagateToNextResponder;
var eventResponderContext = {
  dispatchEvent: function (eventValue, eventListener, eventPriority) {
    validateResponderContext();
    validateEventValue(eventValue);

    switch (eventPriority) {
      case DiscreteEvent:
        {
          flushDiscreteUpdatesIfNeeded(currentTimeStamp);
          discreteUpdates(function () {
            return executeUserEventHandler(eventListener, eventValue);
          });
          break;
        }

      case UserBlockingEvent:
        {
          runWithPriority(UserBlockingPriority, function () {
            return executeUserEventHandler(eventListener, eventValue);
          });
          break;
        }

      case ContinuousEvent:
        {
          executeUserEventHandler(eventListener, eventValue);
          break;
        }
    }
  },
  isTargetWithinResponder: function (target) {
    validateResponderContext();

    if (target != null) {
      var fiber = getClosestInstanceFromNode(target);
      var responderFiber = currentInstance.fiber;

      while (fiber !== null) {
        if (fiber === responderFiber || fiber.alternate === responderFiber) {
          return true;
        }

        fiber = fiber.return;
      }
    }

    return false;
  },
  isTargetWithinResponderScope: function (target) {
    validateResponderContext();
    var componentInstance = currentInstance;
    var responder = componentInstance.responder;

    if (target != null) {
      var fiber = getClosestInstanceFromNode(target);
      var responderFiber = currentInstance.fiber;

      while (fiber !== null) {
        if (fiber === responderFiber || fiber.alternate === responderFiber) {
          return true;
        }

        if (doesFiberHaveResponder(fiber, responder)) {
          return false;
        }

        fiber = fiber.return;
      }
    }

    return false;
  },
  isTargetWithinNode: function (childTarget, parentTarget) {
    validateResponderContext();
    var childFiber = getClosestInstanceFromNode(childTarget);
    var parentFiber = getClosestInstanceFromNode(parentTarget);

    if (childFiber != null && parentFiber != null) {
      var parentAlternateFiber = parentFiber.alternate;
      var node = childFiber;

      while (node !== null) {
        if (node === parentFiber || node === parentAlternateFiber) {
          return true;
        }

        node = node.return;
      }

      return false;
    } // Fallback to DOM APIs


    return parentTarget.contains(childTarget);
  },
  addRootEventTypes: function (rootEventTypes) {
    validateResponderContext();
    listenToResponderEventTypesImpl(rootEventTypes, currentDocument);

    for (var i = 0; i < rootEventTypes.length; i++) {
      var rootEventType = rootEventTypes[i];
      var eventResponderInstance = currentInstance;
      registerRootEventType(rootEventType, eventResponderInstance);
    }
  },
  removeRootEventTypes: function (rootEventTypes) {
    validateResponderContext();

    for (var i = 0; i < rootEventTypes.length; i++) {
      var rootEventType = rootEventTypes[i];
      var rootEventResponders = rootEventTypesToEventResponderInstances.get(rootEventType);
      var rootEventTypesSet = currentInstance.rootEventTypes;

      if (rootEventTypesSet !== null) {
        rootEventTypesSet.delete(rootEventType);
      }

      if (rootEventResponders !== undefined) {
        rootEventResponders.delete(currentInstance);
      }
    }
  },
  getActiveDocument: getActiveDocument,
  objectAssign: _assign,
  getTimeStamp: function () {
    validateResponderContext();
    return currentTimeStamp;
  },
  isTargetWithinHostComponent: function (target, elementType) {
    validateResponderContext();
    var fiber = getClosestInstanceFromNode(target);

    while (fiber !== null) {
      if (fiber.tag === HostComponent && fiber.type === elementType) {
        return true;
      }

      fiber = fiber.return;
    }

    return false;
  },
  continuePropagation: function () {
    currentPropagationBehavior = PropagateToNextResponder;
  },
  enqueueStateRestore: enqueueStateRestore,
  getResponderNode: function () {
    validateResponderContext();
    var responderFiber = currentInstance.fiber;

    if (responderFiber.tag === ScopeComponent) {
      return null;
    }

    return responderFiber.stateNode;
  }
};

function validateEventValue(eventValue) {
  if (typeof eventValue === 'object' && eventValue !== null) {
    var target = eventValue.target,
        type = eventValue.type,
        timeStamp = eventValue.timeStamp;

    if (target == null || type == null || timeStamp == null) {
      throw new Error('context.dispatchEvent: "target", "timeStamp", and "type" fields on event object are required.');
    }

    var showWarning = function (name) {
      {
        warning$1(false, '%s is not available on event objects created from event responder modules (React Flare). ' + 'Try wrapping in a conditional, i.e. `if (event.type !== "press") { event.%s }`', name, name);
      }
    };

    eventValue.isDefaultPrevented = function () {
      {
        showWarning('isDefaultPrevented()');
      }
    };

    eventValue.isPropagationStopped = function () {
      {
        showWarning('isPropagationStopped()');
      }
    }; // $FlowFixMe: we don't need value, Flow thinks we do


    Object.defineProperty(eventValue, 'nativeEvent', {
      get: function () {
        {
          showWarning('nativeEvent');
        }
      }
    });
  }
}

function doesFiberHaveResponder(fiber, responder) {
  var tag = fiber.tag;

  if (tag === HostComponent || tag === ScopeComponent) {
    var dependencies = fiber.dependencies;

    if (dependencies !== null) {
      var respondersMap = dependencies.responders;

      if (respondersMap !== null && respondersMap.has(responder)) {
        return true;
      }
    }
  }

  return false;
}

function getActiveDocument() {
  return currentDocument;
}

function createDOMResponderEvent(topLevelType, nativeEvent, nativeEventTarget, passive, passiveSupported) {
  var _ref = nativeEvent,
      buttons = _ref.buttons,
      pointerType = _ref.pointerType;
  var eventPointerType = '';

  if (pointerType !== undefined) {
    eventPointerType = pointerType;
  } else if (nativeEvent.key !== undefined) {
    eventPointerType = 'keyboard';
  } else if (buttons !== undefined) {
    eventPointerType = 'mouse';
  } else if (nativeEvent.changedTouches !== undefined) {
    eventPointerType = 'touch';
  }

  return {
    nativeEvent: nativeEvent,
    passive: passive,
    passiveSupported: passiveSupported,
    pointerType: eventPointerType,
    target: nativeEventTarget,
    type: topLevelType
  };
}

function responderEventTypesContainType(eventTypes, type) {
  for (var i = 0, len = eventTypes.length; i < len; i++) {
    if (eventTypes[i] === type) {
      return true;
    }
  }

  return false;
}

function validateResponderTargetEventTypes(eventType, responder) {
  var targetEventTypes = responder.targetEventTypes; // Validate the target event type exists on the responder

  if (targetEventTypes !== null) {
    return responderEventTypesContainType(targetEventTypes, eventType);
  }

  return false;
}

function traverseAndHandleEventResponderInstances(topLevelType, targetFiber, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var isPassiveEvent = (eventSystemFlags & IS_PASSIVE) !== 0;
  var isPassiveSupported = (eventSystemFlags & PASSIVE_NOT_SUPPORTED) === 0;
  var isPassive = isPassiveEvent || !isPassiveSupported;
  var eventType = isPassive ? topLevelType : topLevelType + '_active'; // Trigger event responders in this order:
  // - Bubble target responder phase
  // - Root responder phase

  var visitedResponders = new Set();
  var responderEvent = createDOMResponderEvent(topLevelType, nativeEvent, nativeEventTarget, isPassiveEvent, isPassiveSupported);
  var node = targetFiber;
  var insidePortal = false;

  while (node !== null) {
    var _node = node,
        dependencies = _node.dependencies,
        tag = _node.tag;

    if (tag === HostPortal) {
      insidePortal = true;
    } else if ((tag === HostComponent || tag === ScopeComponent) && dependencies !== null) {
      var respondersMap = dependencies.responders;

      if (respondersMap !== null) {
        var responderInstances = Array.from(respondersMap.values());

        for (var i = 0, length = responderInstances.length; i < length; i++) {
          var responderInstance = responderInstances[i];
          var props = responderInstance.props,
              responder = responderInstance.responder,
              state = responderInstance.state;

          if (!visitedResponders.has(responder) && validateResponderTargetEventTypes(eventType, responder) && (!insidePortal || responder.targetPortalPropagation)) {
            visitedResponders.add(responder);
            var onEvent = responder.onEvent;

            if (onEvent !== null) {
              currentInstance = responderInstance;
              onEvent(responderEvent, eventResponderContext, props, state);

              if (currentPropagationBehavior === PropagateToNextResponder) {
                visitedResponders.delete(responder);
                currentPropagationBehavior = DoNotPropagateToNextResponder;
              }
            }
          }
        }
      }
    }

    node = node.return;
  } // Root phase


  var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(eventType);

  if (rootEventResponderInstances !== undefined) {
    var _responderInstances = Array.from(rootEventResponderInstances);

    for (var _i = 0; _i < _responderInstances.length; _i++) {
      var _responderInstance = _responderInstances[_i];
      var props = _responderInstance.props,
          responder = _responderInstance.responder,
          state = _responderInstance.state;
      var onRootEvent = responder.onRootEvent;

      if (onRootEvent !== null) {
        currentInstance = _responderInstance;
        onRootEvent(responderEvent, eventResponderContext, props, state);
      }
    }
  }
}

function mountEventResponder(responder, responderInstance, props, state) {
  var onMount = responder.onMount;

  if (onMount !== null) {
    var previousInstance = currentInstance;
    currentInstance = responderInstance;

    try {
      batchedEventUpdates(function () {
        onMount(eventResponderContext, props, state);
      });
    } finally {
      currentInstance = previousInstance;
    }
  }
}
function unmountEventResponder(responderInstance) {
  var responder = responderInstance.responder;
  var onUnmount = responder.onUnmount;

  if (onUnmount !== null) {
    var props = responderInstance.props,
        state = responderInstance.state;
    var previousInstance = currentInstance;
    currentInstance = responderInstance;

    try {
      batchedEventUpdates(function () {
        onUnmount(eventResponderContext, props, state);
      });
    } finally {
      currentInstance = previousInstance;
    }
  }

  var rootEventTypesSet = responderInstance.rootEventTypes;

  if (rootEventTypesSet !== null) {
    var rootEventTypes = Array.from(rootEventTypesSet);

    for (var i = 0; i < rootEventTypes.length; i++) {
      var topLevelEventType = rootEventTypes[i];
      var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(topLevelEventType);

      if (rootEventResponderInstances !== undefined) {
        rootEventResponderInstances.delete(responderInstance);
      }
    }
  }
}

function validateResponderContext() {
  if (!(currentInstance !== null)) {
    {
      throw Error("An event responder context was used outside of an event cycle.");
    }
  }
}

function dispatchEventForResponderEventSystem(topLevelType, targetFiber, nativeEvent, nativeEventTarget, eventSystemFlags) {
  if (enableFlareAPI) {
    var previousInstance = currentInstance;
    var previousTimeStamp = currentTimeStamp;
    var previousDocument = currentDocument;
    var previousPropagationBehavior = currentPropagationBehavior;
    currentPropagationBehavior = DoNotPropagateToNextResponder; // nodeType 9 is DOCUMENT_NODE

    currentDocument = nativeEventTarget.nodeType === 9 ? nativeEventTarget : nativeEventTarget.ownerDocument; // We might want to control timeStamp another way here

    currentTimeStamp = nativeEvent.timeStamp;

    try {
      batchedEventUpdates(function () {
        traverseAndHandleEventResponderInstances(topLevelType, targetFiber, nativeEvent, nativeEventTarget, eventSystemFlags);
      });
    } finally {
      currentInstance = previousInstance;
      currentTimeStamp = previousTimeStamp;
      currentDocument = previousDocument;
      currentPropagationBehavior = previousPropagationBehavior;
    }
  }
}
function addRootEventTypesForResponderInstance(responderInstance, rootEventTypes) {
  for (var i = 0; i < rootEventTypes.length; i++) {
    var rootEventType = rootEventTypes[i];
    registerRootEventType(rootEventType, responderInstance);
  }
}

function registerRootEventType(rootEventType, eventResponderInstance) {
  var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(rootEventType);

  if (rootEventResponderInstances === undefined) {
    rootEventResponderInstances = new Set();
    rootEventTypesToEventResponderInstances.set(rootEventType, rootEventResponderInstances);
  }

  var rootEventTypesSet = eventResponderInstance.rootEventTypes;

  if (rootEventTypesSet === null) {
    rootEventTypesSet = eventResponderInstance.rootEventTypes = new Set();
  }

  if (!!rootEventTypesSet.has(rootEventType)) {
    {
      throw Error("addRootEventTypes() found a duplicate root event type of \"" + rootEventType + "\". This might be because the event type exists in the event responder \"rootEventTypes\" array or because of a previous addRootEventTypes() using this root event type.");
    }
  }

  rootEventTypesSet.add(rootEventType);
  rootEventResponderInstances.add(eventResponderInstance);
}

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";

var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true);
});

var ReactDebugCurrentFrame$1 = null;

{
  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */


var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  if (disableJavaScriptURLs) {
    if (!!isJavaScriptProtocol.test(url)) {
      {
        throw Error("React has blocked a javascript: URL as a security precaution." + (ReactDebugCurrentFrame$1.getStackAddendum()));
      }
    }
  } else if (true && !didWarn && isJavaScriptProtocol.test(url)) {
    didWarn = true;
    warning$1(false, 'A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}
/** Trusted value is a wrapper for "safe" values which can be assigned to DOM execution sinks. */

/**
 * We allow passing objects with toString method as element attributes or in dangerouslySetInnerHTML
 * and we do validations that the value is safe. Once we do validation we want to use the validated
 * value instead of the object (because object.toString may return something else on next call).
 *
 * If application uses Trusted Types we don't stringify trusted values, but preserve them as objects.
 */
var toStringOrTrustedType = toString;

if (enableTrustedTypesIntegration && typeof trustedTypes !== 'undefined') {
  toStringOrTrustedType = function (value) {
    if (typeof value === 'object' && (trustedTypes.isHTML(value) || trustedTypes.isScript(value) || trustedTypes.isScriptURL(value) ||
    /* TrustedURLs are deprecated and will be removed soon: https://github.com/WICG/trusted-types/pull/204 */
    trustedTypes.isURL && trustedTypes.isURL(value))) {
      // Pass Trusted Types through.
      return value;
    }

    return toString(value);
  };
}

/**
 * Set attribute for a node. The attribute value can be either string or
 * Trusted value (if application uses Trusted Types).
 */
function setAttribute(node, attributeName, attributeValue) {
  node.setAttribute(attributeName, attributeValue);
}
/**
 * Set attribute with namespace for a node. The attribute value can be either string or
 * Trusted value (if application uses Trusted Types).
 */

function setAttributeNS(node, attributeNamespace, attributeName, attributeValue) {
  node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      if (!disableJavaScriptURLs && propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }

          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  } // If the prop isn't in the special list, treat it as a simple attribute.


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        setAttribute(node, _attributeName, toStringOrTrustedType(value));
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      attributeValue = toStringOrTrustedType(value);

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      setAttributeNS(node, attributeNamespace, attributeName, attributeValue);
    } else {
      setAttribute(node, attributeName, attributeValue);
    }
  }
}

var ReactDebugCurrentFrame$2 = null;
var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };
  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableFlareAPI && props.listeners) {
        return null;
      }

      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableFlareAPI && props.listeners) {
        return null;
      }

      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };
  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */

  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
  };
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}
function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the value attribute, React only assigns a new value
    // whenever the defaultValue React prop has changed. When not present,
    // React does nothing
    if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  } else {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the attribute is directly
    // controllable from the defaultValue React property. It needs to be
    // updated as new props come in.
    if (props.defaultChecked == null) {
      node.removeAttribute('checked');
    } else {
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      if (disableInputAttributeSyncing) {
        var value = getToStringValue(props.value); // When not syncing the value attribute, the value property points
        // directly to the React prop. Only assign it if it exists.

        if (value != null) {
          // Always assign on buttons so that it is possible to assign an
          // empty string to clear button text.
          //
          // Otherwise, do not re-assign the value property if is empty. This
          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
          // prematurely marking required inputs as invalid. Equality is compared
          // to the current value in case the browser provided value is not an
          // empty string.
          if (isButton || value !== node.value) {
            node.value = toString(value);
          }
        }
      } else {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    if (disableInputAttributeSyncing) {
      // When not syncing the value attribute, assign the value attribute
      // directly from the defaultValue React property (when present)
      var defaultValue = getToStringValue(props.defaultValue);

      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    } else {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the checked property
    // never gets assigned. It must be manually set. We don't want
    // to do this when hydrating so that existing user input isn't
    // modified
    if (!isHydrating) {
      updateChecked(element, props);
    } // Only assign the checked attribute if it is defined. This saves
    // a DOM write when controlling the checked attribute isn't needed
    // (text inputs, submit/reset)


    if (props.hasOwnProperty('defaultChecked')) {
      node.defaultChecked = !node.defaultChecked;
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

      if (!otherProps) {
        {
          throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
        }
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = ''; // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).

  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }

    content += child; // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });
  return content;
}
/**
 * Implements an <option> host component that warns when `selected` is set.
 */


function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }

        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }

        if (typeof child.type !== 'string') {
          return;
        }

        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;
          warning$1(false, 'Only strings and numbers are supported as <option> children.');
        }
      });
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}
function getHostProps$1(element, props) {
  var hostProps = _assign({
    children: undefined
  }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];

    if (props[propName] == null) {
      continue;
    }

    var isArray = Array.isArray(props[propName]);

    if (props.multiple && !isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$3(element, props) {
  var node = element;

  if (!(props.dangerouslySetInnerHTML == null)) {
    {
      throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
    }
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

    var children = props.children;

    if (children != null) {
      {
        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      if (!(defaultValue == null)) {
        {
          throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
        }
      }

      if (Array.isArray(children)) {
        if (!(children.length <= 1)) {
          {
            throw Error("<textarea> can only have at most one child.");
          }
        }

        children = children[0];
      }

      defaultValue = children;
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
}; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE$1;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === Namespaces.svg) {
    {
      if (enableTrustedTypesIntegration) {
        // TODO: reconsider the text of this warning and when it should show
        // before enabling the feature flag.
        !(typeof trustedTypes === 'undefined') ? warning$1(false, "Using 'dangerouslySetInnerHTML' in an svg element with " + 'Trusted Types enabled in an Internet Explorer will cause ' + 'the trusted value to be converted to string. Assigning string ' + "to 'innerHTML' will throw an error if Trusted Types are enforced. " + "You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' " + 'on the enclosing div instead.') : void 0;
      }
    }

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// Do not use the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}
function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */

var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */

function get(key) {
  return key._reactInternalFiber;
}
function has(key) {
  return key._reactInternalFiber !== undefined;
}
function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect =
/*              */
0;
var PerformedWork =
/*         */
1; // You can change the rest (and add more).

var Placement =
/*             */
2;
var Update =
/*                */
4;
var PlacementAndUpdate =
/*    */
6;
var Deletion =
/*              */
8;
var ContentReset =
/*          */
16;
var Callback =
/*              */
32;
var DidCapture =
/*            */
64;
var Ref =
/*                   */
128;
var Snapshot =
/*              */
256;
var Passive =
/*               */
512;
var Hydrating =
/*             */
1024;
var HydratingAndUpdate =
/*    */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*   */
932; // Union of all host effects

var HostEffectMask =
/*        */
2047;
var Incomplete =
/*            */
2048;
var ShouldCapture =
/*         */
4096;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error("Unable to find node on an unmounted component.");
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error("Unable to find node on an unmounted component.");
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error("Unable to find node on an unmounted component.");
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI && node.tag === FundamentalComponent) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}

var attemptSynchronousHydration;
function setAttemptSynchronousHydration(fn) {
  attemptSynchronousHydration = fn;
}
var attemptUserBlockingHydration;
function setAttemptUserBlockingHydration(fn) {
  attemptUserBlockingHydration = fn;
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
// has this definition built-in.

var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.

// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
function hasQueuedDiscreteEvents() {
  return queuedDiscreteEvents.length > 0;
}

var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
function isReplayableDiscreteEvent(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function trapReplayableEvent(topLevelType, document, listeningSet) {
  listenToTopLevel(topLevelType, document, listeningSet);

  if (enableFlareAPI) {
    // Trap events for the responder system.
    var passiveEventKey = unsafeCastDOMTopLevelTypeToString(topLevelType) + '_passive';

    if (!listeningSet.has(passiveEventKey)) {
      trapEventForResponderEventSystem(document, topLevelType, true);
      listeningSet.add(passiveEventKey);
    } // TODO: This listens to all events as active which might have
    // undesirable effects. It's also unnecessary to have both
    // passive and active listeners. Instead, we could start with
    // a passive and upgrade it to an active one if needed.
    // For replaying purposes the active is never needed since we
    // currently don't preventDefault.


    var activeEventKey = unsafeCastDOMTopLevelTypeToString(topLevelType) + '_active';

    if (!listeningSet.has(activeEventKey)) {
      trapEventForResponderEventSystem(document, topLevelType, false);
      listeningSet.add(activeEventKey);
    }
  }
}

function eagerlyTrapReplayableEvents(document) {
  var listeningSet = getListeningSetForElement(document); // Discrete

  discreteReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEvent(topLevelType, document, listeningSet);
  }); // Continuous

  continuousReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEvent(topLevelType, document, listeningSet);
  });
}

function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
  return {
    blockedOn: blockedOn,
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
    nativeEvent: nativeEvent
  };
}

function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
  queuedDiscreteEvents.push(queuedEvent);

  if (enableSelectiveHydration) {
    if (queuedDiscreteEvents.length === 1) {
      // If this was the first discrete event, we might be able to
      // synchronously unblock it so that preventDefault still works.
      while (queuedEvent.blockedOn !== null) {
        var _fiber = getInstanceFromNode$1(queuedEvent.blockedOn);

        if (_fiber === null) {
          break;
        }

        attemptSynchronousHydration(_fiber);

        if (queuedEvent.blockedOn === null) {
          // We got unblocked by hydration. Let's try again.
          replayUnblockedEvents(); // If we're reblocked, on an inner boundary, we might need
          // to attempt hydrating that one.

          continue;
        } else {
          // We're still blocked from hydation, we have to give up
          // and replay later.
          break;
        }
      }
    }
  }
} // Resets the replaying for this type of continuous event to no event.

function clearIfContinuousEvent(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_FOCUS:
    case TOP_BLUR:
      queuedFocus = null;
      break;

    case TOP_DRAG_ENTER:
    case TOP_DRAG_LEAVE:
      queuedDrag = null;
      break;

    case TOP_MOUSE_OVER:
    case TOP_MOUSE_OUT:
      queuedMouse = null;
      break;

    case TOP_POINTER_OVER:
    case TOP_POINTER_OUT:
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case TOP_GOT_POINTER_CAPTURE:
    case TOP_LOST_POINTER_CAPTURE:
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode$1(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags and store a single event to be
  // replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (topLevelType) {
    case TOP_FOCUS:
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, focusEvent);
        return true;
      }

    case TOP_DRAG_ENTER:
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, dragEvent);
        return true;
      }

    case TOP_MOUSE_OVER:
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, mouseEvent);
        return true;
      }

    case TOP_POINTER_OVER:
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, pointerEvent));
        return true;
      }

    case TOP_GOT_POINTER_CAPTURE:
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function queueExplicitHydrationTarget(target) {
  if (enableSelectiveHydration) {
    var priority = Scheduler.unstable_getCurrentPriorityLevel();
    var queuedTarget = {
      blockedOn: null,
      target: target,
      priority: priority
    };
    var i = 0;

    for (; i < queuedExplicitHydrationTargets.length; i++) {
      if (priority <= queuedExplicitHydrationTargets[i].priority) {
        break;
      }
    }

    queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

    if (i === 0) {
      attemptExplicitHydrationTarget(queuedTarget);
    }
  }
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.nativeEvent);

  if (nextBlockedOn !== null) {
    // We're still blocked. Try again later.
    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

    if (_fiber3 !== null) {
      attemptContinuousHydration(_fiber3);
    }

    queuedEvent.blockedOn = nextBlockedOn;
    return false;
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false; // First replay discrete events.

  while (queuedDiscreteEvents.length > 0) {
    var nextDiscreteEvent = queuedDiscreteEvents[0];

    if (nextDiscreteEvent.blockedOn !== null) {
      // We're still blocked.
      // Increase the priority of this boundary to unblock
      // the next discrete event.
      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

      if (_fiber4 !== null) {
        attemptUserBlockingHydration(_fiber4);
      }

      break;
    }

    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.nativeEvent);

    if (nextBlockedOn !== null) {
      // We're still blocked. Try again later.
      nextDiscreteEvent.blockedOn = nextBlockedOn;
    } else {
      // We've successfully replayed the first event. Let's try the next one.
      queuedDiscreteEvents.shift();
    }
  } // Next replay any continuous events.


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}
function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}
function addEventCaptureListenerWithPassiveFlag(element, eventType, listener, passive) {
  element.addEventListener(eventType, listener, {
    capture: true,
    passive: passive
  });
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

function getParent(inst) {
  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;

  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }

    instA = getParent(instA);
    instB = getParent(instB);
  }

  return null;
}
/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */


/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */

function traverseTwoPhase(inst, fn, arg) {
  var path = [];

  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }

  var i;

  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }

  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}
/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];

  while (true) {
    if (!from) {
      break;
    }

    if (from === common) {
      break;
    }

    var alternate = from.alternate;

    if (alternate !== null && alternate === common) {
      break;
    }

    pathFrom.push(from);
    from = getParent(from);
  }

  var pathTo = [];

  while (true) {
    if (!to) {
      break;
    }

    if (to === common) {
      break;
    }

    var _alternate = to.alternate;

    if (_alternate !== null && _alternate === common) {
      break;
    }

    pathTo.push(to);
    to = getParent(to);
  }

  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }

  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}
/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */


function accumulateDirectionalDispatches(inst, phase, event) {
  {
    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
  }

  var listener = listenerAtPhase(inst, event, phase);

  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}
/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */


function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}
/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */


function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);

    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}
/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */


function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}
function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/* eslint valid-typeof: 0 */
var EVENT_POOL_SIZE = 10;
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}
/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */


function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;
  var Interface = this.constructor.Interface;

  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }

    {
      delete this[propName]; // this has a getter/setter for warnings
    }

    var normalize = Interface[propName];

    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }

  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }

    this.isDefaultPrevented = functionThatReturnsTrue;
  },
  stopPropagation: function () {
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;

    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }

    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;

    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;
/**
 * Helper to reduce boilerplate when creating subclasses.
 */

SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};

  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }

  _assign(prototype, Class.prototype);

  Class.prototype = prototype;
  Class.prototype.constructor = Class;
  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);
  return Class;
};

addEventPoolingTo(SyntheticEvent);
/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */

function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;

  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }

  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;

  if (!(event instanceof EventConstructor)) {
    {
      throw Error("Trying to release an event instance into a pool of a different type.");
    }
  }

  event.destructor();

  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */
var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

var previousScreenX = 0;
var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

var isMovementXSet = false;
var isMovementYSet = false;
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

var eventTuples = [// Discrete events
[TOP_BLUR, 'blur', DiscreteEvent], [TOP_CANCEL, 'cancel', DiscreteEvent], [TOP_CLICK, 'click', DiscreteEvent], [TOP_CLOSE, 'close', DiscreteEvent], [TOP_CONTEXT_MENU, 'contextMenu', DiscreteEvent], [TOP_COPY, 'copy', DiscreteEvent], [TOP_CUT, 'cut', DiscreteEvent], [TOP_AUX_CLICK, 'auxClick', DiscreteEvent], [TOP_DOUBLE_CLICK, 'doubleClick', DiscreteEvent], [TOP_DRAG_END, 'dragEnd', DiscreteEvent], [TOP_DRAG_START, 'dragStart', DiscreteEvent], [TOP_DROP, 'drop', DiscreteEvent], [TOP_FOCUS, 'focus', DiscreteEvent], [TOP_INPUT, 'input', DiscreteEvent], [TOP_INVALID, 'invalid', DiscreteEvent], [TOP_KEY_DOWN, 'keyDown', DiscreteEvent], [TOP_KEY_PRESS, 'keyPress', DiscreteEvent], [TOP_KEY_UP, 'keyUp', DiscreteEvent], [TOP_MOUSE_DOWN, 'mouseDown', DiscreteEvent], [TOP_MOUSE_UP, 'mouseUp', DiscreteEvent], [TOP_PASTE, 'paste', DiscreteEvent], [TOP_PAUSE, 'pause', DiscreteEvent], [TOP_PLAY, 'play', DiscreteEvent], [TOP_POINTER_CANCEL, 'pointerCancel', DiscreteEvent], [TOP_POINTER_DOWN, 'pointerDown', DiscreteEvent], [TOP_POINTER_UP, 'pointerUp', DiscreteEvent], [TOP_RATE_CHANGE, 'rateChange', DiscreteEvent], [TOP_RESET, 'reset', DiscreteEvent], [TOP_SEEKED, 'seeked', DiscreteEvent], [TOP_SUBMIT, 'submit', DiscreteEvent], [TOP_TOUCH_CANCEL, 'touchCancel', DiscreteEvent], [TOP_TOUCH_END, 'touchEnd', DiscreteEvent], [TOP_TOUCH_START, 'touchStart', DiscreteEvent], [TOP_VOLUME_CHANGE, 'volumeChange', DiscreteEvent], // User-blocking events
[TOP_DRAG, 'drag', UserBlockingEvent], [TOP_DRAG_ENTER, 'dragEnter', UserBlockingEvent], [TOP_DRAG_EXIT, 'dragExit', UserBlockingEvent], [TOP_DRAG_LEAVE, 'dragLeave', UserBlockingEvent], [TOP_DRAG_OVER, 'dragOver', UserBlockingEvent], [TOP_MOUSE_MOVE, 'mouseMove', UserBlockingEvent], [TOP_MOUSE_OUT, 'mouseOut', UserBlockingEvent], [TOP_MOUSE_OVER, 'mouseOver', UserBlockingEvent], [TOP_POINTER_MOVE, 'pointerMove', UserBlockingEvent], [TOP_POINTER_OUT, 'pointerOut', UserBlockingEvent], [TOP_POINTER_OVER, 'pointerOver', UserBlockingEvent], [TOP_SCROLL, 'scroll', UserBlockingEvent], [TOP_TOGGLE, 'toggle', UserBlockingEvent], [TOP_TOUCH_MOVE, 'touchMove', UserBlockingEvent], [TOP_WHEEL, 'wheel', UserBlockingEvent], // Continuous events
[TOP_ABORT, 'abort', ContinuousEvent], [TOP_ANIMATION_END, 'animationEnd', ContinuousEvent], [TOP_ANIMATION_ITERATION, 'animationIteration', ContinuousEvent], [TOP_ANIMATION_START, 'animationStart', ContinuousEvent], [TOP_CAN_PLAY, 'canPlay', ContinuousEvent], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough', ContinuousEvent], [TOP_DURATION_CHANGE, 'durationChange', ContinuousEvent], [TOP_EMPTIED, 'emptied', ContinuousEvent], [TOP_ENCRYPTED, 'encrypted', ContinuousEvent], [TOP_ENDED, 'ended', ContinuousEvent], [TOP_ERROR, 'error', ContinuousEvent], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', ContinuousEvent], [TOP_LOAD, 'load', ContinuousEvent], [TOP_LOADED_DATA, 'loadedData', ContinuousEvent], [TOP_LOADED_METADATA, 'loadedMetadata', ContinuousEvent], [TOP_LOAD_START, 'loadStart', ContinuousEvent], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', ContinuousEvent], [TOP_PLAYING, 'playing', ContinuousEvent], [TOP_PROGRESS, 'progress', ContinuousEvent], [TOP_SEEKING, 'seeking', ContinuousEvent], [TOP_STALLED, 'stalled', ContinuousEvent], [TOP_SUSPEND, 'suspend', ContinuousEvent], [TOP_TIME_UPDATE, 'timeUpdate', ContinuousEvent], [TOP_TRANSITION_END, 'transitionEnd', ContinuousEvent], [TOP_WAITING, 'waiting', ContinuousEvent]];
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};

for (var i = 0; i < eventTuples.length; i++) {
  var eventTuple = eventTuples[i];
  var topEvent = eventTuple[0];
  var event = eventTuple[1];
  var eventPriority = eventTuple[2];
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var config = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent],
    eventPriority: eventPriority
  };
  eventTypes[event] = config;
  topLevelEventsToDispatchConfig[topEvent] = config;
} // Only used in DEV for exhaustiveness validation.


var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
var SimpleEventPlugin = {
  eventTypes: eventTypes,
  getEventPriority: function (topLevelType) {
    var config = topLevelEventsToDispatchConfig[topLevelType];
    return config !== undefined ? config.eventPriority : ContinuousEvent;
  },
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];

    if (!dispatchConfig) {
      return null;
    }

    var EventConstructor;

    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }

      /* falls through */

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;

      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;

      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }

      /* falls through */

      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

      /* falls through */

      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;

      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;

      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;

      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;

      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;

      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;

      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;

      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;

      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;

      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        } // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0


        EventConstructor = SyntheticEvent;
        break;
    }

    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

if (enableFlareAPI && canUseDOM) {
  try {
    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

    Object.defineProperty(options, 'passive', {
      get: function () {
        passiveBrowserEventsSupported = true;
      }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
  } catch (e) {
    passiveBrowserEventsSupported = false;
  }
}

// Intentionally not named imports because Rollup would use dynamic dispatch for
// CommonJS interop named imports.
var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority;
var runWithPriority$1 = Scheduler.unstable_runWithPriority;
var getEventPriority = SimpleEventPlugin.getEventPriority;
var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  if (inst.tag === HostRoot) {
    return inst.stateNode.containerInfo;
  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.


  while (inst.return) {
    inst = inst.return;
  }

  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }

  return inst.stateNode.containerInfo;
} // Used to store ancestor hierarchy in top level callback


function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.eventSystemFlags = eventSystemFlags;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }

  return {
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;

  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.

  var ancestor = targetInst;

  do {
    if (!ancestor) {
      var ancestors = bookKeeping.ancestors;
      ancestors.push(ancestor);
      break;
    }

    var root = findRootContainerNode(ancestor);

    if (!root) {
      break;
    }

    var tag = ancestor.tag;

    if (tag === HostComponent || tag === HostText) {
      bookKeeping.ancestors.push(ancestor);
    }

    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
    var topLevelType = bookKeeping.topLevelType;
    var nativeEvent = bookKeeping.nativeEvent;
    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, bookKeeping.eventSystemFlags);
  }
} // TODO: can we stop exporting these?


var _enabled = true;
function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function trapBubbledEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, false);
}
function trapCapturedEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, true);
}
function trapEventForResponderEventSystem(element, topLevelType, passive) {
  if (enableFlareAPI) {
    var rawEventName = getRawEventName(topLevelType);
    var eventFlags = RESPONDER_EVENT_SYSTEM; // If passive option is not supported, then the event will be
    // active and not passive, but we flag it as using not being
    // supported too. This way the responder event plugins know,
    // and can provide polyfills if needed.

    if (passive) {
      if (passiveBrowserEventsSupported) {
        eventFlags |= IS_PASSIVE;
      } else {
        eventFlags |= IS_ACTIVE;
        eventFlags |= PASSIVE_NOT_SUPPORTED;
        passive = false;
      }
    } else {
      eventFlags |= IS_ACTIVE;
    } // Check if interactive and wrap in discreteUpdates


    var listener = dispatchEvent.bind(null, topLevelType, eventFlags);

    if (passiveBrowserEventsSupported) {
      addEventCaptureListenerWithPassiveFlag(element, rawEventName, listener, passive);
    } else {
      addEventCaptureListener(element, rawEventName, listener);
    }
  }
}

function trapEventForPluginEventSystem(element, topLevelType, capture) {
  var listener;

  switch (getEventPriority(topLevelType)) {
    case DiscreteEvent:
      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
      break;

    case UserBlockingEvent:
      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
      break;

    case ContinuousEvent:
    default:
      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
      break;
  }

  var rawEventName = getRawEventName(topLevelType);

  if (capture) {
    addEventCaptureListener(element, rawEventName, listener);
  } else {
    addEventBubbleListener(element, rawEventName, listener);
  }
}

function dispatchDiscreteEvent(topLevelType, eventSystemFlags, nativeEvent) {
  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, nativeEvent);
}

function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, nativeEvent) {
  runWithPriority$1(UserBlockingPriority$1, dispatchEvent.bind(null, topLevelType, eventSystemFlags, nativeEvent));
}

function dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedEventUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

function dispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
  if (!_enabled) {
    return;
  }

  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
    // If we already have a queue of discrete events, and this is another discrete
    // event, then we can't dispatch it regardless of its target, since they
    // need to dispatch in order.
    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
    topLevelType, eventSystemFlags, nativeEvent);
    return;
  }

  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, nativeEvent);

  if (blockedOn === null) {
    // We successfully dispatched this event.
    clearIfContinuousEvent(topLevelType, nativeEvent);
    return;
  }

  if (isReplayableDiscreteEvent(topLevelType)) {
    // This this to be replayed later once the target is available.
    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent)) {
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accummulative.


  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.

  if (enableFlareAPI) {
    if (eventSystemFlags & PLUGIN_EVENT_SYSTEM) {
      dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
    }

    if (eventSystemFlags & RESPONDER_EVENT_SYSTEM) {
      // React Flare event system
      dispatchEventForResponderEventSystem(topLevelType, null, nativeEvent, getEventTarget(nativeEvent), eventSystemFlags);
    }
  } else {
    dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
  }
} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

function attemptToDispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
  // TODO: Warn if _enabled is false.
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  if (enableFlareAPI) {
    if (eventSystemFlags & PLUGIN_EVENT_SYSTEM) {
      dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
    }

    if (eventSystemFlags & RESPONDER_EVENT_SYSTEM) {
      // React Flare event system
      dispatchEventForResponderEventSystem(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
    }
  } else {
    dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
  } // We're not blocked on anything.


  return null;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
var elementListeningSets = new PossiblyWeakMap();
function getListeningSetForElement(element) {
  var listeningSet = elementListeningSets.get(element);

  if (listeningSet === undefined) {
    listeningSet = new Set();
    elementListeningSets.set(element, listeningSet);
  }

  return listeningSet;
}
/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */

function listenTo(registrationName, mountAt) {
  var listeningSet = getListeningSetForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    listenToTopLevel(dependency, mountAt, listeningSet);
  }
}
function listenToTopLevel(topLevelType, mountAt, listeningSet) {
  if (!listeningSet.has(topLevelType)) {
    switch (topLevelType) {
      case TOP_SCROLL:
        trapCapturedEvent(TOP_SCROLL, mountAt);
        break;

      case TOP_FOCUS:
      case TOP_BLUR:
        trapCapturedEvent(TOP_FOCUS, mountAt);
        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
        // but this ensures we mark both as attached rather than just one.

        listeningSet.add(TOP_BLUR);
        listeningSet.add(TOP_FOCUS);
        break;

      case TOP_CANCEL:
      case TOP_CLOSE:
        if (isEventSupported(getRawEventName(topLevelType))) {
          trapCapturedEvent(topLevelType, mountAt);
        }

        break;

      case TOP_INVALID:
      case TOP_SUBMIT:
      case TOP_RESET:
        // We listen to them on the target DOM elements.
        // Some of them bubble so we don't want them to fire twice.
        break;

      default:
        // By default, listen on the top level to all non-media events.
        // Media events don't bubble so adding the listener wouldn't do anything.
        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

        if (!isMediaEvent) {
          trapBubbledEvent(topLevelType, mountAt);
        }

        break;
    }

    listeningSet.add(topLevelType);
  }
}
function isListeningToAllDependencies(registrationName, mountAt) {
  var listeningSet = getListeningSetForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];

    if (!listeningSet.has(dependency)) {
      return false;
    }
  }

  return true;
}

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  if (!warnAboutShorthandPropertyCollision) {
    return;
  }

  if (!nextStyles) {
    return;
  }

  var expandedUpdates = expandShorthandMap(styleUpdates);
  var expandedStyles = expandShorthandMap(nextStyles);
  var warnedAbout = {};

  for (var key in expandedUpdates) {
    var originalKey = expandedUpdates[key];
    var correctOriginalKey = expandedStyles[key];

    if (correctOriginalKey && originalKey !== correctOriginalKey) {
      var warningKey = originalKey + ',' + correctOriginalKey;

      if (warnedAbout[warningKey]) {
        continue;
      }

      warnedAbout[warningKey] = true;
      warning$1(false, '%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// or add stack by default to invariants where possible.

var HTML$1 = '__html';
var ReactDebugCurrentFrame$3 = null;

{
  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
      {
        throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + (ReactDebugCurrentFrame$3.getStackAddendum()));
      }
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (!(props.children == null)) {
      {
        throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
      }
    }

    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML)) {
      {
        throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
      }
    }
  }

  {
    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
  }

  if (!(props.style == null || typeof props.style === 'object')) {
    {
      throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + (ReactDebugCurrentFrame$3.getStackAddendum()));
    }
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.

    if (correctName == null) {
      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
      warnedProperties[name] = true;
      return true;
    } // aria-* attributes should be lowercase; suggest the lowercase version.


    if (name !== correctName) {
      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.

    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    } // aria-* attributes should be lowercase; suggest the lowercase version.


    if (name !== standardName) {
      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);

    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  } else if (invalidProps.length > 1) {
    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;

    if (type === 'select' && props.multiple) {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
    } else {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  var unknownProps = [];

  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  } else if (unknownProps.length > 1) {
    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, canUseEventSystem);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;
var didWarnScriptTags = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE$1 = 'style';
var HTML = '__html';
var LISTENERS = 'listeners';
var HTML_NAMESPACE = Namespaces.html;
var warnedUnknownTags;
var suppressHydrationWarning;
var validatePropertiesInDevelopment;
var warnForTextDifference;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeMarkupForTextOrAttribute;
var normalizeHTML;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props,
    /* canUseEventSystem */
    true);
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.

  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

    if (normalizedServerText === normalizedClientText) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE$1) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (enableFlareAPI && propKey === LISTENERS || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
    } else if (propKey === AUTOFOCUS) {// We polyfill it separately on the client during commit.
      // We could have excluded it in the property list instead of
      // adding a special case here, but then it wouldn't be emitted
      // on server rendering (but we *do* want to emit it in SSR).
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE$1) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      {
        if (enableTrustedTypesIntegration && !didWarnScriptTags) {
          warning$1(false, 'Encountered a script tag while rendering React component. ' + 'Scripts inside React components are never executed when rendering ' + 'on the client. Consider using template tag instead ' + '(https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template).');
          didWarnScriptTags = true;
        }
      }

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);

    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE$1) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {// Noop. This is handled by the clear text mechanism.
    } else if (enableFlareAPI && propKey === LISTENERS || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
    } else if (propKey === AUTOFOCUS) {// Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE$1) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, toStringOrTrustedType(nextHtml));
        }
      } else {// TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (enableFlareAPI && propKey === LISTENERS || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
    }

    (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }

  return null;
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);

    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.

        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (true && // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);

      if (suppressHydrationWarning) {// Don't bother comparing. We're ignoring all these warnings.
      } else if (enableFlareAPI && propKey === LISTENERS || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {// Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE$1) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$$1(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState$1(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;

    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}
function listenToEventResponderEventTypes(eventTypes, element) {
  if (enableFlareAPI) {
    // Get the listening Set for this element. We use this to track
    // what events we're listening to.
    var listeningSet = getListeningSetForElement(element); // Go through each target event type of the event responder

    for (var i = 0, length = eventTypes.length; i < length; ++i) {
      var eventType = eventTypes[i];
      var isPassive = !endsWith(eventType, '_active');
      var eventKey = isPassive ? eventType + '_passive' : eventType;
      var targetEventType = isPassive ? eventType : eventType.substring(0, eventType.length - 7);

      if (!listeningSet.has(eventKey)) {
        trapEventForResponderEventSystem(element, targetEventType, isPassive);
        listeningSet.add(eventKey);
      }
    }
  }
} // We can remove this once the event API is stable and out of a flag

if (enableFlareAPI) {
  setListenToResponderEventTypes(listenToEventResponderEventTypes);
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };
}

// can re-export everything from this module.

function shim() {
  {
    {
      throw Error("The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.");
    }
  }
} // Persistence (when unsupported)


var supportsPersistence = false;
var cloneInstance = shim;
var cloneFundamentalInstance = shim;
var createContainerChildSet = shim;
var appendChildToContainerChildSet = shim;
var finalizeContainerChildren = shim;
var replaceContainerChildren = shim;
var cloneHiddenInstance = shim;
var cloneHiddenTextInstance = shim;

var SUPPRESS_HYDRATION_WARNING;

{
  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE = 'style';
var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }

  return false;
}

function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }

  return namespace;
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }

  var parentNamespace = parentHostContext;
  return getChildNamespace(parentNamespace, type);
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  selectionInformation = null;
  setEnabled(eventsEnabled);
  eventsEnabled = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
var isPrimaryRenderer = true;
var warnsIfNotActing = true; // This initialization code may run even on server environments
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1; // -------------------
//     Mutation
// -------------------

var supportsMutation = true;
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
} // This is a specific event for the React Flare
// event system, so event responders can act
// accordingly to a DOM node being unmounted that
// previously had active document focus.

function dispatchDetachedVisibleNodeEvent(child) {
  if (enableFlareAPI && selectionInformation && child === selectionInformation.focusedElem) {
    var targetFiber = getClosestInstanceFromNode(child); // Simlulate a blur event to the React Flare responder system.

    dispatchEventForResponderEventSystem('detachedvisiblenode', targetFiber, {
      target: child,
      timeStamp: Date.now()
    }, child, RESPONDER_EVENT_SYSTEM | IS_PASSIVE);
  }
}

function removeChild(parentInstance, child) {
  dispatchDetachedVisibleNodeEvent(child);
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    dispatchDetachedVisibleNodeEvent(child);
    container.removeChild(child);
  }
}
function clearSuspenseBoundary(parentInstance, suspenseInstance) {
  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  do {
    var nextNode = node.nextSibling;
    parentInstance.removeChild(node);

    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
      var data = nextNode.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

          retryIfBlockedOn(suspenseInstance);
          return;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
        depth++;
      }
    }

    node = nextNode;
  } while (node); // TODO: Warn, we didn't find the end comment boundary.
  // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(suspenseInstance);
}
function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
  if (container.nodeType === COMMENT_NODE) {
    clearSuspenseBoundary(container.parentNode, suspenseInstance);
  } else if (container.nodeType === ELEMENT_NODE) {
    clearSuspenseBoundary(container, suspenseInstance);
  } else {} // Document nodes should never contain suspense boundaries.
  // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(container);
}
function hideInstance(instance) {
  // TODO: Does this work for all element types? What about MathML? Should we
  // pass host context to this method?
  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
} // -------------------
//     Hydration
// -------------------

var supportsHydration = true;
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function canHydrateSuspenseInstance(instance) {
  if (instance.nodeType !== COMMENT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a suspense node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}
function registerSuspenseInstanceRetry(instance, callback) {
  instance._reactRetry = callback;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }

    if (enableSuspenseServerRenderer) {
      if (nodeType === COMMENT_NODE) {
        var nodeData = node.data;

        if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
          break;
        }
      }
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }

  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}
function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, suspenseInstance);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
    } else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
    } else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}
function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type, props);
  }
}
function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}

function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedElement(parentInstance, type, props);
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}
function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {// TODO: warnForInsertedHydratedSuspense(parentInstance);
  }
}
function mountResponderInstance(responder, responderInstance, responderProps, responderState, instance) {
  // Listen to events
  var doc = instance.ownerDocument;
  var _ref = responder,
      rootEventTypes = _ref.rootEventTypes,
      targetEventTypes = _ref.targetEventTypes;

  if (targetEventTypes !== null) {
    listenToEventResponderEventTypes(targetEventTypes, doc);
  }

  if (rootEventTypes !== null) {
    addRootEventTypesForResponderInstance(responderInstance, rootEventTypes);
    listenToEventResponderEventTypes(rootEventTypes, doc);
  }

  mountEventResponder(responder, responderInstance, responderProps, responderState);
  return responderInstance;
}
function unmountResponderInstance(responderInstance) {
  if (enableFlareAPI) {
    // TODO stop listening to targetEventTypes
    unmountEventResponder(responderInstance);
  }
}
function getFundamentalComponentInstance(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var currentFiber = fundamentalInstance.currentFiber,
        impl = fundamentalInstance.impl,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var instance = impl.getInstance(null, props, state);
    precacheFiberNode(currentFiber, instance);
    return instance;
  } // Because of the flag above, this gets around the Flow error;


  return null;
}
function mountFundamentalComponent(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var impl = fundamentalInstance.impl,
        instance = fundamentalInstance.instance,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var onMount = impl.onMount;

    if (onMount !== undefined) {
      onMount(null, instance, props, state);
    }
  }
}
function shouldUpdateFundamentalComponent(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var impl = fundamentalInstance.impl,
        prevProps = fundamentalInstance.prevProps,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var shouldUpdate = impl.shouldUpdate;

    if (shouldUpdate !== undefined) {
      return shouldUpdate(null, prevProps, props, state);
    }
  }

  return true;
}
function updateFundamentalComponent(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var impl = fundamentalInstance.impl,
        instance = fundamentalInstance.instance,
        prevProps = fundamentalInstance.prevProps,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var onUpdate = impl.onUpdate;

    if (onUpdate !== undefined) {
      onUpdate(null, instance, prevProps, props, state);
    }
  }
}
function unmountFundamentalComponent(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var impl = fundamentalInstance.impl,
        instance = fundamentalInstance.instance,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var onUnmount = impl.onUnmount;

    if (onUnmount !== undefined) {
      onUnmount(null, instance, props, state);
    }
  }
}
function getInstanceFromNode$2(node) {
  return getClosestInstanceFromNode(node) || null;
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
var internalContainerInstanceKey = '__reactContainere$' + randomKey;
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  {
    {
      throw Error("getNodeFromInstance: Invalid argument.");
    }
  }
}
function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}
function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */

var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

var eventTypes$1 = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
}; // Track whether we've ever handled a keypress on the space key.

var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */


function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes$1.compositionStart;

    case TOP_COMPOSITION_END:
      return eventTypes$1.compositionEnd;

    case TOP_COMPOSITION_UPDATE:
      return eventTypes$1.compositionUpdate;
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes$1.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes$1.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes$1.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes$1.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);

    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */


function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);

    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */


function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes$1.beforeInput, targetInst, nativeEvent, nativeEventTarget);
  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


var BeforeInputEventPlugin = {
  eventTypes: eventTypes$1,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

var eventTypes$2 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$2.change, inst, nativeEvent, target);
  event.type = 'change'; // Flag this event loop as needing state restore.

  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  if (!disableInputAttributeSyncing) {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


var ChangeEventPlugin = {
  eventTypes: eventTypes$2,
  _isInputEventSupported: isInputEventSupported,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
    var getTargetInstFunc, handleEventFunc;

    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);

      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    } // When blurring, set the value attribute for number inputs


    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

var eventTypes$3 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
}; // We track the lastNativeEvent to ensure that when we encounter
// cases where we process the same nativeEvent multiple times,
// which can happen when have multiple ancestors, that we don't
// duplicate enter

var lastNativeEvent;
var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$3,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      // If this is an over event with a target, then we've already dispatched
      // the event in the out event of the other target. If this is replayed,
      // then it's because we couldn't dispatch against this target previously
      // so we have to do it now instead.
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win;

    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;

      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;

    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;

      if (to !== null) {
        var nearestMounted = getNearestMountedFiber(to);

        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
          to = null;
        }
      }
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$3.mouseLeave;
      enterEventType = eventTypes$3.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$3.pointerLeave;
      enterEventType = eventTypes$3.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);
    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;
    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;
    accumulateEnterLeaveDispatches(leave, enter, from, to);

    if (nativeEvent === lastNativeEvent) {
      lastNativeEvent = null;
      return [leave];
    }

    lastNativeEvent = nativeEvent;
    return [leave, enter];
  }
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var is$1 = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (is$1(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$2.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
var eventTypes$4 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};
var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$4.select, activeElementInst$1, nativeEvent, nativeEventTarget);
    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;
    accumulateTwoPhaseDispatches(syntheticEvent);
    return syntheticEvent;
  }

  return null;
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


var SelectEventPlugin = {
  eventTypes: eventTypes$4,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var doc = getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.

    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }

        break;

      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.

      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;

      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.

      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }

      // falls through

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */

injection.injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
/**
 * Some important event plugins included by default (without having to require
 * them).
 */

injection.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = "\u269B";
var warningEmoji = "\u26D4";
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).

var currentPhase = null;
var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.

var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
// to avoid stretch the commit phase with measurement overhead.

var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + " " + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
  var suffix = warning ? " Warning: " + warning : '';
  return "" + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);

  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {} // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.
  // Clear marks immediately to avoid growing buffer.


  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + " (#" + debugID + ")";
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
  } else {
    // Composite component methods.
    return componentName + "." + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }

  labelsInCurrentCommit.add(label);
  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;

    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }

  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;

  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }

    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }

  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}
function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }

    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}


function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, this is the fiber to unwind from.


    currentFiber = fiber;

    if (!beginFiberMark(fiber, null)) {
      return;
    }

    fiber._debugIsCurrentlyTiming = true;
  }
}
function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.


    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}
function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}
function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}
function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    clearPendingPhaseMeasurement();

    if (!beginFiberMark(fiber, phase)) {
      return;
    }

    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}
function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }

    currentPhase = null;
    currentPhaseFiber = null;
  }
}
function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;

    if (!supportsUserTiming) {
      return;
    }

    commitCountInCurrentWorkLoop = 0; // This is top level call.
    // Any other measurements are performed within.

    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

    resumeTimers();
  }
}
function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = "An update to " + componentName + " interrupted the previous render";
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }

    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}
function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}
function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }

    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();
    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}
function startCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}
function stopCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
  }
}
function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}
function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
  }
}
function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}
function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      warningWithoutStack$1(false, 'Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  if (disableLegacyContext) {
    return;
  } else {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  if (disableLegacyContext) {
    return false;
  } else {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  if (disableLegacyContext) {
    return false;
  } else {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  if (disableLegacyContext) {
    return;
  } else {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  if (disableLegacyContext) {
    return;
  } else {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  if (disableLegacyContext) {
    return;
  } else {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  if (disableLegacyContext) {
    return parentContext;
  } else {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;
          warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext;

    {
      setCurrentPhase('getChildContext');
    }

    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();

    {
      setCurrentPhase(null);
    }

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      getCurrentFiberStackInDev);
    }

    return _assign({}, parentContext, {}, childContext);
  }
}

function pushContextProvider(workInProgress) {
  if (disableLegacyContext) {
    return false;
  } else {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  if (disableLegacyContext) {
    return;
  } else {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
}

var LegacyRoot = 0;
var BlockingRoot = 1;
var ConcurrentRoot = 2;

// Intentionally not named imports because Rollup would use dynamic dispatch for
// CommonJS interop named imports.
var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
var Scheduler_now = Scheduler.unstable_now;
var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

if (enableSchedulerTracing) {
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority$2 = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now = initialTimeMs < 10000 ? Scheduler_now : function () {
  return Scheduler_now() - initialTimeMs;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority$2;

    case Scheduler_NormalPriority:
      return NormalPriority;

    case Scheduler_LowPriority:
      return LowPriority;

    case Scheduler_IdlePriority:
      return IdlePriority;

    default:
      {
        {
          throw Error("Unknown priority level.");
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority$2:
      return Scheduler_UserBlockingPriority;

    case NormalPriority:
      return Scheduler_NormalPriority;

    case LowPriority:
      return Scheduler_LowPriority;

    case IdlePriority:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error("Unknown priority level.");
        }
      }

  }
}

function runWithPriority$2(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    try {
      var _isSync = true;
      var queue = syncQueue;
      runWithPriority$2(ImmediatePriority, function () {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(_isSync);
          } while (callback !== null);
        }
      });
      syncQueue = null;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
      throw error;
    } finally {
      isFlushingSyncQueue = false;
    }
  }
}

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
// tag instead

var BlockingMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
// Never work can be committed in an inconsistent state without tearing the UI.
// The main example is offscreen content, like a hidden subtree. So one possible
// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
// which are inconsistent in the sense that they haven't finished yet, but
// aren't visibly inconsistent because the server rendered HTML matches what the
// hydrated tree would look like.

var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
// order to be consistent.

var Idle = 2; // Continuous Hydration is a moving priority. It is slightly higher than Idle
// and is used to increase priority of hover targets. It is increasing with
// each usage so that last always wins.

var ContinuousHydration = 3;
var Sync = MAX_SIGNED_31_BIT_INT;
var Batched = Sync - 1;
var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}
function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
// the names to reflect.


var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;
function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}
function computeSuspenseExpiration(currentTime, timeoutMs) {
  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
} // We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.

var HIGH_PRIORITY_EXPIRATION = 500;
var HIGH_PRIORITY_BATCH_SIZE = 100;
function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}
function computeContinuousHydrationExpiration(currentTime) {
  // Each time we ask for a new one of these we increase the priority.
  // This ensures that the last one always wins since we can't deprioritize
  // once we've scheduled work already.
  return ContinuousHydration++;
}
function inferPriorityFromExpirationTime(currentTime, expirationTime) {
  if (expirationTime === Sync) {
    return ImmediatePriority;
  }

  if (expirationTime === Never || expirationTime === Idle) {
    return IdlePriority;
  }

  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

  if (msUntil <= 0) {
    return ImmediatePriority;
  }

  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
    return UserBlockingPriority$2;
  }

  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
    return NormalPriority;
  } // TODO: Handle LowPriority
  // Assume anything lower has idle priority


  return IdlePriority;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var lowPriorityWarningWithoutStack = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.warn(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarningWithoutStack = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  };
}

var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
      warningWithoutStack$1(false, 'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      warningWithoutStack$1(false, 'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      warningWithoutStack$1(false, 'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);
      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, strictRootComponentStack);
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    syncUpdates(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;

      default:
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleWork(fiber, Sync);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;

      default:
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}
function readLazyComponentType(lazyComponent) {
  initializeLazyComponentType(lazyComponent);

  if (lazyComponent._status !== Resolved) {
    throw lazyComponent._result;
  }

  return lazyComponent._result;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer = rendererSigil;
    }
  } else {
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;

    {
      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer2 = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    context._currentValue = currentValue;
  } else {
    context._currentValue2 = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (is$1(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;

      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime, null);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var alternate = fiber.alternate;

          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          } // Since we already found a match, we can stop traversing the
          // dependency list.


          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedFragment) {
      // If a dehydrated suspense bounudary is in this subtree, we don't know
      // if it will have any context consumers in it. The best we can do is
      // mark it as having updates.
      var parentSuspense = fiber.return;

      if (!(parentSuspense !== null)) {
        {
          throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
        }
      }

      if (parentSuspense.expirationTime < renderExpirationTime) {
        parentSuspense.expirationTime = renderExpirationTime;
      }

      var _alternate = parentSuspense.alternate;

      if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
        _alternate.expirationTime = renderExpirationTime;
      } // This is intentionally passing this fiber as the parent
      // because we want to schedule this fiber as having work
      // on its children. We'll use the childExpirationTime on
      // this fiber to indicate that a context has changed.


      scheduleWorkOnParentPath(parentSuspense, renderExpirationTime);
      nextFiber = fiber.sibling;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (dependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
  }

  if (lastContextWithAllBitsObserved === context) {// Nothing to do. We already observe everything in this context.
  } else if (observedBits === false || observedBits === 0) {// Do not observe any updates.
  } else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        expirationTime: NoWork,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
}

// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which can be
// mutated and processed asynchronously before it is committed — a form of
// double buffering. If a work-in-progress render is discarded before finishing,
// we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.
var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;


{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;

  
}

function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function cloneUpdateQueue(currentQueue) {
  var queue = {
    baseState: currentQueue.baseState,
    firstUpdate: currentQueue.firstUpdate,
    lastUpdate: currentQueue.lastUpdate,
    // TODO: With resuming, if we bail out and resuse the child tree, we should
    // keep these effects.
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function createUpdate(expirationTime, suspenseConfig) {
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null,
    nextEffect: null
  };

  {
    update.priority = getCurrentPriorityLevel();
  }

  return update;
}

function appendUpdateToQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.lastUpdate === null) {
    // Queue is empty
    queue.firstUpdate = queue.lastUpdate = update;
  } else {
    queue.lastUpdate.next = update;
    queue.lastUpdate = update;
  }
}

function enqueueUpdate(fiber, update) {
  // Update queues are created lazily.
  var alternate = fiber.alternate;
  var queue1;
  var queue2;

  if (alternate === null) {
    // There's only one fiber.
    queue1 = fiber.updateQueue;
    queue2 = null;

    if (queue1 === null) {
      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
    }
  } else {
    // There are two owners.
    queue1 = fiber.updateQueue;
    queue2 = alternate.updateQueue;

    if (queue1 === null) {
      if (queue2 === null) {
        // Neither fiber has an update queue. Create new ones.
        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
      } else {
        // Only one fiber has an update queue. Clone to create a new one.
        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
      }
    } else {
      if (queue2 === null) {
        // Only one fiber has an update queue. Clone to create a new one.
        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
      } else {// Both owners have an update queue.
      }
    }
  }

  if (queue2 === null || queue1 === queue2) {
    // There's only a single queue.
    appendUpdateToQueue(queue1, update);
  } else {
    // There are two queues. We need to append the update to both queues,
    // while accounting for the persistent structure of the list — we don't
    // want the same update to be added multiple times.
    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
      // One of the queues is not empty. We must add the update to both queues.
      appendUpdateToQueue(queue1, update);
      appendUpdateToQueue(queue2, update);
    } else {
      // Both queues are non-empty. The last update is the same in both lists,
      // because of structural sharing. So, only append to one of the lists.
      appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

      queue2.lastUpdate = update;
    }
  }

  {
    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, update) {
  // Captured updates go into a separate list, and only on the work-in-
  // progress queue.
  var workInProgressQueue = workInProgress.updateQueue;

  if (workInProgressQueue === null) {
    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
  } else {
    // TODO: I put this here rather than createWorkInProgress so that we don't
    // clone the queue unnecessarily. There's probably a better way to
    // structure this.
    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
  } // Append the update to the end of the list.


  if (workInProgressQueue.lastCapturedUpdate === null) {
    // This is the first render phase update
    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
  } else {
    workInProgressQueue.lastCapturedUpdate.next = update;
    workInProgressQueue.lastCapturedUpdate = update;
  }
}

function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
  var current = workInProgress.alternate;

  if (current !== null) {
    // If the work-in-progress queue is equal to the current queue,
    // we need to clone it first.
    if (queue === current.updateQueue) {
      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
    }
  }

  return queue;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              payload.call(instance, prevState, nextProps);
            }
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
  hasForceUpdate = false;
  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

  {
    currentlyProcessingQueue = queue;
  } // These values may change as we process the queue.


  var newBaseState = queue.baseState;
  var newFirstUpdate = null;
  var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

  var update = queue.firstUpdate;
  var resultState = newBaseState;

  while (update !== null) {
    var updateExpirationTime = update.expirationTime;

    if (updateExpirationTime < renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstUpdate === null) {
        // This is the first skipped update. It will be the first update in
        // the new list.
        newFirstUpdate = update; // Since this is the first update that was skipped, the current result
        // is the new base state.

        newBaseState = resultState;
      } // Since this update will remain in the list, update the remaining
      // expiration time.


      if (newExpirationTime < updateExpirationTime) {
        newExpirationTime = updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority.
      // Mark the event time of this update as relevant to this render pass.
      // TODO: This should ideally use the true event time of this update rather than
      // its priority which is a derived and not reverseable value.
      // TODO: We should skip this update if it was already committed but currently
      // we have no way of detecting the difference between a committed and suspended
      // update here.
      markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process it and compute a new result.

      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var callback = update.callback;

      if (callback !== null) {
        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

        update.nextEffect = null;

        if (queue.lastEffect === null) {
          queue.firstEffect = queue.lastEffect = update;
        } else {
          queue.lastEffect.nextEffect = update;
          queue.lastEffect = update;
        }
      }
    } // Continue to the next update.


    update = update.next;
  } // Separately, iterate though the list of captured updates.


  var newFirstCapturedUpdate = null;
  update = queue.firstCapturedUpdate;

  while (update !== null) {
    var _updateExpirationTime = update.expirationTime;

    if (_updateExpirationTime < renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstCapturedUpdate === null) {
        // This is the first skipped captured update. It will be the first
        // update in the new list.
        newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
        // the new base state.

        if (newFirstUpdate === null) {
          newBaseState = resultState;
        }
      } // Since this update will remain in the list, update the remaining
      // expiration time.


      if (newExpirationTime < _updateExpirationTime) {
        newExpirationTime = _updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback = update.callback;

      if (_callback !== null) {
        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

        update.nextEffect = null;

        if (queue.lastCapturedEffect === null) {
          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
        } else {
          queue.lastCapturedEffect.nextEffect = update;
          queue.lastCapturedEffect = update;
        }
      }
    }

    update = update.next;
  }

  if (newFirstUpdate === null) {
    queue.lastUpdate = null;
  }

  if (newFirstCapturedUpdate === null) {
    queue.lastCapturedUpdate = null;
  } else {
    workInProgress.effectTag |= Callback;
  }

  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
    // We processed every update, without skipping. That means the new base
    // state is the same as the result state.
    newBaseState = resultState;
  }

  queue.baseState = newBaseState;
  queue.firstUpdate = newFirstUpdate;
  queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
  // This should be fine because the only two other things that contribute to
  // expiration time are props and context. We're already in the middle of the
  // begin phase by the time we start processing the queue, so we've already
  // dealt with the props. Context in components that specify
  // shouldComponentUpdate is tricky; but we'll have to account for
  // that regardless.

  markUnprocessedUpdateTime(newExpirationTime);
  workInProgress.expirationTime = newExpirationTime;
  workInProgress.memoizedState = resultState;

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
  // If the finished render included captured updates, and there are still
  // lower priority updates left over, we need to keep the captured updates
  // in the queue so that they are rebased and not dropped once we process the
  // queue again at the lower priority.
  if (finishedQueue.firstCapturedUpdate !== null) {
    // Join the captured update list to the end of the normal list.
    if (finishedQueue.lastUpdate !== null) {
      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
    } // Clear the list of captured updates.


    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
  } // Commit the effects


  commitUpdateEffects(finishedQueue.firstEffect, instance);
  finishedQueue.firstEffect = finishedQueue.lastEffect = null;
  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
}

function commitUpdateEffects(effect, instance) {
  while (effect !== null) {
    var callback = effect.callback;

    if (callback !== null) {
      effect.callback = null;
      callCallback(callback, instance);
    }

    effect = effect.nextEffect;
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
function requestCurrentSuspenseConfig() {
  return ReactCurrentBatchConfig.suspense;
}

var fakeInternalInstance = {};
var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback$1;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback$1 = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + "_" + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);
      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);
        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
    var noInstancePropTypes = !instance.propTypes;
    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
    var noInstanceContextType = !instance.contextType;
    !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;

    if (disableLegacyContext) {
      if (ctor.childContextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy childContextTypes API which is no longer supported. ' + 'Use React.createContext() instead.', name);
      }

      if (ctor.contextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy contextTypes API which is no longer supported. ' + 'Use React.createContext() with static contextType instead.', name);
      }
    } else {
      var noInstanceContextTypes = !instance.contextTypes;
      !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);
        warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
    var hasMutatedProps = instance.props !== newProps;
    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
    var noInstanceDefaultProps = !instance.defaultProps;
    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function') {
      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else if (!disableLegacyContext) {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);
        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);
        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else if (disableLegacyContext) {
    instance.context = emptyContextObject;
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    updateQueue = workInProgress.updateQueue;

    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else if (!disableLegacyContext) {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else if (!disableLegacyContext) {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');

      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    child._store.validated = true;
    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
    warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray = Array.isArray;

function coerceRef(returnFiber, current$$1, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if (returnFiber.mode & StrictMode || warnAboutStringRefs) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          if (warnAboutStringRefs) {
            warningWithoutStack$1(false, 'Component "%s" contains the string ref "%s". Support for string refs ' + 'will be removed in a future major release. We recommend using ' + 'useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', componentName, mixedRef, getStackByFiberInDevAndProd(returnFiber));
          } else {
            warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error("Function components cannot have refs. Did you mean to use React.forwardRef()?");
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
        return current$$1.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
        }
      }

      if (!element._owner) {
        {
          throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';

    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }

    {
      {
        throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum);
      }
    }
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current$$1 = newFiber.alternate;

    if (current$$1 !== null) {
      var oldIndex = current$$1.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current$$1, element, expirationTime) {
    if (current$$1 !== null && (current$$1.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
    isCompatibleFamilyForHotReloading(current$$1, element)))) {
      // Move based on index
      var existing = useFiber(current$$1, element.props, expirationTime);
      existing.ref = coerceRef(returnFiber, current$$1, element);
      existing.return = returnFiber;

      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }

      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
      created.ref = coerceRef(returnFiber, current$$1, element);
      created.return = returnFiber;
      return created;
    }
  }

  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, portal.children || [], expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
    if (current$$1 === null || current$$1.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, fragment, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
          break;

        default:
          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error("An iterable object provided no iterator.");
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
        isCompatibleFamilyForHotReloading(child, element))) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, child, element);
          existing.return = returnFiber;

          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }

          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case FunctionComponent:
          {
            var Component = returnFiber.type;

            {
              {
                throw Error((Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current$$1, workInProgress) {
  if (!(current$$1 === null || workInProgress.child === current$$1.child)) {
    {
      throw Error("Resuming work not yet implemented.");
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, renderExpirationTime) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, renderExpirationTime);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

var emptyObject = {};
var isArray$2 = Array.isArray;
function createResponderInstance(responder, responderProps, responderState, fiber) {
  return {
    fiber: fiber,
    props: responderProps,
    responder: responder,
    rootEventTypes: null,
    state: responderState
  };
}

function mountEventResponder$1(responder, responderProps, fiber, respondersMap, rootContainerInstance) {
  var responderState = emptyObject;
  var getInitialState = responder.getInitialState;

  if (getInitialState !== null) {
    responderState = getInitialState(responderProps);
  }

  var responderInstance = createResponderInstance(responder, responderProps, responderState, fiber);

  if (!rootContainerInstance) {
    var node = fiber;

    while (node !== null) {
      var tag = node.tag;

      if (tag === HostComponent) {
        rootContainerInstance = node.stateNode;
        break;
      } else if (tag === HostRoot) {
        rootContainerInstance = node.stateNode.containerInfo;
        break;
      }

      node = node.return;
    }
  }

  mountResponderInstance(responder, responderInstance, responderProps, responderState, rootContainerInstance);
  respondersMap.set(responder, responderInstance);
}

function updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance) {
  var responder;
  var props;

  if (listener) {
    responder = listener.responder;
    props = listener.props;
  }

  if (!(responder && responder.$$typeof === REACT_RESPONDER_TYPE)) {
    {
      throw Error("An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponder().");
    }
  }

  var listenerProps = props;

  if (visistedResponders.has(responder)) {
    // show warning
    {
      warning$1(false, 'Duplicate event responder "%s" found in event listeners. ' + 'Event listeners passed to elements cannot use the same event responder more than once.', responder.displayName);
    }

    return;
  }

  visistedResponders.add(responder);
  var responderInstance = respondersMap.get(responder);

  if (responderInstance === undefined) {
    // Mount (happens in either complete or commit phase)
    mountEventResponder$1(responder, listenerProps, fiber, respondersMap, rootContainerInstance);
  } else {
    // Update (happens during commit phase only)
    responderInstance.props = listenerProps;
    responderInstance.fiber = fiber;
  }
}

function updateEventListeners(listeners, fiber, rootContainerInstance) {
  var visistedResponders = new Set();
  var dependencies = fiber.dependencies;

  if (listeners != null) {
    if (dependencies === null) {
      dependencies = fiber.dependencies = {
        expirationTime: NoWork,
        firstContext: null,
        responders: new Map()
      };
    }

    var respondersMap = dependencies.responders;

    if (respondersMap === null) {
      respondersMap = new Map();
    }

    if (isArray$2(listeners)) {
      for (var i = 0, length = listeners.length; i < length; i++) {
        var listener = listeners[i];
        updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance);
      }
    } else {
      updateEventListener(listeners, fiber, visistedResponders, respondersMap, rootContainerInstance);
    }
  }

  if (dependencies !== null) {
    var _respondersMap = dependencies.responders;

    if (_respondersMap !== null) {
      // Unmount
      var mountedResponders = Array.from(_respondersMap.keys());

      for (var _i = 0, _length = mountedResponders.length; _i < _length; _i++) {
        var mountedResponder = mountedResponders[_i];

        if (!visistedResponders.has(mountedResponder)) {
          var responderInstance = _respondersMap.get(mountedResponder);

          unmountResponderInstance(responderInstance);

          _respondersMap.delete(mountedResponder);
        }
      }
    }
  }
}
function createResponderListener(responder, props) {
  var eventResponderListener = {
    responder: responder,
    props: props
  };

  {
    Object.freeze(eventResponderListener);
  }

  return eventResponderListener;
}

var NoEffect$1 =
/*             */
0;
var UnmountSnapshot =
/*      */
2;
var UnmountMutation =
/*      */
4;
var MountMutation =
/*        */
8;
var UnmountLayout =
/*        */
16;
var MountLayout =
/*          */
32;
var MountPassive =
/*         */
64;
var UnmountPassive =
/*       */
128;

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime$1 = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var nextCurrentHook = null;
var firstWorkInProgressHook = null;
var workInProgressHook = null;
var nextWorkInProgressHook = null;
var remainingExpirationTime = NoWork;
var componentUpdateQueue = null;
var sideEffectTag = 0; // Updates scheduled during render will trigger an immediate re-render at the
// end of the current pass. We can't store these updates on the normal queue,
// because if the work is aborted, they should be discarded. Because this is
// a relatively rare case, we also don't want to add an additional field to
// either the hook or queue object types. So we store them in a lazily create
// map of queue -> render-phase updates, which are discarded once the component
// completes without re-rendering.
// Whether an update was scheduled during the currently executing render pass.

var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

var renderPhaseUpdates = null; // Counter to prevent infinite loops.

var numberOfReRenders = 0;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      warning$1(false, '%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (is$1(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
  renderExpirationTime$1 = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;
  nextCurrentHook = current !== null ? current.memoizedState : null;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  } // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // remainingExpirationTime = NoWork;
  // componentUpdateQueue = null;
  // didScheduleRenderPhaseUpdate = false;
  // renderPhaseUpdates = null;
  // numberOfReRenders = 0;
  // sideEffectTag = 0;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because nextCurrentHook === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so nextCurrentHook would be null during updates and mounts.


  {
    if (nextCurrentHook !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, refOrContext);

  if (didScheduleRenderPhaseUpdate) {
    do {
      didScheduleRenderPhaseUpdate = false;
      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      nextCurrentHook = current !== null ? current.memoizedState : null;
      nextWorkInProgressHook = firstWorkInProgressHook;
      currentHook = null;
      workInProgressHook = null;
      componentUpdateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
      children = Component(props, refOrContext);
    } while (didScheduleRenderPhaseUpdate);

    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
  var renderedWork = currentlyRenderingFiber$1;
  renderedWork.memoizedState = firstWorkInProgressHook;
  renderedWork.expirationTime = remainingExpirationTime;
  renderedWork.updateQueue = componentUpdateQueue;
  renderedWork.effectTag |= sideEffectTag;

  {
    renderedWork._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderExpirationTime$1 = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  nextCurrentHook = null;
  firstWorkInProgressHook = null;
  workInProgressHook = null;
  nextWorkInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  remainingExpirationTime = NoWork;
  componentUpdateQueue = null;
  sideEffectTag = 0; // These were reset above
  // didScheduleRenderPhaseUpdate = false;
  // renderPhaseUpdates = null;
  // numberOfReRenders = 0;

  if (!!didRenderTooFewHooks) {
    {
      throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);

  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}
function resetHooks() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This is used to reset the state of this module when a component throws.
  // It's also called inside mountIndeterminateComponent if we determine the
  // component is a module-style component.

  renderExpirationTime$1 = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  nextCurrentHook = null;
  firstWorkInProgressHook = null;
  workInProgressHook = null;
  nextWorkInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
  }

  remainingExpirationTime = NoWork;
  componentUpdateQueue = null;
  sideEffectTag = 0;
  didScheduleRenderPhaseUpdate = false;
  renderPhaseUpdates = null;
  numberOfReRenders = 0;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    queue: null,
    baseUpdate: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    firstWorkInProgressHook = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
    nextCurrentHook = currentHook !== null ? currentHook.next : null;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error("Rendered more hooks than during the previous render.");
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      queue: currentHook.queue,
      baseUpdate: currentHook.baseUpdate,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      workInProgressHook = firstWorkInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }

    nextCurrentHook = currentHook.next;
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
  currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    }
  }

  queue.lastRenderedReducer = reducer;

  if (numberOfReRenders > 0) {
    // This is a re-render. Apply the new render phase updates to the previous
    // work-in-progress hook.
    var _dispatch = queue.dispatch;

    if (renderPhaseUpdates !== null) {
      // Render phase updates are stored in a map of queue -> linked list
      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

      if (firstRenderPhaseUpdate !== undefined) {
        renderPhaseUpdates.delete(queue);
        var newState = hook.memoizedState;
        var update = firstRenderPhaseUpdate;

        do {
          // Process this render phase update. We don't have to check the
          // priority because it will always be the same as the current
          // render's.
          var action = update.action;
          newState = reducer(newState, action);
          update = update.next;
        } while (update !== null); // Mark that the fiber performed work, but only if the new state is
        // different from the current state.


        if (!is$1(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }

        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
        // the base state unless the queue is empty.
        // TODO: Not sure if this is the desired semantics, but it's what we
        // do for gDSFP. I can't remember why.

        if (hook.baseUpdate === queue.last) {
          hook.baseState = newState;
        }

        queue.lastRenderedState = newState;
        return [newState, _dispatch];
      }
    }

    return [hook.memoizedState, _dispatch];
  } // The last update in the entire queue


  var last = queue.last; // The last update that is part of the base state.

  var baseUpdate = hook.baseUpdate;
  var baseState = hook.baseState; // Find the first unprocessed update.

  var first;

  if (baseUpdate !== null) {
    if (last !== null) {
      // For the first update, the queue is a circular linked list where
      // `queue.last.next = queue.first`. Once the first update commits, and
      // the `baseUpdate` is no longer empty, we can unravel the list.
      last.next = null;
    }

    first = baseUpdate.next;
  } else {
    first = last !== null ? last.next : null;
  }

  if (first !== null) {
    var _newState = baseState;
    var newBaseState = null;
    var newBaseUpdate = null;
    var prevUpdate = baseUpdate;
    var _update = first;
    var didSkip = false;

    do {
      var updateExpirationTime = _update.expirationTime;

      if (updateExpirationTime < renderExpirationTime$1) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        if (!didSkip) {
          didSkip = true;
          newBaseUpdate = prevUpdate;
          newBaseState = _newState;
        } // Update the remaining priority in the queue.


        if (updateExpirationTime > remainingExpirationTime) {
          remainingExpirationTime = updateExpirationTime;
          markUnprocessedUpdateTime(remainingExpirationTime);
        }
      } else {
        // This update does have sufficient priority.
        // Mark the event time of this update as relevant to this render pass.
        // TODO: This should ideally use the true event time of this update rather than
        // its priority which is a derived and not reverseable value.
        // TODO: We should skip this update if it was already committed but currently
        // we have no way of detecting the difference between a committed and suspended
        // update here.
        markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig); // Process this update.

        if (_update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          _newState = _update.eagerState;
        } else {
          var _action = _update.action;
          _newState = reducer(_newState, _action);
        }
      }

      prevUpdate = _update;
      _update = _update.next;
    } while (_update !== null && _update !== first);

    if (!didSkip) {
      newBaseUpdate = prevUpdate;
      newBaseState = _newState;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!is$1(_newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = _newState;
    hook.baseUpdate = newBaseUpdate;
    hook.baseState = newBaseState;
    queue.lastRenderedState = _newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
  currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer, initialState);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  sideEffectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(NoEffect$1, create, destroy, nextDeps);
        return;
      }
    }
  }

  sideEffectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value, config) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [value, config]);
  return prevValue;
}

function updateDeferredValue(value, config) {
  var _updateState = updateState(value),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [value, config]);
  return prevValue;
}

function mountTransition(config) {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1];

  var startTransition = mountCallback(function (callback) {
    setPending(true);
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [config, isPending]);
  return [startTransition, isPending];
}

function updateTransition(config) {
  var _updateState2 = updateState(false),
      isPending = _updateState2[0],
      setPending = _updateState2[1];

  var startTransition = updateCallback(function (callback) {
    setPending(true);
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [config, isPending]);
  return [startTransition, isPending];
}

function dispatchAction(fiber, queue, action) {
  if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
    {
      throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
    }
  }

  {
    !(typeof arguments[3] !== 'function') ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
  }

  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    var update = {
      expirationTime: renderExpirationTime$1,
      suspenseConfig: null,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    {
      update.priority = getCurrentPriorityLevel();
    }

    if (renderPhaseUpdates === null) {
      renderPhaseUpdates = new Map();
    }

    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

    if (firstRenderPhaseUpdate === undefined) {
      renderPhaseUpdates.set(queue, update);
    } else {
      // Append the update to the end of the list.
      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

      while (lastRenderPhaseUpdate.next !== null) {
        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      }

      lastRenderPhaseUpdate.next = update;
    }
  } else {
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var _update2 = {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    {
      _update2.priority = getCurrentPriorityLevel();
    } // Append the update to the end of the list.


    var last = queue.last;

    if (last === null) {
      // This is the first update. Create a circular list.
      _update2.next = _update2;
    } else {
      var first = last.next;

      if (first !== null) {
        // Still circular.
        _update2.next = first;
      }

      last.next = _update2;
    }

    queue.last = _update2;

    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          _update2.eagerReducer = lastRenderedReducer;
          _update2.eagerState = eagerState;

          if (is$1(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleWork(fiber, expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useResponder: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;

{
  var warnInvalidContextAccess = function () {
    warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      mountHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
}

// CommonJS interop named imports.

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {
  if (!enableProfilerTimer) {
    return;
  }

  commitTime = now$1();
}

function startProfilerTimer(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
  if (!enableProfilerTimer) {
    return;
  }

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function warnIfHydrating() {
  {
    !!isHydrating ? warning$1(false, 'We should not be hydrating here. This is a bug in React. Please file a bug.') : void 0;
  }
}

function enterHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance) {
  if (!supportsHydration) {
    return false;
  }

  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
  popToNextHostParent(fiber);
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type, props);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;

            case SuspenseComponent:
              
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type, props);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {
        if (enableSuspenseServerRenderer) {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              retryTime: Never
            };
            fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
            // This simplifies the code for getHostSibling and deleting nodes,
            // since it doesn't have to consider all Suspense boundaries and
            // check if they're dehydrated ones or not.

            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            dehydratedFragment.return = fiber;
            fiber.child = dehydratedFragment;
            return true;
          }
        }

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function prepareToHydrateHostSuspenseInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  hydrateSuspenseInstance(suspenseInstance, fiber);
}

function skipPastDehydratedSuspenseInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {
  if (!supportsHydration) {
    return;
  }

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutMaxDuration;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;
var didWarnAboutDefaultPropsOnFunctionComponent;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutMaxDuration = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
  didWarnAboutDefaultPropsOnFunctionComponent = {};
}

function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  if (current$$1 === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their their
  // identity matches.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);

    if (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }

    setCurrentPhase(null);
  }

  if (current$$1 !== null && !didReceiveUpdate) {
    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current$$1 === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current$$1, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }

  var currentChild = current$$1.child; // This is always exactly one child

  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }

      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

      if (outerPropTypes) {
        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      } // Inner propTypes will be validated in the function component path.

    }
  }

  if (current$$1 !== null) {
    var prevProps = current$$1.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload:
    workInProgress.type === current$$1.type)) {
      didReceiveUpdate = false;

      if (updateExpirationTime < renderExpirationTime) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    }
  }

  return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
  if (enableProfilerTimer) {
    workInProgress.effectTag |= Update;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current$$1, workInProgress) {
  var ref = workInProgress.ref;

  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var context;

  if (!disableLegacyContext) {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);

    if (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }

    setCurrentPhase(null);
  }

  if (current$$1 !== null && !didReceiveUpdate) {
    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current$$1 !== null) {
      // An class component without an instance only mounts if it suspended
      // inside a non- concurrent tree, in an inconsistent state. We want to
      // tree it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current$$1.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.effectTag |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current$$1 === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

  {
    var inst = workInProgress.stateNode;

    if (inst.props !== nextProps) {
      !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current$$1, workInProgress);
  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$3.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFrom catch is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    if (enableProfilerTimer) {
      stopProfilerTimerIfRunning(workInProgress);
    }
  } else {
    {
      setCurrentPhase('render');
      nextChildren = instance.render();

      if (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        instance.render();
      }

      setCurrentPhase(null);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (current$$1 !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(updateQueue !== null)) {
    {
      throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag = node.effectTag & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also have access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
    if (enableSchedulerTracing) {
      markSpawnedWork(Never);
    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current$$1, workInProgress) {
  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // An lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.

  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        break;
      }

    default:
      {
        var hint = '';

        {
          if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = ' Did you wrap a component in React.lazy() more than once?';
          }
        } // This message intentionally doesn't mention ForwardRef or MemoComponent
        // because the fact that it's a separate type of work is an
        // implementation detail.


        {
          {
            throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
          }
        }
      }
  }

  return child;
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  if (!disableLegacyContext) {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    ReactCurrentOwner$3.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        warningWithoutStack$1(false, 'The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    resetHooks(); // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {
      if (disableLegacyContext && Component.contextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy contextTypes API which is no longer supported. ' + 'Use React.createContext() with React.useContext() instead.', getComponentName(Component) || 'Unknown');
      }

      if (debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderExpirationTime);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  if (Component) {
    !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
  }

  if (workInProgress.ref !== null) {
    var info = '';
    var ownerName = getCurrentFiberOwnerNameInDevOrNull();

    if (ownerName) {
      info += '\n\nCheck the render method of `' + ownerName + '`.';
    }

    var warningKey = ownerName || workInProgress._debugID || '';
    var debugSource = workInProgress._debugSource;

    if (debugSource) {
      warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
    }

    if (!didWarnAboutFunctionRefs[warningKey]) {
      didWarnAboutFunctionRefs[warningKey] = true;
      warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
    }
  }

  if (warnAboutDefaultPropsOnFunctionComponents && Component.defaultProps !== undefined) {
    var componentName = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
      warningWithoutStack$1(false, '%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);
      didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
    }
  }

  if (typeof Component.getDerivedStateFromProps === 'function') {
    var _componentName2 = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
      warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', _componentName2);
      didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
    }
  }

  if (typeof Component.contextType === 'object' && Component.contextType !== null) {
    var _componentName3 = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
      warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName3);
      didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryTime: NoWork
};

function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress) {
  // If the context is telling us that we should show a fallback, and we're not
  // already showing content, then we should show the fallback instead.
  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current$$1 === null || current$$1.memoizedState !== null);
}

function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.effectTag |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var nextDidTimeout = false;
  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current$$1, workInProgress)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current$$1 === null || current$$1.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext);

  {
    if ('maxDuration' in nextProps) {
      if (!didWarnAboutMaxDuration) {
        didWarnAboutMaxDuration = true;
        warning$1(false, 'maxDuration has been removed from React. ' + 'Remove the maxDuration prop.');
      }
    }
  } // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.


  if (current$$1 === null) {
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

      if (enableSuspenseServerRenderer) {
        var suspenseState = workInProgress.memoizedState;

        if (suspenseState !== null) {
          var dehydrated = suspenseState.dehydrated;

          if (dehydrated !== null) {
            return mountDehydratedSuspenseComponent(workInProgress, dehydrated, renderExpirationTime);
          }
        }
      }
    } // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.


    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
      primaryChildFragment.return = workInProgress;

      if ((workInProgress.mode & BlockingMode) === NoMode) {
        // Outside of blocking mode, we commit the effects from the
        // partially completed, timed-out tree, too.
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
        var progressedChild = progressedPrimaryChild;

        while (progressedChild !== null) {
          progressedChild.return = primaryChildFragment;
          progressedChild = progressedChild.sibling;
        }
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
      // fallback children.

      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current$$1.memoizedState;

    if (prevState !== null) {
      if (enableSuspenseServerRenderer) {
        var _dehydrated = prevState.dehydrated;

        if (_dehydrated !== null) {
          if (!didSuspend) {
            return updateDehydratedSuspenseComponent(current$$1, workInProgress, _dehydrated, prevState, renderExpirationTime);
          } else if (workInProgress.memoizedState !== null) {
            // Something suspended and we should still be in dehydrated mode.
            // Leave the existing child in place.
            workInProgress.child = current$$1.child; // The dehydrated completion pass expects this flag to be there
            // but the normal suspense pass doesn't.

            workInProgress.effectTag |= DidCapture;
            return null;
          } else {
            // Suspended but we should no longer be in dehydrated mode.
            // Therefore we now have to render the fallback. Wrap the children
            // in a fragment fiber to keep them separate from the fallback
            // children.
            var _nextFallbackChildren = nextProps.fallback;

            var _primaryChildFragment = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
            // going to render this fragment.
            null, mode, NoWork, null);

            _primaryChildFragment.return = workInProgress; // This is always null since we never want the previous child
            // that we're not going to hydrate.

            _primaryChildFragment.child = null;

            if ((workInProgress.mode & BlockingMode) === NoMode) {
              // Outside of blocking mode, we commit the effects from the
              // partially completed, timed-out tree, too.
              var _progressedChild = _primaryChildFragment.child = workInProgress.child;

              while (_progressedChild !== null) {
                _progressedChild.return = _primaryChildFragment;
                _progressedChild = _progressedChild.sibling;
              }
            } else {
              // We will have dropped the effect list which contains the deletion.
              // We need to reconcile to delete the current child.
              reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var treeBaseDuration = 0;
              var hiddenChild = _primaryChildFragment.child;

              while (hiddenChild !== null) {
                treeBaseDuration += hiddenChild.treeBaseDuration;
                hiddenChild = hiddenChild.sibling;
              }

              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
            } // Create a fragment from the fallback children, too.


            var _fallbackChildFragment = createFiberFromFragment(_nextFallbackChildren, mode, renderExpirationTime, null);

            _fallbackChildFragment.return = workInProgress;
            _primaryChildFragment.sibling = _fallbackChildFragment;
            _fallbackChildFragment.effectTag |= Placement;
            _primaryChildFragment.childExpirationTime = NoWork;
            workInProgress.memoizedState = SUSPENDED_MARKER;
            workInProgress.child = _primaryChildFragment; // Skip the primary children, and continue working on the
            // fallback children.

            return _fallbackChildFragment;
          }
        }
      } // The current tree already timed out. That means each child set is
      // wrapped in a fragment fiber.


      var currentPrimaryChildFragment = current$$1.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren2 = nextProps.fallback;

        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

        _primaryChildFragment2.return = workInProgress;

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState = workInProgress.memoizedState;

          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment2.child = _progressedPrimaryChild;
            var _progressedChild2 = _progressedPrimaryChild;

            while (_progressedChild2 !== null) {
              _progressedChild2.return = _primaryChildFragment2;
              _progressedChild2 = _progressedChild2.sibling;
            }
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;

          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }

          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        } // Clone the fallback child fragment, too. These we'll continue
        // working on.


        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2, currentFallbackChildFragment.expirationTime);

        _fallbackChildFragment2.return = workInProgress;
        _primaryChildFragment2.sibling = _fallbackChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment2;
        return _fallbackChildFragment2;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?
        // Continue rendering the children, like we normally do.

        workInProgress.memoizedState = null;
        return workInProgress.child = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current$$1.child;

      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren3 = nextProps.fallback;

        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);

        _primaryChildFragment3.return = workInProgress;
        _primaryChildFragment3.child = _currentPrimaryChild;

        if (_currentPrimaryChild !== null) {
          _currentPrimaryChild.return = _primaryChildFragment3;
        } // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;


        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState2 = workInProgress.memoizedState;

          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

          _primaryChildFragment3.child = _progressedPrimaryChild2;
          var _progressedChild3 = _progressedPrimaryChild2;

          while (_progressedChild3 !== null) {
            _progressedChild3.return = _primaryChildFragment3;
            _progressedChild3 = _progressedChild3.sibling;
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration2 = 0;
          var _hiddenChild2 = _primaryChildFragment3.child;

          while (_hiddenChild2 !== null) {
            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
            _hiddenChild2 = _hiddenChild2.sibling;
          }

          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
        } // Create a fragment from the fallback children, too.


        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

        _fallbackChildFragment3.return = workInProgress;
        _primaryChildFragment3.sibling = _fallbackChildFragment3;
        _fallbackChildFragment3.effectTag |= Placement;
        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment3;
        return _fallbackChildFragment3;
      } else {
        // Still haven't timed out.  Continue rendering the children, like we
        // normally do.
        workInProgress.memoizedState = null;
        var _nextPrimaryChildren2 = nextProps.children;
        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
  }
}

function retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime) {
  // We're now not suspended nor dehydrated.
  workInProgress.memoizedState = null; // Retry with the full children.

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children; // This will ensure that the children get Placement effects and
  // that the old child gets a Deletion effect.
  // We could also call forceUnmountCurrentAndReconcile.

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderExpirationTime) {
  // During the first pass, we'll bail out and not drill into the children.
  // Instead, we'll leave the content in place and try to hydrate it later.
  if ((workInProgress.mode & BlockingMode) === NoMode) {
    {
      warning$1(false, 'Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOM.createBlockingRoot(container, { hydrate: true })' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
    }

    workInProgress.expirationTime = Sync;
  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This is a client-only boundary. Since we won't get any content from the server
    // for this, we need to schedule that at a higher priority based on when it would
    // have timed out. In theory we could render it in this pass but it would have the
    // wrong priority associated with it and will prevent hydration of parent path.
    // Instead, we'll leave work left on it to render it in a separate commit.
    // TODO This time should be the time at which the server rendered response that is
    // a parent to this boundary was displayed. However, since we currently don't have
    // a protocol to transfer that time, we'll just estimate it by using the current
    // time. This will mean that Suspense timeouts are slightly shifted to later than
    // they should be.
    var serverDisplayTime = requestCurrentTimeForUpdate(); // Schedule a normal pri update to render this content.

    var newExpirationTime = computeAsyncExpiration(serverDisplayTime);

    if (enableSchedulerTracing) {
      markSpawnedWork(newExpirationTime);
    }

    workInProgress.expirationTime = newExpirationTime;
  } else {
    // We'll continue hydrating the rest at offscreen priority since we'll already
    // be showing the right content coming from the server, it is no rush.
    workInProgress.expirationTime = Never;

    if (enableSchedulerTracing) {
      markSpawnedWork(Never);
    }
  }

  return null;
}

function updateDehydratedSuspenseComponent(current$$1, workInProgress, suspenseInstance, suspenseState, renderExpirationTime) {
  // We should never be hydrating at this point because it is the first pass,
  // but after we've already committed once.
  warnIfHydrating();

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  }

  if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This boundary is in a permanent fallback state. In this case, we'll never
    // get an update and we'll never be able to hydrate the final content. Let's just try the
    // client side render instead.
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  } // We use childExpirationTime to indicate that a child might depend on context, so if
  // any context has changed, we need to treat is as if the input might have changed.


  var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;

  if (didReceiveUpdate || hasContextChanged$$1) {
    // This boundary has changed since the first render. This means that we are now unable to
    // hydrate it. We might still be able to hydrate it using an earlier expiration time, if
    // we are rendering at lower expiration than sync.
    if (renderExpirationTime < Sync) {
      if (suspenseState.retryTime <= renderExpirationTime) {
        // This render is even higher pri than we've seen before, let's try again
        // at even higher pri.
        var attemptHydrationAtExpirationTime = renderExpirationTime + 1;
        suspenseState.retryTime = attemptHydrationAtExpirationTime;
        scheduleWork(current$$1, attemptHydrationAtExpirationTime); // TODO: Early abort this render.
      } else {// We have already tried to ping at a higher priority than we're rendering with
          // so if we got here, we must have failed to hydrate at those levels. We must
          // now give up. Instead, we're going to delete the whole subtree and instead inject
          // a new real Suspense boundary to take its place, which may render content
          // or fallback. This might suspend for a while and if it does we might still have
          // an opportunity to hydrate before this pass commits.
        }
    } // If we have scheduled higher pri work above, this will probably just abort the render
    // since we now have higher priority work, but in case it doesn't, we need to prepare to
    // render something, if we time out. Even if that requires us to delete everything and
    // skip hydration.
    // Delay having to do this as long as the suspense timeout allows us.


    renderDidSuspendDelayIfPossible();
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  } else if (isSuspenseInstancePending(suspenseInstance)) {
    // This component is still pending more data from the server, so we can't hydrate its
    // content. We treat it as if this component suspended itself. It might seem as if
    // we could just try to render it client-side instead. However, this will perform a
    // lot of unnecessary work and is unlikely to complete since it often will suspend
    // on missing data anyway. Additionally, the server might be able to render more
    // than we can on the client yet. In that case we'd end up with more fallback states
    // on the client than if we just leave it alone. If the server times out or errors
    // these should update this boundary to the permanent Fallback state instead.
    // Mark it as having captured (i.e. suspended).
    workInProgress.effectTag |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

    workInProgress.child = current$$1.child; // Register a callback to retry this boundary once the server has sent the result.

    registerSuspenseInstanceRetry(suspenseInstance, retryDehydratedSuspenseBoundary.bind(null, current$$1));
    return null;
  } else {
    // This is the first attempt.
    reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance);
    var nextProps = workInProgress.pendingProps;
    var nextChildren = nextProps.children;
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag |= Hydrating;
      node = node.sibling;
    }

    workInProgress.child = child;
    return workInProgress.child;
  }
}

function scheduleWorkOnFiber(fiber, renderExpirationTime) {
  if (fiber.expirationTime < renderExpirationTime) {
    fiber.expirationTime = renderExpirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
    alternate.expirationTime = renderExpirationTime;
  }

  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderExpirationTime);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            }

          case 'forward':
          case 'backward':
            {
              warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            }

          default:
            warning$1(false, '"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            break;
        }
      } else {
        warning$1(false, '%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;
        warning$1(false, '"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;
        warning$1(false, '<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';
      warning$1(false, 'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          warning$1(false, 'A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailExpiration = 0;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.effectTag |= DidCapture;
  } else {
    var didSuspendBefore = current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    // Outside of blocking mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current$$1 === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  }

  return workInProgress.child;
}

function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;
          warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    newChildren = render(newValue);
    setCurrentPhase(null);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateFundamentalComponent$1(current$$1, workInProgress, renderExpirationTime) {
  var fundamentalImpl = workInProgress.type.impl;

  if (fundamentalImpl.reconcileChildren === false) {
    return null;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateScopeComponent(current$$1, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current$$1 !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current$$1.dependencies;
  }

  if (enableProfilerTimer) {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning(workInProgress);
  }

  var updateExpirationTime = workInProgress.expirationTime;

  if (updateExpirationTime !== NoWork) {
    markUnprocessedUpdateTime(updateExpirationTime);
  } // Check if the children have any pending work.


  var childExpirationTime = workInProgress.childExpirationTime;

  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current$$1, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current$$1.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current$$1;
      returnFiber.lastEffect = current$$1;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
    }

    current$$1.nextEffect = null;
    current$$1.effectTag = Deletion;
    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork$1(current$$1, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  {
    if (workInProgress._debugNeedsRemount && current$$1 !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current$$1, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
    }
  }

  if (current$$1 !== null) {
    var oldProps = current$$1.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
    workInProgress.type !== current$$1.type)) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);

          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
            if (enableSchedulerTracing) {
              markSpawnedWork(Never);
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
          }

          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          if (enableProfilerTimer) {
            // Profiler should only call onRender when one of its descendants actually rendered.
            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (hasChildWork) {
              workInProgress.effectTag |= Update;
            }
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              if (enableSuspenseServerRenderer) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                  // been unsuspended it has committed as a resolved Suspense component.
                  // If it needs to be retried, it should have work scheduled on it.

                  workInProgress.effectTag |= DidCapture;
                  break;
                }
              } // If this boundary is currently timed out, we need to decide
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;

            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (didSuspendBefore) {
              if (_hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.effectTag |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (_hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }
      }

      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    } else {
      // An update was scheduled on this fiber, but there are no new props
      // nor legacy context. Set this to false. If an update queue or context
      // consumer produces a changed value, it will set this to true. Otherwise,
      // the component will assume the children have not changed and bail out.
      didReceiveUpdate = false;
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear the expiration time.


  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current$$1, workInProgress, workInProgress.type, renderExpirationTime);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current$$1, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }

    case HostRoot:
      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

    case HostComponent:
      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

    case HostText:
      return updateHostText(current$$1, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

    case HostPortal:
      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }

    case Fragment:
      return updateFragment(current$$1, workInProgress, renderExpirationTime);

    case Mode:
      return updateMode(current$$1, workInProgress, renderExpirationTime);

    case Profiler:
      return updateProfiler(current$$1, workInProgress, renderExpirationTime);

    case ContextProvider:
      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

    case ContextConsumer:
      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          return updateFundamentalComponent$1(current$$1, workInProgress, renderExpirationTime);
        }

        break;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          return updateScopeComponent(current$$1, workInProgress, renderExpirationTime);
        }

        break;
      }
  }

  {
    {
      throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
  }
}

function createFundamentalStateInstance(currentFiber, props, impl, state) {
  return {
    currentFiber: currentFiber,
    impl: impl,
    instance: null,
    prevProps: null,
    props: props,
    state: state
  };
}

function isFiberSuspenseAndTimedOut(fiber) {
  return fiber.tag === SuspenseComponent && fiber.memoizedState !== null;
}

function getSuspenseFallbackChild(fiber) {
  return fiber.child.sibling.child;
}

var emptyObject$1 = {};

function collectScopedNodes(node, fn, scopedNodes) {
  if (enableScopeAPI) {
    if (node.tag === HostComponent) {
      var _type = node.type,
          memoizedProps = node.memoizedProps,
          stateNode = node.stateNode;

      var _instance = getPublicInstance(stateNode);

      if (_instance !== null && fn(_type, memoizedProps || emptyObject$1, _instance) === true) {
        scopedNodes.push(_instance);
      }
    }

    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      collectScopedNodesFromChildren(child, fn, scopedNodes);
    }
  }
}

function collectFirstScopedNode(node, fn) {
  if (enableScopeAPI) {
    if (node.tag === HostComponent) {
      var _type2 = node.type,
          memoizedProps = node.memoizedProps,
          stateNode = node.stateNode;

      var _instance2 = getPublicInstance(stateNode);

      if (_instance2 !== null && fn(_type2, memoizedProps, _instance2) === true) {
        return _instance2;
      }
    }

    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      return collectFirstScopedNodeFromChildren(child, fn);
    }
  }

  return null;
}

function collectScopedNodesFromChildren(startingChild, fn, scopedNodes) {
  var child = startingChild;

  while (child !== null) {
    collectScopedNodes(child, fn, scopedNodes);
    child = child.sibling;
  }
}

function collectFirstScopedNodeFromChildren(startingChild, fn) {
  var child = startingChild;

  while (child !== null) {
    var scopedNode = collectFirstScopedNode(child, fn);

    if (scopedNode !== null) {
      return scopedNode;
    }

    child = child.sibling;
  }

  return null;
}

function collectNearestScopeMethods(node, scope, childrenScopes) {
  if (isValidScopeNode(node, scope)) {
    childrenScopes.push(node.stateNode.methods);
  } else {
    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      collectNearestChildScopeMethods(child, scope, childrenScopes);
    }
  }
}

function collectNearestChildScopeMethods(startingChild, scope, childrenScopes) {
  var child = startingChild;

  while (child !== null) {
    collectNearestScopeMethods(child, scope, childrenScopes);
    child = child.sibling;
  }
}

function isValidScopeNode(node, scope) {
  return node.tag === ScopeComponent && node.type === scope && node.stateNode !== null;
}

function createScopeMethods(scope, instance) {
  return {
    getChildren: function () {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;
      var childrenScopes = [];

      if (child !== null) {
        collectNearestChildScopeMethods(child, scope, childrenScopes);
      }

      return childrenScopes.length === 0 ? null : childrenScopes;
    },
    getChildrenFromRoot: function () {
      var currentFiber = instance.fiber;
      var node = currentFiber;

      while (node !== null) {
        var parent = node.return;

        if (parent === null) {
          break;
        }

        node = parent;

        if (node.tag === ScopeComponent && node.type === scope) {
          break;
        }
      }

      var childrenScopes = [];
      collectNearestChildScopeMethods(node.child, scope, childrenScopes);
      return childrenScopes.length === 0 ? null : childrenScopes;
    },
    getParent: function () {
      var node = instance.fiber.return;

      while (node !== null) {
        if (node.tag === ScopeComponent && node.type === scope) {
          return node.stateNode.methods;
        }

        node = node.return;
      }

      return null;
    },
    getProps: function () {
      var currentFiber = instance.fiber;
      return currentFiber.memoizedProps;
    },
    queryAllNodes: function (fn) {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;
      var scopedNodes = [];

      if (child !== null) {
        collectScopedNodesFromChildren(child, fn, scopedNodes);
      }

      return scopedNodes.length === 0 ? null : scopedNodes;
    },
    queryFirstNode: function (fn) {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;

      if (child !== null) {
        return collectFirstScopedNodeFromChildren(child, fn);
      }

      return null;
    },
    containsNode: function (node) {
      var fiber = getInstanceFromNode$2(node);

      while (fiber !== null) {
        if (fiber.tag === ScopeComponent && fiber.type === scope && fiber.stateNode === instance) {
          return true;
        }

        fiber = fiber.return;
      }

      return false;
    }
  };
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

if (supportsMutation) {
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        appendInitialChild(parent, node.stateNode.instance);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
} else if (supportsPersistence) {
  // Persistent host tree mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      // eslint-disable-next-line no-labels
      branches: if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var props = node.memoizedProps;
          var type = node.type;
          instance = cloneHiddenInstance(instance, type, props, node);
        }

        appendInitialChild(parent, instance);
      } else if (node.tag === HostText) {
        var _instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var text = node.memoizedProps;
          _instance = cloneHiddenTextInstance(_instance, text, node);
        }

        appendInitialChild(parent, _instance);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        var _instance2 = node.stateNode.instance;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var _props = node.memoizedProps;
          var _type = node.type;
          _instance2 = cloneHiddenInstance(_instance2, _type, _props, node);
        }

        appendInitialChild(parent, _instance2);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.tag === SuspenseComponent) {
        if ((node.effectTag & Update) !== NoEffect) {
          // Need to toggle the visibility of the primary children.
          var newIsHidden = node.memoizedState !== null;

          if (newIsHidden) {
            var primaryChildParent = node.child;

            if (primaryChildParent !== null) {
              if (primaryChildParent.child !== null) {
                primaryChildParent.child.return = primaryChildParent;
                appendAllChildren(parent, primaryChildParent, true, newIsHidden);
              }

              var fallbackChildParent = primaryChildParent.sibling;

              if (fallbackChildParent !== null) {
                fallbackChildParent.return = node;
                node = fallbackChildParent;
                continue;
              }
            }
          }
        }

        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


      node = node;

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }; // An unfortunate fork of appendAllChildren because we have two different parent types.


  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      // eslint-disable-next-line no-labels
      branches: if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var props = node.memoizedProps;
          var type = node.type;
          instance = cloneHiddenInstance(instance, type, props, node);
        }

        appendChildToContainerChildSet(containerChildSet, instance);
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var text = node.memoizedProps;
          _instance3 = cloneHiddenTextInstance(_instance3, text, node);
        }

        appendChildToContainerChildSet(containerChildSet, _instance3);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        var _instance4 = node.stateNode.instance;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var _props2 = node.memoizedProps;
          var _type2 = node.type;
          _instance4 = cloneHiddenInstance(_instance4, _type2, _props2, node);
        }

        appendChildToContainerChildSet(containerChildSet, _instance4);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.tag === SuspenseComponent) {
        if ((node.effectTag & Update) !== NoEffect) {
          // Need to toggle the visibility of the primary children.
          var newIsHidden = node.memoizedState !== null;

          if (newIsHidden) {
            var primaryChildParent = node.child;

            if (primaryChildParent !== null) {
              if (primaryChildParent.child !== null) {
                primaryChildParent.child.return = primaryChildParent;
                appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
              }

              var fallbackChildParent = primaryChildParent.sibling;

              if (fallbackChildParent !== null) {
                fallbackChildParent.return = node;
                node = fallbackChildParent;
                continue;
              }
            }
          }
        }

        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


      node = node;

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    var childrenUnchanged = workInProgress.firstEffect === null;

    if (childrenUnchanged) {// No changes, just reuse the existing instance.
    } else {
      var container = portalOrRoot.containerInfo;
      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

      markUpdate(workInProgress);
      finalizeContainerChildren(container, newChildSet);
    }
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    var currentInstance = current.stateNode;
    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
    // This guarantees that we can reuse all of them.

    var childrenUnchanged = workInProgress.firstEffect === null;

    if (childrenUnchanged && oldProps === newProps) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }

    var recyclableInstance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    var updatePayload = null;

    if (oldProps !== newProps) {
      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    }

    if (childrenUnchanged && updatePayload === null) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }

    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
      markUpdate(workInProgress);
    }

    workInProgress.stateNode = newInstance;

    if (childrenUnchanged) {
      // If there are no other effects in this tree, we need to flag this node as having one.
      // Even though we're not going to use it for anything.
      // Otherwise parents won't know that there are new children to propagate upwards.
      markUpdate(workInProgress);
    } else {
      // If children might have changed, we have to add them all to the set.
      appendAllChildren(newInstance, workInProgress, false, false);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    if (oldText !== newText) {
      // If the text content differs, we'll create a new text instance for it.
      var rootContainerInstance = getRootHostContainer();
      var currentHostContext = getHostContext();
      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
      // This lets the parents know that at least one of their children has changed.

      markUpdate(workInProgress);
    }
  };
} else {
  // No host operations
  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      break;

    case LazyComponent:
      break;

    case SimpleMemoComponent:
    case FunctionComponent:
      break;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          }
        }

        updateHostContainer(workInProgress);
        break;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (enableFlareAPI) {
            var prevListeners = current.memoizedProps.listeners;
            var nextListeners = newProps.listeners;

            if (prevListeners !== nextListeners) {
              markUpdate(workInProgress);
            }
          }

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            } // This can happen when we abort work.


            break;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on we want to add then top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node needs to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }

            if (enableFlareAPI) {
              var listeners = newProps.listeners;

              if (listeners != null) {
                updateEventListeners(listeners, workInProgress, rootContainerInstance);
              }
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

            workInProgress.stateNode = instance;

            if (enableFlareAPI) {
              var _listeners = newProps.listeners;

              if (_listeners != null) {
                updateEventListeners(_listeners, workInProgress, rootContainerInstance);
              }
            } // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.


            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        break;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        break;
      }

    case ForwardRef:
      break;

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if (enableSuspenseServerRenderer) {
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current === null) {
              var _wasHydrated3 = popHydrationState(workInProgress);

              if (!_wasHydrated3) {
                {
                  throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
              }

              prepareToHydrateHostSuspenseInstance(workInProgress);

              if (enableSchedulerTracing) {
                markSpawnedWork(Never);
              }

              return null;
            } else {
              // We should never have been in a hydration state if we didn't have a current.
              // However, in some of those paths, we might have reentered a hydration state
              // and then we might be inside a hydration state. In that case, we'll need to
              // exit out of it.
              resetHydrationState();

              if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                // This boundary did not suspend so it's now hydrated and unsuspended.
                workInProgress.memoizedState = null;
              } // If nothing suspended, we need to schedule an effect to mark this boundary
              // as having hydrated so events know that they're free be invoked.
              // It's also a signal to replay events and the suspense callback.
              // If something suspended, schedule an effect to attach retry listeners.
              // So we might as well always mark this.


              workInProgress.effectTag |= Update;
              return null;
            }
          }
        }

        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;

          if (!nextDidTimeout && prevState !== null) {
            // We just switched from the fallback to the normal children.
            // Delete the fallback.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode during the begin phase?
            var currentFallbackChild = current.child.sibling;

            if (currentFallbackChild !== null) {
              // Deletions go at the beginning of the return fiber's effect list
              var first = workInProgress.firstEffect;

              if (first !== null) {
                workInProgress.firstEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = first;
              } else {
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = null;
              }

              currentFallbackChild.effectTag = Deletion;
            }
          }
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in blocking mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BlockingMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        if (supportsPersistence) {
          // TODO: Only schedule updates if not prevDidTimeout.
          if (nextDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the proimse. This flag is also used to hide the
            // primary children.
            workInProgress.effectTag |= Update;
          }
        }

        if (supportsMutation) {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the proimse. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if the
            // is currently timed out, too.
            workInProgress.effectTag |= Update;
          }
        }

        if (enableSuspenseCallback && workInProgress.updateQueue !== null && workInProgress.memoizedProps.suspenseCallback != null) {
          // Always notify the callback
          workInProgress.effectTag |= Update;
        }

        break;
      }

    case Fragment:
      break;

    case Mode:
      break;

    case Profiler:
      break;

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      break;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      break;

    case ContextConsumer:
      break;

    case MemoComponent:
      break;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        break;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode. We don't do anything
          // in this mode.
          break;
        }

        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.effectTag |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.effectTag |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.effectTag |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                // We need to delete the row we just rendered.
                // Reset the effect list to what it was before we rendered this
                // child. The nested children have already appended themselves.
                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                if (lastEffect !== null) {
                  lastEffect.nextEffect = null;
                } // We're done.


                return null;
              }
            } else if (now() > renderState.tailExpiration && renderExpirationTime > Never) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. If we can show
              // them, then they really have the same priority as this render.
              // So we'll pick it back up the very next render pass once we've had
              // an opportunity to yield for paint.

              var nextPriority = renderExpirationTime - 1;
              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

              if (enableSchedulerTracing) {
                markSpawnedWork(nextPriority);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          if (renderState.tailExpiration === 0) {
            // Heuristic for how long we're willing to spend rendering rows
            // until we just give up and show what we have so far.
            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
          } // Pop a row.


          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        break;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalImpl = workInProgress.type.impl;
          var fundamentalInstance = workInProgress.stateNode;

          if (fundamentalInstance === null) {
            var getInitialState = fundamentalImpl.getInitialState;
            var fundamentalState;

            if (getInitialState !== undefined) {
              fundamentalState = getInitialState(newProps);
            }

            fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(workInProgress, newProps, fundamentalImpl, fundamentalState || {});

            var _instance5 = getFundamentalComponentInstance(fundamentalInstance);

            fundamentalInstance.instance = _instance5;

            if (fundamentalImpl.reconcileChildren === false) {
              return null;
            }

            appendAllChildren(_instance5, workInProgress, false, false);
            mountFundamentalComponent(fundamentalInstance);
          } else {
            // We fire update in commit phase
            var prevProps = fundamentalInstance.props;
            fundamentalInstance.prevProps = prevProps;
            fundamentalInstance.props = newProps;
            fundamentalInstance.currentFiber = workInProgress;

            if (supportsPersistence) {
              var _instance6 = cloneFundamentalInstance(fundamentalInstance);

              fundamentalInstance.instance = _instance6;
              appendAllChildren(_instance6, workInProgress, false, false);
            }

            var shouldUpdate = shouldUpdateFundamentalComponent(fundamentalInstance);

            if (shouldUpdate) {
              markUpdate(workInProgress);
            }
          }
        }

        break;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          if (current === null) {
            var _type3 = workInProgress.type;
            var scopeInstance = {
              fiber: workInProgress,
              methods: null
            };
            workInProgress.stateNode = scopeInstance;
            scopeInstance.methods = createScopeMethods(_type3, scopeInstance);

            if (enableFlareAPI) {
              var _listeners2 = newProps.listeners;

              if (_listeners2 != null) {
                var _rootContainerInstance2 = getRootHostContainer();

                updateEventListeners(_listeners2, workInProgress, _rootContainerInstance2);
              }
            }

            if (workInProgress.ref !== null) {
              markRef$1(workInProgress);
              markUpdate(workInProgress);
            }
          } else {
            if (enableFlareAPI) {
              var _prevListeners = current.memoizedProps.listeners;
              var _nextListeners = newProps.listeners;

              if (_prevListeners !== _nextListeners || workInProgress.ref !== null) {
                markUpdate(workInProgress);
              }
            } else {
              if (workInProgress.ref !== null) {
                markUpdate(workInProgress);
              }
            }

            if (current.ref !== workInProgress.ref) {
              markRef$1(workInProgress);
            }
          }
        }

        break;
      }

    default:
      {
        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

  }

  return null;
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var effectTag = workInProgress.effectTag;

        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;

        if (!((_effectTag & DidCapture) === NoEffect)) {
          {
            throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
          }
        }

        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        if (enableSuspenseServerRenderer) {
          var suspenseState = workInProgress.memoizedState;

          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (!(workInProgress.alternate !== null)) {
              {
                throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
            }

            resetHydrationState();
          }
        }

        var _effectTag2 = workInProgress.effectTag;

        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;

    default:
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError) {
  return true;
}

function logCapturedError(capturedError) {
  var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.

  if (logError === false) {
    return;
  }

  var error = capturedError.error;

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      } // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.


      console.error(error); // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }

    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

    console.error(combinedMessage);
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;

  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current$$1, instance) {
  startPhaseTimer(current$$1, 'componentWillUnmount');
  instance.props = current$$1.memoizedProps;
  instance.state = current$$1.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current$$1, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current$$1, unmountError);
    }
  }
}

function safelyDetachRef(current$$1) {
  var ref = current$$1.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current$$1, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current$$1, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current$$1, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);
                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }

        return;
      }

    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function commitHookEffectList(unmountTag, mountTag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & unmountTag) !== NoEffect$1) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      if ((effect.tag & mountTag) !== NoEffect$1) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var _destroy = effect.destroy;

          if (_destroy !== undefined && typeof _destroy !== 'function') {
            var addendum = void 0;

            if (_destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof _destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + _destroy;
            }

            warningWithoutStack$1(false, 'An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  if ((finishedWork.effectTag & Passive) !== NoEffect) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
          commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
          break;
        }

      default:
        break;
    }
  }
}

function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
        break;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.effectTag & Update) {
          if (current$$1 === null) {
            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }

        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
        }

        return;
      }

    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current$$1 === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props, finishedWork);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        if (enableProfilerTimer) {
          var onRender = finishedWork.memoizedProps.onRender;

          if (typeof onRender === 'function') {
            if (enableSchedulerTracing) {
              onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
            } else {
              onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
      return;

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  if (supportsMutation) {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
        // Found a nested Suspense component that timed out. Skip over the
        // primary child fragment, which should remain hidden.
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag


    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {
      instanceToUse = instance.methods;
    }

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current$$1) {
  var currentRef = current$$1.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current$$1, renderPriorityLevel) {
  onCommitUnmount(current$$1);

  switch (current$$1.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        var updateQueue = current$$1.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next; // When the owner fiber is deleted, the destroy function of a passive
            // effect hook is called during the synchronous commit phase. This is
            // a concession to implementation complexity. Calling it in the
            // passive effect phase (like they usually are, when dependencies
            // change during an update) would require either traversing the
            // children of the deleted fiber again, or including unmount effects
            // as part of the fiber effect list.
            //
            // Because this is during the sync commit phase, we need to change
            // the priority.
            //
            // TODO: Reconsider this implementation trade off.

            var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
            runWithPriority$2(priorityLevel, function () {
              var effect = firstEffect;

              do {
                var destroy = effect.destroy;

                if (destroy !== undefined) {
                  safelyCallDestroy(current$$1, destroy);
                }

                effect = effect.next;
              } while (effect !== firstEffect);
            });
          }
        }

        break;
      }

    case ClassComponent:
      {
        safelyDetachRef(current$$1);
        var instance = current$$1.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current$$1, instance);
        }

        return;
      }

    case HostComponent:
      {
        if (enableFlareAPI) {
          var dependencies = current$$1.dependencies;

          if (dependencies !== null) {
            var respondersMap = dependencies.responders;

            if (respondersMap !== null) {
              var responderInstances = Array.from(respondersMap.values());

              for (var i = 0, length = responderInstances.length; i < length; i++) {
                var responderInstance = responderInstances[i];
                unmountResponderInstance(responderInstance);
              }

              dependencies.responders = null;
            }
          }
        }

        safelyDetachRef(current$$1);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        if (supportsMutation) {
          unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
        } else if (supportsPersistence) {
          emptyPortalContainer(current$$1);
        }

        return;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalInstance = current$$1.stateNode;

          if (fundamentalInstance !== null) {
            unmountFundamentalComponent(fundamentalInstance);
            current$$1.stateNode = null;
          }
        }

        return;
      }

    case DehydratedFragment:
      {
        if (enableSuspenseCallback) {
          var hydrationCallbacks = finishedRoot.hydrationCallbacks;

          if (hydrationCallbacks !== null) {
            var onDeleted = hydrationCallbacks.onDeleted;

            if (onDeleted) {
              onDeleted(current$$1.stateNode);
            }
          }
        }

        return;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          safelyDetachRef(current$$1);
        }
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
    !supportsMutation || node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current$$1) {
  var alternate = current$$1.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.

  current$$1.return = null;
  current$$1.child = null;
  current$$1.memoizedState = null;
  current$$1.updateQueue = null;
  current$$1.dependencies = null;
  current$$1.alternate = null;
  current$$1.firstEffect = null;
  current$$1.lastEffect = null;
  current$$1.pendingProps = null;
  current$$1.memoizedProps = null;

  if (alternate !== null) {
    detachFiber(alternate);
  }
}

function emptyPortalContainer(current$$1) {
  if (!supportsPersistence) {
    return;
  }

  var portal = current$$1.stateNode;
  var containerInfo = portal.containerInfo;
  var emptyChildSet = createContainerChildSet(containerInfo);
  replaceContainerChildren(containerInfo, emptyChildSet);
}

function commitContainer(finishedWork) {
  if (!supportsPersistence) {
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
    case HostComponent:
    case HostText:
    case FundamentalComponent:
      {
        return;
      }

    case HostRoot:
    case HostPortal:
      {
        var portalOrRoot = finishedWork.stateNode;
        var containerInfo = portalOrRoot.containerInfo,
            pendingChildren = portalOrRoot.pendingChildren;
        replaceContainerChildren(containerInfo, pendingChildren);
        return;
      }

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {
  if (!supportsMutation) {
    return;
  } // Recursively insert all host nodes into the parent.


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:
      if (enableFundamentalAPI) {
        parent = parentStateNode.instance;
        isContainer = false;
      }

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

  }

  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  var node = finishedWork;

  while (true) {
    var isHost = node.tag === HostComponent || node.tag === HostText;

    if (isHost || enableFundamentalAPI && node.tag === FundamentalComponent) {
      var stateNode = isHost ? node.stateNode : node.stateNode.instance;

      if (before) {
        if (isContainer) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          insertBefore(parent, stateNode, before);
        }
      } else {
        if (isContainer) {
          appendChildToContainer(parent, stateNode);
        } else {
          appendChild(parent, stateNode);
        }
      }
    } else if (node.tag === HostPortal) {// If the insertion itself is a portal, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === finishedWork) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case FundamentalComponent:
            if (enableFundamentalAPI) {
              currentParent = parentStateNode.instance;
              currentParentIsContainer = false;
            }

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
      var fundamentalNode = node.stateNode.instance;
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, fundamentalNode);
      } else {
        removeChild(currentParent, fundamentalNode);
      }
    } else if (enableSuspenseServerRenderer && node.tag === DehydratedFragment) {
      if (enableSuspenseCallback) {
        var hydrationCallbacks = finishedRoot.hydrationCallbacks;

        if (hydrationCallbacks !== null) {
          var onDeleted = hydrationCallbacks.onDeleted;

          if (onDeleted) {
            onDeleted(node.stateNode);
          }
        }
      } // Delete the dehydrated suspense boundary and all of its content.


      if (currentParentIsContainer) {
        clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
      } else {
        clearSuspenseBoundary(currentParent, node.stateNode);
      }
    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current$$1) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current$$1) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current$$1, renderPriorityLevel) {
  if (supportsMutation) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
  } else {
    // Detach refs and call componentWillUnmount() on the whole subtree.
    commitNestedUnmounts(finishedRoot, current$$1, renderPriorityLevel);
  }

  detachFiber(current$$1);
}

function commitWork(current$$1, finishedWork) {
  if (!supportsMutation) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
        {
          // Note: We currently never use MountMutation, but useLayout uses
          // UnmountMutation.
          commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
          return;
        }

      case Profiler:
        {
          return;
        }

      case SuspenseComponent:
        {
          commitSuspenseComponent(finishedWork);
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case SuspenseListComponent:
        {
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case HostRoot:
        {
          if (supportsHydration) {
            var root = finishedWork.stateNode;

            if (root.hydrate) {
              // We've just hydrated. No need to hydrate again.
              root.hydrate = false;
              commitHydratedContainer(root.containerInfo);
            }
          }

          break;
        }
    }

    commitContainer(finishedWork);
    return;
  }

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        // Note: We currently never use MountMutation, but useLayout uses
        // UnmountMutation.
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
          }

          if (enableFlareAPI) {
            var prevListeners = oldProps.listeners;
            var nextListeners = newProps.listeners;

            if (prevListeners !== nextListeners) {
              updateEventListeners(nextListeners, finishedWork, null);
            }
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        if (supportsHydration) {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalInstance = finishedWork.stateNode;
          updateFundamentalComponent(fundamentalInstance);
        }

        return;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          var scopeInstance = finishedWork.stateNode;
          scopeInstance.fiber = finishedWork;

          if (enableFlareAPI) {
            var _newProps = finishedWork.memoizedProps;

            var _oldProps = current$$1 !== null ? current$$1.memoizedProps : _newProps;

            var _prevListeners = _oldProps.listeners;
            var _nextListeners = _newProps.listeners;

            if (_prevListeners !== _nextListeners) {
              updateEventListeners(_nextListeners, finishedWork, null);
            }
          }
        }

        return;
      }

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;
  var newDidTimeout;
  var primaryChildParent = finishedWork;

  if (newState === null) {
    newDidTimeout = false;
  } else {
    newDidTimeout = true;
    primaryChildParent = finishedWork.child;
    markCommitTimeOfFallback();
  }

  if (supportsMutation && primaryChildParent !== null) {
    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
  }

  if (enableSuspenseCallback && newState !== null) {
    var suspenseCallback = finishedWork.memoizedProps.suspenseCallback;

    if (typeof suspenseCallback === 'function') {
      var thenables = finishedWork.updateQueue;

      if (thenables !== null) {
        suspenseCallback(new Set(thenables));
      }
    } else {
      if (suspenseCallback !== undefined) {
        warning$1(false, 'Unexpected type for suspenseCallback.');
      }
    }
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
  if (!supportsHydration) {
    return;
  }

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current$$1 = finishedWork.alternate;

    if (current$$1 !== null) {
      var prevState = current$$1.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);

          if (enableSuspenseCallback) {
            var hydrationCallbacks = finishedRoot.hydrationCallbacks;

            if (hydrationCallbacks !== null) {
              var onHydrated = hydrationCallbacks.onHydrated;

              if (onHydrated) {
                onHydrated(suspenseInstance);
              }
            }
          }
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of thenables.
  // For each thenable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var thenables = finishedWork.updateQueue;

  if (thenables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    thenables.forEach(function (thenable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

      if (!retryCache.has(thenable)) {
        if (enableSchedulerTracing) {
          if (thenable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(thenable);
        thenable.then(retry, retry);
      }
    });
  }
}

function commitResetTextContent(current$$1) {
  if (!supportsMutation) {
    return;
  }

  resetTextContent(current$$1.stateNode);
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error = errorInfo.value;

    update.payload = function () {
      logError(fiber, errorInfo);
      return getDerivedStateFromError(error);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logError(fiber, errorInfo);
      }

      var error = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }

  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;
    checkForWrongSuspensePriorityInDEV(sourceFiber);
    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var thenables = _workInProgress.updateQueue;

        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        } // If the boundary is outside of blocking mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a blocking mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BlockingMode) === NoMode) {
          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(Sync, null);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.expirationTime = Sync; // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
        // this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, renderExpirationTime, thenable);
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;

      default:
        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var ceil = Math.ceil;
var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*                    */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
// Describes where we are in the React execution stack
var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The expiration time we're rendering

var renderExpirationTime = NoWork; // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
// This is conceptually a time stamp but expressed in terms of an ExpirationTime
// because we deal mostly with expiration times in the hot path, so this avoids
// the conversion happening in the hot path.

var workInProgressRootLatestProcessedExpirationTime = Sync;
var workInProgressRootLatestSuspenseTimeout = Sync;
var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
// This flag determines if it might be worthwhile to restart if an opportunity
// happens latere.

var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500;
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority;
var pendingPassiveEffectsExpirationTime = NoWork;
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.

var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.

var currentEventTime = NoWork;
function requestCurrentTimeForUpdate() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return msToExpirationTime(now());
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoWork) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = msToExpirationTime(now());
  return currentEventTime;
}
function getCurrentTime() {
  return msToExpirationTime(now());
}
function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return Sync;
  }

  var priorityLevel = getCurrentPriorityLevel();

  if ((mode & ConcurrentMode) === NoMode) {
    return priorityLevel === ImmediatePriority ? Sync : Batched;
  }

  if ((executionContext & RenderContext) !== NoContext) {
    // Use whatever time we're already rendering
    // TODO: Should there be a way to opt out, like with `runWithPriority`?
    return renderExpirationTime;
  }

  var expirationTime;

  if (suspenseConfig !== null) {
    // Compute an expiration time based on the Suspense timeout.
    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  } else {
    // Compute an expiration time based on the Scheduler priority.
    switch (priorityLevel) {
      case ImmediatePriority:
        expirationTime = Sync;
        break;

      case UserBlockingPriority$2:
        // TODO: Rename this to computeUserBlockingExpiration
        expirationTime = computeInteractiveExpiration(currentTime);
        break;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowPriority
        // TODO: Rename this to... something better.
        expirationTime = computeAsyncExpiration(currentTime);
        break;

      case IdlePriority:
        expirationTime = Idle;
        break;

      default:
        {
          {
            throw Error("Expected a valid priority level");
          }
        }

    }
  } // If we're in the middle of rendering a tree, do not update at the same
  // expiration time that is already rendering.
  // TODO: We shouldn't have to do this if the update is on a different root.
  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
  // the root when we check for this condition.


  if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
    // This is a trick to move this update into a separate batch
    expirationTime -= 1;
  }

  return expirationTime;
}
function scheduleUpdateOnFiber(fiber, expirationTime) {
  checkForNestedUpdates();
  warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return;
  }

  checkForInterruption(fiber, expirationTime);
  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
  // priority as an argument to that function and this one.

  var priorityLevel = getCurrentPriorityLevel();

  if (expirationTime === Sync) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of legacy mode.
        flushSyncCallbackQueue();
      }
    }
  } else {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, expirationTime);
  }

  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
  // discrete, even inside a discrete event.
  priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority)) {
    // This is the result of a discrete event. Track the lowest priority
    // discrete update per root so we can flush them early, if needed.
    if (rootsWithPendingDiscreteUpdates === null) {
      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
    } else {
      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
      }
    }
  }
}
var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  } // Walk the parent path to the root and update the child expiration time.


  var node = fiber.return;
  var root = null;

  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;

      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;

        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }

      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
  }

  if (root !== null) {
    if (workInProgressRoot === root) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that's unprocessed work on this root.
      markUnprocessedUpdateTime(expirationTime);

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: This happens to work when receiving an update during the render
        // phase, because of the trick inside computeExpirationForFiber to
        // subtract 1 from `renderExpirationTime` to move it into a
        // separate bucket. But we should probably model it with an exception,
        // using the same mechanism we use to force hydration of a subtree.
        // TODO: This does not account for low pri updates that were already
        // scheduled before the root started rendering. Need to track the next
        // pending expiration time (perhaps by backtracking the return path) and
        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
        markRootSuspendedAtTime(root, renderExpirationTime);
      }
    } // Mark that the root has a pending update.


    markRootUpdatedAtTime(root, expirationTime);
  }

  return root;
}

function getNextRootExpirationTimeToWorkOn(root) {
  // Determines the next expiration time that the root should render, taking
  // into account levels that may be suspended, or levels that may have
  // received a ping.
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    return lastExpiredTime;
  } // "Pending" refers to any update that hasn't committed yet, including if it
  // suspended. The "suspended" range is therefore a subset.


  var firstPendingTime = root.firstPendingTime;

  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
    // The highest priority pending time is not suspended. Let's work on that.
    return firstPendingTime;
  } // If the first pending time is suspended, check if there's a lower priority
  // pending level that we know about. Or check if we received a ping. Work
  // on whichever is higher priority.


  var lastPingedTime = root.lastPingedTime;
  var nextKnownPendingLevel = root.nextKnownPendingLevel;
  return lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the
// expiration time of the existing task is the same as the expiration time of
// the next level that the root has work on. This function is called on every
// update, and right before exiting a task.


function ensureRootIsScheduled(root) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    // Special case: Expired work should flush synchronously.
    root.callbackExpirationTime = Sync;
    root.callbackPriority = ImmediatePriority;
    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    return;
  }

  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
  var existingCallbackNode = root.callbackNode;

  if (expirationTime === NoWork) {
    // There's nothing to work on.
    if (existingCallbackNode !== null) {
      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      root.callbackPriority = NoPriority;
    }

    return;
  } // TODO: If this is an update, we already read the current time. Pass the
  // time as an argument.


  var currentTime = requestCurrentTimeForUpdate();
  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
  // expiration time. Otherwise, we'll cancel it and schedule a new one.

  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;
    var existingCallbackExpirationTime = root.callbackExpirationTime;

    if ( // Callback must have the exact same expiration time.
    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
    existingCallbackPriority >= priorityLevel) {
      // Existing callback is sufficient.
      return;
    } // Need to schedule a new task.
    // TODO: Instead of scheduling a new task, we should be able to change the
    // priority of the existing one.


    cancelCallback(existingCallbackNode);
  }

  root.callbackExpirationTime = expirationTime;
  root.callbackPriority = priorityLevel;
  var callbackNode;

  if (expirationTime === Sync) {
    // Sync React callbacks are scheduled on a special internal queue
    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else if (disableSchedulerTimeoutBasedOnReactExpirationTime) {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root));
  } else {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
    // ordering because tasks are processed in timeout order.
    {
      timeout: expirationTimeToMs(expirationTime) - now()
    });
  }

  root.callbackNode = callbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoWork;

  if (didTimeout) {
    // The render task took too long to complete. Mark the current time as
    // expired to synchronously render all expired work in a single batch.
    var currentTime = requestCurrentTimeForUpdate();
    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

    ensureRootIsScheduled(root);
    return null;
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

  if (expirationTime !== NoWork) {
    var originalCallbackNode = root.callbackNode;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Should not already be working.");
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(root);
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      if (enableSchedulerTracing) {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // There's still work left over. Exit without committing.
        stopInterruptedWorkLoopTimer();
      } else {
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        stopFinishedWorkLoopTimer();
        var finishedWork = root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
      }

      ensureRootIsScheduled(root);

      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
    }
  }

  return null;
}

function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error("Root did not complete. This is a bug in React.");
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // If this was an async render, the error may have happened due to
        // a mutation in a concurrent event. Try rendering one more time,
        // synchronously, to see if the error goes away. If there are
        // lower priority updates, let's include those, too, in case they
        // fix the inconsistency. Render at Idle to include all updates.
        // If it was Idle or Never or some not-yet-invented time, render
        // at that time.
        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
        // and therefore not hit this path again.

        break;
      }

    case RootSuspended:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        flushSuspensePriorityWarningInDEV(); // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.
        // If we have processed new updates during this render, we may now
        // have a new loading state ready. We want to ensure that we commit
        // that as soon as possible.

        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
        !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
          // If we have not processed any new updates during this pass, then
          // this is either a retry of an existing fallback state or a
          // hidden tree. Hidden trees shouldn't be batched with other work
          // and after that's fixed it can only be a retry. We're going to
          // throttle committing retries so that we don't show too many
          // loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            if (workInProgressRootHasPendingPing) {
              var lastPingedTime = root.lastPingedTime;

              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                // This render was pinged but we didn't get to restart
                // earlier so try restarting now instead.
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }

            var nextTime = getNextRootExpirationTimeToWorkOn(root);

            if (nextTime !== NoWork && nextTime !== expirationTime) {
              // There's additional work on this root.
              break;
            }

            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              root.lastPingedTime = lastSuspendedTime;
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var _lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === _lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        flushSuspensePriorityWarningInDEV();

        if ( // do not delay if we're inside an act() scope
        !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
          // We're suspended in a state that should be avoided. We'll try to
          // avoid committing it for as long as the timeouts let us.
          if (workInProgressRootHasPendingPing) {
            var _lastPingedTime = root.lastPingedTime;

            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
              // This render was pinged but we didn't get to restart earlier
              // so try restarting now instead.
              root.lastPingedTime = expirationTime;
              prepareFreshStack(root, expirationTime);
              break;
            }
          }

          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
            // There's additional work on this root.
            break;
          }

          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
            // We should prefer to render the fallback of at the last
            // suspended level. Ping the last suspended level to try
            // rendering it again.
            root.lastPingedTime = _lastSuspendedTime;
            break;
          }

          var _msUntilTimeout;

          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
            // We have processed a suspense config whose expiration time we
            // can use as the timeout.
            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
            // This should never normally happen because only new updates
            // cause delayed states, so we should have processed something.
            // However, this could also happen in an offscreen tree.
            _msUntilTimeout = 0;
          } else {
            // If we don't have a suspense config, we're going to use a
            // heuristic to determine how long we can suspend.
            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
            var currentTimeMs = now();
            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
            var timeElapsed = currentTimeMs - eventTimeMs;

            if (timeElapsed < 0) {
              // We get this wrong some time since we estimate the time.
              timeElapsed = 0;
            }

            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
            // event time is exact instead of inferred from expiration time
            // we don't need this.

            if (timeUntilExpirationMs < _msUntilTimeout) {
              _msUntilTimeout = timeUntilExpirationMs;
            }
          } // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        if ( // do not delay if we're inside an act() scope
        !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
          // If we have exceeded the minimum loading delay, which probably
          // means we have shown a spinner already, we might have to suspend
          // a bit longer to ensure that the spinner is shown for
          // enough time.
          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

          if (_msUntilTimeout2 > 10) {
            markRootSuspendedAtTime(root, expirationTime);
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
            break;
          }
        }

        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error("Unknown root exit status.");
          }
        }
      }
  }
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  // Check if there's expired work on this root. Otherwise, render at Sync.
  var lastExpiredTime = root.lastExpiredTime;
  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

  if (root.finishedExpirationTime === expirationTime) {
    // There's already a pending commit at this expiration time.
    // TODO: This is poorly factored. This case only exists for the
    // batch.commit() API.
    commitRoot(root);
  } else {
    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Should not already be working.");
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(root);
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      if (enableSchedulerTracing) {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // This is a sync render, so we should have finished the whole tree.
        {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      } else {
        // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        stopFinishedWorkLoopTimer();
        root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishSyncRender(root, workInProgressRootExitStatus, expirationTime);
      } // Before exiting, make sure there's a callback scheduled for the next
      // pending level.


      ensureRootIsScheduled(root);
    }
  }

  return null;
}

function finishSyncRender(root, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  {
    if (exitStatus === RootSuspended || exitStatus === RootSuspendedWithDelay) {
      flushSuspensePriorityWarningInDEV();
    }
  }

  commitRoot(root);
}

function flushRoot(root, expirationTime) {
  markRootExpiredAtTime(root, expirationTime);
  ensureRootIsScheduled(root);

  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
    flushSyncCallbackQueue();
  }
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    if (true && (executionContext & RenderContext) !== NoContext) {
      warning$1(false, 'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}

function syncUpdates(fn, a, b, c) {
  return runWithPriority$2(ImmediatePriority, fn.bind(null, a, b, c));
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (expirationTime, root) {
      markRootExpiredAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
    }); // Now flush the immediate queue.

    flushSyncCallbackQueue();
  }
}

function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates$1(fn, a, b, c) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  try {
    // Should this
    return runWithPriority$2(UserBlockingPriority$2, fn.bind(null, a, b, c));
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      {
        throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
      }
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return runWithPriority$2(ImmediatePriority, fn.bind(null, a));
  } finally {
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    flushSyncCallbackQueue();
  }
}
function flushControlled(fn) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    runWithPriority$2(ImmediatePriority, fn);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}

function prepareFreshStack(root, expirationTime) {
  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null, expirationTime);
  renderExpirationTime = expirationTime;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootLatestProcessedExpirationTime = Sync;
  workInProgressRootLatestSuspenseTimeout = Sync;
  workInProgressRootCanSuspendUsingConfig = null;
  workInProgressRootNextUnprocessedUpdateTime = NoWork;
  workInProgressRootHasPendingPing = false;

  if (enableSchedulerTracing) {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
    componentsThatTriggeredHighPriSuspend = null;
  }
}

function handleError(root, thrownValue) {
  do {
    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooks();
      resetCurrentFiber();

      if (workInProgress === null || workInProgress.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue;
        return null;
      }

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
      }

      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime);
      workInProgress = completeUnitOfWork(workInProgress);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;
      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher(root) {
  var prevDispatcher = ReactCurrentDispatcher.current;
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher.current = prevDispatcher;
}

function pushInteractions(root) {
  if (enableSchedulerTracing) {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }

  return null;
}

function popInteractions(prevInteractions) {
  if (enableSchedulerTracing) {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
    workInProgressRootLatestProcessedExpirationTime = expirationTime;
  }

  if (suspenseConfig !== null) {
    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
    }
  }
}
function markUnprocessedUpdateTime(expirationTime) {
  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
  }
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there's a lower priority update somewhere else in the tree.


  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
    // Mark the current render as suspended, and then mark that there's a
    // pending update.
    // TODO: This should immediately interrupt the current render, instead
    // of waiting until the next time we yield.
    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime);
    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function inferTimeFromExpirationTime(expirationTime) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
}

function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time by subtracting the timeout
  // that was added to the event time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current$$1 = unitOfWork.alternate;
  startWorkTimer(unitOfWork);
  setCurrentFiber(unitOfWork);
  var next;

  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(unitOfWork);
  }

  ReactCurrentOwner$2.current = null;
  return next;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  workInProgress = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current$$1 = workInProgress.alternate;
    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      setCurrentFiber(workInProgress);
      var next = void 0;

      if (!enableProfilerTimer || (workInProgress.mode & ProfileMode) === NoMode) {
        next = completeWork(current$$1, workInProgress, renderExpirationTime);
      } else {
        startProfilerTimer(workInProgress);
        next = completeWork(current$$1, workInProgress, renderExpirationTime); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      stopWorkTimer(workInProgress);
      resetCurrentFiber();
      resetChildExpirationTime(workInProgress);

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return next;
      }

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }

        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }

          returnFiber.lastEffect = workInProgress.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }

          returnFiber.lastEffect = workInProgress;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress, renderExpirationTime); // Because this fiber did not complete, don't reset its expiration time.


      if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
      }

      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        // TODO: The name stopFailedWorkTimer is misleading because Suspense
        // also captures and restarts.
        stopFailedWorkTimer(workInProgress);
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      stopWorkTimer(workInProgress);

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }
    }

    var siblingFiber = workInProgress.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      return siblingFiber;
    } // Otherwise, return to the parent


    workInProgress = returnFiber;
  } while (workInProgress !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }

  return null;
}

function getRemainingExpirationTime(fiber) {
  var updateExpirationTime = fiber.expirationTime;
  var childExpirationTime = fiber.childExpirationTime;
  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
}

function resetChildExpirationTime(completedWork) {
  if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

  if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;

      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }

      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;

      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }

      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }

      _child = _child.sibling;
    }
  }

  completedWork.childExpirationTime = newChildExpirationTime;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority$2(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error("Should not already be working.");
    }
  }

  var finishedWork = root.finishedWork;
  var expirationTime = root.finishedExpirationTime;

  if (finishedWork === null) {
    return null;
  }

  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;

  if (!(finishedWork !== root.current)) {
    {
      throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackExpirationTime = NoWork;
  root.callbackPriority = NoPriority;
  root.nextKnownPendingLevel = NoWork;
  startCommitTimer(); // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    renderExpirationTime = NoWork;
  } else {} // This indicates that the last root we worked on is not the same one that
  // we're committing now. This most commonly happens when a suspended root
  // times out.
  // Get the list of effects.


  var firstEffect;

  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    startCommitSnapshotEffectsTimer();
    prepareForCommit(root.containerInfo);
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitSnapshotEffectsTimer();

    if (enableProfilerTimer) {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    startCommitHostEffectsTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitHostEffectsTimer();
    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    startCommitLifeCyclesTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitLifeCyclesTimer();
    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    if (enableSchedulerTracing) {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    startCommitSnapshotEffectsTimer();
    stopCommitSnapshotEffectsTimer();

    if (enableProfilerTimer) {
      recordCommitTime();
    }

    startCommitHostEffectsTimer();
    stopCommitHostEffectsTimer();
    startCommitLifeCyclesTimer();
    stopCommitLifeCyclesTimer();
  }

  stopCommitTimer();
  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsExpirationTime = expirationTime;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;
      nextEffect = nextNextEffect;
    }
  } // Check if there's remaining work on this root


  var remainingExpirationTime = root.firstPendingTime;

  if (remainingExpirationTime !== NoWork) {
    if (enableSchedulerTracing) {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingExpirationTime);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  if (enableSchedulerTracing) {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, expirationTime);
    }
  }

  if (remainingExpirationTime === Sync) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.

  ensureRootIsScheduled(root);

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // This is a legacy edge case. We just committed the initial mount of
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.
    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();
  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if ((effectTag & Snapshot) !== NoEffect) {
      setCurrentFiber(nextEffect);
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current$$1, nextEffect);
      resetCurrentFiber();
    }

    if ((effectTag & Passive) !== NoEffect) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current$$1 = nextEffect.alternate;

      if (current$$1 !== null) {
        commitDetachRef(current$$1);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.effectTag &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.effectTag &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.effectTag &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.effectTag &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect, renderPriorityLevel);
          break;
        }
    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


    recordEffect();
    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedExpirationTime) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitLifeCycles(root, current$$1, nextEffect, committedExpirationTime);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority;
    return runWithPriority$2(priorityLevel, flushPassiveEffectsImpl);
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var expirationTime = pendingPassiveEffectsExpirationTime;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsExpirationTime = NoWork;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error("Cannot flush passive effects while already rendering.");
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root); // Note: This currently assumes there are no passive effects on the root
  // fiber, because the root is not part of its own effect list. This could
  // change in the future.

  var effect = root.current.firstEffect;

  while (effect !== null) {
    {
      setCurrentFiber(effect);
      invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);

      if (hasCaughtError()) {
        if (!(effect !== null)) {
          {
            throw Error("Should be working on an effect.");
          }
        }

        var error = clearCaughtError();
        captureCommitPhaseError(effect, error);
      }

      resetCurrentFiber();
    }

    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

    effect.nextEffect = null;
    effect = nextNextEffect;
  }

  if (enableSchedulerTracing) {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, expirationTime);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
  enqueueUpdate(rootFiber, update);
  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, Sync);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
        Sync);
        enqueueUpdate(fiber, update);
        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, thenable, suspendedTime) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, we'll always suspend so we can always
    // restart. If we're suspended without any updates, it might be a retry.
    // If it's early in the retry we can restart. We can't know for sure
    // whether we'll eventually process an update during this render pass,
    // but it's somewhat unlikely that we get to a ping before that, since
    // getting to the root most update is usually very fast.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root. Don't need to schedule a ping because
      // we're already working on this tree.
      prepareFreshStack(root, renderExpirationTime);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootHasPendingPing = true;
    }

    return;
  }

  if (!isRootSuspendedAtTime(root, suspendedTime)) {
    // The root is no longer suspended at this time.
    return;
  }

  var lastPingedTime = root.lastPingedTime;

  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
    // There's already a lower priority ping scheduled.
    return;
  } // Mark the time at which this ping was scheduled.


  root.lastPingedTime = suspendedTime;

  if (root.finishedExpirationTime === suspendedTime) {
    // If there's a pending fallback waiting to commit, throw it away.
    root.finishedExpirationTime = NoWork;
    root.finishedWork = null;
  }

  ensureRootIsScheduled(root);
  schedulePendingInteractions(root, suspendedTime);
}

function retryTimedOutBoundary(boundaryFiber, retryTime) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryTime === NoWork) {
    var suspenseConfig = null; // Retries don't carry over the already committed update.

    var currentTime = requestCurrentTimeForUpdate();
    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
  } // TODO: Special case idle priority?


  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, retryTime);
  }
}

function retryDehydratedSuspenseBoundary(boundaryFiber) {
  var suspenseState = boundaryFiber.memoizedState;
  var retryTime = NoWork;

  if (suspenseState !== null) {
    retryTime = suspenseState.retryTime;
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
}
function resolveRetryThenable(boundaryFiber, thenable) {
  var retryTime = NoWork; // Default

  var retryCache;

  if (enableSuspenseServerRenderer) {
    switch (boundaryFiber.tag) {
      case SuspenseComponent:
        retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;

        if (suspenseState !== null) {
          retryTime = suspenseState.retryTime;
        }

        break;

      case SuspenseListComponent:
        retryCache = boundaryFiber.stateNode;
        break;

      default:
        {
          {
            throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
        }

    }
  } else {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

  if (busyMinDurationMs <= 0) {
    return 0;
  }

  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

  var currentTimeMs = now();
  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
  var timeElapsed = currentTimeMs - eventTimeMs;

  if (timeElapsed <= busyDelayMs) {
    // If we haven't yet waited longer than the initial delay, we don't
    // have to wait any additional time.
    return 0;
  }

  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

  return msUntilTimeout;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;
      warning$1(false, 'Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function stopFinishedWorkLoopTimer() {
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function stopInterruptedWorkLoopTimer() {
  // TODO: Track which fiber caused the interruption.
  var didCompleteRoot = false;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
  if (enableUserTimingAPI && workInProgressRoot !== null && updateExpirationTime > renderExpirationTime) {
    interruptedBy = fiberThatReceivedUpdate;
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
  }
}

var beginWork$$1;

if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
  var dummyFiber = null;

  beginWork$$1 = function (current$$1, unitOfWork, expirationTime) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork$1(current$$1, unitOfWork, expirationTime);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooks(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork$1, null, current$$1, unitOfWork, expirationTime);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
} else {
  beginWork$$1 = beginWork$1;
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInGetChildContext = false;

function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
  {
    if (fiber.tag === ClassComponent) {
      switch (phase) {
        case 'getChildContext':
          if (didWarnAboutUpdateInGetChildContext) {
            return;
          }

          warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
          didWarnAboutUpdateInGetChildContext = true;
          break;

        case 'render':
          if (didWarnAboutUpdateInRender) {
            return;
          }

          warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure function of ' + 'props and state.');
          didWarnAboutUpdateInRender = true;
          break;
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      warningWithoutStack$1(false, "It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      warningWithoutStack$1(false, 'An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;
        warningWithoutStack$1(false, 'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      } else if (warnAboutUnmockedScheduler === true) {
        didWarnAboutUnmockedScheduler = true;
        warningWithoutStack$1(false, 'Starting from React v17, the "scheduler" module will need to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      }
    }
  }
}
var componentsThatTriggeredHighPriSuspend = null;
function checkForWrongSuspensePriorityInDEV(sourceFiber) {
  {
    var currentPriorityLevel = getCurrentPriorityLevel();

    if ((sourceFiber.mode & ConcurrentMode) !== NoEffect && (currentPriorityLevel === UserBlockingPriority$2 || currentPriorityLevel === ImmediatePriority)) {
      var workInProgressNode = sourceFiber;

      while (workInProgressNode !== null) {
        // Add the component that triggered the suspense
        var current$$1 = workInProgressNode.alternate;

        if (current$$1 !== null) {
          // TODO: warn component that triggers the high priority
          // suspend is the HostRoot
          switch (workInProgressNode.tag) {
            case ClassComponent:
              // Loop through the component's update queue and see whether the component
              // has triggered any high priority updates
              var updateQueue = current$$1.updateQueue;

              if (updateQueue !== null) {
                var update = updateQueue.firstUpdate;

                while (update !== null) {
                  var priorityLevel = update.priority;

                  if (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority) {
                    if (componentsThatTriggeredHighPriSuspend === null) {
                      componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                    } else {
                      componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                    }

                    break;
                  }

                  update = update.next;
                }
              }

              break;

            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              if (workInProgressNode.memoizedState !== null && workInProgressNode.memoizedState.baseUpdate !== null) {
                var _update = workInProgressNode.memoizedState.baseUpdate; // Loop through the functional component's memoized state to see whether
                // the component has triggered any high pri updates

                while (_update !== null) {
                  var priority = _update.priority;

                  if (priority === UserBlockingPriority$2 || priority === ImmediatePriority) {
                    if (componentsThatTriggeredHighPriSuspend === null) {
                      componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                    } else {
                      componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                    }

                    break;
                  }

                  if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
                    break;
                  }

                  _update = _update.next;
                }
              }

              break;

            default:
              break;
          }
        }

        workInProgressNode = workInProgressNode.return;
      }
    }
  }
}

function flushSuspensePriorityWarningInDEV() {
  {
    if (componentsThatTriggeredHighPriSuspend !== null) {
      var componentNames = [];
      componentsThatTriggeredHighPriSuspend.forEach(function (name) {
        return componentNames.push(name);
      });
      componentsThatTriggeredHighPriSuspend = null;

      if (componentNames.length > 0) {
        warningWithoutStack$1(false, '%s triggered a user-blocking update that suspended.' + '\n\n' + 'The fix is to split the update into multiple parts: a user-blocking ' + 'update to provide immediate feedback, and another update that ' + 'triggers the bulk of the changes.' + '\n\n' + 'Refer to the documentation for useTransition to learn how ' + 'to implement this pattern.', // TODO: Add link to React docs with more information, once it exists
        componentNames.sort().join(', '));
      }
    }
  }
}

function computeThreadID(root, expirationTime) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + root.interactionThreadID;
}

function markSpawnedWork(expirationTime) {
  if (!enableSchedulerTracing) {
    return;
  }

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [expirationTime];
  } else {
    spawnedWorkDuringRender.push(expirationTime);
  }
}

function scheduleInteractions(root, expirationTime, interactions) {
  if (!enableSchedulerTracing) {
    return;
  }

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(expirationTime);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, expirationTime) {
  // This is called when work is scheduled on a root.
  // It associates the current interactions with the newly-scheduled expiration.
  // They will be restored when that expiration is later committed.
  if (!enableSchedulerTracing) {
    return;
  }

  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, expirationTime) {
  // This is called when new work is started on a root.
  if (!enableSchedulerTracing) {
    return;
  } // Determine which interactions this batch of work currently includes, So that
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
    if (scheduledExpirationTime >= expirationTime) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedExpirationTime) {
  if (!enableSchedulerTracing) {
    return;
  }

  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      var threadID = computeThreadID(root, committedExpirationTime);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
        pendingInteractionMap.delete(scheduledExpirationTime);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    onCommitFiberRoot = function (root, expirationTime) {
      try {
        var didError = (root.current.effectTag & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          var currentTime = getCurrentTime();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        } else {
          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
        }
      } catch (err) {
        if (true && !hasLoggedError) {
          hasLoggedError = true;
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
        }
      }
    };

    onCommitFiberUnmount = function (fiber) {
      try {
        hook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        if (true && !hasLoggedError) {
          hasLoggedError = true;
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
        }
      }
    };
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onCommitRoot(root, expirationTime) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root, expirationTime);
  }
}
function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.effectTag = NoEffect;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;
  this.alternate = null;

  if (enableProfilerTimer) {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  } // This is normally DEV-only except www when it adds listeners.
  // TODO: remove the User Timing integration in favor of Root Events.


  if (enableUserTimingAPI) {
    this._debugID = debugCounter++;
    this._debugIsCurrentlyTiming = false;
  }

  {
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    if (enableProfilerTimer) {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    expirationTime: currentDependencies.expirationTime,
    firstContext: currentDependencies.firstContext,
    responders: currentDependencies.responders
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  if (enableProfilerTimer) {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;

      default:
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderExpirationTime) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childExpirationTime = NoWork;
    workInProgress.expirationTime = renderExpirationTime;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;

    if (enableProfilerTimer) {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };

    if (enableProfilerTimer) {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BlockingMode | StrictMode;
  } else if (tag === BlockingRoot) {
    mode = BlockingMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if (enableProfilerTimer && isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber;
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = Mode;
        mode |= ConcurrentMode | BlockingMode | StrictMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_FUNDAMENTAL_TYPE:
                if (enableFundamentalAPI) {
                  return createFiberFromFundamental(type, pendingProps, mode, expirationTime, key);
                }

                break;

              case REACT_SCOPE_TYPE:
                if (enableScopeAPI) {
                  return createFiberFromScope(type, pendingProps, mode, expirationTime, key);
                }

            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
            }
          }
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromFundamental(fundamentalComponent, pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(FundamentalComponent, pendingProps, key, mode);
  fiber.elementType = fundamentalComponent;
  fiber.type = fundamentalComponent;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromScope(scope, pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(ScopeComponent, pendingProps, key, mode);
  fiber.type = scope;
  fiber.elementType = scope;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromDehydratedFragment(dehydratedNode) {
  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
  fiber.stateNode = dehydratedNode;
  return fiber;
}
function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;

  if (enableProfilerTimer) {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.current = null;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.pingCache = null;
  this.finishedExpirationTime = NoWork;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoPriority;
  this.firstPendingTime = NoWork;
  this.firstSuspendedTime = NoWork;
  this.lastSuspendedTime = NoWork;
  this.nextKnownPendingLevel = NoWork;
  this.lastPingedTime = NoWork;
  this.lastExpiredTime = NoWork;

  if (enableSchedulerTracing) {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }

  if (enableSuspenseCallback) {
    this.hydrationCallbacks = null;
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);

  if (enableSuspenseCallback) {
    root.hydrationCallbacks = hydrationCallbacks;
  } // Cyclic construction. This cheats the type system right now because
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  return root;
}
function isRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;
  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
}
function markRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;

  if (firstSuspendedTime < expirationTime) {
    root.firstSuspendedTime = expirationTime;
  }

  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
    root.lastSuspendedTime = expirationTime;
  }

  if (expirationTime <= root.lastPingedTime) {
    root.lastPingedTime = NoWork;
  }

  if (expirationTime <= root.lastExpiredTime) {
    root.lastExpiredTime = NoWork;
  }
}
function markRootUpdatedAtTime(root, expirationTime) {
  // Update the range of pending times
  var firstPendingTime = root.firstPendingTime;

  if (expirationTime > firstPendingTime) {
    root.firstPendingTime = expirationTime;
  } // Update the range of suspended times. Treat everything lower priority or
  // equal to this update as unsuspended.


  var firstSuspendedTime = root.firstSuspendedTime;

  if (firstSuspendedTime !== NoWork) {
    if (expirationTime >= firstSuspendedTime) {
      // The entire suspended range is now unsuspended.
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (expirationTime >= root.lastSuspendedTime) {
      root.lastSuspendedTime = expirationTime + 1;
    } // This is a pending level. Check if it's higher priority than the next
    // known pending level.


    if (expirationTime > root.nextKnownPendingLevel) {
      root.nextKnownPendingLevel = expirationTime;
    }
  }
}
function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
  // Update the range of pending times
  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
  // equal to this update as unsuspended.

  if (finishedExpirationTime <= root.lastSuspendedTime) {
    // The entire suspended range is now unsuspended.
    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
    // Part of the suspended range is now unsuspended. Narrow the range to
    // include everything between the unsuspended time (non-inclusive) and the
    // last suspended time.
    root.firstSuspendedTime = finishedExpirationTime - 1;
  }

  if (finishedExpirationTime <= root.lastPingedTime) {
    // Clear the pinged time
    root.lastPingedTime = NoWork;
  }

  if (finishedExpirationTime <= root.lastExpiredTime) {
    // Clear the expired time
    root.lastExpiredTime = NoWork;
  }
}
function markRootExpiredAtTime(root, expirationTime) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
    root.lastExpiredTime = expirationTime;
  }
}

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};
var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstance(component) {
  var fiber = get(component);

  if (fiber === undefined) {
    if (typeof component.render === 'function') {
      {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
    } else {
      {
        {
          throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
      }
    }
  }

  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
      } else {
        {
          {
            throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;

        if (fiber.mode & StrictMode) {
          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }

    return hostFiber.stateNode;
  }

  return findHostInstance(component);
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);
}
function updateContainer(element, container, parentComponent, callback) {
  var current$$1 = container.current;
  var currentTime = requestCurrentTimeForUpdate();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$$1);
      warnIfNotScopedWithMatchingAct(current$$1);
    }
  }

  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);

  {
    if (ReactFiberInstrumentation_1.debugTool) {
      if (current$$1.alternate === null) {
        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
      } else if (element === null) {
        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
      } else {
        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
      }
    }
  }

  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;
      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
    update.callback = callback;
  }

  enqueueUpdate(current$$1, update);
  scheduleWork(current$$1, expirationTime);
  return expirationTime;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}
function attemptSynchronousHydration$1(fiber) {
  switch (fiber.tag) {
    case HostRoot:
      var root = fiber.stateNode;

      if (root.hydrate) {
        // Flush the first scheduled "update".
        flushRoot(root, root.firstPendingTime);
      }

      break;

    case SuspenseComponent:
      flushSync(function () {
        return scheduleWork(fiber, Sync);
      }); // If we're still blocked after this, we need to increase
      // the priority of any promises resolving within this
      // boundary so that they next attempt also has higher pri.

      var retryExpTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
      markRetryTimeIfNotHydrated(fiber, retryExpTime);
      break;
  }
}

function markRetryTimeImpl(fiber, retryTime) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    if (suspenseState.retryTime < retryTime) {
      suspenseState.retryTime = retryTime;
    }
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryTimeIfNotHydrated(fiber, retryTime) {
  markRetryTimeImpl(fiber, retryTime);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryTimeImpl(alternate, retryTime);
  }
}

function attemptUserBlockingHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeContinuousHydrationExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var currentTime = requestCurrentTimeForUpdate();
  var expTime = computeExpirationForFiber(currentTime, fiber, null);
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideProps = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }

    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    if (currentHook !== null) {
      var newState = copyWithSet(currentHook.memoizedState, path, value);
      currentHook.memoizedState = newState;
      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleWork(fiber, Sync);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleWork(fiber, Sync);
  };

  scheduleUpdate = function (fiber) {
    scheduleWork(fiber, Sync);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals(_assign({}, devToolsConfig, {
    overrideHookState: overrideHookState,
    overrideProps: overrideProps,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }

      return findFiberByHostInstance(instance);
    },
    // React Refresh
    findHostInstancesForRefresh: findHostInstancesForRefresh,
    scheduleRefresh: scheduleRefresh,
    scheduleRoot: scheduleRoot,
    setRefreshHandler: setRefreshHandler,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber: function () {
      return current;
    }
  }));
}

// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.

// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.
function ReactDOMRoot(container, options) {
  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
}

function ReactDOMBlockingRoot(container, tag, options) {
  this._internalRoot = createRootImpl(container, tag, options);
}

ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children, callback) {
  var root = this._internalRoot;
  var cb = callback === undefined ? null : callback;

  {
    warnOnInvalidCallback(cb, 'render');
  }

  updateContainer(children, root, null, cb);
};

ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function (callback) {
  var root = this._internalRoot;
  var cb = callback === undefined ? null : callback;

  {
    warnOnInvalidCallback(cb, 'render');
  }

  var container = root.containerInfo;
  updateContainer(null, root, null, function () {
    unmarkContainerAsRoot(container);

    if (cb !== null) {
      cb();
    }
  });
};

function createRootImpl(container, tag, options) {
  // Tag is either LegacyRoot or Concurrent Root
  var hydrate = options != null && options.hydrate === true;
  var hydrationCallbacks = options != null && options.hydrationOptions || null;
  var root = createContainer(container, tag, hydrate, hydrationCallbacks);
  markContainerAsRoot(root.current, container);

  if (hydrate && tag !== LegacyRoot) {
    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
    eagerlyTrapReplayableEvents(doc);
  }

  return root;
}

function createRoot(container, options) {
  if (!isValidContainer(container)) {
    {
      throw Error("createRoot(...): Target container is not a DOM element.");
    }
  }

  warnIfReactDOMContainerInDEV(container);
  return new ReactDOMRoot(container, options);
}
function createBlockingRoot(container, options) {
  if (!isValidContainer(container)) {
    {
      throw Error("createRoot(...): Target container is not a DOM element.");
    }
  }

  warnIfReactDOMContainerInDEV(container);
  return new ReactDOMBlockingRoot(container, BlockingRoot, options);
}
function createLegacyRoot(container, options) {
  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}
function warnOnInvalidCallback(callback, callerName) {
  {
    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
  }
}

function warnIfReactDOMContainerInDEV(container) {
  {
    if (isContainerMarkedAsRoot(container)) {
      if (container._reactRootContainer) {
        warningWithoutStack$1(false, 'You are calling ReactDOM.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');
      } else {
        warningWithoutStack$1(false, 'You are calling ReactDOM.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');
      }
    }
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;
var warnedAboutHydrateAPI = false;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

      if (hostInstance) {
        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

  if (!shouldHydrate) {
    var warned = false;
    var rootSibling;

    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;
          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }

      container.removeChild(rootSibling);
    }
  }

  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;
      lowPriorityWarningWithoutStack$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }

  return createLegacyRoot(container, shouldHydrate ? {
    hydrate: true
  } : undefined);
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback(callback === undefined ? null : callback, 'render');
  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.


  var root = container._reactRootContainer;
  var fiberRoot;

  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);
        originalCallback.call(instance);
      };
    } // Initial mount should not be batched.


    unbatchedUpdates(function () {
      updateContainer(children, fiberRoot, parentComponent, callback);
    });
  } else {
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);

        _originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, fiberRoot, parentComponent, callback);
  }

  return getPublicRootInstance(fiberRoot);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$1.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
      !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }

  return findHostInstance(componentOrElement);
}
function hydrate(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error("Target container is not a DOM element.");
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error("Target container is not a DOM element.");
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  if (!isValidContainer(containerNode)) {
    {
      throw Error("Target container is not a DOM element.");
    }
  }

  if (!(parentComponent != null && has(parentComponent))) {
    {
      throw Error("parentComponent must be a valid React Component");
    }
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainer(container)) {
    {
      throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
      !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    } // Unmount should not be batched.


    unbatchedUpdates(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
      !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
    }

    return false;
  }
}

function createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.12.0';

setAttemptSynchronousHydration(attemptSynchronousHydration$1);
setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$$1);
setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

function createPortal$$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    {
      throw Error("Target container is not a DOM element.");
    }
  } // TODO: pass ReactDOM portal implementation as third argument


  return createPortal$1(children, container, null, key);
}

var ReactDOM = {
  createPortal: createPortal$$1,
  // Legacy
  findDOMNode: findDOMNode,
  hydrate: hydrate,
  render: render,
  unstable_renderSubtreeIntoContainer: unstable_renderSubtreeIntoContainer,
  unmountComponentAtNode: unmountComponentAtNode,
  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: function () {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;
      lowPriorityWarningWithoutStack$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }

    return createPortal$$1.apply(void 0, arguments);
  },
  unstable_batchedUpdates: batchedUpdates$1,
  flushSync: flushSync,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // Keep in sync with ReactDOMUnstableNativeDependencies.js
    // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
  }
};

if (exposeConcurrentModeAPIs) {
  ReactDOM.createRoot = createRoot;
  ReactDOM.createBlockingRoot = createBlockingRoot;
  ReactDOM.unstable_discreteUpdates = discreteUpdates$1;
  ReactDOM.unstable_flushDiscreteUpdates = flushDiscreteUpdates;
  ReactDOM.unstable_flushControlled = flushControlled;

  ReactDOM.unstable_scheduleHydration = function (target) {
    if (target) {
      queueExplicitHydrationTarget(target);
    }
  };
}

var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.


var reactDom = ReactDOM$3.default || ReactDOM$3;

module.exports = reactDom;
  })();
}

}).call(this,require('_process'))
},{"_process":194,"object-assign":193,"prop-types/checkPropTypes":195,"react":216,"scheduler":221,"scheduler/tracing":222}],201:[function(require,module,exports){
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
'use strict';var aa=require("react"),n=require("object-assign"),q=require("scheduler");function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));var ba=null,ca={};
function da(){if(ba)for(var a in ca){var b=ca[a],c=ba.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!ea[c]){if(!b.extractEvents)throw Error(u(97,a));ea[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(fa.hasOwnProperty(h))throw Error(u(99,h));fa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ha(k[e],g,h);e=!0}else f.registrationName?(ha(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}
function ha(a,b,c){if(ia[a])throw Error(u(100,a));ia[a]=b;ja[a]=b.eventTypes[c].dependencies}var ea=[],fa={},ia={},ja={};function ka(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var la=!1,ma=null,na=!1,oa=null,pa={onError:function(a){la=!0;ma=a}};function qa(a,b,c,d,e,f,g,h,k){la=!1;ma=null;ka.apply(pa,arguments)}
function ra(a,b,c,d,e,f,g,h,k){qa.apply(this,arguments);if(la){if(la){var l=ma;la=!1;ma=null}else throw Error(u(198));na||(na=!0,oa=l)}}var sa=null,ua=null,va=null;function wa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=va(c);ra(d,b,void 0,a);a.currentTarget=null}function xa(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}
function ya(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var za=null;function Aa(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)wa(a,b[d],c[d]);else b&&wa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function Ba(a){null!==a&&(za=xa(za,a));a=za;za=null;if(a){ya(a,Aa);if(za)throw Error(u(95));if(na)throw a=oa,na=!1,oa=null,a;}}
var Ca={injectEventPluginOrder:function(a){if(ba)throw Error(u(101));ba=Array.prototype.slice.call(a);da()},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!ca.hasOwnProperty(c)||ca[c]!==d){if(ca[c])throw Error(u(102,c));ca[c]=d;b=!0}}b&&da()}};
function Da(a,b){var c=a.stateNode;if(!c)return null;var d=sa(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,b,typeof c));
return c}var Ea=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ea.hasOwnProperty("ReactCurrentDispatcher")||(Ea.ReactCurrentDispatcher={current:null});Ea.hasOwnProperty("ReactCurrentBatchConfig")||(Ea.ReactCurrentBatchConfig={suspense:null});
var Fa=/^(.*)[\\\/]/,w="function"===typeof Symbol&&Symbol.for,Ga=w?Symbol.for("react.element"):60103,Ha=w?Symbol.for("react.portal"):60106,Ia=w?Symbol.for("react.fragment"):60107,Ja=w?Symbol.for("react.strict_mode"):60108,Ka=w?Symbol.for("react.profiler"):60114,La=w?Symbol.for("react.provider"):60109,Ma=w?Symbol.for("react.context"):60110,Na=w?Symbol.for("react.concurrent_mode"):60111,Oa=w?Symbol.for("react.forward_ref"):60112,Pa=w?Symbol.for("react.suspense"):60113,Qa=w?Symbol.for("react.suspense_list"):
60120,Ra=w?Symbol.for("react.memo"):60115,Sa=w?Symbol.for("react.lazy"):60116;w&&Symbol.for("react.fundamental");w&&Symbol.for("react.responder");w&&Symbol.for("react.scope");var Ta="function"===typeof Symbol&&Symbol.iterator;function Ua(a){if(null===a||"object"!==typeof a)return null;a=Ta&&a[Ta]||a["@@iterator"];return"function"===typeof a?a:null}
function Va(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}
function Wa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case Ia:return"Fragment";case Ha:return"Portal";case Ka:return"Profiler";case Ja:return"StrictMode";case Pa:return"Suspense";case Qa:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Ma:return"Context.Consumer";case La:return"Context.Provider";case Oa:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
"ForwardRef");case Ra:return Wa(a.type);case Sa:if(a=1===a._status?a._result:null)return Wa(a)}return null}function Xa(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=Wa(a.type);c=null;d&&(c=Wa(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Fa,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}
var Ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),Za=null,$a=null,ab=null;function bb(a){if(a=ua(a)){if("function"!==typeof Za)throw Error(u(280));var b=sa(a.stateNode);Za(a.stateNode,a.type,b)}}function cb(a){$a?ab?ab.push(a):ab=[a]:$a=a}function db(){if($a){var a=$a,b=ab;ab=$a=null;bb(a);if(b)for(a=0;a<b.length;a++)bb(b[a])}}function eb(a,b){return a(b)}function fb(a,b,c,d){return a(b,c,d)}function gb(){}
var hb=eb,ib=!1,jb=!1;function kb(){if(null!==$a||null!==ab)gb(),db()}new Map;var lb=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,mb=Object.prototype.hasOwnProperty,nb={},ob={};
function pb(a){if(mb.call(ob,a))return!0;if(mb.call(nb,a))return!1;if(lb.test(a))return ob[a]=!0;nb[a]=!0;return!1}function qb(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function rb(a,b,c,d){if(null===b||"undefined"===typeof b||qb(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function B(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var D={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D[a]=new B(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D[b]=new B(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D[a]=new B(a,2,!1,a.toLowerCase(),null,!1)});
["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1)});
["checked","multiple","muted","selected"].forEach(function(a){D[a]=new B(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){D[a]=new B(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){D[a]=new B(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){D[a]=new B(a,5,!1,a.toLowerCase(),null,!1)});var sb=/[\-:]([a-z])/g;function tb(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(sb,
tb);D[b]=new B(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(sb,tb);D[b]=new B(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(sb,tb);D[b]=new B(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!1)});
D.xlinkHref=new B("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!0)});function ub(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}
function vb(a,b,c,d){var e=D.hasOwnProperty(b)?D[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(rb(b,c,e,d)&&(c=null),d||null===e?pb(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
function wb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function xb(a){var b=wb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function yb(a){a._valueTracker||(a._valueTracker=xb(a))}function zb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=wb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Ab(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
function Bb(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=ub(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Cb(a,b){b=b.checked;null!=b&&vb(a,"checked",b,!1)}
function Eb(a,b){Cb(a,b);var c=ub(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Fb(a,b.type,c):b.hasOwnProperty("defaultValue")&&Fb(a,b.type,ub(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Gb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
function Fb(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Hb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Ib(a,b){a=n({children:void 0},b);if(b=Hb(b.children))a.children=b;return a}
function Jb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+ub(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Kb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Lb(a,b){var c=b.value;if(null==c){c=b.defaultValue;b=b.children;if(null!=b){if(null!=c)throw Error(u(92));if(Array.isArray(b)){if(!(1>=b.length))throw Error(u(93));b=b[0]}c=b}null==c&&(c="")}a._wrapperState={initialValue:ub(c)}}
function Mb(a,b){var c=ub(b.value),d=ub(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Nb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Ob={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function Pb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Pb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var Rb,Sb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Ob.svg||"innerHTML"in a)a.innerHTML=b;else{Rb=Rb||document.createElement("div");Rb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Rb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function Tb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Ub(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Vb={animationend:Ub("Animation","AnimationEnd"),animationiteration:Ub("Animation","AnimationIteration"),animationstart:Ub("Animation","AnimationStart"),transitionend:Ub("Transition","TransitionEnd")},Wb={},Xb={};
Ya&&(Xb=document.createElement("div").style,"AnimationEvent"in window||(delete Vb.animationend.animation,delete Vb.animationiteration.animation,delete Vb.animationstart.animation),"TransitionEvent"in window||delete Vb.transitionend.transition);function Yb(a){if(Wb[a])return Wb[a];if(!Vb[a])return a;var b=Vb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Xb)return Wb[a]=b[c];return a}var Zb=Yb("animationend"),$b=Yb("animationiteration"),ac=Yb("animationstart"),bc=Yb("transitionend"),cc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
function ec(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function fc(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function gc(a){if(ec(a)!==a)throw Error(u(188));}
function hc(a){var b=a.alternate;if(!b){b=ec(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return gc(e),a;if(f===d)return gc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===
c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function ic(a){a=hc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
var jc,kc,lc,mc=!1,nc=[],oc=null,pc=null,qc=null,rc=new Map,sc=new Map,tc=[],uc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),vc="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
function wc(a){var b=xc(a);uc.forEach(function(c){yc(c,a,b)});vc.forEach(function(c){yc(c,a,b)})}function zc(a,b,c,d){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:d}}function Ac(a,b){switch(a){case "focus":case "blur":oc=null;break;case "dragenter":case "dragleave":pc=null;break;case "mouseover":case "mouseout":qc=null;break;case "pointerover":case "pointerout":rc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":sc.delete(b.pointerId)}}
function Bc(a,b,c,d,e){if(null===a||a.nativeEvent!==e)return a=zc(b,c,d,e),null!==b&&(b=Cc(b),null!==b&&kc(b)),a;a.eventSystemFlags|=d;return a}function Dc(a,b,c,d){switch(b){case "focus":return oc=Bc(oc,a,b,c,d),!0;case "dragenter":return pc=Bc(pc,a,b,c,d),!0;case "mouseover":return qc=Bc(qc,a,b,c,d),!0;case "pointerover":var e=d.pointerId;rc.set(e,Bc(rc.get(e)||null,a,b,c,d));return!0;case "gotpointercapture":return e=d.pointerId,sc.set(e,Bc(sc.get(e)||null,a,b,c,d)),!0}return!1}
function Ec(a){var b=Fc(a.target);if(null!==b){var c=ec(b);if(null!==c)if(b=c.tag,13===b){if(b=fc(c),null!==b){a.blockedOn=b;q.unstable_runWithPriority(a.priority,function(){lc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Gc(a){if(null!==a.blockedOn)return!1;var b=Hc(a.topLevelType,a.eventSystemFlags,a.nativeEvent);if(null!==b){var c=Cc(b);null!==c&&kc(c);a.blockedOn=b;return!1}return!0}
function Ic(a,b,c){Gc(a)&&c.delete(b)}function Jc(){for(mc=!1;0<nc.length;){var a=nc[0];if(null!==a.blockedOn){a=Cc(a.blockedOn);null!==a&&jc(a);break}var b=Hc(a.topLevelType,a.eventSystemFlags,a.nativeEvent);null!==b?a.blockedOn=b:nc.shift()}null!==oc&&Gc(oc)&&(oc=null);null!==pc&&Gc(pc)&&(pc=null);null!==qc&&Gc(qc)&&(qc=null);rc.forEach(Ic);sc.forEach(Ic)}function Kc(a,b){a.blockedOn===b&&(a.blockedOn=null,mc||(mc=!0,q.unstable_scheduleCallback(q.unstable_NormalPriority,Jc)))}
function Lc(a){function b(b){return Kc(b,a)}if(0<nc.length){Kc(nc[0],a);for(var c=1;c<nc.length;c++){var d=nc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==oc&&Kc(oc,a);null!==pc&&Kc(pc,a);null!==qc&&Kc(qc,a);rc.forEach(b);sc.forEach(b);for(c=0;c<tc.length;c++)d=tc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<tc.length&&(c=tc[0],null===c.blockedOn);)Ec(c),null===c.blockedOn&&tc.shift()}
function Mc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function Nc(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function Oc(a,b,c){if(b=Da(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=xa(c._dispatchListeners,b),c._dispatchInstances=xa(c._dispatchInstances,a)}
function Pc(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Nc(b);for(b=c.length;0<b--;)Oc(c[b],"captured",a);for(b=0;b<c.length;b++)Oc(c[b],"bubbled",a)}}function Qc(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Da(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=xa(c._dispatchListeners,b),c._dispatchInstances=xa(c._dispatchInstances,a))}function Rc(a){a&&a.dispatchConfig.registrationName&&Qc(a._targetInst,null,a)}
function Sc(a){ya(a,Pc)}function Tc(){return!0}function Uc(){return!1}function E(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?Tc:Uc;this.isPropagationStopped=Uc;return this}
n(E.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=Tc)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=Tc)},persist:function(){this.isPersistent=Tc},isPersistent:Uc,destructor:function(){var a=this.constructor.Interface,
b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=Uc;this._dispatchInstances=this._dispatchListeners=null}});E.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
E.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;Vc(c);return c};Vc(E);function Wc(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
function Xc(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function Vc(a){a.eventPool=[];a.getPooled=Wc;a.release=Xc}var Yc=E.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Zc=E.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),$c=E.extend({view:null,detail:null}),ad=$c.extend({relatedTarget:null});
function bd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var cd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},dd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ed={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function gd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=ed[a])?!!b[a]:!1}function hd(){return gd}
var id=$c.extend({key:function(a){if(a.key){var b=cd[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=bd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?dd[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:hd,charCode:function(a){return"keypress"===a.type?bd(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===
a.type?bd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),jd=0,kd=0,ld=!1,md=!1,nd=$c.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:hd,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=jd;jd=a.screenX;return ld?"mousemove"===a.type?a.screenX-
b:0:(ld=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;var b=kd;kd=a.screenY;return md?"mousemove"===a.type?a.screenY-b:0:(md=!0,0)}}),od=nd.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),pd=nd.extend({dataTransfer:null}),qd=$c.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:hd}),rd=E.extend({propertyName:null,
elapsedTime:null,pseudoElement:null}),sd=nd.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),td=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",
0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",
0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",
2],[Zb,"animationEnd",2],[$b,"animationIteration",2],[ac,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress",
"progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[bc,"transitionEnd",2],["waiting","waiting",2]],ud={},vd={},wd=0;for(;wd<td.length;wd++){var yd=td[wd],zd=yd[0],Ad=yd[1],Bd=yd[2],Cd="on"+(Ad[0].toUpperCase()+Ad.slice(1)),Dd={phasedRegistrationNames:{bubbled:Cd,captured:Cd+"Capture"},dependencies:[zd],eventPriority:Bd};ud[Ad]=Dd;vd[zd]=Dd}
var Ed={eventTypes:ud,getEventPriority:function(a){a=vd[a];return void 0!==a?a.eventPriority:2},extractEvents:function(a,b,c,d){var e=vd[a];if(!e)return null;switch(a){case "keypress":if(0===bd(c))return null;case "keydown":case "keyup":a=id;break;case "blur":case "focus":a=ad;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=nd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
pd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=qd;break;case Zb:case $b:case ac:a=Yc;break;case bc:a=rd;break;case "scroll":a=$c;break;case "wheel":a=sd;break;case "copy":case "cut":case "paste":a=Zc;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=od;break;default:a=E}b=a.getPooled(e,b,c,d);Sc(b);return b}},Fd=q.unstable_UserBlockingPriority,
Gd=q.unstable_runWithPriority,Hd=Ed.getEventPriority,Id=10,Jd=[];
function Kd(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=Fc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=Mc(a.nativeEvent);d=a.topLevelType;for(var f=a.nativeEvent,g=a.eventSystemFlags,h=null,k=0;k<ea.length;k++){var l=ea[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=xa(h,l))}Ba(h)}}
var Ld=!0;function F(a,b){Md(b,a,!1)}function Md(a,b,c){switch(Hd(b)){case 0:var d=Nd.bind(null,b,1);break;case 1:d=Od.bind(null,b,1);break;default:d=Pd.bind(null,b,1)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function Nd(a,b,c){ib||gb();var d=Pd,e=ib;ib=!0;try{fb(d,a,b,c)}finally{(ib=e)||kb()}}function Od(a,b,c){Gd(Fd,Pd.bind(null,a,b,c))}
function Qd(a,b,c,d){if(Jd.length){var e=Jd.pop();e.topLevelType=a;e.eventSystemFlags=b;e.nativeEvent=c;e.targetInst=d;a=e}else a={topLevelType:a,eventSystemFlags:b,nativeEvent:c,targetInst:d,ancestors:[]};try{if(b=Kd,c=a,jb)b(c,void 0);else{jb=!0;try{hb(b,c,void 0)}finally{jb=!1,kb()}}}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,Jd.length<Id&&Jd.push(a)}}
function Pd(a,b,c){if(Ld)if(0<nc.length&&-1<uc.indexOf(a))a=zc(null,a,b,c),nc.push(a);else{var d=Hc(a,b,c);null===d?Ac(a,c):-1<uc.indexOf(a)?(a=zc(d,a,b,c),nc.push(a)):Dc(d,a,b,c)||(Ac(a,c),Qd(a,b,c,null))}}function Hc(a,b,c){var d=Mc(c);d=Fc(d);if(null!==d){var e=ec(d);if(null===e)d=null;else{var f=e.tag;if(13===f){d=fc(e);if(null!==d)return d;d=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;d=null}else e!==d&&(d=null)}}Qd(a,b,c,d);return null}
function Rd(a){if(!Ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var Sd=new ("function"===typeof WeakMap?WeakMap:Map);function xc(a){var b=Sd.get(a);void 0===b&&(b=new Set,Sd.set(a,b));return b}
function yc(a,b,c){if(!c.has(a)){switch(a){case "scroll":Md(b,"scroll",!0);break;case "focus":case "blur":Md(b,"focus",!0);Md(b,"blur",!0);c.add("blur");c.add("focus");break;case "cancel":case "close":Rd(a)&&Md(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===cc.indexOf(a)&&F(a,b)}c.add(a)}}
var Td={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ud=["Webkit","ms","Moz","O"];Object.keys(Td).forEach(function(a){Ud.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Td[b]=Td[a]})});function Vd(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||Td.hasOwnProperty(a)&&Td[a]?(""+b).trim():b+"px"}
function Wd(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=Vd(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var Xd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function Yd(a,b){if(b){if(Xd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}
function Zd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}function $d(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=xc(a);b=ja[b];for(var d=0;d<b.length;d++)yc(b[d],a,c)}function ae(){}
function be(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ce(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function de(a,b){var c=ce(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ce(c)}}
function ee(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?ee(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function fe(){for(var a=window,b=be();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=be(a.document)}return b}
function ge(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var he="$",ie="/$",je="$?",ke="$!",le=null,me=null;function ne(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
function oe(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var pe="function"===typeof setTimeout?setTimeout:void 0,qe="function"===typeof clearTimeout?clearTimeout:void 0;function re(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}
function se(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===he||c===ke||c===je){if(0===b)return a;b--}else c===ie&&b++}a=a.previousSibling}return null}var te=Math.random().toString(36).slice(2),ue="__reactInternalInstance$"+te,ve="__reactEventHandlers$"+te,we="__reactContainere$"+te;
function Fc(a){var b=a[ue];if(b)return b;for(var c=a.parentNode;c;){if(b=c[we]||c[ue]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=se(a);null!==a;){if(c=a[ue])return c;a=se(a)}return b}a=c;c=a.parentNode}return null}function Cc(a){a=a[ue]||a[we];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function xe(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function ye(a){return a[ve]||null}var ze=null,Ae=null,Be=null;
function Ce(){if(Be)return Be;var a,b=Ae,c=b.length,d,e="value"in ze?ze.value:ze.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return Be=e.slice(a,1<d?1-d:void 0)}var De=E.extend({data:null}),Ee=E.extend({data:null}),Fe=[9,13,27,32],Ge=Ya&&"CompositionEvent"in window,He=null;Ya&&"documentMode"in document&&(He=document.documentMode);
var Ie=Ya&&"TextEvent"in window&&!He,Je=Ya&&(!Ge||He&&8<He&&11>=He),Ke=String.fromCharCode(32),Le={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Me=!1;
function Ne(a,b){switch(a){case "keyup":return-1!==Fe.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function Oe(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var Pe=!1;function Qe(a,b){switch(a){case "compositionend":return Oe(b);case "keypress":if(32!==b.which)return null;Me=!0;return Ke;case "textInput":return a=b.data,a===Ke&&Me?null:a;default:return null}}
function Re(a,b){if(Pe)return"compositionend"===a||!Ge&&Ne(a,b)?(a=Ce(),Be=Ae=ze=null,Pe=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return Je&&"ko"!==b.locale?null:b.data;default:return null}}
var Se={eventTypes:Le,extractEvents:function(a,b,c,d){var e;if(Ge)b:{switch(a){case "compositionstart":var f=Le.compositionStart;break b;case "compositionend":f=Le.compositionEnd;break b;case "compositionupdate":f=Le.compositionUpdate;break b}f=void 0}else Pe?Ne(a,c)&&(f=Le.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=Le.compositionStart);f?(Je&&"ko"!==c.locale&&(Pe||f!==Le.compositionStart?f===Le.compositionEnd&&Pe&&(e=Ce()):(ze=d,Ae="value"in ze?ze.value:ze.textContent,Pe=!0)),f=De.getPooled(f,
b,c,d),e?f.data=e:(e=Oe(c),null!==e&&(f.data=e)),Sc(f),e=f):e=null;(a=Ie?Qe(a,c):Re(a,c))?(b=Ee.getPooled(Le.beforeInput,b,c,d),b.data=a,Sc(b)):b=null;return null===e?b:null===b?e:[e,b]}},Te={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ue(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!Te[a.type]:"textarea"===b?!0:!1}
var Ve={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function We(a,b,c){a=E.getPooled(Ve.change,a,b,c);a.type="change";cb(c);Sc(a);return a}var Xe=null,Ye=null;function Ze(a){Ba(a)}function $e(a){var b=xe(a);if(zb(b))return a}function af(a,b){if("change"===a)return b}var bf=!1;Ya&&(bf=Rd("input")&&(!document.documentMode||9<document.documentMode));
function cf(){Xe&&(Xe.detachEvent("onpropertychange",df),Ye=Xe=null)}function df(a){if("value"===a.propertyName&&$e(Ye))if(a=We(Ye,a,Mc(a)),ib)Ba(a);else{ib=!0;try{eb(Ze,a)}finally{ib=!1,kb()}}}function ef(a,b,c){"focus"===a?(cf(),Xe=b,Ye=c,Xe.attachEvent("onpropertychange",df)):"blur"===a&&cf()}function ff(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return $e(Ye)}function gf(a,b){if("click"===a)return $e(b)}function hf(a,b){if("input"===a||"change"===a)return $e(b)}
var jf={eventTypes:Ve,_isInputEventSupported:bf,extractEvents:function(a,b,c,d){var e=b?xe(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=af;else if(Ue(e))if(bf)g=hf;else{g=ff;var h=ef}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=gf);if(g&&(g=g(a,b)))return We(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Fb(e,"number",e.value)}},kf={mouseEnter:{registrationName:"onMouseEnter",
dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},lf,mf={eventTypes:kf,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;
e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?Fc(b):null,null!==b&&(f=ec(b),b!==f||5!==b.tag&&6!==b.tag))b=null}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===a){var h=nd;var k=kf.mouseLeave;var l=kf.mouseEnter;var m="mouse"}else if("pointerout"===a||"pointerover"===a)h=od,k=kf.pointerLeave,l=kf.pointerEnter,m="pointer";a=null==g?e:xe(g);e=null==b?e:xe(b);k=h.getPooled(k,g,c,d);k.type=m+"leave";k.target=
a;k.relatedTarget=e;d=h.getPooled(l,b,c,d);d.type=m+"enter";d.target=e;d.relatedTarget=a;h=g;m=b;if(h&&m)a:{l=h;a=m;g=0;for(b=l;b;b=Nc(b))g++;b=0;for(e=a;e;e=Nc(e))b++;for(;0<g-b;)l=Nc(l),g--;for(;0<b-g;)a=Nc(a),b--;for(;g--;){if(l===a||l===a.alternate)break a;l=Nc(l);a=Nc(a)}l=null}else l=null;a=l;for(l=[];h&&h!==a;){g=h.alternate;if(null!==g&&g===a)break;l.push(h);h=Nc(h)}for(h=[];m&&m!==a;){g=m.alternate;if(null!==g&&g===a)break;h.push(m);m=Nc(m)}for(m=0;m<l.length;m++)Qc(l[m],"bubbled",k);for(m=
h.length;0<m--;)Qc(h[m],"captured",d);if(c===lf)return lf=null,[k];lf=c;return[k,d]}};function nf(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var of="function"===typeof Object.is?Object.is:nf,pf=Object.prototype.hasOwnProperty;function qf(a,b){if(of(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!pf.call(b,c[d])||!of(a[c[d]],b[c[d]]))return!1;return!0}
var rf=Ya&&"documentMode"in document&&11>=document.documentMode,sf={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},tf=null,uf=null,vf=null,wf=!1;
function xf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(wf||null==tf||tf!==be(c))return null;c=tf;"selectionStart"in c&&ge(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return vf&&qf(vf,c)?null:(vf=c,a=E.getPooled(sf.select,uf,a,b),a.type="select",a.target=tf,Sc(a),a)}
var yf={eventTypes:sf,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=xc(e);f=ja.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?xe(b):window;switch(a){case "focus":if(Ue(e)||"true"===e.contentEditable)tf=e,uf=b,vf=null;break;case "blur":vf=uf=tf=null;break;case "mousedown":wf=!0;break;case "contextmenu":case "mouseup":case "dragend":return wf=!1,xf(c,d);case "selectionchange":if(rf)break;
case "keydown":case "keyup":return xf(c,d)}return null}};Ca.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));var zf=Cc;sa=ye;ua=zf;va=xe;Ca.injectEventPluginsByName({SimpleEventPlugin:Ed,EnterLeaveEventPlugin:mf,ChangeEventPlugin:jf,SelectEventPlugin:yf,BeforeInputEventPlugin:Se});new Set;var Af=[],Bf=-1;function G(a){0>Bf||(a.current=Af[Bf],Af[Bf]=null,Bf--)}
function I(a,b){Bf++;Af[Bf]=a.current;a.current=b}var Cf={},J={current:Cf},K={current:!1},Df=Cf;function Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}
function Ff(a){G(K,a);G(J,a)}function Gf(a){G(K,a);G(J,a)}function Hf(a,b,c){if(J.current!==Cf)throw Error(u(168));I(J,b,a);I(K,c,a)}function If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,Wa(b)||"Unknown",e));return n({},c,{},d)}function Jf(a){var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||Cf;Df=J.current;I(J,b,a);I(K,K.current,a);return!0}
function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(b=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=b,G(K,a),G(J,a),I(J,b,a)):G(K,a);I(K,c,a)}
var Lf=q.unstable_runWithPriority,Mf=q.unstable_scheduleCallback,Nf=q.unstable_cancelCallback,Of=q.unstable_shouldYield,Pf=q.unstable_requestPaint,Qf=q.unstable_now,Rf=q.unstable_getCurrentPriorityLevel,Sf=q.unstable_ImmediatePriority,Tf=q.unstable_UserBlockingPriority,Uf=q.unstable_NormalPriority,Vf=q.unstable_LowPriority,Wf=q.unstable_IdlePriority,Xf={},Yf=void 0!==Pf?Pf:function(){},Zf=null,$f=null,ag=!1,bg=Qf(),cg=1E4>bg?Qf:function(){return Qf()-bg};
function dg(){switch(Rf()){case Sf:return 99;case Tf:return 98;case Uf:return 97;case Vf:return 96;case Wf:return 95;default:throw Error(u(332));}}function eg(a){switch(a){case 99:return Sf;case 98:return Tf;case 97:return Uf;case 96:return Vf;case 95:return Wf;default:throw Error(u(332));}}function fg(a,b){a=eg(a);return Lf(a,b)}function gg(a,b,c){a=eg(a);return Mf(a,b,c)}function hg(a){null===Zf?(Zf=[a],$f=Mf(Sf,ig)):Zf.push(a);return Xf}function jg(){if(null!==$f){var a=$f;$f=null;Nf(a)}ig()}
function ig(){if(!ag&&null!==Zf){ag=!0;var a=0;try{var b=Zf;fg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Zf=null}catch(c){throw null!==Zf&&(Zf=Zf.slice(a+1)),Mf(Sf,jg),c;}finally{ag=!1}}}var kg=3;function lg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function mg(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var ng={current:null},og=null,pg=null,qg=null;function rg(){qg=pg=og=null}
function sg(a,b){var c=a.type._context;I(ng,c._currentValue,a);c._currentValue=b}function tg(a){var b=ng.current;G(ng,a);a.type._context._currentValue=b}function ug(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}
function vg(a,b){og=a;qg=pg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(wg=!0),a.firstContext=null)}function xg(a,b){if(qg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)qg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===pg){if(null===og)throw Error(u(308));pg=b;og.dependencies={expirationTime:0,firstContext:b,responders:null}}else pg=pg.next=b}return a._currentValue}var yg=!1;
function zg(a){return{baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ag(a){return{baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
function Bg(a,b){return{expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Cg(a,b){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b)}
function Dg(a,b){var c=a.alternate;if(null===c){var d=a.updateQueue;var e=null;null===d&&(d=a.updateQueue=zg(a.memoizedState))}else d=a.updateQueue,e=c.updateQueue,null===d?null===e?(d=a.updateQueue=zg(a.memoizedState),e=c.updateQueue=zg(c.memoizedState)):d=a.updateQueue=Ag(e):null===e&&(e=c.updateQueue=Ag(d));null===e||d===e?Cg(d,b):null===d.lastUpdate||null===e.lastUpdate?(Cg(d,b),Cg(e,b)):(Cg(d,b),e.lastUpdate=b)}
function Eg(a,b){var c=a.updateQueue;c=null===c?a.updateQueue=zg(a.memoizedState):Fg(a,c);null===c.lastCapturedUpdate?c.firstCapturedUpdate=c.lastCapturedUpdate=b:(c.lastCapturedUpdate.next=b,c.lastCapturedUpdate=b)}function Fg(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=Ag(b));return b}
function Gg(a,b,c,d,e,f){switch(c.tag){case 1:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case 3:a.effectTag=a.effectTag&-4097|64;case 0:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return n({},d,e);case 2:yg=!0}return d}
function Hg(a,b,c,d,e){yg=!1;b=Fg(a,b);for(var f=b.baseState,g=null,h=0,k=b.firstUpdate,l=f;null!==k;){var m=k.expirationTime;m<e?(null===g&&(g=k,f=l),h<m&&(h=m)):(Ig(m,k.suspenseConfig),l=Gg(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=k:(b.lastEffect.nextEffect=k,b.lastEffect=k)));k=k.next}m=null;for(k=b.firstCapturedUpdate;null!==k;){var C=k.expirationTime;C<e?(null===m&&(m=k,null===g&&(f=l)),h<C&&(h=C)):(l=Gg(a,b,k,l,c,d),null!==
k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=k:(b.lastCapturedEffect.nextEffect=k,b.lastCapturedEffect=k)));k=k.next}null===g&&(b.lastUpdate=null);null===m?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===m&&(f=l);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=m;Jg(h);a.expirationTime=h;a.memoizedState=l}
function Kg(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);Lg(b.firstEffect,c);b.firstEffect=b.lastEffect=null;Lg(b.firstCapturedEffect,c);b.firstCapturedEffect=b.lastCapturedEffect=null}function Lg(a,b){for(;null!==a;){var c=a.callback;if(null!==c){a.callback=null;var d=b;if("function"!==typeof c)throw Error(u(191,c));c.call(d)}a=a.nextEffect}}
var Mg=Ea.ReactCurrentBatchConfig,Ng=(new aa.Component).refs;function Og(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirationTime&&(d.baseState=c)}
var Sg={isMounted:function(a){return(a=a._reactInternalFiber)?ec(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Pg(),e=Mg.suspense;d=Qg(d,a,e);e=Bg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Dg(a,e);Rg(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Pg(),e=Mg.suspense;d=Qg(d,a,e);e=Bg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Dg(a,e);Rg(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Pg(),d=Mg.suspense;
c=Qg(c,a,d);d=Bg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);Dg(a,d);Rg(a,c)}};function Tg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!qf(c,d)||!qf(e,f):!0}
function Ug(a,b,c){var d=!1,e=Cf;var f=b.contextType;"object"===typeof f&&null!==f?f=xg(f):(e=L(b)?Df:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Sg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
function Vg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Sg.enqueueReplaceState(b,b.state,null)}
function Wg(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Ng;var f=b.contextType;"object"===typeof f&&null!==f?e.context=xg(f):(f=L(b)?Df:J.current,e.context=Ef(a,f));f=a.updateQueue;null!==f&&(Hg(a,f,c,e,d),e.state=a.memoizedState);f=b.getDerivedStateFromProps;"function"===typeof f&&(Og(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==
typeof e.componentWillMount||(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Sg.enqueueReplaceState(e,e.state,null),f=a.updateQueue,null!==f&&(Hg(a,f,c,e,d),e.state=a.memoizedState));"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Xg=Array.isArray;
function Yg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Ng&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}
function Zg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}
function $g(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=ah(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=bh(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props,d),d.ref=Yg(a,b,c),d.return=a,d;d=ch(c.type,c.key,c.props,null,a.mode,d);d.ref=Yg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
c.implementation)return b=dh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=eh(c,a.mode,d,f),b.return=a,b;b=e(b,c,d);b.return=a;return b}function C(a,b,c){if("string"===typeof b||"number"===typeof b)return b=bh(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Ga:return c=ch(b.type,b.key,b.props,null,a.mode,c),c.ref=Yg(a,null,b),c.return=a,c;case Ha:return b=dh(b,a.mode,c),b.return=a,b}if(Xg(b)||
Ua(b))return b=eh(b,a.mode,c,null),b.return=a,b;Zg(a,b)}return null}function y(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Ga:return c.key===e?c.type===Ia?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case Ha:return c.key===e?l(a,b,c,d):null}if(Xg(c)||Ua(c))return null!==e?null:m(a,b,c,d,null);Zg(a,c)}return null}function H(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Ga:return a=a.get(null===d.key?c:d.key)||null,d.type===Ia?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case Ha:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Xg(d)||Ua(d))return a=a.get(c)||null,m(b,a,d,e,null);Zg(b,d)}return null}function z(e,g,h,k){for(var l=null,m=null,r=g,x=g=0,A=null;null!==r&&x<h.length;x++){r.index>x?(A=r,r=null):A=r.sibling;var p=y(e,r,h[x],k);if(null===p){null===r&&(r=A);break}a&&
r&&null===p.alternate&&b(e,r);g=f(p,g,x);null===m?l=p:m.sibling=p;m=p;r=A}if(x===h.length)return c(e,r),l;if(null===r){for(;x<h.length;x++)r=C(e,h[x],k),null!==r&&(g=f(r,g,x),null===m?l=r:m.sibling=r,m=r);return l}for(r=d(e,r);x<h.length;x++)A=H(r,e,x,h[x],k),null!==A&&(a&&null!==A.alternate&&r.delete(null===A.key?x:A.key),g=f(A,g,x),null===m?l=A:m.sibling=A,m=A);a&&r.forEach(function(a){return b(e,a)});return l}function ta(e,g,h,k){var l=Ua(h);if("function"!==typeof l)throw Error(u(150));h=l.call(h);
if(null==h)throw Error(u(151));for(var m=l=null,r=g,x=g=0,A=null,p=h.next();null!==r&&!p.done;x++,p=h.next()){r.index>x?(A=r,r=null):A=r.sibling;var z=y(e,r,p.value,k);if(null===z){null===r&&(r=A);break}a&&r&&null===z.alternate&&b(e,r);g=f(z,g,x);null===m?l=z:m.sibling=z;m=z;r=A}if(p.done)return c(e,r),l;if(null===r){for(;!p.done;x++,p=h.next())p=C(e,p.value,k),null!==p&&(g=f(p,g,x),null===m?l=p:m.sibling=p,m=p);return l}for(r=d(e,r);!p.done;x++,p=h.next())p=H(r,e,x,p.value,k),null!==p&&(a&&null!==
p.alternate&&r.delete(null===p.key?x:p.key),g=f(p,g,x),null===m?l=p:m.sibling=p,m=p);a&&r.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===Ia&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Ga:a:{l=f.key;for(k=d;null!==k;){if(k.key===l)if(7===k.tag?f.type===Ia:k.elementType===f.type){c(a,k.sibling);d=e(k,f.type===Ia?f.props.children:f.props,h);d.ref=Yg(a,k,f);d.return=a;a=d;break a}else{c(a,
k);break}else b(a,k);k=k.sibling}f.type===Ia?(d=eh(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=ch(f.type,f.key,f.props,null,a.mode,h),h.ref=Yg(a,d,f),h.return=a,a=h)}return g(a);case Ha:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=dh(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===
typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=a,a=d):(c(a,d),d=bh(f,a.mode,h),d.return=a,a=d),g(a);if(Xg(f))return z(a,d,f,h);if(Ua(f))return ta(a,d,f,h);l&&Zg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var fh=$g(!0),gh=$g(!1),hh={},ih={current:hh},jh={current:hh},kh={current:hh};function lh(a){if(a===hh)throw Error(u(174));return a}
function mh(a,b){I(kh,b,a);I(jh,a,a);I(ih,hh,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Qb(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=Qb(b,c)}G(ih,a);I(ih,b,a)}function nh(a){G(ih,a);G(jh,a);G(kh,a)}function oh(a){lh(kh.current);var b=lh(ih.current);var c=Qb(b,a.type);b!==c&&(I(jh,a,a),I(ih,c,a))}function ph(a){jh.current===a&&(G(ih,a),G(jh,a))}var M={current:0};
function qh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===je||c.data===ke))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function rh(a,b){return{responder:a,props:b}}
var sh=Ea.ReactCurrentDispatcher,N=Ea.ReactCurrentBatchConfig,th=0,uh=null,O=null,vh=null,wh=null,P=null,xh=null,yh=0,zh=null,Ah=0,Bh=!1,Ch=null,Gh=0;function Q(){throw Error(u(321));}function Hh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!of(a[c],b[c]))return!1;return!0}
function Ih(a,b,c,d,e,f){th=f;uh=b;vh=null!==a?a.memoizedState:null;sh.current=null===vh?Jh:Kh;b=c(d,e);if(Bh){do Bh=!1,Gh+=1,vh=null!==a?a.memoizedState:null,xh=wh,zh=P=O=null,sh.current=Kh,b=c(d,e);while(Bh);Ch=null;Gh=0}sh.current=Lh;a=uh;a.memoizedState=wh;a.expirationTime=yh;a.updateQueue=zh;a.effectTag|=Ah;a=null!==O&&null!==O.next;th=0;xh=P=wh=vh=O=uh=null;yh=0;zh=null;Ah=0;if(a)throw Error(u(300));return b}
function Mh(){sh.current=Lh;th=0;xh=P=wh=vh=O=uh=null;yh=0;zh=null;Ah=0;Bh=!1;Ch=null;Gh=0}function Nh(){var a={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};null===P?wh=P=a:P=P.next=a;return P}function Oh(){if(null!==xh)P=xh,xh=P.next,O=vh,vh=null!==O?O.next:null;else{if(null===vh)throw Error(u(310));O=vh;var a={memoizedState:O.memoizedState,baseState:O.baseState,queue:O.queue,baseUpdate:O.baseUpdate,next:null};P=null===P?wh=a:P.next=a;vh=O.next}return P}
function Ph(a,b){return"function"===typeof b?b(a):b}
function Qh(a){var b=Oh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;if(0<Gh){var d=c.dispatch;if(null!==Ch){var e=Ch.get(c);if(void 0!==e){Ch.delete(c);var f=b.memoizedState;do f=a(f,e.action),e=e.next;while(null!==e);of(f,b.memoizedState)||(wg=!0);b.memoizedState=f;b.baseUpdate===c.last&&(b.baseState=f);c.lastRenderedState=f;return[f,d]}}return[b.memoizedState,d]}d=c.last;var g=b.baseUpdate;f=b.baseState;null!==g?(null!==d&&(d.next=null),d=g.next):d=null!==d?d.next:null;if(null!==
d){var h=e=null,k=d,l=!1;do{var m=k.expirationTime;m<th?(l||(l=!0,h=g,e=f),m>yh&&(yh=m,Jg(yh))):(Ig(m,k.suspenseConfig),f=k.eagerReducer===a?k.eagerState:a(f,k.action));g=k;k=k.next}while(null!==k&&k!==d);l||(h=g,e=f);of(f,b.memoizedState)||(wg=!0);b.memoizedState=f;b.baseUpdate=h;b.baseState=e;c.lastRenderedState=f}return[b.memoizedState,c.dispatch]}
function Rh(a){var b=Nh();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={last:null,dispatch:null,lastRenderedReducer:Ph,lastRenderedState:a};a=a.dispatch=Sh.bind(null,uh,a);return[b.memoizedState,a]}function Th(a){return Qh(Ph,a)}function Uh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};null===zh?(zh={lastEffect:null},zh.lastEffect=a.next=a):(b=zh.lastEffect,null===b?zh.lastEffect=a.next=a:(c=b.next,b.next=a,a.next=c,zh.lastEffect=a));return a}
function Vh(a,b,c,d){var e=Nh();Ah|=a;e.memoizedState=Uh(b,c,void 0,void 0===d?null:d)}function Wh(a,b,c,d){var e=Oh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Hh(d,g.deps)){Uh(0,c,f,d);return}}Ah|=a;e.memoizedState=Uh(b,c,f,d)}function Xh(a,b){return Vh(516,192,a,b)}function Yh(a,b){return Wh(516,192,a,b)}
function Zh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function $h(){}function ai(a,b){Nh().memoizedState=[a,void 0===b?null:b];return a}function bi(a,b){var c=Oh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Hh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
function Sh(a,b,c){if(!(25>Gh))throw Error(u(301));var d=a.alternate;if(a===uh||null!==d&&d===uh)if(Bh=!0,a={expirationTime:th,suspenseConfig:null,action:c,eagerReducer:null,eagerState:null,next:null},null===Ch&&(Ch=new Map),c=Ch.get(b),void 0===c)Ch.set(b,a);else{for(b=c;null!==b.next;)b=b.next;b.next=a}else{var e=Pg(),f=Mg.suspense;e=Qg(e,a,f);f={expirationTime:e,suspenseConfig:f,action:c,eagerReducer:null,eagerState:null,next:null};var g=b.last;if(null===g)f.next=f;else{var h=g.next;null!==h&&
(f.next=h);g.next=f}b.last=f;if(0===a.expirationTime&&(null===d||0===d.expirationTime)&&(d=b.lastRenderedReducer,null!==d))try{var k=b.lastRenderedState,l=d(k,c);f.eagerReducer=d;f.eagerState=l;if(of(l,k))return}catch(m){}finally{}Rg(a,e)}}
var Lh={readContext:xg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},Jh={readContext:xg,useCallback:ai,useContext:xg,useEffect:Xh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,36,Zh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Vh(4,36,a,b)},useMemo:function(a,b){var c=Nh();b=void 0===b?null:b;a=a();c.memoizedState=
[a,b];return a},useReducer:function(a,b,c){var d=Nh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={last:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Sh.bind(null,uh,a);return[d.memoizedState,a]},useRef:function(a){var b=Nh();a={current:a};return b.memoizedState=a},useState:Rh,useDebugValue:$h,useResponder:rh,useDeferredValue:function(a,b){var c=Rh(a),d=c[0],e=c[1];Xh(function(){q.unstable_next(function(){var c=N.suspense;N.suspense=void 0===b?null:b;try{e(a)}finally{N.suspense=
c}})},[a,b]);return d},useTransition:function(a){var b=Rh(!1),c=b[0],d=b[1];return[ai(function(b){d(!0);q.unstable_next(function(){var c=N.suspense;N.suspense=void 0===a?null:a;try{d(!1),b()}finally{N.suspense=c}})},[a,c]),c]}},Kh={readContext:xg,useCallback:bi,useContext:xg,useEffect:Yh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Wh(4,36,Zh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Wh(4,36,a,b)},useMemo:function(a,b){var c=Oh();b=void 0===b?
null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Hh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a},useReducer:Qh,useRef:function(){return Oh().memoizedState},useState:Th,useDebugValue:$h,useResponder:rh,useDeferredValue:function(a,b){var c=Th(a),d=c[0],e=c[1];Yh(function(){q.unstable_next(function(){var c=N.suspense;N.suspense=void 0===b?null:b;try{e(a)}finally{N.suspense=c}})},[a,b]);return d},useTransition:function(a){var b=Th(!1),c=b[0],d=b[1];return[bi(function(b){d(!0);q.unstable_next(function(){var c=
N.suspense;N.suspense=void 0===a?null:a;try{d(!1),b()}finally{N.suspense=c}})},[a,c]),c]}},ci=null,di=null,ei=!1;function fi(a,b){var c=gi(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function hi(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}
function ii(a){if(ei){var b=di;if(b){var c=b;if(!hi(a,b)){b=re(c.nextSibling);if(!b||!hi(a,b)){a.effectTag=a.effectTag&-1025|2;ei=!1;ci=a;return}fi(ci,c)}ci=a;di=re(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,ei=!1,ci=a}}function ji(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;ci=a}
function ki(a){if(a!==ci)return!1;if(!ei)return ji(a),ei=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!oe(b,a.memoizedProps))for(b=di;b;)fi(a,b),b=re(b.nextSibling);ji(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===ie){if(0===b){di=re(a.nextSibling);break a}b--}else c!==he&&c!==ke&&c!==je||b++}a=a.nextSibling}di=null}}else di=ci?re(a.stateNode.nextSibling):null;return!0}
function li(){di=ci=null;ei=!1}var mi=Ea.ReactCurrentOwner,wg=!1;function R(a,b,c,d){b.child=null===a?gh(b,null,c,d):fh(b,a.child,c,d)}function ni(a,b,c,d,e){c=c.render;var f=b.ref;vg(b,e);d=Ih(a,b,c,d,f,e);if(null!==a&&!wg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),oi(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}
function pi(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!qi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ri(a,b,g,d,e,f);a=ch(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:qf,c(e,d)&&a.ref===b.ref))return oi(a,b,f);b.effectTag|=1;a=ah(g,d,f);a.ref=b.ref;a.return=b;return b.child=a}
function ri(a,b,c,d,e,f){return null!==a&&qf(a.memoizedProps,d)&&a.ref===b.ref&&(wg=!1,e<f)?oi(a,b,f):si(a,b,c,d,f)}function ti(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function si(a,b,c,d,e){var f=L(c)?Df:J.current;f=Ef(b,f);vg(b,e);c=Ih(a,b,c,d,f,e);if(null!==a&&!wg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),oi(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}
function ui(a,b,c,d,e){if(L(c)){var f=!0;Jf(b)}else f=!1;vg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Ug(b,c,d,e),Wg(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=xg(l):(l=L(c)?Df:J.current,l=Ef(b,l));var m=c.getDerivedStateFromProps,C="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;C||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Vg(b,g,d,l);yg=!1;var y=b.memoizedState;k=g.state=y;var H=b.updateQueue;null!==H&&(Hg(b,H,d,g,e),k=b.memoizedState);h!==d||y!==k||K.current||yg?("function"===typeof m&&(Og(b,c,m,d),k=b.memoizedState),(h=yg||Tg(b,c,h,d,y,k,l))?(C||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&
g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,h=b.memoizedProps,g.props=b.type===b.elementType?h:mg(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=xg(l):(l=L(c)?Df:J.current,l=Ef(b,l)),m=c.getDerivedStateFromProps,(C=
"function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Vg(b,g,d,l),yg=!1,k=b.memoizedState,y=g.state=k,H=b.updateQueue,null!==H&&(Hg(b,H,d,g,e),y=b.memoizedState),h!==d||k!==y||K.current||yg?("function"===typeof m&&(Og(b,c,m,d),y=b.memoizedState),(m=yg||Tg(b,c,h,d,k,y,l))?(C||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||
("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,y,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,y,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=
d,b.memoizedState=y),g.props=d,g.state=y,g.context=l,d=m):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return vi(a,b,c,d,f,e)}
function vi(a,b,c,d,e,f){ti(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Kf(b,c,!1),oi(a,b,f);d=b.stateNode;mi.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=fh(b,a.child,null,f),b.child=fh(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function wi(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);mh(a,b.containerInfo)}
var xi={dehydrated:null,retryTime:0};
function yi(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1,b);if(null===a){void 0!==e.fallback&&ii(b);if(g){g=e.fallback;e=eh(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=eh(g,d,c,null);c.return=
b;e.sibling=c;b.memoizedState=xi;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=gh(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=ah(a,a.pendingProps,0);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=ah(d,e,d.expirationTime);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=xi;b.child=c;return d}c=fh(b,a.child,e.children,c);b.memoizedState=
null;return b.child=c}a=a.child;if(g){g=e.fallback;e=eh(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=eh(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=xi;b.child=e;return c}b.memoizedState=null;return b.child=fh(b,a,e.children,c)}
function zi(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);ug(a.return,b)}function Ai(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}
function Bi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&zi(a,c);else if(19===a.tag)zi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d,b);if(0===(b.mode&2))b.memoizedState=
null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===qh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);Ai(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===qh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}Ai(b,!0,c,null,f,b.lastEffect);break;case "together":Ai(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}
function oi(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Jg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=ah(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=ah(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null}return b.child}function Ci(a){a.effectTag|=4}var Hi,Ii,Ji,Ki;
Hi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Ii=function(){};
Ji=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;lh(ih.current);a=null;switch(c){case "input":f=Ab(g,f);d=Ab(g,d);a=[];break;case "option":f=Ib(g,f);d=Ib(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Kb(g,f);d=Kb(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=ae)}Yd(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===
h)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(ia.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),
c[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,""+l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(ia.hasOwnProperty(h)?(null!=l&&$d(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;(b.updateQueue=e)&&Ci(b)}};Ki=function(a,b,c,d){c!==d&&Ci(b)};
function Li(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}
function Mi(a){switch(a.tag){case 1:L(a.type)&&Ff(a);var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:nh(a);Gf(a);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return ph(a),null;case 13:return G(M,a),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return G(M,a),null;case 4:return nh(a),null;case 10:return tg(a),null;default:return null}}function Ni(a,b){return{value:a,source:b,stack:Xa(b)}}
var Oi="function"===typeof WeakSet?WeakSet:Set;function Pi(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=Xa(c));null!==c&&Wa(c.type);b=b.value;null!==a&&1===a.tag&&Wa(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Qi(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ri(a,c)}}function Si(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ri(a,c)}else b.current=null}
function Ti(a,b){switch(b.tag){case 0:case 11:case 15:Ui(2,0,b);break;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:mg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(u(163));}}
function Ui(a,b,c){c=c.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do{if(0!==(d.tag&a)){var e=d.destroy;d.destroy=void 0;void 0!==e&&e()}0!==(d.tag&b)&&(e=d.create,d.destroy=e());d=d.next}while(d!==c)}}
function Vi(a,b,c){"function"===typeof Wi&&Wi(b);switch(b.tag){case 0:case 11:case 14:case 15:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;fg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ri(g,h)}}a=a.next}while(a!==d)})}break;case 1:Si(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Qi(b,c);break;case 5:Si(b);break;case 4:Xi(a,b,c)}}
function Yi(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;null!==b&&Yi(b)}function Zi(a){return 5===a.tag||3===a.tag||4===a.tag}
function $i(a){a:{for(var b=a.return;null!==b;){if(Zi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Tb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Zi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){var f=5===e.tag||6===e.tag;if(f){var g=f?e.stateNode:e.stateNode.instance;if(c)if(d){f=b;var h=g;g=c;8===f.nodeType?f.parentNode.insertBefore(h,g):f.insertBefore(h,g)}else b.insertBefore(g,c);else d?(h=b,8===h.nodeType?(f=h.parentNode,f.insertBefore(g,h)):(f=h,f.appendChild(g)),h=h._reactRootContainer,null!==h&&void 0!==h||null!==f.onclick||(f.onclick=ae)):b.appendChild(g)}else if(4!==
e.tag&&null!==e.child){e.child.return=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e.return||e.return===a)return;e=e.return}e.sibling.return=e.return;e=e.sibling}}
function Xi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Vi(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=
f,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Vi(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}
function aj(a,b){switch(b.tag){case 0:case 11:case 14:case 15:Ui(4,8,b);break;case 1:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[ve]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Cb(c,d);Zd(a,e);b=Zd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?Wd(c,h):"dangerouslySetInnerHTML"===g?Sb(c,h):"children"===g?Tb(c,h):vb(c,g,h,b)}switch(a){case "input":Eb(c,d);break;case "textarea":Mb(c,
d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Jb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Jb(c,!!d.multiple,d.defaultValue,!0):Jb(c,!!d.multiple,d.multiple?[]:"",!1))}}}break;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;break;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Lc(b.containerInfo));break;case 12:break;case 13:c=b;null===b.memoizedState?d=!1:(d=!0,c=b.child,bj=cg());
if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=Vd("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=f;continue}else if(null!==a.child){a.child.return=
a;a=a.child;continue}if(a===c)break a;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}cj(b);break;case 19:cj(b);break;case 17:break;case 20:break;case 21:break;default:throw Error(u(163));}}function cj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Oi);b.forEach(function(b){var d=dj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}var ej="function"===typeof WeakMap?WeakMap:Map;
function fj(a,b,c){c=Bg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){gj||(gj=!0,hj=d);Pi(a,b)};return c}
function ij(a,b,c){c=Bg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Pi(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===jj?jj=new Set([this]):jj.add(this),Pi(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}
var kj=Math.ceil,lj=Ea.ReactCurrentDispatcher,mj=Ea.ReactCurrentOwner,S=0,nj=8,oj=16,pj=32,qj=0,rj=1,sj=2,tj=3,uj=4,vj=5,T=S,U=null,V=null,W=0,X=qj,wj=null,xj=1073741823,yj=1073741823,zj=null,Aj=0,Bj=!1,bj=0,Cj=500,Y=null,gj=!1,hj=null,jj=null,Dj=!1,Ej=null,Fj=90,Gj=null,Hj=0,Ij=null,Jj=0;function Pg(){return(T&(oj|pj))!==S?1073741821-(cg()/10|0):0!==Jj?Jj:Jj=1073741821-(cg()/10|0)}
function Qg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=dg();if(0===(b&4))return 99===d?1073741823:1073741822;if((T&oj)!==S)return W;if(null!==c)a=lg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=lg(a,150,100);break;case 97:case 96:a=lg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==U&&a===W&&--a;return a}
function Rg(a,b){if(50<Hj)throw Hj=0,Ij=null,Error(u(185));a=Kj(a,b);if(null!==a){var c=dg();1073741823===b?(T&nj)!==S&&(T&(oj|pj))===S?Lj(a):(Z(a),T===S&&jg()):Z(a);(T&4)===S||98!==c&&99!==c||(null===Gj?Gj=new Map([[a,b]]):(c=Gj.get(a),(void 0===c||c>b)&&Gj.set(a,b)))}}
function Kj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(U===e&&(Jg(b),X===uj&&Mj(e,W)),Nj(e,b));return e}
function Oj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Pj(a,b))return b;b=a.lastPingedTime;a=a.nextKnownPendingLevel;return b>a?b:a}
function Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=hg(Lj.bind(null,a));else{var b=Oj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Pg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Xf&&Nf(c)}a.callbackExpirationTime=
b;a.callbackPriority=d;b=1073741823===b?hg(Lj.bind(null,a)):gg(d,Qj.bind(null,a),{timeout:10*(1073741821-b)-cg()});a.callbackNode=b}}}
function Qj(a,b){Jj=0;if(b)return b=Pg(),Rj(a,b),Z(a),null;var c=Oj(a);if(0!==c){b=a.callbackNode;if((T&(oj|pj))!==S)throw Error(u(327));Sj();a===U&&c===W||Tj(a,c);if(null!==V){var d=T;T|=oj;var e=Uj(a);do try{Vj();break}catch(h){Wj(a,h)}while(1);rg();T=d;lj.current=e;if(X===rj)throw b=wj,Tj(a,c),Mj(a,c),Z(a),b;if(null===V)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=X,U=null,d){case qj:case rj:throw Error(u(345));case sj:Rj(a,2<c?2:c);break;case tj:Mj(a,c);d=a.lastSuspendedTime;
c===d&&(a.nextKnownPendingLevel=Xj(e));if(1073741823===xj&&(e=bj+Cj-cg(),10<e)){if(Bj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Tj(a,c);break}}f=Oj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=pe(Yj.bind(null,a),e);break}Yj(a);break;case uj:Mj(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Xj(e));if(Bj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Tj(a,c);break}e=Oj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=
d;break}1073741823!==yj?d=10*(1073741821-yj)-cg():1073741823===xj?d=0:(d=10*(1073741821-xj)-5E3,e=cg(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*kj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=pe(Yj.bind(null,a),d);break}Yj(a);break;case vj:if(1073741823!==xj&&null!==zj){f=xj;var g=zj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=cg()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){Mj(a,c);a.timeoutHandle=
pe(Yj.bind(null,a),d);break}}Yj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Qj.bind(null,a)}}return null}
function Lj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if(a.finishedExpirationTime===b)Yj(a);else{if((T&(oj|pj))!==S)throw Error(u(327));Sj();a===U&&b===W||Tj(a,b);if(null!==V){var c=T;T|=oj;var d=Uj(a);do try{Zj();break}catch(e){Wj(a,e)}while(1);rg();T=c;lj.current=d;if(X===rj)throw c=wj,Tj(a,b),Mj(a,b),Z(a),c;if(null!==V)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;U=null;Yj(a);Z(a)}}return null}
function ak(){if(null!==Gj){var a=Gj;Gj=null;a.forEach(function(a,c){Rj(c,a);Z(c)});jg()}}function bk(a,b){var c=T;T|=1;try{return a(b)}finally{T=c,T===S&&jg()}}function ck(a,b){var c=T;T&=-2;T|=nj;try{return a(b)}finally{T=c,T===S&&jg()}}
function Tj(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,qe(c));if(null!==V)for(c=V.return;null!==c;){var d=c;switch(d.tag){case 1:var e=d.type.childContextTypes;null!==e&&void 0!==e&&Ff(d);break;case 3:nh(d);Gf(d);break;case 5:ph(d);break;case 4:nh(d);break;case 13:G(M,d);break;case 19:G(M,d);break;case 10:tg(d)}c=c.return}U=a;V=ah(a.current,null,b);W=b;X=qj;wj=null;yj=xj=1073741823;zj=null;Aj=0;Bj=!1}
function Wj(a,b){do{try{rg();Mh();if(null===V||null===V.return)return X=rj,wj=b,null;a:{var c=a,d=V.return,e=V,f=b;b=W;e.effectTag|=2048;e.firstEffect=e.lastEffect=null;if(null!==f&&"object"===typeof f&&"function"===typeof f.then){var g=f,h=0!==(M.current&1),k=d;do{var l;if(l=13===k.tag){var m=k.memoizedState;if(null!==m)l=null!==m.dehydrated?!0:!1;else{var C=k.memoizedProps;l=void 0===C.fallback?!1:!0!==C.unstable_avoidThisFallback?!0:h?!1:!0}}if(l){var y=k.updateQueue;if(null===y){var H=new Set;
H.add(g);k.updateQueue=H}else y.add(g);if(0===(k.mode&2)){k.effectTag|=64;e.effectTag&=-2981;if(1===e.tag)if(null===e.alternate)e.tag=17;else{var z=Bg(1073741823,null);z.tag=2;Dg(e,z)}e.expirationTime=1073741823;break a}f=void 0;e=b;var ta=c.pingCache;null===ta?(ta=c.pingCache=new ej,f=new Set,ta.set(g,f)):(f=ta.get(g),void 0===f&&(f=new Set,ta.set(g,f)));if(!f.has(e)){f.add(e);var r=dk.bind(null,c,g,e);g.then(r,r)}k.effectTag|=4096;k.expirationTime=b;break a}k=k.return}while(null!==k);f=Error((Wa(e.type)||
"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Xa(e))}X!==vj&&(X=sj);f=Ni(f,e);k=d;do{switch(k.tag){case 3:g=f;k.effectTag|=4096;k.expirationTime=b;var x=fj(k,g,b);Eg(k,x);break a;case 1:g=f;var A=k.type,p=k.stateNode;if(0===(k.effectTag&64)&&("function"===typeof A.getDerivedStateFromError||null!==p&&"function"===typeof p.componentDidCatch&&
(null===jj||!jj.has(p)))){k.effectTag|=4096;k.expirationTime=b;var t=ij(k,g,b);Eg(k,t);break a}}k=k.return}while(null!==k)}V=ek(V)}catch(v){b=v;continue}break}while(1)}function Uj(){var a=lj.current;lj.current=Lh;return null===a?Lh:a}function Ig(a,b){a<xj&&2<a&&(xj=a);null!==b&&a<yj&&2<a&&(yj=a,zj=b)}function Jg(a){a>Aj&&(Aj=a)}function Zj(){for(;null!==V;)V=fk(V)}function Vj(){for(;null!==V&&!Of();)V=fk(V)}
function fk(a){var b=gk(a.alternate,a,W);a.memoizedProps=a.pendingProps;null===b&&(b=ek(a));mj.current=null;return b}
function ek(a){V=a;do{var b=V.alternate;a=V.return;if(0===(V.effectTag&2048)){a:{var c=b;b=V;var d=W;var e=b.pendingProps;switch(b.tag){case 2:break;case 16:break;case 15:case 0:break;case 1:L(b.type)&&Ff(b);break;case 3:nh(b);Gf(b);e=b.stateNode;e.pendingContext&&(e.context=e.pendingContext,e.pendingContext=null);(null===c||null===c.child)&&ki(b)&&Ci(b);Ii(b);break;case 5:ph(b);d=lh(kh.current);var f=b.type;if(null!==c&&null!=b.stateNode)Ji(c,b,f,e,d),c.ref!==b.ref&&(b.effectTag|=128);else if(e){var g=
lh(ih.current);if(ki(b)){e=b;var h=e.stateNode;c=e.type;var k=e.memoizedProps,l=d;h[ue]=e;h[ve]=k;f=void 0;d=h;switch(c){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(h=0;h<cc.length;h++)F(cc[h],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Bb(d,k);F("invalid",d);$d(l,"onChange");break;case "select":d._wrapperState=
{wasMultiple:!!k.multiple};F("invalid",d);$d(l,"onChange");break;case "textarea":Lb(d,k),F("invalid",d),$d(l,"onChange")}Yd(c,k);h=null;for(f in k)k.hasOwnProperty(f)&&(g=k[f],"children"===f?"string"===typeof g?d.textContent!==g&&(h=["children",g]):"number"===typeof g&&d.textContent!==""+g&&(h=["children",""+g]):ia.hasOwnProperty(f)&&null!=g&&$d(l,f));switch(c){case "input":yb(d);Gb(d,k,!0);break;case "textarea":yb(d);Nb(d,k);break;case "select":case "option":break;default:"function"===typeof k.onClick&&
(d.onclick=ae)}f=h;e.updateQueue=f;e=null!==f?!0:!1;e&&Ci(b)}else{c=b;l=f;k=e;h=9===d.nodeType?d:d.ownerDocument;g===Ob.html&&(g=Pb(l));g===Ob.html?"script"===l?(k=h.createElement("div"),k.innerHTML="<script>\x3c/script>",h=k.removeChild(k.firstChild)):"string"===typeof k.is?h=h.createElement(l,{is:k.is}):(h=h.createElement(l),"select"===l&&(l=h,k.multiple?l.multiple=!0:k.size&&(l.size=k.size))):h=h.createElementNS(g,l);k=h;k[ue]=c;k[ve]=e;Hi(k,b,!1,!1);b.stateNode=k;l=f;c=e;var m=d,C=Zd(l,c);switch(l){case "iframe":case "object":case "embed":F("load",
k);d=c;break;case "video":case "audio":for(d=0;d<cc.length;d++)F(cc[d],k);d=c;break;case "source":F("error",k);d=c;break;case "img":case "image":case "link":F("error",k);F("load",k);d=c;break;case "form":F("reset",k);F("submit",k);d=c;break;case "details":F("toggle",k);d=c;break;case "input":Bb(k,c);d=Ab(k,c);F("invalid",k);$d(m,"onChange");break;case "option":d=Ib(k,c);break;case "select":k._wrapperState={wasMultiple:!!c.multiple};d=n({},c,{value:void 0});F("invalid",k);$d(m,"onChange");break;case "textarea":Lb(k,
c);d=Kb(k,c);F("invalid",k);$d(m,"onChange");break;default:d=c}Yd(l,d);h=void 0;g=l;var y=k,H=d;for(h in H)if(H.hasOwnProperty(h)){var z=H[h];"style"===h?Wd(y,z):"dangerouslySetInnerHTML"===h?(z=z?z.__html:void 0,null!=z&&Sb(y,z)):"children"===h?"string"===typeof z?("textarea"!==g||""!==z)&&Tb(y,z):"number"===typeof z&&Tb(y,""+z):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(ia.hasOwnProperty(h)?null!=z&&$d(m,h):null!=z&&vb(y,h,z,C))}switch(l){case "input":yb(k);
Gb(k,c,!1);break;case "textarea":yb(k);Nb(k,c);break;case "option":null!=c.value&&k.setAttribute("value",""+ub(c.value));break;case "select":d=k;d.multiple=!!c.multiple;k=c.value;null!=k?Jb(d,!!c.multiple,k,!1):null!=c.defaultValue&&Jb(d,!!c.multiple,c.defaultValue,!0);break;default:"function"===typeof d.onClick&&(k.onclick=ae)}(e=ne(f,e))&&Ci(b)}null!==b.ref&&(b.effectTag|=128)}else if(null===b.stateNode)throw Error(u(166));break;case 6:if(c&&null!=b.stateNode)Ki(c,b,c.memoizedProps,e);else{if("string"!==
typeof e&&null===b.stateNode)throw Error(u(166));d=lh(kh.current);lh(ih.current);ki(b)?(e=b,f=e.stateNode,d=e.memoizedProps,f[ue]=e,(e=f.nodeValue!==d)&&Ci(b)):(f=b,e=(9===d.nodeType?d:d.ownerDocument).createTextNode(e),e[ue]=f,b.stateNode=e)}break;case 11:break;case 13:G(M,b);e=b.memoizedState;if(0!==(b.effectTag&64)){b.expirationTime=d;break a}e=null!==e;f=!1;null===c?void 0!==b.memoizedProps.fallback&&ki(b):(d=c.memoizedState,f=null!==d,e||null===d||(d=c.child.sibling,null!==d&&(k=b.firstEffect,
null!==k?(b.firstEffect=d,d.nextEffect=k):(b.firstEffect=b.lastEffect=d,d.nextEffect=null),d.effectTag=8)));if(e&&!f&&0!==(b.mode&2))if(null===c&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))X===qj&&(X=tj);else{if(X===qj||X===tj)X=uj;0!==Aj&&null!==U&&(Mj(U,W),Nj(U,Aj))}if(e||f)b.effectTag|=4;break;case 7:break;case 8:break;case 12:break;case 4:nh(b);Ii(b);break;case 10:tg(b);break;case 9:break;case 14:break;case 17:L(b.type)&&Ff(b);break;case 19:G(M,b);e=b.memoizedState;if(null===
e)break;f=0!==(b.effectTag&64);k=e.rendering;if(null===k)if(f)Li(e,!1);else{if(X!==qj||null!==c&&0!==(c.effectTag&64))for(c=b.child;null!==c;){k=qh(c);if(null!==k){b.effectTag|=64;Li(e,!1);f=k.updateQueue;null!==f&&(b.updateQueue=f,b.effectTag|=4);null===e.lastEffect&&(b.firstEffect=null);b.lastEffect=e.lastEffect;e=d;for(f=b.child;null!==f;)d=f,c=e,d.effectTag&=2,d.nextEffect=null,d.firstEffect=null,d.lastEffect=null,k=d.alternate,null===k?(d.childExpirationTime=0,d.expirationTime=c,d.child=null,
d.memoizedProps=null,d.memoizedState=null,d.updateQueue=null,d.dependencies=null):(d.childExpirationTime=k.childExpirationTime,d.expirationTime=k.expirationTime,d.child=k.child,d.memoizedProps=k.memoizedProps,d.memoizedState=k.memoizedState,d.updateQueue=k.updateQueue,c=k.dependencies,d.dependencies=null===c?null:{expirationTime:c.expirationTime,firstContext:c.firstContext,responders:c.responders}),f=f.sibling;I(M,M.current&1|2,b);b=b.child;break a}c=c.sibling}}else{if(!f)if(c=qh(k),null!==c){if(b.effectTag|=
64,f=!0,d=c.updateQueue,null!==d&&(b.updateQueue=d,b.effectTag|=4),Li(e,!0),null===e.tail&&"hidden"===e.tailMode&&!k.alternate){b=b.lastEffect=e.lastEffect;null!==b&&(b.nextEffect=null);break}}else cg()>e.tailExpiration&&1<d&&(b.effectTag|=64,f=!0,Li(e,!1),b.expirationTime=b.childExpirationTime=d-1);e.isBackwards?(k.sibling=b.child,b.child=k):(d=e.last,null!==d?d.sibling=k:b.child=k,e.last=k)}if(null!==e.tail){0===e.tailExpiration&&(e.tailExpiration=cg()+500);d=e.tail;e.rendering=d;e.tail=d.sibling;
e.lastEffect=b.lastEffect;d.sibling=null;e=M.current;e=f?e&1|2:e&1;I(M,e,b);b=d;break a}break;case 20:break;case 21:break;default:throw Error(u(156,b.tag));}b=null}e=V;if(1===W||1!==e.childExpirationTime){f=0;for(d=e.child;null!==d;)c=d.expirationTime,k=d.childExpirationTime,c>f&&(f=c),k>f&&(f=k),d=d.sibling;e.childExpirationTime=f}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=V.firstEffect),null!==V.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=
V.firstEffect),a.lastEffect=V.lastEffect),1<V.effectTag&&(null!==a.lastEffect?a.lastEffect.nextEffect=V:a.firstEffect=V,a.lastEffect=V))}else{b=Mi(V,W);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=V.sibling;if(null!==b)return b;V=a}while(null!==V);X===qj&&(X=vj);return null}function Xj(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Yj(a){var b=dg();fg(99,ik.bind(null,a,b));return null}
function ik(a,b){do Sj();while(null!==Ej);if((T&(oj|pj))!==S)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Xj(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=
d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===U&&(V=U=null,W=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=T;T|=pj;mj.current=null;le=Ld;var g=fe();if(ge(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,
m=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(Db){h=null;break a}var C=0,y=-1,H=-1,z=0,ta=0,r=g,x=null;b:for(;;){for(var A;;){r!==h||0!==l&&3!==r.nodeType||(y=C+l);r!==m||0!==k&&3!==r.nodeType||(H=C+k);3===r.nodeType&&(C+=r.nodeValue.length);if(null===(A=r.firstChild))break;x=r;r=A}for(;;){if(r===g)break b;x===h&&++z===l&&(y=C);x===m&&++ta===k&&(H=C);if(null!==(A=r.nextSibling))break;r=x;x=r.parentNode}r=A}h=-1===y||-1===H?null:{start:y,end:H}}else h=null}h=h||{start:0,end:0}}else h=
null;me={focusedElem:g,selectionRange:h};Ld=!1;Y=e;do try{jk()}catch(Db){if(null===Y)throw Error(u(330));Ri(Y,Db);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var p=Y.effectTag;p&16&&Tb(Y.stateNode,"");if(p&128){var t=Y.alternate;if(null!==t){var v=t.ref;null!==v&&("function"===typeof v?v(null):v.current=null)}}switch(p&1038){case 2:$i(Y);Y.effectTag&=-3;break;case 6:$i(Y);Y.effectTag&=-3;aj(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=-1025;aj(Y.alternate,
Y);break;case 4:aj(Y.alternate,Y);break;case 8:l=Y,Xi(g,l,h),Yi(l)}Y=Y.nextEffect}}catch(Db){if(null===Y)throw Error(u(330));Ri(Y,Db);Y=Y.nextEffect}while(null!==Y);v=me;t=fe();p=v.focusedElem;h=v.selectionRange;if(t!==p&&p&&p.ownerDocument&&ee(p.ownerDocument.documentElement,p)){null!==h&&ge(p)&&(t=h.start,v=h.end,void 0===v&&(v=t),"selectionStart"in p?(p.selectionStart=t,p.selectionEnd=Math.min(v,p.value.length)):(v=(t=p.ownerDocument||document)&&t.defaultView||window,v.getSelection&&(v=v.getSelection(),
l=p.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!v.extend&&g>h&&(l=h,h=g,g=l),l=de(p,g),m=de(p,h),l&&m&&(1!==v.rangeCount||v.anchorNode!==l.node||v.anchorOffset!==l.offset||v.focusNode!==m.node||v.focusOffset!==m.offset)&&(t=t.createRange(),t.setStart(l.node,l.offset),v.removeAllRanges(),g>h?(v.addRange(t),v.extend(m.node,m.offset)):(t.setEnd(m.node,m.offset),v.addRange(t))))));t=[];for(v=p;v=v.parentNode;)1===v.nodeType&&t.push({element:v,left:v.scrollLeft,top:v.scrollTop});
"function"===typeof p.focus&&p.focus();for(p=0;p<t.length;p++)v=t[p],v.element.scrollLeft=v.left,v.element.scrollTop=v.top}me=null;Ld=!!le;le=null;a.current=c;Y=e;do try{for(p=d;null!==Y;){var Dh=Y.effectTag;if(Dh&36){var dc=Y.alternate;t=Y;v=p;switch(t.tag){case 0:case 11:case 15:Ui(16,32,t);break;case 1:var fd=t.stateNode;if(t.effectTag&4)if(null===dc)fd.componentDidMount();else{var hk=t.elementType===t.type?dc.memoizedProps:mg(t.type,dc.memoizedProps);fd.componentDidUpdate(hk,dc.memoizedState,
fd.__reactInternalSnapshotBeforeUpdate)}var Eh=t.updateQueue;null!==Eh&&Kg(t,Eh,fd,v);break;case 3:var Fh=t.updateQueue;if(null!==Fh){g=null;if(null!==t.child)switch(t.child.tag){case 5:g=t.child.stateNode;break;case 1:g=t.child.stateNode}Kg(t,Fh,g,v)}break;case 5:var xk=t.stateNode;null===dc&&t.effectTag&4&&ne(t.type,t.memoizedProps)&&xk.focus();break;case 6:break;case 4:break;case 12:break;case 13:if(null===t.memoizedState){var Di=t.alternate;if(null!==Di){var Ei=Di.memoizedState;if(null!==Ei){var Fi=
Ei.dehydrated;null!==Fi&&Lc(Fi)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(u(163));}}if(Dh&128){t=void 0;var xd=Y.ref;if(null!==xd){var Gi=Y.stateNode;switch(Y.tag){case 5:t=Gi;break;default:t=Gi}"function"===typeof xd?xd(t):xd.current=t}}Y=Y.nextEffect}}catch(Db){if(null===Y)throw Error(u(330));Ri(Y,Db);Y=Y.nextEffect}while(null!==Y);Y=null;Yf();T=f}else a.current=c;if(Dj)Dj=!1,Ej=a,Fj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&
(jj=null);1073741823===b?a===Ij?Hj++:(Hj=0,Ij=a):Hj=0;"function"===typeof kk&&kk(c.stateNode,d);Z(a);if(gj)throw gj=!1,a=hj,hj=null,a;if((T&nj)!==S)return null;jg();return null}function jk(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Ti(Y.alternate,Y);0===(a&512)||Dj||(Dj=!0,gg(97,function(){Sj();return null}));Y=Y.nextEffect}}function Sj(){if(90!==Fj){var a=97<Fj?97:Fj;Fj=90;return fg(a,lk)}}
function lk(){if(null===Ej)return!1;var a=Ej;Ej=null;if((T&(oj|pj))!==S)throw Error(u(331));var b=T;T|=pj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:Ui(128,0,c),Ui(0,64,c)}}catch(d){if(null===a)throw Error(u(330));Ri(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}T=b;jg();return!0}function mk(a,b,c){b=Ni(c,b);b=fj(a,b,1073741823);Dg(a,b);a=Kj(a,1073741823);null!==a&&Z(a)}
function Ri(a,b){if(3===a.tag)mk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){mk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===jj||!jj.has(d))){a=Ni(b,a);a=ij(c,a,1073741823);Dg(c,a);c=Kj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}
function dk(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);U===a&&W===c?X===uj||X===tj&&1073741823===xj&&cg()-bj<Cj?Tj(a,W):Bj=!0:Pj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,a.finishedExpirationTime===c&&(a.finishedExpirationTime=0,a.finishedWork=null),Z(a)))}function dj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Pg(),b=Qg(b,a,null));a=Kj(a,b);null!==a&&Z(a)}var gk;
gk=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)wg=!0;else{if(d<c){wg=!1;switch(b.tag){case 3:wi(b);li();break;case 5:oh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Jf(b);break;case 4:mh(b,b.stateNode.containerInfo);break;case 10:sg(b,b.memoizedProps.value);break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;if(0!==d&&d>=c)return yi(a,b,c);I(M,M.current&
1,b);b=oi(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1,b);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return Bi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current,b);if(!d)return null}return oi(a,b,c)}wg=!1}}else wg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Ef(b,J.current);vg(b,c);e=Ih(null,b,d,a,e,c);b.effectTag|=1;if("object"===
typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;Mh();if(L(d)){var f=!0;Jf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;var g=d.getDerivedStateFromProps;"function"===typeof g&&Og(b,d,g,a);e.updater=Sg;b.stateNode=e;e._reactInternalFiber=b;Wg(b,d,a,c);b=vi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;Va(e);if(1!==e._status)throw e._result;
e=e._result;b.type=e;f=b.tag=nk(e);a=mg(e,a);switch(f){case 0:b=si(null,b,e,a,c);break;case 1:b=ui(null,b,e,a,c);break;case 11:b=ni(null,b,e,a,c);break;case 14:b=pi(null,b,e,mg(e.type,a),d,c);break;default:throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:mg(d,e),si(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:mg(d,e),ui(a,b,d,e,c);case 3:wi(b);d=b.updateQueue;if(null===d)throw Error(u(282));e=b.memoizedState;e=null!==e?e.element:
null;Hg(b,d,b.pendingProps,null,c);d=b.memoizedState.element;if(d===e)li(),b=oi(a,b,c);else{if(e=b.stateNode.hydrate)di=re(b.stateNode.containerInfo.firstChild),ci=b,e=ei=!0;if(e)for(c=gh(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),li();b=b.child}return b;case 5:return oh(b),null===a&&ii(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,oe(d,e)?g=null:null!==f&&oe(d,f)&&(b.effectTag|=16),ti(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=
b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&ii(b),null;case 13:return yi(a,b,c);case 4:return mh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=fh(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:mg(d,e),ni(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,b,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;
e=b.pendingProps;g=b.memoizedProps;f=e.value;sg(b,f);if(null!==g){var h=g.value;f=of(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0;if(0===f){if(g.children===e.children&&!K.current){b=oi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=Bg(c,null),l.tag=2,Dg(h,l));h.expirationTime<c&&(h.expirationTime=
c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);ug(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=g}}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,vg(b,c),e=xg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;
case 14:return e=b.type,f=mg(e,b.pendingProps),f=mg(e.type,f),pi(a,b,e,f,d,c);case 15:return ri(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:mg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Jf(b)):a=!1,vg(b,c),Ug(b,d,e,c),Wg(b,d,e,c),vi(null,b,d,!0,a,c);case 19:return Bi(a,b,c)}throw Error(u(156,b.tag));};var kk=null,Wi=null;
function ok(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);kk=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Wi=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}
function pk(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function gi(a,b,c,d){return new pk(a,b,c,d)}
function qi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function nk(a){if("function"===typeof a)return qi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Oa)return 11;if(a===Ra)return 14}return 2}
function ah(a,b){var c=a.alternate;null===c?(c=gi(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,
firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
function ch(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)qi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case Ia:return eh(c.children,e,f,b);case Na:g=8;e|=7;break;case Ja:g=8;e|=1;break;case Ka:return a=gi(12,c,b,e|8),a.elementType=Ka,a.type=Ka,a.expirationTime=f,a;case Pa:return a=gi(13,c,b,e),a.type=Pa,a.elementType=Pa,a.expirationTime=f,a;case Qa:return a=gi(19,c,b,e),a.elementType=Qa,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case La:g=
10;break a;case Ma:g=9;break a;case Oa:g=11;break a;case Ra:g=14;break a;case Sa:g=16;d=null;break a}throw Error(u(130,null==a?a:typeof a,""));}b=gi(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function eh(a,b,c,d){a=gi(7,a,d,b);a.expirationTime=c;return a}function bh(a,b,c){a=gi(6,a,null,b);a.expirationTime=c;return a}
function dh(a,b,c){b=gi(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function qk(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}
function Pj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function Mj(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}
function Nj(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Rj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}
function rk(a,b,c,d){var e=b.current,f=Pg(),g=Mg.suspense;f=Qg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(ec(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=If(c,k,h);break a}}c=h}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=Bg(f,g);b.payload={element:a};d=void 0===
d?null:d;null!==d&&(b.callback=d);Dg(e,b);Rg(e,f);return f}function sk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function tk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function uk(a,b){tk(a,b);(a=a.alternate)&&tk(a,b)}
function vk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new qk(a,b,c),e=gi(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;a[we]=d.current;c&&0!==b&&wc(9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}vk.prototype.render=function(a,b){rk(a,this._internalRoot,null,void 0===b?null:b)};vk.prototype.unmount=function(a){var b=this._internalRoot,c=void 0===a?null:a,d=b.containerInfo;rk(null,b,null,function(){d[we]=null;null!==c&&c()})};
function wk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function yk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new vk(a,0,b?{hydrate:!0}:void 0)}
function zk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=sk(g);h.call(a)}}rk(b,g,a,e)}else{f=c._reactRootContainer=yk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=sk(g);k.call(a)}}ck(function(){rk(b,g,a,e)})}return sk(g)}function Ak(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ha,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
jc=function(a){if(13===a.tag){var b=lg(Pg(),150,100);Rg(a,b);uk(a,b)}};kc=function(a){if(13===a.tag){Pg();var b=kg++;Rg(a,b);uk(a,b)}};lc=function(a){if(13===a.tag){var b=Pg();b=Qg(b,a,null);Rg(a,b);uk(a,b)}};
Za=function(a,b,c){switch(b){case "input":Eb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=ye(d);if(!e)throw Error(u(90));zb(d);Eb(d,e)}}}break;case "textarea":Mb(a,c);break;case "select":b=c.value,null!=b&&Jb(a,!!c.multiple,b,!1)}};eb=bk;
fb=function(a,b,c,d){var e=T;T|=4;try{return fg(98,a.bind(null,b,c,d))}finally{T=e,T===S&&jg()}};gb=function(){(T&(1|oj|pj))===S&&(ak(),Sj())};hb=function(a,b){var c=T;T|=2;try{return a(b)}finally{T=c,T===S&&jg()}};function Bk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!wk(b))throw Error(u(200));return Ak(a,b,null,c)}
var Ck={createPortal:Bk,findDOMNode:function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=ic(b);a=null===a?null:a.stateNode;return a},hydrate:function(a,b,c){if(!wk(b))throw Error(u(200));return zk(null,a,b,!0,c)},render:function(a,b,c){if(!wk(b))throw Error(u(200));return zk(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){if(!wk(c))throw Error(u(200));
if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return zk(a,b,c,!1,d)},unmountComponentAtNode:function(a){if(!wk(a))throw Error(u(40));return a._reactRootContainer?(ck(function(){zk(null,null,a,!1,function(){a._reactRootContainer=null;a[we]=null})}),!0):!1},unstable_createPortal:function(){return Bk.apply(void 0,arguments)},unstable_batchedUpdates:bk,flushSync:function(a,b){if((T&(oj|pj))!==S)throw Error(u(187));var c=T;T|=1;try{return fg(99,a.bind(null,b))}finally{T=c,jg()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[Cc,
xe,ye,Ca.injectEventPluginsByName,fa,Sc,function(a){ya(a,Rc)},cb,db,Pd,Ba,Sj,{current:!1}]}};
(function(a){var b=a.findFiberByHostInstance;return ok(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ea.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=ic(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:Fc,bundleType:0,version:"16.12.0",
rendererPackageName:"react-dom"});var Dk={default:Ck},Ek=Dk&&Ck||Dk;module.exports=Ek.default||Ek;

},{"object-assign":193,"react":216,"scheduler":221}],202:[function(require,module,exports){
(function (process){
'use strict';

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('./cjs/react-dom.production.min.js');
} else {
  module.exports = require('./cjs/react-dom.development.js');
}

}).call(this,require('_process'))
},{"./cjs/react-dom.development.js":200,"./cjs/react-dom.production.min.js":201,"_process":194}],203:[function(require,module,exports){
(function (process){
/** @license React v16.12.0
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var lowPriorityWarningWithoutStack = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.warn(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarningWithoutStack = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  };
}

var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true;
      lowPriorityWarningWithoutStack$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.typeOf = typeOf;
exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isValidElementType = isValidElementType;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
  })();
}

}).call(this,require('_process'))
},{"_process":194}],204:[function(require,module,exports){
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';Object.defineProperty(exports,"__esModule",{value:!0});
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.suspense_list"):
60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.fundamental"):60117,w=b?Symbol.for("react.responder"):60118,x=b?Symbol.for("react.scope"):60119;function y(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function z(a){return y(a)===m}
exports.typeOf=y;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;
exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===v||a.$$typeof===w||a.$$typeof===x)};exports.isAsyncMode=function(a){return z(a)||y(a)===l};exports.isConcurrentMode=z;exports.isContextConsumer=function(a){return y(a)===k};exports.isContextProvider=function(a){return y(a)===h};
exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return y(a)===n};exports.isFragment=function(a){return y(a)===e};exports.isLazy=function(a){return y(a)===t};exports.isMemo=function(a){return y(a)===r};exports.isPortal=function(a){return y(a)===d};exports.isProfiler=function(a){return y(a)===g};exports.isStrictMode=function(a){return y(a)===f};exports.isSuspense=function(a){return y(a)===p};

},{}],205:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/react-is.production.min.js');
} else {
  module.exports = require('./cjs/react-is.development.js');
}

}).call(this,require('_process'))
},{"./cjs/react-is.development.js":203,"./cjs/react-is.production.min.js":204,"_process":194}],206:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}

exports.polyfill = polyfill;

},{}],207:[function(require,module,exports){
(function (process){
"use strict";

exports.__esModule = true;
exports.default = void 0;

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _addClass = _interopRequireDefault(require("dom-helpers/class/addClass"));

var _removeClass = _interopRequireDefault(require("dom-helpers/class/removeClass"));

var _react = _interopRequireDefault(require("react"));

var _Transition = _interopRequireDefault(require("./Transition"));

var _PropTypes = require("./utils/PropTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var addClass = function addClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _addClass.default)(node, c);
  });
};

var removeClass = function removeClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _removeClass.default)(node, c);
  });
};
/**
 * A transition component inspired by the excellent
 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
 * using CSS transitions or animations. It's built upon the
 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
 * component, so it inherits all of its props.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` states of the transition. The first class is applied and then a
 * second `*-active` class in order to activate the CSSS transition. After the
 * transition, matching `*-done` class names are applied to persist the
 * transition state.
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
 *         <div>
 *           {"I'll receive my-node-* classes"}
 *         </div>
 *       </CSSTransition>
 *       <button type="button" onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the `in` prop is set to `true`, the child component will first receive
 * the class `example-enter`, then the `example-enter-active` will be added in
 * the next tick. `CSSTransition` [forces a
 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * between before adding the `example-enter-active`. This is an important trick
 * because it allows us to transition between `example-enter` and
 * `example-enter-active` even though they were added immediately one after
 * another. Most notably, this is what makes it possible for us to animate
 * _appearance_.
 *
 * ```css
 * .my-node-enter {
 *   opacity: 0;
 * }
 * .my-node-enter-active {
 *   opacity: 1;
 *   transition: opacity 200ms;
 * }
 * .my-node-exit {
 *   opacity: 1;
 * }
 * .my-node-exit-active {
 *   opacity: 0;
 *   transition: opacity: 200ms;
 * }
 * ```
 *
 * `*-active` classes represent which styles you want to animate **to**.
 */


var CSSTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(CSSTransition, _React$Component);

  function CSSTransition() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.onEnter = function (node, appearing) {
      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
          className = _this$getClassNames.className;

      _this.removeClasses(node, 'exit');

      addClass(node, className);

      if (_this.props.onEnter) {
        _this.props.onEnter(node, appearing);
      }
    };

    _this.onEntering = function (node, appearing) {
      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
          activeClassName = _this$getClassNames2.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onEntering) {
        _this.props.onEntering(node, appearing);
      }
    };

    _this.onEntered = function (node, appearing) {
      var appearClassName = _this.getClassNames('appear').doneClassName;

      var enterClassName = _this.getClassNames('enter').doneClassName;

      var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;

      _this.removeClasses(node, appearing ? 'appear' : 'enter');

      addClass(node, doneClassName);

      if (_this.props.onEntered) {
        _this.props.onEntered(node, appearing);
      }
    };

    _this.onExit = function (node) {
      var _this$getClassNames3 = _this.getClassNames('exit'),
          className = _this$getClassNames3.className;

      _this.removeClasses(node, 'appear');

      _this.removeClasses(node, 'enter');

      addClass(node, className);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    };

    _this.onExiting = function (node) {
      var _this$getClassNames4 = _this.getClassNames('exit'),
          activeClassName = _this$getClassNames4.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onExiting) {
        _this.props.onExiting(node);
      }
    };

    _this.onExited = function (node) {
      var _this$getClassNames5 = _this.getClassNames('exit'),
          doneClassName = _this$getClassNames5.doneClassName;

      _this.removeClasses(node, 'exit');

      addClass(node, doneClassName);

      if (_this.props.onExited) {
        _this.props.onExited(node);
      }
    };

    _this.getClassNames = function (type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === 'string';
      var prefix = isStringClassNames && classNames ? classNames + '-' : '';
      var className = isStringClassNames ? prefix + type : classNames[type];
      var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
      var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
      return {
        className: className,
        activeClassName: activeClassName,
        doneClassName: doneClassName
      };
    };

    return _this;
  }

  var _proto = CSSTransition.prototype;

  _proto.removeClasses = function removeClasses(node, type) {
    var _this$getClassNames6 = this.getClassNames(type),
        className = _this$getClassNames6.className,
        activeClassName = _this$getClassNames6.activeClassName,
        doneClassName = _this$getClassNames6.doneClassName;

    className && removeClass(node, className);
    activeClassName && removeClass(node, activeClassName);
    doneClassName && removeClass(node, doneClassName);
  };

  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
    // This is for to force a repaint,
    // which is necessary in order to transition styles when adding a class name.
    if (className) {
      /* eslint-disable no-unused-expressions */
      node && node.scrollTop;
      /* eslint-enable no-unused-expressions */

      addClass(node, className);
    }
  };

  _proto.render = function render() {
    var props = _extends({}, this.props);

    delete props.classNames;
    return _react.default.createElement(_Transition.default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };

  return CSSTransition;
}(_react.default.Component);

CSSTransition.defaultProps = {
  classNames: ''
};
CSSTransition.propTypes = process.env.NODE_ENV !== "production" ? _extends({}, _Transition.default.propTypes, {
  /**
   * The animation classNames applied to the component as it enters, exits or
   * has finished the transition. A single name can be provided and it will be
   * suffixed for each stage: e.g.
   *
   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
   *
   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
   * This allows you to define different behavior for when appearing is done and
   * when regular entering is done, using selectors like
   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
   * epic entrance animation when element first appears in the DOM using
   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   * simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: _PropTypes.classNamesShape,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExit: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement)
   */
  onExited: PropTypes.func
}) : {};
var _default = CSSTransition;
exports.default = _default;
module.exports = exports["default"];
}).call(this,require('_process'))
},{"./Transition":209,"./utils/PropTypes":213,"_process":194,"dom-helpers/class/addClass":61,"dom-helpers/class/removeClass":63,"prop-types":198,"react":216}],208:[function(require,module,exports){
(function (process){
"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _TransitionGroup = _interopRequireDefault(require("./TransitionGroup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */
var ReplaceTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ReplaceTransition, _React$Component);

  function ReplaceTransition() {
    var _this;

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

    _this.handleEnter = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.handleLifecycle('onEnter', 0, args);
    };

    _this.handleEntering = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.handleLifecycle('onEntering', 0, args);
    };

    _this.handleEntered = function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.handleLifecycle('onEntered', 0, args);
    };

    _this.handleExit = function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.handleLifecycle('onExit', 1, args);
    };

    _this.handleExiting = function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return _this.handleLifecycle('onExiting', 1, args);
    };

    _this.handleExited = function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return _this.handleLifecycle('onExited', 1, args);
    };

    return _this;
  }

  var _proto = ReplaceTransition.prototype;

  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;

    var children = this.props.children;

    var child = _react.default.Children.toArray(children)[idx];

    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) this.props[handler]((0, _reactDom.findDOMNode)(this));
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        inProp = _this$props.in,
        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

    var _React$Children$toArr = _react.default.Children.toArray(children),
        first = _React$Children$toArr[0],
        second = _React$Children$toArr[1];

    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
      key: 'first',
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : _react.default.cloneElement(second, {
      key: 'second',
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };

  return ReplaceTransition;
}(_react.default.Component);

ReplaceTransition.propTypes = process.env.NODE_ENV !== "production" ? {
  in: _propTypes.default.bool.isRequired,
  children: function children(props, propName) {
    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
    return null;
  }
} : {};
var _default = ReplaceTransition;
exports.default = _default;
module.exports = exports["default"];
}).call(this,require('_process'))
},{"./TransitionGroup":210,"_process":194,"prop-types":198,"react":216,"react-dom":202}],209:[function(require,module,exports){
(function (process){
"use strict";

exports.__esModule = true;
exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _PropTypes = require("./utils/PropTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var UNMOUNTED = 'unmounted';
exports.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
exports.EXITED = EXITED;
var ENTERING = 'entering';
exports.ENTERING = ENTERING;
var ENTERED = 'entered';
exports.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

exports.EXITING = EXITING;

var Transition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  var _proto = Transition.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: null // allows for nested Transitions

    };
  };

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      var node = _reactDom.default.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing);

      _this2.onTransitionEnd(node, enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      this.props.addEndListener(node, this.nextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      return children(status, childProps);
    }

    var child = _react.default.Children.only(children);

    return _react.default.cloneElement(child, childProps);
  };

  return Transition;
}(_react.default.Component);

Transition.contextTypes = {
  transitionGroup: PropTypes.object
};
Transition.childContextTypes = {
  transitionGroup: function transitionGroup() {}
};
Transition.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: PropTypes.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: PropTypes.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: PropTypes.bool,

  /**
   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
   * If you want to transition on the first mount set `appear` to `true`, and the
   * component will transition in as soon as the `<Transition>` mounts.
   *
   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
   */
  appear: PropTypes.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: PropTypes.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: PropTypes.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = _PropTypes.timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. **Note:** Timeouts are still used as a fallback if provided.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: PropTypes.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: PropTypes.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: PropTypes.func // Name the function so it is clearer in the documentation

} : {};

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = 0;
Transition.EXITED = 1;
Transition.ENTERING = 2;
Transition.ENTERED = 3;
Transition.EXITING = 4;

var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);

exports.default = _default;
}).call(this,require('_process'))
},{"./utils/PropTypes":213,"_process":194,"prop-types":198,"react":216,"react-dom":202,"react-lifecycles-compat":206}],210:[function(require,module,exports){
(function (process){
"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _ChildMapping = require("./utils/ChildMapping");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

};

var TransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


    _this.state = {
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: {
        isMounting: !this.appeared
      }
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
    this.mounted = true;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends({}, state.children);

        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return children;
    }

    return _react.default.createElement(Component, props, children);
  };

  return TransitionGroup;
}(_react.default.Component);

TransitionGroup.childContextTypes = {
  transitionGroup: _propTypes.default.object.isRequired
};
TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: _propTypes.default.any,

  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: _propTypes.default.node,

  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: _propTypes.default.bool,

  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: _propTypes.default.bool,

  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: _propTypes.default.bool,

  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: _propTypes.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;

var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);

exports.default = _default;
module.exports = exports["default"];
}).call(this,require('_process'))
},{"./utils/ChildMapping":212,"_process":194,"prop-types":198,"react":216,"react-lifecycles-compat":206}],211:[function(require,module,exports){
"use strict";

var _CSSTransition = _interopRequireDefault(require("./CSSTransition"));

var _ReplaceTransition = _interopRequireDefault(require("./ReplaceTransition"));

var _TransitionGroup = _interopRequireDefault(require("./TransitionGroup"));

var _Transition = _interopRequireDefault(require("./Transition"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
  Transition: _Transition.default,
  TransitionGroup: _TransitionGroup.default,
  ReplaceTransition: _ReplaceTransition.default,
  CSSTransition: _CSSTransition.default
};
},{"./CSSTransition":207,"./ReplaceTransition":208,"./Transition":209,"./TransitionGroup":210}],212:[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;

var _react = require("react");

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) _react.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */


function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, _react.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, _react.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, _react.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}
},{"react":216}],213:[function(require,module,exports){
(function (process){
"use strict";

exports.__esModule = true;
exports.classNamesShape = exports.timeoutsShape = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var timeoutsShape = process.env.NODE_ENV !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
  enter: _propTypes.default.number,
  exit: _propTypes.default.number,
  appear: _propTypes.default.number
}).isRequired]) : null;
exports.timeoutsShape = timeoutsShape;
var classNamesShape = process.env.NODE_ENV !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
  enter: _propTypes.default.string,
  exit: _propTypes.default.string,
  active: _propTypes.default.string
}), _propTypes.default.shape({
  enter: _propTypes.default.string,
  enterDone: _propTypes.default.string,
  enterActive: _propTypes.default.string,
  exit: _propTypes.default.string,
  exitDone: _propTypes.default.string,
  exitActive: _propTypes.default.string
})]) : null;
exports.classNamesShape = classNamesShape;
}).call(this,require('_process'))
},{"_process":194,"prop-types":198}],214:[function(require,module,exports){
(function (process){
/** @license React v16.12.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var _assign = require('object-assign');
var checkPropTypes = require('prop-types/checkPropTypes');

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.12.0';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?


var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

// Do not require this module directly! Use normal `invariant` calls with
// template literal strings. The messages will be replaced with error codes
// during build.

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var lowPriorityWarningWithoutStack = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.warn(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarningWithoutStack = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  };
}

var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }

    if (condition) {
      return;
    }

    if (typeof console !== 'undefined') {
      var argsWithFormat = args.map(function (item) {
        return '' + item;
      });
      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
      // breaks IE9: https://github.com/facebook/react/issues/13610

      Function.prototype.apply.call(console.error, console, argsWithFormat);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        lowPriorityWarningWithoutStack$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  suspense: null
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

var Resolved = 1;

function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = {};
var currentlyValidatingElement = null;
function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  _assign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown;
var specialPropRefWarningShown;

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */



/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */

function jsxDEV(type, config, maybeKey, source, self) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null; // Currently, key can be spread in as a prop. This causes a potential
  // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
  // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
  // but as an intermediary step, we will use jsxDEV for everything except
  // <div {...props} key="Hi" />, because we aren't currently able to tell if
  // key is explicitly declared to be undefined or not.

  if (maybeKey !== undefined) {
    key = '' + maybeKey;
  }

  if (hasValidKey(config)) {
    key = '' + config.key;
  }

  if (hasValidRef(config)) {
    ref = config.ref;
  } // Remaining properties are added to a new props object


  for (propName in config) {
    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
      props[propName] = config[propName];
    }
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  if (key || ref) {
    var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

    if (key) {
      defineKeyPropWarningGetter(props, displayName);
    }

    if (ref) {
      defineRefPropWarningGetter(props, displayName);
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
/**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */


function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];

function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;

  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}
/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';

      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }

      var childrenString = '' + children;

      {
        {
          throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum);
        }
      }
    }
  }

  return subtreeCount;
}
/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}
/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;
  func.call(context, child, bookKeeping.count++);
}
/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */


function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;
  var mappedChild = func.call(context, child, bookKeeping.count++);

  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }

    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';

  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }

  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}
/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */


function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error("React.Children.only expected to receive a single React element child.");
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;
            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;
            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _ctor: ctor,
    // React uses these fields to store the result.
    _status: -1,
    _result: null
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes;
    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
          defaultProps = newDefaultProps; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
          propTypes = newPropTypes; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
    }

    if (render != null) {
      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  return {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.

    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, inputs);
}
function useLayoutEffect(create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, inputs);
}
function useCallback(callback, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, inputs);
}
function useMemo(create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, inputs);
}
function useImperativeHandle(ref, create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, inputs);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}
var emptyObject$1 = {};
function useResponder(responder, listenerProps) {
  var dispatcher = resolveDispatcher();

  {
    if (responder == null || responder.$$typeof !== REACT_RESPONDER_TYPE) {
      warning$1(false, 'useResponder: invalid first argument. Expected an event responder, but instead got %s', responder);
      return;
    }
  }

  return dispatcher.useResponder(responder, listenerProps || emptyObject$1);
}
function useTransition(config) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useTransition(config);
}
function useDeferredValue(value, config) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useDeferredValue(value, config);
}

function withSuspenseConfig(scope, config) {
  var previousConfig = ReactCurrentBatchConfig.suspense;
  ReactCurrentBatchConfig.suspense = config === undefined ? null : config;

  try {
    scope();
  } finally {
    ReactCurrentBatchConfig.suspense = previousConfig;
  }
}

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */
var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  setCurrentlyValidatingElement(element);

  {
    warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }

  setCurrentlyValidatingElement(null);
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  var type = element.type;

  if (type === null || type === undefined || typeof type === 'string') {
    return;
  }

  var name = getComponentName(type);
  var propTypes;

  if (typeof type === 'function') {
    propTypes = type.propTypes;
  } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
  // Inner props are checked in the reconciler.
  type.$$typeof === REACT_MEMO_TYPE)) {
    propTypes = type.propTypes;
  } else {
    return;
  }

  if (propTypes) {
    setCurrentlyValidatingElement(element);
    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
    setCurrentlyValidatingElement(null);
  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
    propTypesMisspellWarningShown = true;
    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
  }

  if (typeof type.getDefaultProps === 'function') {
    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  setCurrentlyValidatingElement(fragment);
  var keys = Object.keys(fragment.props);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];

    if (key !== 'children' && key !== 'key') {
      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
      break;
    }
  }

  if (fragment.ref !== null) {
    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
  }

  setCurrentlyValidatingElement(null);
}

function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendum(source);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    warning$1(false, 'React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
  }

  var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    var children = props.children;

    if (children !== undefined) {
      if (isStaticChildren) {
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            validateChildKeys(children[i], type);
          }

          if (Object.freeze) {
            Object.freeze(children);
          }
        } else {
          warning$1(false, 'React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
        }
      } else {
        validateChildKeys(children, type);
      }
    }
  }

  if (hasOwnProperty$1.call(props, 'key')) {
    warning$1(false, 'React.jsx: Spreading a key to JSX is a deprecated pattern. ' + 'Explicitly pass a key after spreading props in your JSX call. ' + 'E.g. <ComponentName {...props} key={key} />');
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
} // These two functions exist to still get child warnings in dev
// even with the prod transform. This means that jsxDEV is purely
// opt-in behavior for better messages but that we won't stop
// giving you warnings if you use production apis.

function jsxWithValidationStatic(type, props, key) {
  return jsxWithValidation(type, props, key, true);
}
function jsxWithValidationDynamic(type, props, key) {
  return jsxWithValidation(type, props, key, false);
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type; // Legacy hook: remove it

  {
    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        lowPriorityWarningWithoutStack$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var frozenObject = Object.freeze({});
    var testMap = new Map([[frozenObject, null]]);
    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

function createFundamentalComponent(impl) {
  // We use responder as a Map key later on. When we have a bad
  // polyfill, then we can't use it as a key as the polyfill tries
  // to add a property to the object.
  if (true && !hasBadMapPolyfill) {
    Object.freeze(impl);
  }

  var fundamantalComponent = {
    $$typeof: REACT_FUNDAMENTAL_TYPE,
    impl: impl
  };

  {
    Object.freeze(fundamantalComponent);
  }

  return fundamantalComponent;
}

function createEventResponder(displayName, responderConfig) {
  var getInitialState = responderConfig.getInitialState,
      onEvent = responderConfig.onEvent,
      onMount = responderConfig.onMount,
      onUnmount = responderConfig.onUnmount,
      onRootEvent = responderConfig.onRootEvent,
      rootEventTypes = responderConfig.rootEventTypes,
      targetEventTypes = responderConfig.targetEventTypes,
      targetPortalPropagation = responderConfig.targetPortalPropagation;
  var eventResponder = {
    $$typeof: REACT_RESPONDER_TYPE,
    displayName: displayName,
    getInitialState: getInitialState || null,
    onEvent: onEvent || null,
    onMount: onMount || null,
    onRootEvent: onRootEvent || null,
    onUnmount: onUnmount || null,
    rootEventTypes: rootEventTypes || null,
    targetEventTypes: targetEventTypes || null,
    targetPortalPropagation: targetPortalPropagation || false
  }; // We use responder as a Map key later on. When we have a bad
  // polyfill, then we can't use it as a key as the polyfill tries
  // to add a property to the object.

  if (true && !hasBadMapPolyfill) {
    Object.freeze(eventResponder);
  }

  return eventResponder;
}

function createScope() {
  var scopeComponent = {
    $$typeof: REACT_SCOPE_TYPE
  };

  {
    Object.freeze(scopeComponent);
  }

  return scopeComponent;
}

// Helps identify side effects in render-phase lifecycle hooks and setState
// reducers by double invoking them in Strict Mode.

 // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

 // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

 // Gather advanced timing metrics for Profiler subtrees.

 // Trace which interactions trigger each commit.

 // SSR experiments


 // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

 // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

 // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

var exposeConcurrentModeAPIs = false;
 // Experimental React Flare event system and event components support.

var enableFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.

var enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

var enableJSXTransformAPI = false; // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version

 // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

 // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

 // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md





 // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance

var React = {
  Children: {
    map: mapChildren,
    forEach: forEachChildren,
    count: countChildren,
    toArray: toArray,
    only: onlyChild
  },
  createRef: createRef,
  Component: Component,
  PureComponent: PureComponent,
  createContext: createContext,
  forwardRef: forwardRef,
  lazy: lazy,
  memo: memo,
  useCallback: useCallback,
  useContext: useContext,
  useEffect: useEffect,
  useImperativeHandle: useImperativeHandle,
  useDebugValue: useDebugValue,
  useLayoutEffect: useLayoutEffect,
  useMemo: useMemo,
  useReducer: useReducer,
  useRef: useRef,
  useState: useState,
  Fragment: REACT_FRAGMENT_TYPE,
  Profiler: REACT_PROFILER_TYPE,
  StrictMode: REACT_STRICT_MODE_TYPE,
  Suspense: REACT_SUSPENSE_TYPE,
  createElement: createElementWithValidation,
  cloneElement: cloneElementWithValidation,
  createFactory: createFactoryWithValidation,
  isValidElement: isValidElement,
  version: ReactVersion,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
};

if (exposeConcurrentModeAPIs) {
  React.useTransition = useTransition;
  React.useDeferredValue = useDeferredValue;
  React.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
  React.unstable_withSuspenseConfig = withSuspenseConfig;
}

if (enableFlareAPI) {
  React.unstable_useResponder = useResponder;
  React.unstable_createResponder = createEventResponder;
}

if (enableFundamentalAPI) {
  React.unstable_createFundamental = createFundamentalComponent;
}

if (enableScopeAPI) {
  React.unstable_createScope = createScope;
} // Note: some APIs are added with feature flags.
// Make sure that stable builds for open source
// don't modify the React object to avoid deopts.
// Also let's not expose their names in stable builds.


if (enableJSXTransformAPI) {
  {
    React.jsxDEV = jsxWithValidation;
    React.jsx = jsxWithValidationDynamic;
    React.jsxs = jsxWithValidationStatic;
  }
}



var React$2 = Object.freeze({
	default: React
});

var React$3 = ( React$2 && React ) || React$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.


var react = React$3.default || React$3;

module.exports = react;
  })();
}

}).call(this,require('_process'))
},{"_process":194,"object-assign":193,"prop-types/checkPropTypes":195}],215:[function(require,module,exports){
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';var h=require("object-assign"),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113;n&&Symbol.for("react.suspense_list");
var z=n?Symbol.for("react.memo"):60115,aa=n?Symbol.for("react.lazy"):60116;n&&Symbol.for("react.fundamental");n&&Symbol.for("react.responder");n&&Symbol.for("react.scope");var A="function"===typeof Symbol&&Symbol.iterator;
function B(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var C={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},D={};
function E(a,b,c){this.props=a;this.context=b;this.refs=D;this.updater=c||C}E.prototype.isReactComponent={};E.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(B(85));this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function F(){}F.prototype=E.prototype;function G(a,b,c){this.props=a;this.context=b;this.refs=D;this.updater=c||C}var H=G.prototype=new F;
H.constructor=G;h(H,E.prototype);H.isPureReactComponent=!0;var I={current:null},J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
function M(a,b,c){var e,d={},g=null,l=null;if(null!=b)for(e in void 0!==b.ref&&(l=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var k=Array(f),m=0;m<f;m++)k[m]=arguments[m+2];d.children=k}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:l,props:d,_owner:J.current}}
function ba(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var O=/\/+/g,P=[];function Q(a,b,c,e){if(P.length){var d=P.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}
function R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}
function S(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+T(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var l=0;l<a.length;l++){d=a[l];var f=b+T(d,l);g+=S(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=A&&a[A]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),l=
0;!(d=a.next()).done;)d=d.value,f=b+T(d,l++),g+=S(d,f,c,e);else if("object"===d)throw c=""+a,Error(B(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function U(a,b,c){return null==a?0:S(a,"",b,c)}function T(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function ca(a,b){a.func.call(a.context,b,a.count++)}
function da(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?V(a,e,c,function(a){return a}):null!=a&&(N(a)&&(a=ba(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+c)),e.push(a))}function V(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(O,"$&/")+"/");b=Q(b,g,e,d);U(a,da,b);R(b)}function W(){var a=I.current;if(null===a)throw Error(B(321));return a}
var X={Children:{map:function(a,b,c){if(null==a)return a;var e=[];V(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=Q(null,null,b,c);U(a,ca,b);R(b)},count:function(a){return U(a,function(){return null},null)},toArray:function(a){var b=[];V(a,b,null,function(a){return a});return b},only:function(a){if(!N(a))throw Error(B(143));return a}},createRef:function(){return{current:null}},Component:E,PureComponent:G,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,
_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:x,render:a}},lazy:function(a){return{$$typeof:aa,_ctor:a,_status:-1,_result:null}},memo:function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}},useCallback:function(a,b){return W().useCallback(a,b)},useContext:function(a,b){return W().useContext(a,b)},useEffect:function(a,b){return W().useEffect(a,b)},useImperativeHandle:function(a,
b,c){return W().useImperativeHandle(a,b,c)},useDebugValue:function(){},useLayoutEffect:function(a,b){return W().useLayoutEffect(a,b)},useMemo:function(a,b){return W().useMemo(a,b)},useReducer:function(a,b,c){return W().useReducer(a,b,c)},useRef:function(a){return W().useRef(a)},useState:function(a){return W().useState(a)},Fragment:r,Profiler:u,StrictMode:t,Suspense:y,createElement:M,cloneElement:function(a,b,c){if(null===a||void 0===a)throw Error(B(267,a));var e=h({},a.props),d=a.key,g=a.ref,l=a._owner;
if(null!=b){void 0!==b.ref&&(g=b.ref,l=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(k in b)K.call(b,k)&&!L.hasOwnProperty(k)&&(e[k]=void 0===b[k]&&void 0!==f?f[k]:b[k])}var k=arguments.length-2;if(1===k)e.children=c;else if(1<k){f=Array(k);for(var m=0;m<k;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,key:d,ref:g,props:e,_owner:l}},createFactory:function(a){var b=M.bind(null,a);b.type=a;return b},isValidElement:N,version:"16.12.0",
__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:I,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:h}},Y={default:X},Z=Y&&X||Y;module.exports=Z.default||Z;

},{"object-assign":193}],216:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}

}).call(this,require('_process'))
},{"./cjs/react.development.js":214,"./cjs/react.production.min.js":215,"_process":194}],217:[function(require,module,exports){
(function (process){
/** @license React v0.18.0
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// Helps identify side effects in render-phase lifecycle hooks and setState
// reducers by double invoking them in Strict Mode.

 // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

 // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

 // Gather advanced timing metrics for Profiler subtrees.

 // Trace which interactions trigger each commit.

var enableSchedulerTracing = true; // SSR experiments


 // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

 // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

 // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


 // Experimental React Flare event system and event components support.

 // Experimental Host Component support.

 // Experimental Scope support.

 // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

 // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version

 // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

 // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

 // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md





 // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

if (enableSchedulerTracing) {
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}

function unstable_clear(callback) {
  if (!enableSchedulerTracing) {
    return callback();
  }

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  if (!enableSchedulerTracing) {
    return null;
  } else {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback();
  }

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback;
  }

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

if (enableSchedulerTracing) {
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_trace = unstable_trace;
exports.unstable_wrap = unstable_wrap;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}

}).call(this,require('_process'))
},{"_process":194}],218:[function(require,module,exports){
/** @license React v0.18.0
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return++b};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_wrap=function(a){return a};exports.unstable_subscribe=function(){};exports.unstable_unsubscribe=function(){};

},{}],219:[function(require,module,exports){
(function (process){
/** @license React v0.18.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var enableSchedulerDebugging = false;
var enableIsInputPending = false;
var enableProfiling = true;

var requestHostCallback;

var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;



if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

    if (typeof requestAnimationFrame !== 'function') {
      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable
  // TODO: Adjust this based on priority?

  var maxYieldInterval = 300;
  var needsPaint = false;

  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {
    var scheduling = navigator.scheduling;

    shouldYieldToHost = function () {
      var currentTime = exports.unstable_now();

      if (currentTime >= deadline) {
        // There's no time left. We may want to yield control of the main
        // thread, so the browser can perform high priority tasks. The main ones
        // are painting and user input. If there's a pending paint or a pending
        // input, then we should yield. But if there's neither, then we can
        // yield less often while remaining responsive. We'll eventually yield
        // regardless, since there could be a pending paint that wasn't
        // accompanied by a call to `requestPaint`, or other main thread tasks
        // like network events.
        if (needsPaint || scheduling.isInputPending()) {
          // There is either a pending paint or a pending input.
          return true;
        } // There's no pending input. Only yield if we've reached the max
        // yield interval.


        return currentTime >= maxYieldInterval;
      } else {
        // There's still time left in the frame.
        return false;
      }
    };

    requestPaint = function () {
      needsPaint = true;
    };
  } else {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
    // reset this.


    needsPaint = false;
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = Math.floor((index - 1) / 2);
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
: null;
var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

if (enableProfiling) {
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        console.error("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  if (enableProfiling) {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  if (enableProfiling) {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  if (enableProfiling) {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  if (enableProfiling) {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  if (enableProfiling) {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.

var isSchedulerPaused = false;
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      if (enableProfiling) {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  if (enableProfiling) {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    if (enableProfiling) {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        if (enableProfiling) {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  if (enableProfiling) {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    if (enableProfiling) {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
  isSchedulerPaused = true;
}

function unstable_continueExecution() {
  isSchedulerPaused = false;

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  if (enableProfiling) {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling = enableProfiling ? {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} : null;

exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_IdlePriority = IdlePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_next = unstable_next;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_wrapCallback = unstable_wrapCallback;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_Profiling = unstable_Profiling;
  })();
}

}).call(this,require('_process'))
},{"_process":194}],220:[function(require,module,exports){
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var f,g,h,k,l;
if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,
y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===
typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=Math.floor((c-1)/2),e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}
function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}
function Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_ImmediatePriority=1;exports.unstable_UserBlockingPriority=2;exports.unstable_NormalPriority=3;exports.unstable_IdlePriority=5;exports.unstable_LowPriority=4;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};
exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};
exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};exports.unstable_cancelCallback=function(a){a.callback=null};
exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_requestPaint=Z;exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};
exports.unstable_pauseExecution=function(){};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_Profiling=null;

},{}],221:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/scheduler.production.min.js');
} else {
  module.exports = require('./cjs/scheduler.development.js');
}

}).call(this,require('_process'))
},{"./cjs/scheduler.development.js":219,"./cjs/scheduler.production.min.js":220,"_process":194}],222:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/scheduler-tracing.production.min.js');
} else {
  module.exports = require('./cjs/scheduler-tracing.development.js');
}

}).call(this,require('_process'))
},{"./cjs/scheduler-tracing.development.js":217,"./cjs/scheduler-tracing.production.min.js":218,"_process":194}]},{},[55]);
